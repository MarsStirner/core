/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * FreeTicket
 * Структура с данными о свободном талончике
 * @param begDateTime           1)ДатаВремя начала талончика
 * @param endDateTime           2)ДатаВремя конца талончика
 * @param office                3)офис врача в котором будет проходить прием
 * @param personId              4)идентификатор врача
 */
public class FreeTicket implements org.apache.thrift.TBase<FreeTicket, FreeTicket._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FreeTicket");

  private static final org.apache.thrift.protocol.TField BEG_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("begDateTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField END_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endDateTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField OFFICE_FIELD_DESC = new org.apache.thrift.protocol.TField("office", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PERSON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("personId", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FreeTicketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FreeTicketTupleSchemeFactory());
  }

  public long begDateTime; // required
  public long endDateTime; // required
  public String office; // optional
  public int personId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEG_DATE_TIME((short)1, "begDateTime"),
    END_DATE_TIME((short)2, "endDateTime"),
    OFFICE((short)3, "office"),
    PERSON_ID((short)4, "personId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEG_DATE_TIME
          return BEG_DATE_TIME;
        case 2: // END_DATE_TIME
          return END_DATE_TIME;
        case 3: // OFFICE
          return OFFICE;
        case 4: // PERSON_ID
          return PERSON_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BEGDATETIME_ISSET_ID = 0;
  private static final int __ENDDATETIME_ISSET_ID = 1;
  private static final int __PERSONID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.OFFICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEG_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("begDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.END_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("endDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.OFFICE, new org.apache.thrift.meta_data.FieldMetaData("office", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSON_ID, new org.apache.thrift.meta_data.FieldMetaData("personId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FreeTicket.class, metaDataMap);
  }

  public FreeTicket() {
  }

  public FreeTicket(
    long begDateTime,
    long endDateTime,
    int personId)
  {
    this();
    this.begDateTime = begDateTime;
    setBegDateTimeIsSet(true);
    this.endDateTime = endDateTime;
    setEndDateTimeIsSet(true);
    this.personId = personId;
    setPersonIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FreeTicket(FreeTicket other) {
    __isset_bitfield = other.__isset_bitfield;
    this.begDateTime = other.begDateTime;
    this.endDateTime = other.endDateTime;
    if (other.isSetOffice()) {
      this.office = other.office;
    }
    this.personId = other.personId;
  }

  public FreeTicket deepCopy() {
    return new FreeTicket(this);
  }

  @Override
  public void clear() {
    setBegDateTimeIsSet(false);
    this.begDateTime = 0;
    setEndDateTimeIsSet(false);
    this.endDateTime = 0;
    this.office = null;
    setPersonIdIsSet(false);
    this.personId = 0;
  }

  public long getBegDateTime() {
    return this.begDateTime;
  }

  public FreeTicket setBegDateTime(long begDateTime) {
    this.begDateTime = begDateTime;
    setBegDateTimeIsSet(true);
    return this;
  }

  public void unsetBegDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGDATETIME_ISSET_ID);
  }

  /** Returns true if field begDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBegDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGDATETIME_ISSET_ID);
  }

  public void setBegDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGDATETIME_ISSET_ID, value);
  }

  public long getEndDateTime() {
    return this.endDateTime;
  }

  public FreeTicket setEndDateTime(long endDateTime) {
    this.endDateTime = endDateTime;
    setEndDateTimeIsSet(true);
    return this;
  }

  public void unsetEndDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
  }

  /** Returns true if field endDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
  }

  public void setEndDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATETIME_ISSET_ID, value);
  }

  public String getOffice() {
    return this.office;
  }

  public FreeTicket setOffice(String office) {
    this.office = office;
    return this;
  }

  public void unsetOffice() {
    this.office = null;
  }

  /** Returns true if field office is set (has been assigned a value) and false otherwise */
  public boolean isSetOffice() {
    return this.office != null;
  }

  public void setOfficeIsSet(boolean value) {
    if (!value) {
      this.office = null;
    }
  }

  public int getPersonId() {
    return this.personId;
  }

  public FreeTicket setPersonId(int personId) {
    this.personId = personId;
    setPersonIdIsSet(true);
    return this;
  }

  public void unsetPersonId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERSONID_ISSET_ID);
  }

  /** Returns true if field personId is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonId() {
    return EncodingUtils.testBit(__isset_bitfield, __PERSONID_ISSET_ID);
  }

  public void setPersonIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERSONID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BEG_DATE_TIME:
      if (value == null) {
        unsetBegDateTime();
      } else {
        setBegDateTime((Long)value);
      }
      break;

    case END_DATE_TIME:
      if (value == null) {
        unsetEndDateTime();
      } else {
        setEndDateTime((Long)value);
      }
      break;

    case OFFICE:
      if (value == null) {
        unsetOffice();
      } else {
        setOffice((String)value);
      }
      break;

    case PERSON_ID:
      if (value == null) {
        unsetPersonId();
      } else {
        setPersonId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BEG_DATE_TIME:
      return Long.valueOf(getBegDateTime());

    case END_DATE_TIME:
      return Long.valueOf(getEndDateTime());

    case OFFICE:
      return getOffice();

    case PERSON_ID:
      return Integer.valueOf(getPersonId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BEG_DATE_TIME:
      return isSetBegDateTime();
    case END_DATE_TIME:
      return isSetEndDateTime();
    case OFFICE:
      return isSetOffice();
    case PERSON_ID:
      return isSetPersonId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FreeTicket)
      return this.equals((FreeTicket)that);
    return false;
  }

  public boolean equals(FreeTicket that) {
    if (that == null)
      return false;

    boolean this_present_begDateTime = true;
    boolean that_present_begDateTime = true;
    if (this_present_begDateTime || that_present_begDateTime) {
      if (!(this_present_begDateTime && that_present_begDateTime))
        return false;
      if (this.begDateTime != that.begDateTime)
        return false;
    }

    boolean this_present_endDateTime = true;
    boolean that_present_endDateTime = true;
    if (this_present_endDateTime || that_present_endDateTime) {
      if (!(this_present_endDateTime && that_present_endDateTime))
        return false;
      if (this.endDateTime != that.endDateTime)
        return false;
    }

    boolean this_present_office = true && this.isSetOffice();
    boolean that_present_office = true && that.isSetOffice();
    if (this_present_office || that_present_office) {
      if (!(this_present_office && that_present_office))
        return false;
      if (!this.office.equals(that.office))
        return false;
    }

    boolean this_present_personId = true;
    boolean that_present_personId = true;
    if (this_present_personId || that_present_personId) {
      if (!(this_present_personId && that_present_personId))
        return false;
      if (this.personId != that.personId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FreeTicket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FreeTicket typedOther = (FreeTicket)other;

    lastComparison = Boolean.valueOf(isSetBegDateTime()).compareTo(typedOther.isSetBegDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBegDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begDateTime, typedOther.begDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDateTime()).compareTo(typedOther.isSetEndDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDateTime, typedOther.endDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffice()).compareTo(typedOther.isSetOffice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.office, typedOther.office);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonId()).compareTo(typedOther.isSetPersonId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personId, typedOther.personId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FreeTicket(");
    boolean first = true;

    sb.append("begDateTime:");
    sb.append(this.begDateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDateTime:");
    sb.append(this.endDateTime);
    first = false;
    if (isSetOffice()) {
      if (!first) sb.append(", ");
      sb.append("office:");
      if (this.office == null) {
        sb.append("null");
      } else {
        sb.append(this.office);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("personId:");
    sb.append(this.personId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'begDateTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endDateTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'personId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FreeTicketStandardSchemeFactory implements SchemeFactory {
    public FreeTicketStandardScheme getScheme() {
      return new FreeTicketStandardScheme();
    }
  }

  private static class FreeTicketStandardScheme extends StandardScheme<FreeTicket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FreeTicket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEG_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.begDateTime = iprot.readI64();
              struct.setBegDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endDateTime = iprot.readI64();
              struct.setEndDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.office = iprot.readString();
              struct.setOfficeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PERSON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.personId = iprot.readI32();
              struct.setPersonIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBegDateTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'begDateTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndDateTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endDateTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPersonId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'personId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FreeTicket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BEG_DATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.begDateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_DATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.endDateTime);
      oprot.writeFieldEnd();
      if (struct.office != null) {
        if (struct.isSetOffice()) {
          oprot.writeFieldBegin(OFFICE_FIELD_DESC);
          oprot.writeString(struct.office);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(PERSON_ID_FIELD_DESC);
      oprot.writeI32(struct.personId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FreeTicketTupleSchemeFactory implements SchemeFactory {
    public FreeTicketTupleScheme getScheme() {
      return new FreeTicketTupleScheme();
    }
  }

  private static class FreeTicketTupleScheme extends TupleScheme<FreeTicket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FreeTicket struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.begDateTime);
      oprot.writeI64(struct.endDateTime);
      oprot.writeI32(struct.personId);
      BitSet optionals = new BitSet();
      if (struct.isSetOffice()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetOffice()) {
        oprot.writeString(struct.office);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FreeTicket struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.begDateTime = iprot.readI64();
      struct.setBegDateTimeIsSet(true);
      struct.endDateTime = iprot.readI64();
      struct.setEndDateTimeIsSet(true);
      struct.personId = iprot.readI32();
      struct.setPersonIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.office = iprot.readString();
        struct.setOfficeIsSet(true);
      }
    }
  }

}

