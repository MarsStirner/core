/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Communications {

  public interface Iface {

    public Organization getOrganisationInfo(String infisCode) throws NotFoundException, org.apache.thrift.TException;

    public List<OrgStructure> getOrgStructures(int parent_id, boolean recursive, String infisCode) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public List<Address> getAddresses(int orgStructureId, boolean recursive, String infisCode) throws SQLException, NotFoundException, org.apache.thrift.TException;

    public List<Integer> findOrgStructureByAddress(FindOrgStructureByAddressParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public List<Person> getPersonnel(int orgStructureId, boolean recursive, String infisCode) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public TicketsAvailability getTotalTicketsAvailability(GetTicketsAvailabilityParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public List<ExtendedTicketsAvailability> getTicketsAvailability(GetTicketsAvailabilityParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public Amb getWorkTimeAndStatus(GetTimeWorkAndStatusParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public PatientStatus addPatient(AddPatientParameters params) throws SQLException, org.apache.thrift.TException;

    public PatientStatus findPatient(FindPatientParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public List<Patient> findPatients(FindMultiplePatientsParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException;

    /**
     * Поиск пациента по данным из ТФОМС
     * @param params Параметры поиска
     * @return Статус нахождения пациента
     * @throws NotFoundException когда не найдено ни одного пациента по заданным параметрам
     * @throws InvalidPersonalInfo когда по полису или документу найдены пациент(ы) в БД ЛПУ, но (ФИО/пол/др) отличаются от переданных
     * @throws InvalidDocumentException когда не найдено совпадений по полису и документу, но пациент с таким (ФИО/пол/др) уже есть в БД ЛПУ
     * @throws AnotherPolicyException когда пациент найден и документы совпали, но его полис отличается от запрошенного
     * @throws NotUniqueException когда по запрошенным параметрам невозможно выделить единственного пациента
     * 
     * @param params
     */
    public PatientStatus findPatientByPolicyAndDocument(FindPatientByPolicyAndDocumentParameters params) throws NotFoundException, InvalidPersonalInfoException, InvalidDocumentException, AnotherPolicyException, NotUniqueException, org.apache.thrift.TException;

    /**
     * Добавление/ изменение полиса клиента
     * @param params                    1) Параметры для добавления полиса (struct ChangePolicyParameters)
     * @return успешность замены/добавления полиса
     * @throws PolicyTypeNotFoundException когда нету типа полиса с переданным кодом
     * @throws NotFoundException когда нету пациента с переданным идентификатором
     * 
     * @param params
     */
    public boolean changePatientPolicy(ChangePolicyParameters params) throws PolicyTypeNotFoundException, NotFoundException, org.apache.thrift.TException;

    public Map<Integer,PatientInfo> getPatientInfo(List<Integer> patientIds) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public List<Contact> getPatientContacts(int patientId) throws NotFoundException, org.apache.thrift.TException;

    public List<OrgStructuresProperties> getPatientOrgStructures(int parentId) throws NotFoundException, org.apache.thrift.TException;

    public EnqueuePatientStatus enqueuePatient(EnqueuePatientParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public List<Queue> getPatientQueue(int parentId) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public DequeuePatientStatus dequeuePatient(int patientId, int queueId) throws NotFoundException, SQLException, org.apache.thrift.TException;

    public List<Speciality> getSpecialities(String hospitalUidFrom) throws SQLException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getOrganisationInfo(String infisCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOrganisationInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void getOrgStructures(int parent_id, boolean recursive, String infisCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOrgStructures_call> resultHandler) throws org.apache.thrift.TException;

    public void getAddresses(int orgStructureId, boolean recursive, String infisCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAddresses_call> resultHandler) throws org.apache.thrift.TException;

    public void findOrgStructureByAddress(FindOrgStructureByAddressParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findOrgStructureByAddress_call> resultHandler) throws org.apache.thrift.TException;

    public void getPersonnel(int orgStructureId, boolean recursive, String infisCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPersonnel_call> resultHandler) throws org.apache.thrift.TException;

    public void getTotalTicketsAvailability(GetTicketsAvailabilityParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTotalTicketsAvailability_call> resultHandler) throws org.apache.thrift.TException;

    public void getTicketsAvailability(GetTicketsAvailabilityParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTicketsAvailability_call> resultHandler) throws org.apache.thrift.TException;

    public void getWorkTimeAndStatus(GetTimeWorkAndStatusParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getWorkTimeAndStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void addPatient(AddPatientParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addPatient_call> resultHandler) throws org.apache.thrift.TException;

    public void findPatient(FindPatientParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPatient_call> resultHandler) throws org.apache.thrift.TException;

    public void findPatients(FindMultiplePatientsParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPatients_call> resultHandler) throws org.apache.thrift.TException;

    public void findPatientByPolicyAndDocument(FindPatientByPolicyAndDocumentParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPatientByPolicyAndDocument_call> resultHandler) throws org.apache.thrift.TException;

    public void changePatientPolicy(ChangePolicyParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.changePatientPolicy_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientInfo(List<Integer> patientIds, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientContacts(int patientId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientContacts_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientOrgStructures(int parentId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientOrgStructures_call> resultHandler) throws org.apache.thrift.TException;

    public void enqueuePatient(EnqueuePatientParameters params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.enqueuePatient_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientQueue(int parentId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientQueue_call> resultHandler) throws org.apache.thrift.TException;

    public void dequeuePatient(int patientId, int queueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.dequeuePatient_call> resultHandler) throws org.apache.thrift.TException;

    public void getSpecialities(String hospitalUidFrom, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSpecialities_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Organization getOrganisationInfo(String infisCode) throws NotFoundException, org.apache.thrift.TException
    {
      send_getOrganisationInfo(infisCode);
      return recv_getOrganisationInfo();
    }

    public void send_getOrganisationInfo(String infisCode) throws org.apache.thrift.TException
    {
      getOrganisationInfo_args args = new getOrganisationInfo_args();
      args.setInfisCode(infisCode);
      sendBase("getOrganisationInfo", args);
    }

    public Organization recv_getOrganisationInfo() throws NotFoundException, org.apache.thrift.TException
    {
      getOrganisationInfo_result result = new getOrganisationInfo_result();
      receiveBase(result, "getOrganisationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrganisationInfo failed: unknown result");
    }

    public List<OrgStructure> getOrgStructures(int parent_id, boolean recursive, String infisCode) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_getOrgStructures(parent_id, recursive, infisCode);
      return recv_getOrgStructures();
    }

    public void send_getOrgStructures(int parent_id, boolean recursive, String infisCode) throws org.apache.thrift.TException
    {
      getOrgStructures_args args = new getOrgStructures_args();
      args.setParent_id(parent_id);
      args.setRecursive(recursive);
      args.setInfisCode(infisCode);
      sendBase("getOrgStructures", args);
    }

    public List<OrgStructure> recv_getOrgStructures() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      getOrgStructures_result result = new getOrgStructures_result();
      receiveBase(result, "getOrgStructures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrgStructures failed: unknown result");
    }

    public List<Address> getAddresses(int orgStructureId, boolean recursive, String infisCode) throws SQLException, NotFoundException, org.apache.thrift.TException
    {
      send_getAddresses(orgStructureId, recursive, infisCode);
      return recv_getAddresses();
    }

    public void send_getAddresses(int orgStructureId, boolean recursive, String infisCode) throws org.apache.thrift.TException
    {
      getAddresses_args args = new getAddresses_args();
      args.setOrgStructureId(orgStructureId);
      args.setRecursive(recursive);
      args.setInfisCode(infisCode);
      sendBase("getAddresses", args);
    }

    public List<Address> recv_getAddresses() throws SQLException, NotFoundException, org.apache.thrift.TException
    {
      getAddresses_result result = new getAddresses_result();
      receiveBase(result, "getAddresses");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAddresses failed: unknown result");
    }

    public List<Integer> findOrgStructureByAddress(FindOrgStructureByAddressParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_findOrgStructureByAddress(params);
      return recv_findOrgStructureByAddress();
    }

    public void send_findOrgStructureByAddress(FindOrgStructureByAddressParameters params) throws org.apache.thrift.TException
    {
      findOrgStructureByAddress_args args = new findOrgStructureByAddress_args();
      args.setParams(params);
      sendBase("findOrgStructureByAddress", args);
    }

    public List<Integer> recv_findOrgStructureByAddress() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      findOrgStructureByAddress_result result = new findOrgStructureByAddress_result();
      receiveBase(result, "findOrgStructureByAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOrgStructureByAddress failed: unknown result");
    }

    public List<Person> getPersonnel(int orgStructureId, boolean recursive, String infisCode) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_getPersonnel(orgStructureId, recursive, infisCode);
      return recv_getPersonnel();
    }

    public void send_getPersonnel(int orgStructureId, boolean recursive, String infisCode) throws org.apache.thrift.TException
    {
      getPersonnel_args args = new getPersonnel_args();
      args.setOrgStructureId(orgStructureId);
      args.setRecursive(recursive);
      args.setInfisCode(infisCode);
      sendBase("getPersonnel", args);
    }

    public List<Person> recv_getPersonnel() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      getPersonnel_result result = new getPersonnel_result();
      receiveBase(result, "getPersonnel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPersonnel failed: unknown result");
    }

    public TicketsAvailability getTotalTicketsAvailability(GetTicketsAvailabilityParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_getTotalTicketsAvailability(params);
      return recv_getTotalTicketsAvailability();
    }

    public void send_getTotalTicketsAvailability(GetTicketsAvailabilityParameters params) throws org.apache.thrift.TException
    {
      getTotalTicketsAvailability_args args = new getTotalTicketsAvailability_args();
      args.setParams(params);
      sendBase("getTotalTicketsAvailability", args);
    }

    public TicketsAvailability recv_getTotalTicketsAvailability() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      getTotalTicketsAvailability_result result = new getTotalTicketsAvailability_result();
      receiveBase(result, "getTotalTicketsAvailability");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalTicketsAvailability failed: unknown result");
    }

    public List<ExtendedTicketsAvailability> getTicketsAvailability(GetTicketsAvailabilityParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_getTicketsAvailability(params);
      return recv_getTicketsAvailability();
    }

    public void send_getTicketsAvailability(GetTicketsAvailabilityParameters params) throws org.apache.thrift.TException
    {
      getTicketsAvailability_args args = new getTicketsAvailability_args();
      args.setParams(params);
      sendBase("getTicketsAvailability", args);
    }

    public List<ExtendedTicketsAvailability> recv_getTicketsAvailability() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      getTicketsAvailability_result result = new getTicketsAvailability_result();
      receiveBase(result, "getTicketsAvailability");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTicketsAvailability failed: unknown result");
    }

    public Amb getWorkTimeAndStatus(GetTimeWorkAndStatusParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_getWorkTimeAndStatus(params);
      return recv_getWorkTimeAndStatus();
    }

    public void send_getWorkTimeAndStatus(GetTimeWorkAndStatusParameters params) throws org.apache.thrift.TException
    {
      getWorkTimeAndStatus_args args = new getWorkTimeAndStatus_args();
      args.setParams(params);
      sendBase("getWorkTimeAndStatus", args);
    }

    public Amb recv_getWorkTimeAndStatus() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      getWorkTimeAndStatus_result result = new getWorkTimeAndStatus_result();
      receiveBase(result, "getWorkTimeAndStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWorkTimeAndStatus failed: unknown result");
    }

    public PatientStatus addPatient(AddPatientParameters params) throws SQLException, org.apache.thrift.TException
    {
      send_addPatient(params);
      return recv_addPatient();
    }

    public void send_addPatient(AddPatientParameters params) throws org.apache.thrift.TException
    {
      addPatient_args args = new addPatient_args();
      args.setParams(params);
      sendBase("addPatient", args);
    }

    public PatientStatus recv_addPatient() throws SQLException, org.apache.thrift.TException
    {
      addPatient_result result = new addPatient_result();
      receiveBase(result, "addPatient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPatient failed: unknown result");
    }

    public PatientStatus findPatient(FindPatientParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_findPatient(params);
      return recv_findPatient();
    }

    public void send_findPatient(FindPatientParameters params) throws org.apache.thrift.TException
    {
      findPatient_args args = new findPatient_args();
      args.setParams(params);
      sendBase("findPatient", args);
    }

    public PatientStatus recv_findPatient() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      findPatient_result result = new findPatient_result();
      receiveBase(result, "findPatient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPatient failed: unknown result");
    }

    public List<Patient> findPatients(FindMultiplePatientsParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_findPatients(params);
      return recv_findPatients();
    }

    public void send_findPatients(FindMultiplePatientsParameters params) throws org.apache.thrift.TException
    {
      findPatients_args args = new findPatients_args();
      args.setParams(params);
      sendBase("findPatients", args);
    }

    public List<Patient> recv_findPatients() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      findPatients_result result = new findPatients_result();
      receiveBase(result, "findPatients");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPatients failed: unknown result");
    }

    public PatientStatus findPatientByPolicyAndDocument(FindPatientByPolicyAndDocumentParameters params) throws NotFoundException, InvalidPersonalInfoException, InvalidDocumentException, AnotherPolicyException, NotUniqueException, org.apache.thrift.TException
    {
      send_findPatientByPolicyAndDocument(params);
      return recv_findPatientByPolicyAndDocument();
    }

    public void send_findPatientByPolicyAndDocument(FindPatientByPolicyAndDocumentParameters params) throws org.apache.thrift.TException
    {
      findPatientByPolicyAndDocument_args args = new findPatientByPolicyAndDocument_args();
      args.setParams(params);
      sendBase("findPatientByPolicyAndDocument", args);
    }

    public PatientStatus recv_findPatientByPolicyAndDocument() throws NotFoundException, InvalidPersonalInfoException, InvalidDocumentException, AnotherPolicyException, NotUniqueException, org.apache.thrift.TException
    {
      findPatientByPolicyAndDocument_result result = new findPatientByPolicyAndDocument_result();
      receiveBase(result, "findPatientByPolicyAndDocument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.nfExc != null) {
        throw result.nfExc;
      }
      if (result.invInfoExc != null) {
        throw result.invInfoExc;
      }
      if (result.invDocExc != null) {
        throw result.invDocExc;
      }
      if (result.anotherPolExc != null) {
        throw result.anotherPolExc;
      }
      if (result.nUniqueExc != null) {
        throw result.nUniqueExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPatientByPolicyAndDocument failed: unknown result");
    }

    public boolean changePatientPolicy(ChangePolicyParameters params) throws PolicyTypeNotFoundException, NotFoundException, org.apache.thrift.TException
    {
      send_changePatientPolicy(params);
      return recv_changePatientPolicy();
    }

    public void send_changePatientPolicy(ChangePolicyParameters params) throws org.apache.thrift.TException
    {
      changePatientPolicy_args args = new changePatientPolicy_args();
      args.setParams(params);
      sendBase("changePatientPolicy", args);
    }

    public boolean recv_changePatientPolicy() throws PolicyTypeNotFoundException, NotFoundException, org.apache.thrift.TException
    {
      changePatientPolicy_result result = new changePatientPolicy_result();
      receiveBase(result, "changePatientPolicy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ptnfExc != null) {
        throw result.ptnfExc;
      }
      if (result.nfExc != null) {
        throw result.nfExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changePatientPolicy failed: unknown result");
    }

    public Map<Integer,PatientInfo> getPatientInfo(List<Integer> patientIds) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_getPatientInfo(patientIds);
      return recv_getPatientInfo();
    }

    public void send_getPatientInfo(List<Integer> patientIds) throws org.apache.thrift.TException
    {
      getPatientInfo_args args = new getPatientInfo_args();
      args.setPatientIds(patientIds);
      sendBase("getPatientInfo", args);
    }

    public Map<Integer,PatientInfo> recv_getPatientInfo() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      getPatientInfo_result result = new getPatientInfo_result();
      receiveBase(result, "getPatientInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientInfo failed: unknown result");
    }

    public List<Contact> getPatientContacts(int patientId) throws NotFoundException, org.apache.thrift.TException
    {
      send_getPatientContacts(patientId);
      return recv_getPatientContacts();
    }

    public void send_getPatientContacts(int patientId) throws org.apache.thrift.TException
    {
      getPatientContacts_args args = new getPatientContacts_args();
      args.setPatientId(patientId);
      sendBase("getPatientContacts", args);
    }

    public List<Contact> recv_getPatientContacts() throws NotFoundException, org.apache.thrift.TException
    {
      getPatientContacts_result result = new getPatientContacts_result();
      receiveBase(result, "getPatientContacts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientContacts failed: unknown result");
    }

    public List<OrgStructuresProperties> getPatientOrgStructures(int parentId) throws NotFoundException, org.apache.thrift.TException
    {
      send_getPatientOrgStructures(parentId);
      return recv_getPatientOrgStructures();
    }

    public void send_getPatientOrgStructures(int parentId) throws org.apache.thrift.TException
    {
      getPatientOrgStructures_args args = new getPatientOrgStructures_args();
      args.setParentId(parentId);
      sendBase("getPatientOrgStructures", args);
    }

    public List<OrgStructuresProperties> recv_getPatientOrgStructures() throws NotFoundException, org.apache.thrift.TException
    {
      getPatientOrgStructures_result result = new getPatientOrgStructures_result();
      receiveBase(result, "getPatientOrgStructures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientOrgStructures failed: unknown result");
    }

    public EnqueuePatientStatus enqueuePatient(EnqueuePatientParameters params) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_enqueuePatient(params);
      return recv_enqueuePatient();
    }

    public void send_enqueuePatient(EnqueuePatientParameters params) throws org.apache.thrift.TException
    {
      enqueuePatient_args args = new enqueuePatient_args();
      args.setParams(params);
      sendBase("enqueuePatient", args);
    }

    public EnqueuePatientStatus recv_enqueuePatient() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      enqueuePatient_result result = new enqueuePatient_result();
      receiveBase(result, "enqueuePatient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enqueuePatient failed: unknown result");
    }

    public List<Queue> getPatientQueue(int parentId) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_getPatientQueue(parentId);
      return recv_getPatientQueue();
    }

    public void send_getPatientQueue(int parentId) throws org.apache.thrift.TException
    {
      getPatientQueue_args args = new getPatientQueue_args();
      args.setParentId(parentId);
      sendBase("getPatientQueue", args);
    }

    public List<Queue> recv_getPatientQueue() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      getPatientQueue_result result = new getPatientQueue_result();
      receiveBase(result, "getPatientQueue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientQueue failed: unknown result");
    }

    public DequeuePatientStatus dequeuePatient(int patientId, int queueId) throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_dequeuePatient(patientId, queueId);
      return recv_dequeuePatient();
    }

    public void send_dequeuePatient(int patientId, int queueId) throws org.apache.thrift.TException
    {
      dequeuePatient_args args = new dequeuePatient_args();
      args.setPatientId(patientId);
      args.setQueueId(queueId);
      sendBase("dequeuePatient", args);
    }

    public DequeuePatientStatus recv_dequeuePatient() throws NotFoundException, SQLException, org.apache.thrift.TException
    {
      dequeuePatient_result result = new dequeuePatient_result();
      receiveBase(result, "dequeuePatient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.excsql != null) {
        throw result.excsql;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dequeuePatient failed: unknown result");
    }

    public List<Speciality> getSpecialities(String hospitalUidFrom) throws SQLException, org.apache.thrift.TException
    {
      send_getSpecialities(hospitalUidFrom);
      return recv_getSpecialities();
    }

    public void send_getSpecialities(String hospitalUidFrom) throws org.apache.thrift.TException
    {
      getSpecialities_args args = new getSpecialities_args();
      args.setHospitalUidFrom(hospitalUidFrom);
      sendBase("getSpecialities", args);
    }

    public List<Speciality> recv_getSpecialities() throws SQLException, org.apache.thrift.TException
    {
      getSpecialities_result result = new getSpecialities_result();
      receiveBase(result, "getSpecialities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSpecialities failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getOrganisationInfo(String infisCode, org.apache.thrift.async.AsyncMethodCallback<getOrganisationInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrganisationInfo_call method_call = new getOrganisationInfo_call(infisCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrganisationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String infisCode;
      public getOrganisationInfo_call(String infisCode, org.apache.thrift.async.AsyncMethodCallback<getOrganisationInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.infisCode = infisCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrganisationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrganisationInfo_args args = new getOrganisationInfo_args();
        args.setInfisCode(infisCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Organization getResult() throws NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrganisationInfo();
      }
    }

    public void getOrgStructures(int parent_id, boolean recursive, String infisCode, org.apache.thrift.async.AsyncMethodCallback<getOrgStructures_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrgStructures_call method_call = new getOrgStructures_call(parent_id, recursive, infisCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrgStructures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int parent_id;
      private boolean recursive;
      private String infisCode;
      public getOrgStructures_call(int parent_id, boolean recursive, String infisCode, org.apache.thrift.async.AsyncMethodCallback<getOrgStructures_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parent_id = parent_id;
        this.recursive = recursive;
        this.infisCode = infisCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgStructures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrgStructures_args args = new getOrgStructures_args();
        args.setParent_id(parent_id);
        args.setRecursive(recursive);
        args.setInfisCode(infisCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OrgStructure> getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrgStructures();
      }
    }

    public void getAddresses(int orgStructureId, boolean recursive, String infisCode, org.apache.thrift.async.AsyncMethodCallback<getAddresses_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAddresses_call method_call = new getAddresses_call(orgStructureId, recursive, infisCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAddresses_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int orgStructureId;
      private boolean recursive;
      private String infisCode;
      public getAddresses_call(int orgStructureId, boolean recursive, String infisCode, org.apache.thrift.async.AsyncMethodCallback<getAddresses_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgStructureId = orgStructureId;
        this.recursive = recursive;
        this.infisCode = infisCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAddresses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAddresses_args args = new getAddresses_args();
        args.setOrgStructureId(orgStructureId);
        args.setRecursive(recursive);
        args.setInfisCode(infisCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Address> getResult() throws SQLException, NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAddresses();
      }
    }

    public void findOrgStructureByAddress(FindOrgStructureByAddressParameters params, org.apache.thrift.async.AsyncMethodCallback<findOrgStructureByAddress_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOrgStructureByAddress_call method_call = new findOrgStructureByAddress_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOrgStructureByAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FindOrgStructureByAddressParameters params;
      public findOrgStructureByAddress_call(FindOrgStructureByAddressParameters params, org.apache.thrift.async.AsyncMethodCallback<findOrgStructureByAddress_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOrgStructureByAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOrgStructureByAddress_args args = new findOrgStructureByAddress_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOrgStructureByAddress();
      }
    }

    public void getPersonnel(int orgStructureId, boolean recursive, String infisCode, org.apache.thrift.async.AsyncMethodCallback<getPersonnel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPersonnel_call method_call = new getPersonnel_call(orgStructureId, recursive, infisCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPersonnel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int orgStructureId;
      private boolean recursive;
      private String infisCode;
      public getPersonnel_call(int orgStructureId, boolean recursive, String infisCode, org.apache.thrift.async.AsyncMethodCallback<getPersonnel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgStructureId = orgStructureId;
        this.recursive = recursive;
        this.infisCode = infisCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPersonnel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPersonnel_args args = new getPersonnel_args();
        args.setOrgStructureId(orgStructureId);
        args.setRecursive(recursive);
        args.setInfisCode(infisCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Person> getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPersonnel();
      }
    }

    public void getTotalTicketsAvailability(GetTicketsAvailabilityParameters params, org.apache.thrift.async.AsyncMethodCallback<getTotalTicketsAvailability_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTotalTicketsAvailability_call method_call = new getTotalTicketsAvailability_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTotalTicketsAvailability_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GetTicketsAvailabilityParameters params;
      public getTotalTicketsAvailability_call(GetTicketsAvailabilityParameters params, org.apache.thrift.async.AsyncMethodCallback<getTotalTicketsAvailability_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalTicketsAvailability", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTotalTicketsAvailability_args args = new getTotalTicketsAvailability_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TicketsAvailability getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTotalTicketsAvailability();
      }
    }

    public void getTicketsAvailability(GetTicketsAvailabilityParameters params, org.apache.thrift.async.AsyncMethodCallback<getTicketsAvailability_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTicketsAvailability_call method_call = new getTicketsAvailability_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTicketsAvailability_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GetTicketsAvailabilityParameters params;
      public getTicketsAvailability_call(GetTicketsAvailabilityParameters params, org.apache.thrift.async.AsyncMethodCallback<getTicketsAvailability_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTicketsAvailability", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTicketsAvailability_args args = new getTicketsAvailability_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ExtendedTicketsAvailability> getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTicketsAvailability();
      }
    }

    public void getWorkTimeAndStatus(GetTimeWorkAndStatusParameters params, org.apache.thrift.async.AsyncMethodCallback<getWorkTimeAndStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWorkTimeAndStatus_call method_call = new getWorkTimeAndStatus_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWorkTimeAndStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GetTimeWorkAndStatusParameters params;
      public getWorkTimeAndStatus_call(GetTimeWorkAndStatusParameters params, org.apache.thrift.async.AsyncMethodCallback<getWorkTimeAndStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWorkTimeAndStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWorkTimeAndStatus_args args = new getWorkTimeAndStatus_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Amb getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWorkTimeAndStatus();
      }
    }

    public void addPatient(AddPatientParameters params, org.apache.thrift.async.AsyncMethodCallback<addPatient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPatient_call method_call = new addPatient_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPatient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AddPatientParameters params;
      public addPatient_call(AddPatientParameters params, org.apache.thrift.async.AsyncMethodCallback<addPatient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPatient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPatient_args args = new addPatient_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatientStatus getResult() throws SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPatient();
      }
    }

    public void findPatient(FindPatientParameters params, org.apache.thrift.async.AsyncMethodCallback<findPatient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPatient_call method_call = new findPatient_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPatient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FindPatientParameters params;
      public findPatient_call(FindPatientParameters params, org.apache.thrift.async.AsyncMethodCallback<findPatient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPatient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPatient_args args = new findPatient_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatientStatus getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPatient();
      }
    }

    public void findPatients(FindMultiplePatientsParameters params, org.apache.thrift.async.AsyncMethodCallback<findPatients_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPatients_call method_call = new findPatients_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPatients_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FindMultiplePatientsParameters params;
      public findPatients_call(FindMultiplePatientsParameters params, org.apache.thrift.async.AsyncMethodCallback<findPatients_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPatients", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPatients_args args = new findPatients_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Patient> getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPatients();
      }
    }

    public void findPatientByPolicyAndDocument(FindPatientByPolicyAndDocumentParameters params, org.apache.thrift.async.AsyncMethodCallback<findPatientByPolicyAndDocument_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPatientByPolicyAndDocument_call method_call = new findPatientByPolicyAndDocument_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPatientByPolicyAndDocument_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FindPatientByPolicyAndDocumentParameters params;
      public findPatientByPolicyAndDocument_call(FindPatientByPolicyAndDocumentParameters params, org.apache.thrift.async.AsyncMethodCallback<findPatientByPolicyAndDocument_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPatientByPolicyAndDocument", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPatientByPolicyAndDocument_args args = new findPatientByPolicyAndDocument_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatientStatus getResult() throws NotFoundException, InvalidPersonalInfoException, InvalidDocumentException, AnotherPolicyException, NotUniqueException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPatientByPolicyAndDocument();
      }
    }

    public void changePatientPolicy(ChangePolicyParameters params, org.apache.thrift.async.AsyncMethodCallback<changePatientPolicy_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changePatientPolicy_call method_call = new changePatientPolicy_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changePatientPolicy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ChangePolicyParameters params;
      public changePatientPolicy_call(ChangePolicyParameters params, org.apache.thrift.async.AsyncMethodCallback<changePatientPolicy_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changePatientPolicy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changePatientPolicy_args args = new changePatientPolicy_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PolicyTypeNotFoundException, NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changePatientPolicy();
      }
    }

    public void getPatientInfo(List<Integer> patientIds, org.apache.thrift.async.AsyncMethodCallback<getPatientInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientInfo_call method_call = new getPatientInfo_call(patientIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> patientIds;
      public getPatientInfo_call(List<Integer> patientIds, org.apache.thrift.async.AsyncMethodCallback<getPatientInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patientIds = patientIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientInfo_args args = new getPatientInfo_args();
        args.setPatientIds(patientIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,PatientInfo> getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientInfo();
      }
    }

    public void getPatientContacts(int patientId, org.apache.thrift.async.AsyncMethodCallback<getPatientContacts_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientContacts_call method_call = new getPatientContacts_call(patientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientContacts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int patientId;
      public getPatientContacts_call(int patientId, org.apache.thrift.async.AsyncMethodCallback<getPatientContacts_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patientId = patientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientContacts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientContacts_args args = new getPatientContacts_args();
        args.setPatientId(patientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Contact> getResult() throws NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientContacts();
      }
    }

    public void getPatientOrgStructures(int parentId, org.apache.thrift.async.AsyncMethodCallback<getPatientOrgStructures_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientOrgStructures_call method_call = new getPatientOrgStructures_call(parentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientOrgStructures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int parentId;
      public getPatientOrgStructures_call(int parentId, org.apache.thrift.async.AsyncMethodCallback<getPatientOrgStructures_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parentId = parentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientOrgStructures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientOrgStructures_args args = new getPatientOrgStructures_args();
        args.setParentId(parentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OrgStructuresProperties> getResult() throws NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientOrgStructures();
      }
    }

    public void enqueuePatient(EnqueuePatientParameters params, org.apache.thrift.async.AsyncMethodCallback<enqueuePatient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enqueuePatient_call method_call = new enqueuePatient_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enqueuePatient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private EnqueuePatientParameters params;
      public enqueuePatient_call(EnqueuePatientParameters params, org.apache.thrift.async.AsyncMethodCallback<enqueuePatient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enqueuePatient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enqueuePatient_args args = new enqueuePatient_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EnqueuePatientStatus getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enqueuePatient();
      }
    }

    public void getPatientQueue(int parentId, org.apache.thrift.async.AsyncMethodCallback<getPatientQueue_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientQueue_call method_call = new getPatientQueue_call(parentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientQueue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int parentId;
      public getPatientQueue_call(int parentId, org.apache.thrift.async.AsyncMethodCallback<getPatientQueue_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parentId = parentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientQueue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientQueue_args args = new getPatientQueue_args();
        args.setParentId(parentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Queue> getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientQueue();
      }
    }

    public void dequeuePatient(int patientId, int queueId, org.apache.thrift.async.AsyncMethodCallback<dequeuePatient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dequeuePatient_call method_call = new dequeuePatient_call(patientId, queueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dequeuePatient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int patientId;
      private int queueId;
      public dequeuePatient_call(int patientId, int queueId, org.apache.thrift.async.AsyncMethodCallback<dequeuePatient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patientId = patientId;
        this.queueId = queueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dequeuePatient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dequeuePatient_args args = new dequeuePatient_args();
        args.setPatientId(patientId);
        args.setQueueId(queueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DequeuePatientStatus getResult() throws NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dequeuePatient();
      }
    }

    public void getSpecialities(String hospitalUidFrom, org.apache.thrift.async.AsyncMethodCallback<getSpecialities_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSpecialities_call method_call = new getSpecialities_call(hospitalUidFrom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSpecialities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hospitalUidFrom;
      public getSpecialities_call(String hospitalUidFrom, org.apache.thrift.async.AsyncMethodCallback<getSpecialities_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hospitalUidFrom = hospitalUidFrom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSpecialities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSpecialities_args args = new getSpecialities_args();
        args.setHospitalUidFrom(hospitalUidFrom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Speciality> getResult() throws SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSpecialities();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getOrganisationInfo", new getOrganisationInfo());
      processMap.put("getOrgStructures", new getOrgStructures());
      processMap.put("getAddresses", new getAddresses());
      processMap.put("findOrgStructureByAddress", new findOrgStructureByAddress());
      processMap.put("getPersonnel", new getPersonnel());
      processMap.put("getTotalTicketsAvailability", new getTotalTicketsAvailability());
      processMap.put("getTicketsAvailability", new getTicketsAvailability());
      processMap.put("getWorkTimeAndStatus", new getWorkTimeAndStatus());
      processMap.put("addPatient", new addPatient());
      processMap.put("findPatient", new findPatient());
      processMap.put("findPatients", new findPatients());
      processMap.put("findPatientByPolicyAndDocument", new findPatientByPolicyAndDocument());
      processMap.put("changePatientPolicy", new changePatientPolicy());
      processMap.put("getPatientInfo", new getPatientInfo());
      processMap.put("getPatientContacts", new getPatientContacts());
      processMap.put("getPatientOrgStructures", new getPatientOrgStructures());
      processMap.put("enqueuePatient", new enqueuePatient());
      processMap.put("getPatientQueue", new getPatientQueue());
      processMap.put("dequeuePatient", new dequeuePatient());
      processMap.put("getSpecialities", new getSpecialities());
      return processMap;
    }

    public static class getOrganisationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrganisationInfo_args> {
      public getOrganisationInfo() {
        super("getOrganisationInfo");
      }

      public getOrganisationInfo_args getEmptyArgsInstance() {
        return new getOrganisationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrganisationInfo_result getResult(I iface, getOrganisationInfo_args args) throws org.apache.thrift.TException {
        getOrganisationInfo_result result = new getOrganisationInfo_result();
        try {
          result.success = iface.getOrganisationInfo(args.infisCode);
        } catch (NotFoundException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getOrgStructures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgStructures_args> {
      public getOrgStructures() {
        super("getOrgStructures");
      }

      public getOrgStructures_args getEmptyArgsInstance() {
        return new getOrgStructures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrgStructures_result getResult(I iface, getOrgStructures_args args) throws org.apache.thrift.TException {
        getOrgStructures_result result = new getOrgStructures_result();
        try {
          result.success = iface.getOrgStructures(args.parent_id, args.recursive, args.infisCode);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class getAddresses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAddresses_args> {
      public getAddresses() {
        super("getAddresses");
      }

      public getAddresses_args getEmptyArgsInstance() {
        return new getAddresses_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAddresses_result getResult(I iface, getAddresses_args args) throws org.apache.thrift.TException {
        getAddresses_result result = new getAddresses_result();
        try {
          result.success = iface.getAddresses(args.orgStructureId, args.recursive, args.infisCode);
        } catch (SQLException excsql) {
          result.excsql = excsql;
        } catch (NotFoundException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class findOrgStructureByAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOrgStructureByAddress_args> {
      public findOrgStructureByAddress() {
        super("findOrgStructureByAddress");
      }

      public findOrgStructureByAddress_args getEmptyArgsInstance() {
        return new findOrgStructureByAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findOrgStructureByAddress_result getResult(I iface, findOrgStructureByAddress_args args) throws org.apache.thrift.TException {
        findOrgStructureByAddress_result result = new findOrgStructureByAddress_result();
        try {
          result.success = iface.findOrgStructureByAddress(args.params);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class getPersonnel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPersonnel_args> {
      public getPersonnel() {
        super("getPersonnel");
      }

      public getPersonnel_args getEmptyArgsInstance() {
        return new getPersonnel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPersonnel_result getResult(I iface, getPersonnel_args args) throws org.apache.thrift.TException {
        getPersonnel_result result = new getPersonnel_result();
        try {
          result.success = iface.getPersonnel(args.orgStructureId, args.recursive, args.infisCode);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class getTotalTicketsAvailability<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalTicketsAvailability_args> {
      public getTotalTicketsAvailability() {
        super("getTotalTicketsAvailability");
      }

      public getTotalTicketsAvailability_args getEmptyArgsInstance() {
        return new getTotalTicketsAvailability_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTotalTicketsAvailability_result getResult(I iface, getTotalTicketsAvailability_args args) throws org.apache.thrift.TException {
        getTotalTicketsAvailability_result result = new getTotalTicketsAvailability_result();
        try {
          result.success = iface.getTotalTicketsAvailability(args.params);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class getTicketsAvailability<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTicketsAvailability_args> {
      public getTicketsAvailability() {
        super("getTicketsAvailability");
      }

      public getTicketsAvailability_args getEmptyArgsInstance() {
        return new getTicketsAvailability_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTicketsAvailability_result getResult(I iface, getTicketsAvailability_args args) throws org.apache.thrift.TException {
        getTicketsAvailability_result result = new getTicketsAvailability_result();
        try {
          result.success = iface.getTicketsAvailability(args.params);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class getWorkTimeAndStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWorkTimeAndStatus_args> {
      public getWorkTimeAndStatus() {
        super("getWorkTimeAndStatus");
      }

      public getWorkTimeAndStatus_args getEmptyArgsInstance() {
        return new getWorkTimeAndStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWorkTimeAndStatus_result getResult(I iface, getWorkTimeAndStatus_args args) throws org.apache.thrift.TException {
        getWorkTimeAndStatus_result result = new getWorkTimeAndStatus_result();
        try {
          result.success = iface.getWorkTimeAndStatus(args.params);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class addPatient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPatient_args> {
      public addPatient() {
        super("addPatient");
      }

      public addPatient_args getEmptyArgsInstance() {
        return new addPatient_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPatient_result getResult(I iface, addPatient_args args) throws org.apache.thrift.TException {
        addPatient_result result = new addPatient_result();
        try {
          result.success = iface.addPatient(args.params);
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class findPatient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPatient_args> {
      public findPatient() {
        super("findPatient");
      }

      public findPatient_args getEmptyArgsInstance() {
        return new findPatient_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPatient_result getResult(I iface, findPatient_args args) throws org.apache.thrift.TException {
        findPatient_result result = new findPatient_result();
        try {
          result.success = iface.findPatient(args.params);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class findPatients<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPatients_args> {
      public findPatients() {
        super("findPatients");
      }

      public findPatients_args getEmptyArgsInstance() {
        return new findPatients_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPatients_result getResult(I iface, findPatients_args args) throws org.apache.thrift.TException {
        findPatients_result result = new findPatients_result();
        try {
          result.success = iface.findPatients(args.params);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class findPatientByPolicyAndDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPatientByPolicyAndDocument_args> {
      public findPatientByPolicyAndDocument() {
        super("findPatientByPolicyAndDocument");
      }

      public findPatientByPolicyAndDocument_args getEmptyArgsInstance() {
        return new findPatientByPolicyAndDocument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPatientByPolicyAndDocument_result getResult(I iface, findPatientByPolicyAndDocument_args args) throws org.apache.thrift.TException {
        findPatientByPolicyAndDocument_result result = new findPatientByPolicyAndDocument_result();
        try {
          result.success = iface.findPatientByPolicyAndDocument(args.params);
        } catch (NotFoundException nfExc) {
          result.nfExc = nfExc;
        } catch (InvalidPersonalInfoException invInfoExc) {
          result.invInfoExc = invInfoExc;
        } catch (InvalidDocumentException invDocExc) {
          result.invDocExc = invDocExc;
        } catch (AnotherPolicyException anotherPolExc) {
          result.anotherPolExc = anotherPolExc;
        } catch (NotUniqueException nUniqueExc) {
          result.nUniqueExc = nUniqueExc;
        }
        return result;
      }
    }

    public static class changePatientPolicy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changePatientPolicy_args> {
      public changePatientPolicy() {
        super("changePatientPolicy");
      }

      public changePatientPolicy_args getEmptyArgsInstance() {
        return new changePatientPolicy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changePatientPolicy_result getResult(I iface, changePatientPolicy_args args) throws org.apache.thrift.TException {
        changePatientPolicy_result result = new changePatientPolicy_result();
        try {
          result.success = iface.changePatientPolicy(args.params);
          result.setSuccessIsSet(true);
        } catch (PolicyTypeNotFoundException ptnfExc) {
          result.ptnfExc = ptnfExc;
        } catch (NotFoundException nfExc) {
          result.nfExc = nfExc;
        }
        return result;
      }
    }

    public static class getPatientInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientInfo_args> {
      public getPatientInfo() {
        super("getPatientInfo");
      }

      public getPatientInfo_args getEmptyArgsInstance() {
        return new getPatientInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPatientInfo_result getResult(I iface, getPatientInfo_args args) throws org.apache.thrift.TException {
        getPatientInfo_result result = new getPatientInfo_result();
        try {
          result.success = iface.getPatientInfo(args.patientIds);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class getPatientContacts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientContacts_args> {
      public getPatientContacts() {
        super("getPatientContacts");
      }

      public getPatientContacts_args getEmptyArgsInstance() {
        return new getPatientContacts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPatientContacts_result getResult(I iface, getPatientContacts_args args) throws org.apache.thrift.TException {
        getPatientContacts_result result = new getPatientContacts_result();
        try {
          result.success = iface.getPatientContacts(args.patientId);
        } catch (NotFoundException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getPatientOrgStructures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientOrgStructures_args> {
      public getPatientOrgStructures() {
        super("getPatientOrgStructures");
      }

      public getPatientOrgStructures_args getEmptyArgsInstance() {
        return new getPatientOrgStructures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPatientOrgStructures_result getResult(I iface, getPatientOrgStructures_args args) throws org.apache.thrift.TException {
        getPatientOrgStructures_result result = new getPatientOrgStructures_result();
        try {
          result.success = iface.getPatientOrgStructures(args.parentId);
        } catch (NotFoundException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class enqueuePatient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enqueuePatient_args> {
      public enqueuePatient() {
        super("enqueuePatient");
      }

      public enqueuePatient_args getEmptyArgsInstance() {
        return new enqueuePatient_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enqueuePatient_result getResult(I iface, enqueuePatient_args args) throws org.apache.thrift.TException {
        enqueuePatient_result result = new enqueuePatient_result();
        try {
          result.success = iface.enqueuePatient(args.params);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class getPatientQueue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientQueue_args> {
      public getPatientQueue() {
        super("getPatientQueue");
      }

      public getPatientQueue_args getEmptyArgsInstance() {
        return new getPatientQueue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPatientQueue_result getResult(I iface, getPatientQueue_args args) throws org.apache.thrift.TException {
        getPatientQueue_result result = new getPatientQueue_result();
        try {
          result.success = iface.getPatientQueue(args.parentId);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class dequeuePatient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dequeuePatient_args> {
      public dequeuePatient() {
        super("dequeuePatient");
      }

      public dequeuePatient_args getEmptyArgsInstance() {
        return new dequeuePatient_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dequeuePatient_result getResult(I iface, dequeuePatient_args args) throws org.apache.thrift.TException {
        dequeuePatient_result result = new dequeuePatient_result();
        try {
          result.success = iface.dequeuePatient(args.patientId, args.queueId);
        } catch (NotFoundException exc) {
          result.exc = exc;
        } catch (SQLException excsql) {
          result.excsql = excsql;
        }
        return result;
      }
    }

    public static class getSpecialities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSpecialities_args> {
      public getSpecialities() {
        super("getSpecialities");
      }

      public getSpecialities_args getEmptyArgsInstance() {
        return new getSpecialities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSpecialities_result getResult(I iface, getSpecialities_args args) throws org.apache.thrift.TException {
        getSpecialities_result result = new getSpecialities_result();
        try {
          result.success = iface.getSpecialities(args.hospitalUidFrom);
        } catch (SQLException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

  }

  public static class getOrganisationInfo_args implements org.apache.thrift.TBase<getOrganisationInfo_args, getOrganisationInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrganisationInfo_args");

    private static final org.apache.thrift.protocol.TField INFIS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("infisCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrganisationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrganisationInfo_argsTupleSchemeFactory());
    }

    public String infisCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFIS_CODE((short)1, "infisCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFIS_CODE
            return INFIS_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFIS_CODE, new org.apache.thrift.meta_data.FieldMetaData("infisCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganisationInfo_args.class, metaDataMap);
    }

    public getOrganisationInfo_args() {
    }

    public getOrganisationInfo_args(
      String infisCode)
    {
      this();
      this.infisCode = infisCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrganisationInfo_args(getOrganisationInfo_args other) {
      if (other.isSetInfisCode()) {
        this.infisCode = other.infisCode;
      }
    }

    public getOrganisationInfo_args deepCopy() {
      return new getOrganisationInfo_args(this);
    }

    @Override
    public void clear() {
      this.infisCode = null;
    }

    public String getInfisCode() {
      return this.infisCode;
    }

    public getOrganisationInfo_args setInfisCode(String infisCode) {
      this.infisCode = infisCode;
      return this;
    }

    public void unsetInfisCode() {
      this.infisCode = null;
    }

    /** Returns true if field infisCode is set (has been assigned a value) and false otherwise */
    public boolean isSetInfisCode() {
      return this.infisCode != null;
    }

    public void setInfisCodeIsSet(boolean value) {
      if (!value) {
        this.infisCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INFIS_CODE:
        if (value == null) {
          unsetInfisCode();
        } else {
          setInfisCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INFIS_CODE:
        return getInfisCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INFIS_CODE:
        return isSetInfisCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrganisationInfo_args)
        return this.equals((getOrganisationInfo_args)that);
      return false;
    }

    public boolean equals(getOrganisationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_infisCode = true && this.isSetInfisCode();
      boolean that_present_infisCode = true && that.isSetInfisCode();
      if (this_present_infisCode || that_present_infisCode) {
        if (!(this_present_infisCode && that_present_infisCode))
          return false;
        if (!this.infisCode.equals(that.infisCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrganisationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrganisationInfo_args typedOther = (getOrganisationInfo_args)other;

      lastComparison = Boolean.valueOf(isSetInfisCode()).compareTo(typedOther.isSetInfisCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfisCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infisCode, typedOther.infisCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrganisationInfo_args(");
      boolean first = true;

      sb.append("infisCode:");
      if (this.infisCode == null) {
        sb.append("null");
      } else {
        sb.append(this.infisCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrganisationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getOrganisationInfo_argsStandardScheme getScheme() {
        return new getOrganisationInfo_argsStandardScheme();
      }
    }

    private static class getOrganisationInfo_argsStandardScheme extends StandardScheme<getOrganisationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganisationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFIS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.infisCode = iprot.readString();
                struct.setInfisCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganisationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.infisCode != null) {
          oprot.writeFieldBegin(INFIS_CODE_FIELD_DESC);
          oprot.writeString(struct.infisCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrganisationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getOrganisationInfo_argsTupleScheme getScheme() {
        return new getOrganisationInfo_argsTupleScheme();
      }
    }

    private static class getOrganisationInfo_argsTupleScheme extends TupleScheme<getOrganisationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrganisationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInfisCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfisCode()) {
          oprot.writeString(struct.infisCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrganisationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.infisCode = iprot.readString();
          struct.setInfisCodeIsSet(true);
        }
      }
    }

  }

  public static class getOrganisationInfo_result implements org.apache.thrift.TBase<getOrganisationInfo_result, getOrganisationInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrganisationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrganisationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrganisationInfo_resultTupleSchemeFactory());
    }

    public Organization success; // required
    public NotFoundException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Organization.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganisationInfo_result.class, metaDataMap);
    }

    public getOrganisationInfo_result() {
    }

    public getOrganisationInfo_result(
      Organization success,
      NotFoundException exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrganisationInfo_result(getOrganisationInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new Organization(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
    }

    public getOrganisationInfo_result deepCopy() {
      return new getOrganisationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Organization getSuccess() {
      return this.success;
    }

    public getOrganisationInfo_result setSuccess(Organization success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getOrganisationInfo_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Organization)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrganisationInfo_result)
        return this.equals((getOrganisationInfo_result)that);
      return false;
    }

    public boolean equals(getOrganisationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrganisationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrganisationInfo_result typedOther = (getOrganisationInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrganisationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrganisationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getOrganisationInfo_resultStandardScheme getScheme() {
        return new getOrganisationInfo_resultStandardScheme();
      }
    }

    private static class getOrganisationInfo_resultStandardScheme extends StandardScheme<getOrganisationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganisationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Organization();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganisationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrganisationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getOrganisationInfo_resultTupleScheme getScheme() {
        return new getOrganisationInfo_resultTupleScheme();
      }
    }

    private static class getOrganisationInfo_resultTupleScheme extends TupleScheme<getOrganisationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrganisationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrganisationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Organization();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getOrgStructures_args implements org.apache.thrift.TBase<getOrgStructures_args, getOrgStructures_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgStructures_args");

    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField INFIS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("infisCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgStructures_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgStructures_argsTupleSchemeFactory());
    }

    public int parent_id; // required
    public boolean recursive; // required
    public String infisCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARENT_ID((short)1, "parent_id"),
      RECURSIVE((short)2, "recursive"),
      INFIS_CODE((short)3, "infisCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARENT_ID
            return PARENT_ID;
          case 2: // RECURSIVE
            return RECURSIVE;
          case 3: // INFIS_CODE
            return INFIS_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARENT_ID_ISSET_ID = 0;
    private static final int __RECURSIVE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parent_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.INFIS_CODE, new org.apache.thrift.meta_data.FieldMetaData("infisCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgStructures_args.class, metaDataMap);
    }

    public getOrgStructures_args() {
    }

    public getOrgStructures_args(
      int parent_id,
      boolean recursive,
      String infisCode)
    {
      this();
      this.parent_id = parent_id;
      setParent_idIsSet(true);
      this.recursive = recursive;
      setRecursiveIsSet(true);
      this.infisCode = infisCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgStructures_args(getOrgStructures_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.parent_id = other.parent_id;
      this.recursive = other.recursive;
      if (other.isSetInfisCode()) {
        this.infisCode = other.infisCode;
      }
    }

    public getOrgStructures_args deepCopy() {
      return new getOrgStructures_args(this);
    }

    @Override
    public void clear() {
      setParent_idIsSet(false);
      this.parent_id = 0;
      setRecursiveIsSet(false);
      this.recursive = false;
      this.infisCode = null;
    }

    public int getParent_id() {
      return this.parent_id;
    }

    public getOrgStructures_args setParent_id(int parent_id) {
      this.parent_id = parent_id;
      setParent_idIsSet(true);
      return this;
    }

    public void unsetParent_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENT_ID_ISSET_ID);
    }

    /** Returns true if field parent_id is set (has been assigned a value) and false otherwise */
    public boolean isSetParent_id() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENT_ID_ISSET_ID);
    }

    public void setParent_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENT_ID_ISSET_ID, value);
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public getOrgStructures_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public String getInfisCode() {
      return this.infisCode;
    }

    public getOrgStructures_args setInfisCode(String infisCode) {
      this.infisCode = infisCode;
      return this;
    }

    public void unsetInfisCode() {
      this.infisCode = null;
    }

    /** Returns true if field infisCode is set (has been assigned a value) and false otherwise */
    public boolean isSetInfisCode() {
      return this.infisCode != null;
    }

    public void setInfisCodeIsSet(boolean value) {
      if (!value) {
        this.infisCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARENT_ID:
        if (value == null) {
          unsetParent_id();
        } else {
          setParent_id((Integer)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((Boolean)value);
        }
        break;

      case INFIS_CODE:
        if (value == null) {
          unsetInfisCode();
        } else {
          setInfisCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARENT_ID:
        return Integer.valueOf(getParent_id());

      case RECURSIVE:
        return Boolean.valueOf(isRecursive());

      case INFIS_CODE:
        return getInfisCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARENT_ID:
        return isSetParent_id();
      case RECURSIVE:
        return isSetRecursive();
      case INFIS_CODE:
        return isSetInfisCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgStructures_args)
        return this.equals((getOrgStructures_args)that);
      return false;
    }

    public boolean equals(getOrgStructures_args that) {
      if (that == null)
        return false;

      boolean this_present_parent_id = true;
      boolean that_present_parent_id = true;
      if (this_present_parent_id || that_present_parent_id) {
        if (!(this_present_parent_id && that_present_parent_id))
          return false;
        if (this.parent_id != that.parent_id)
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      boolean this_present_infisCode = true && this.isSetInfisCode();
      boolean that_present_infisCode = true && that.isSetInfisCode();
      if (this_present_infisCode || that_present_infisCode) {
        if (!(this_present_infisCode && that_present_infisCode))
          return false;
        if (!this.infisCode.equals(that.infisCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrgStructures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrgStructures_args typedOther = (getOrgStructures_args)other;

      lastComparison = Boolean.valueOf(isSetParent_id()).compareTo(typedOther.isSetParent_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParent_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_id, typedOther.parent_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(typedOther.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, typedOther.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInfisCode()).compareTo(typedOther.isSetInfisCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfisCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infisCode, typedOther.infisCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgStructures_args(");
      boolean first = true;

      sb.append("parent_id:");
      sb.append(this.parent_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      if (!first) sb.append(", ");
      sb.append("infisCode:");
      if (this.infisCode == null) {
        sb.append("null");
      } else {
        sb.append(this.infisCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgStructures_argsStandardSchemeFactory implements SchemeFactory {
      public getOrgStructures_argsStandardScheme getScheme() {
        return new getOrgStructures_argsStandardScheme();
      }
    }

    private static class getOrgStructures_argsStandardScheme extends StandardScheme<getOrgStructures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgStructures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.parent_id = iprot.readI32();
                struct.setParent_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INFIS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.infisCode = iprot.readString();
                struct.setInfisCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgStructures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI32(struct.parent_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        if (struct.infisCode != null) {
          oprot.writeFieldBegin(INFIS_CODE_FIELD_DESC);
          oprot.writeString(struct.infisCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgStructures_argsTupleSchemeFactory implements SchemeFactory {
      public getOrgStructures_argsTupleScheme getScheme() {
        return new getOrgStructures_argsTupleScheme();
      }
    }

    private static class getOrgStructures_argsTupleScheme extends TupleScheme<getOrgStructures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgStructures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParent_id()) {
          optionals.set(0);
        }
        if (struct.isSetRecursive()) {
          optionals.set(1);
        }
        if (struct.isSetInfisCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetParent_id()) {
          oprot.writeI32(struct.parent_id);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
        if (struct.isSetInfisCode()) {
          oprot.writeString(struct.infisCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgStructures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.parent_id = iprot.readI32();
          struct.setParent_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
        if (incoming.get(2)) {
          struct.infisCode = iprot.readString();
          struct.setInfisCodeIsSet(true);
        }
      }
    }

  }

  public static class getOrgStructures_result implements org.apache.thrift.TBase<getOrgStructures_result, getOrgStructures_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgStructures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgStructures_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgStructures_resultTupleSchemeFactory());
    }

    public List<OrgStructure> success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrgStructure.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgStructures_result.class, metaDataMap);
    }

    public getOrgStructures_result() {
    }

    public getOrgStructures_result(
      List<OrgStructure> success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgStructures_result(getOrgStructures_result other) {
      if (other.isSetSuccess()) {
        List<OrgStructure> __this__success = new ArrayList<OrgStructure>();
        for (OrgStructure other_element : other.success) {
          __this__success.add(new OrgStructure(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public getOrgStructures_result deepCopy() {
      return new getOrgStructures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OrgStructure> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OrgStructure elem) {
      if (this.success == null) {
        this.success = new ArrayList<OrgStructure>();
      }
      this.success.add(elem);
    }

    public List<OrgStructure> getSuccess() {
      return this.success;
    }

    public getOrgStructures_result setSuccess(List<OrgStructure> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getOrgStructures_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public getOrgStructures_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OrgStructure>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgStructures_result)
        return this.equals((getOrgStructures_result)that);
      return false;
    }

    public boolean equals(getOrgStructures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrgStructures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrgStructures_result typedOther = (getOrgStructures_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgStructures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgStructures_resultStandardSchemeFactory implements SchemeFactory {
      public getOrgStructures_resultStandardScheme getScheme() {
        return new getOrgStructures_resultStandardScheme();
      }
    }

    private static class getOrgStructures_resultStandardScheme extends StandardScheme<getOrgStructures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgStructures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.success = new ArrayList<OrgStructure>(_list28.size);
                  for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                  {
                    OrgStructure _elem30; // required
                    _elem30 = new OrgStructure();
                    _elem30.read(iprot);
                    struct.success.add(_elem30);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgStructures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OrgStructure _iter31 : struct.success)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgStructures_resultTupleSchemeFactory implements SchemeFactory {
      public getOrgStructures_resultTupleScheme getScheme() {
        return new getOrgStructures_resultTupleScheme();
      }
    }

    private static class getOrgStructures_resultTupleScheme extends TupleScheme<getOrgStructures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgStructures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OrgStructure _iter32 : struct.success)
            {
              _iter32.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgStructures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OrgStructure>(_list33.size);
            for (int _i34 = 0; _i34 < _list33.size; ++_i34)
            {
              OrgStructure _elem35; // required
              _elem35 = new OrgStructure();
              _elem35.read(iprot);
              struct.success.add(_elem35);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class getAddresses_args implements org.apache.thrift.TBase<getAddresses_args, getAddresses_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAddresses_args");

    private static final org.apache.thrift.protocol.TField ORG_STRUCTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgStructureId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField INFIS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("infisCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAddresses_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAddresses_argsTupleSchemeFactory());
    }

    public int orgStructureId; // required
    public boolean recursive; // required
    public String infisCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_STRUCTURE_ID((short)1, "orgStructureId"),
      RECURSIVE((short)2, "recursive"),
      INFIS_CODE((short)3, "infisCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_STRUCTURE_ID
            return ORG_STRUCTURE_ID;
          case 2: // RECURSIVE
            return RECURSIVE;
          case 3: // INFIS_CODE
            return INFIS_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORGSTRUCTUREID_ISSET_ID = 0;
    private static final int __RECURSIVE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_STRUCTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("orgStructureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.INFIS_CODE, new org.apache.thrift.meta_data.FieldMetaData("infisCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAddresses_args.class, metaDataMap);
    }

    public getAddresses_args() {
    }

    public getAddresses_args(
      int orgStructureId,
      boolean recursive,
      String infisCode)
    {
      this();
      this.orgStructureId = orgStructureId;
      setOrgStructureIdIsSet(true);
      this.recursive = recursive;
      setRecursiveIsSet(true);
      this.infisCode = infisCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAddresses_args(getAddresses_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orgStructureId = other.orgStructureId;
      this.recursive = other.recursive;
      if (other.isSetInfisCode()) {
        this.infisCode = other.infisCode;
      }
    }

    public getAddresses_args deepCopy() {
      return new getAddresses_args(this);
    }

    @Override
    public void clear() {
      setOrgStructureIdIsSet(false);
      this.orgStructureId = 0;
      setRecursiveIsSet(false);
      this.recursive = false;
      this.infisCode = null;
    }

    public int getOrgStructureId() {
      return this.orgStructureId;
    }

    public getAddresses_args setOrgStructureId(int orgStructureId) {
      this.orgStructureId = orgStructureId;
      setOrgStructureIdIsSet(true);
      return this;
    }

    public void unsetOrgStructureId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGSTRUCTUREID_ISSET_ID);
    }

    /** Returns true if field orgStructureId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgStructureId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORGSTRUCTUREID_ISSET_ID);
    }

    public void setOrgStructureIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGSTRUCTUREID_ISSET_ID, value);
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public getAddresses_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public String getInfisCode() {
      return this.infisCode;
    }

    public getAddresses_args setInfisCode(String infisCode) {
      this.infisCode = infisCode;
      return this;
    }

    public void unsetInfisCode() {
      this.infisCode = null;
    }

    /** Returns true if field infisCode is set (has been assigned a value) and false otherwise */
    public boolean isSetInfisCode() {
      return this.infisCode != null;
    }

    public void setInfisCodeIsSet(boolean value) {
      if (!value) {
        this.infisCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_STRUCTURE_ID:
        if (value == null) {
          unsetOrgStructureId();
        } else {
          setOrgStructureId((Integer)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((Boolean)value);
        }
        break;

      case INFIS_CODE:
        if (value == null) {
          unsetInfisCode();
        } else {
          setInfisCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_STRUCTURE_ID:
        return Integer.valueOf(getOrgStructureId());

      case RECURSIVE:
        return Boolean.valueOf(isRecursive());

      case INFIS_CODE:
        return getInfisCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_STRUCTURE_ID:
        return isSetOrgStructureId();
      case RECURSIVE:
        return isSetRecursive();
      case INFIS_CODE:
        return isSetInfisCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAddresses_args)
        return this.equals((getAddresses_args)that);
      return false;
    }

    public boolean equals(getAddresses_args that) {
      if (that == null)
        return false;

      boolean this_present_orgStructureId = true;
      boolean that_present_orgStructureId = true;
      if (this_present_orgStructureId || that_present_orgStructureId) {
        if (!(this_present_orgStructureId && that_present_orgStructureId))
          return false;
        if (this.orgStructureId != that.orgStructureId)
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      boolean this_present_infisCode = true && this.isSetInfisCode();
      boolean that_present_infisCode = true && that.isSetInfisCode();
      if (this_present_infisCode || that_present_infisCode) {
        if (!(this_present_infisCode && that_present_infisCode))
          return false;
        if (!this.infisCode.equals(that.infisCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAddresses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAddresses_args typedOther = (getAddresses_args)other;

      lastComparison = Boolean.valueOf(isSetOrgStructureId()).compareTo(typedOther.isSetOrgStructureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgStructureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgStructureId, typedOther.orgStructureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(typedOther.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, typedOther.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInfisCode()).compareTo(typedOther.isSetInfisCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfisCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infisCode, typedOther.infisCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAddresses_args(");
      boolean first = true;

      sb.append("orgStructureId:");
      sb.append(this.orgStructureId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      if (!first) sb.append(", ");
      sb.append("infisCode:");
      if (this.infisCode == null) {
        sb.append("null");
      } else {
        sb.append(this.infisCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAddresses_argsStandardSchemeFactory implements SchemeFactory {
      public getAddresses_argsStandardScheme getScheme() {
        return new getAddresses_argsStandardScheme();
      }
    }

    private static class getAddresses_argsStandardScheme extends StandardScheme<getAddresses_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAddresses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_STRUCTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orgStructureId = iprot.readI32();
                struct.setOrgStructureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INFIS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.infisCode = iprot.readString();
                struct.setInfisCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAddresses_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORG_STRUCTURE_ID_FIELD_DESC);
        oprot.writeI32(struct.orgStructureId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        if (struct.infisCode != null) {
          oprot.writeFieldBegin(INFIS_CODE_FIELD_DESC);
          oprot.writeString(struct.infisCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAddresses_argsTupleSchemeFactory implements SchemeFactory {
      public getAddresses_argsTupleScheme getScheme() {
        return new getAddresses_argsTupleScheme();
      }
    }

    private static class getAddresses_argsTupleScheme extends TupleScheme<getAddresses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAddresses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgStructureId()) {
          optionals.set(0);
        }
        if (struct.isSetRecursive()) {
          optionals.set(1);
        }
        if (struct.isSetInfisCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOrgStructureId()) {
          oprot.writeI32(struct.orgStructureId);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
        if (struct.isSetInfisCode()) {
          oprot.writeString(struct.infisCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAddresses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.orgStructureId = iprot.readI32();
          struct.setOrgStructureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
        if (incoming.get(2)) {
          struct.infisCode = iprot.readString();
          struct.setInfisCodeIsSet(true);
        }
      }
    }

  }

  public static class getAddresses_result implements org.apache.thrift.TBase<getAddresses_result, getAddresses_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAddresses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAddresses_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAddresses_resultTupleSchemeFactory());
    }

    public List<Address> success; // required
    public SQLException excsql; // required
    public NotFoundException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXCSQL((short)1, "excsql"),
      EXC((short)2, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXCSQL
            return EXCSQL;
          case 2: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Address.class))));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAddresses_result.class, metaDataMap);
    }

    public getAddresses_result() {
    }

    public getAddresses_result(
      List<Address> success,
      SQLException excsql,
      NotFoundException exc)
    {
      this();
      this.success = success;
      this.excsql = excsql;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAddresses_result(getAddresses_result other) {
      if (other.isSetSuccess()) {
        List<Address> __this__success = new ArrayList<Address>();
        for (Address other_element : other.success) {
          __this__success.add(new Address(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
    }

    public getAddresses_result deepCopy() {
      return new getAddresses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.excsql = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Address> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Address elem) {
      if (this.success == null) {
        this.success = new ArrayList<Address>();
      }
      this.success.add(elem);
    }

    public List<Address> getSuccess() {
      return this.success;
    }

    public getAddresses_result setSuccess(List<Address> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public getAddresses_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getAddresses_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Address>)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXCSQL:
        return getExcsql();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXCSQL:
        return isSetExcsql();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAddresses_result)
        return this.equals((getAddresses_result)that);
      return false;
    }

    public boolean equals(getAddresses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAddresses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAddresses_result typedOther = (getAddresses_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAddresses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAddresses_resultStandardSchemeFactory implements SchemeFactory {
      public getAddresses_resultStandardScheme getScheme() {
        return new getAddresses_resultStandardScheme();
      }
    }

    private static class getAddresses_resultStandardScheme extends StandardScheme<getAddresses_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAddresses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.success = new ArrayList<Address>(_list36.size);
                  for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                  {
                    Address _elem38; // required
                    _elem38 = new Address();
                    _elem38.read(iprot);
                    struct.success.add(_elem38);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAddresses_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Address _iter39 : struct.success)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAddresses_resultTupleSchemeFactory implements SchemeFactory {
      public getAddresses_resultTupleScheme getScheme() {
        return new getAddresses_resultTupleScheme();
      }
    }

    private static class getAddresses_resultTupleScheme extends TupleScheme<getAddresses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAddresses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExcsql()) {
          optionals.set(1);
        }
        if (struct.isSetExc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Address _iter40 : struct.success)
            {
              _iter40.write(oprot);
            }
          }
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAddresses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Address>(_list41.size);
            for (int _i42 = 0; _i42 < _list41.size; ++_i42)
            {
              Address _elem43; // required
              _elem43 = new Address();
              _elem43.read(iprot);
              struct.success.add(_elem43);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class findOrgStructureByAddress_args implements org.apache.thrift.TBase<findOrgStructureByAddress_args, findOrgStructureByAddress_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrgStructureByAddress_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrgStructureByAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrgStructureByAddress_argsTupleSchemeFactory());
    }

    public FindOrgStructureByAddressParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FindOrgStructureByAddressParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrgStructureByAddress_args.class, metaDataMap);
    }

    public findOrgStructureByAddress_args() {
    }

    public findOrgStructureByAddress_args(
      FindOrgStructureByAddressParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrgStructureByAddress_args(findOrgStructureByAddress_args other) {
      if (other.isSetParams()) {
        this.params = new FindOrgStructureByAddressParameters(other.params);
      }
    }

    public findOrgStructureByAddress_args deepCopy() {
      return new findOrgStructureByAddress_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public FindOrgStructureByAddressParameters getParams() {
      return this.params;
    }

    public findOrgStructureByAddress_args setParams(FindOrgStructureByAddressParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((FindOrgStructureByAddressParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrgStructureByAddress_args)
        return this.equals((findOrgStructureByAddress_args)that);
      return false;
    }

    public boolean equals(findOrgStructureByAddress_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrgStructureByAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrgStructureByAddress_args typedOther = (findOrgStructureByAddress_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrgStructureByAddress_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrgStructureByAddress_argsStandardSchemeFactory implements SchemeFactory {
      public findOrgStructureByAddress_argsStandardScheme getScheme() {
        return new findOrgStructureByAddress_argsStandardScheme();
      }
    }

    private static class findOrgStructureByAddress_argsStandardScheme extends StandardScheme<findOrgStructureByAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrgStructureByAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new FindOrgStructureByAddressParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrgStructureByAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrgStructureByAddress_argsTupleSchemeFactory implements SchemeFactory {
      public findOrgStructureByAddress_argsTupleScheme getScheme() {
        return new findOrgStructureByAddress_argsTupleScheme();
      }
    }

    private static class findOrgStructureByAddress_argsTupleScheme extends TupleScheme<findOrgStructureByAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrgStructureByAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrgStructureByAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new FindOrgStructureByAddressParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findOrgStructureByAddress_result implements org.apache.thrift.TBase<findOrgStructureByAddress_result, findOrgStructureByAddress_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrgStructureByAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrgStructureByAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrgStructureByAddress_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrgStructureByAddress_result.class, metaDataMap);
    }

    public findOrgStructureByAddress_result() {
    }

    public findOrgStructureByAddress_result(
      List<Integer> success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrgStructureByAddress_result(findOrgStructureByAddress_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>();
        for (Integer other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public findOrgStructureByAddress_result deepCopy() {
      return new findOrgStructureByAddress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public findOrgStructureByAddress_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public findOrgStructureByAddress_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public findOrgStructureByAddress_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrgStructureByAddress_result)
        return this.equals((findOrgStructureByAddress_result)that);
      return false;
    }

    public boolean equals(findOrgStructureByAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrgStructureByAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrgStructureByAddress_result typedOther = (findOrgStructureByAddress_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrgStructureByAddress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrgStructureByAddress_resultStandardSchemeFactory implements SchemeFactory {
      public findOrgStructureByAddress_resultStandardScheme getScheme() {
        return new findOrgStructureByAddress_resultStandardScheme();
      }
    }

    private static class findOrgStructureByAddress_resultStandardScheme extends StandardScheme<findOrgStructureByAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrgStructureByAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list44.size);
                  for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                  {
                    int _elem46; // required
                    _elem46 = iprot.readI32();
                    struct.success.add(_elem46);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrgStructureByAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter47 : struct.success)
            {
              oprot.writeI32(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrgStructureByAddress_resultTupleSchemeFactory implements SchemeFactory {
      public findOrgStructureByAddress_resultTupleScheme getScheme() {
        return new findOrgStructureByAddress_resultTupleScheme();
      }
    }

    private static class findOrgStructureByAddress_resultTupleScheme extends TupleScheme<findOrgStructureByAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrgStructureByAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter48 : struct.success)
            {
              oprot.writeI32(_iter48);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrgStructureByAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list49.size);
            for (int _i50 = 0; _i50 < _list49.size; ++_i50)
            {
              int _elem51; // required
              _elem51 = iprot.readI32();
              struct.success.add(_elem51);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class getPersonnel_args implements org.apache.thrift.TBase<getPersonnel_args, getPersonnel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPersonnel_args");

    private static final org.apache.thrift.protocol.TField ORG_STRUCTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgStructureId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField INFIS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("infisCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPersonnel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPersonnel_argsTupleSchemeFactory());
    }

    public int orgStructureId; // required
    public boolean recursive; // required
    public String infisCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_STRUCTURE_ID((short)1, "orgStructureId"),
      RECURSIVE((short)2, "recursive"),
      INFIS_CODE((short)3, "infisCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_STRUCTURE_ID
            return ORG_STRUCTURE_ID;
          case 2: // RECURSIVE
            return RECURSIVE;
          case 3: // INFIS_CODE
            return INFIS_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORGSTRUCTUREID_ISSET_ID = 0;
    private static final int __RECURSIVE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_STRUCTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("orgStructureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.INFIS_CODE, new org.apache.thrift.meta_data.FieldMetaData("infisCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPersonnel_args.class, metaDataMap);
    }

    public getPersonnel_args() {
    }

    public getPersonnel_args(
      int orgStructureId,
      boolean recursive,
      String infisCode)
    {
      this();
      this.orgStructureId = orgStructureId;
      setOrgStructureIdIsSet(true);
      this.recursive = recursive;
      setRecursiveIsSet(true);
      this.infisCode = infisCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPersonnel_args(getPersonnel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orgStructureId = other.orgStructureId;
      this.recursive = other.recursive;
      if (other.isSetInfisCode()) {
        this.infisCode = other.infisCode;
      }
    }

    public getPersonnel_args deepCopy() {
      return new getPersonnel_args(this);
    }

    @Override
    public void clear() {
      setOrgStructureIdIsSet(false);
      this.orgStructureId = 0;
      setRecursiveIsSet(false);
      this.recursive = false;
      this.infisCode = null;
    }

    public int getOrgStructureId() {
      return this.orgStructureId;
    }

    public getPersonnel_args setOrgStructureId(int orgStructureId) {
      this.orgStructureId = orgStructureId;
      setOrgStructureIdIsSet(true);
      return this;
    }

    public void unsetOrgStructureId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGSTRUCTUREID_ISSET_ID);
    }

    /** Returns true if field orgStructureId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgStructureId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORGSTRUCTUREID_ISSET_ID);
    }

    public void setOrgStructureIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGSTRUCTUREID_ISSET_ID, value);
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public getPersonnel_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public String getInfisCode() {
      return this.infisCode;
    }

    public getPersonnel_args setInfisCode(String infisCode) {
      this.infisCode = infisCode;
      return this;
    }

    public void unsetInfisCode() {
      this.infisCode = null;
    }

    /** Returns true if field infisCode is set (has been assigned a value) and false otherwise */
    public boolean isSetInfisCode() {
      return this.infisCode != null;
    }

    public void setInfisCodeIsSet(boolean value) {
      if (!value) {
        this.infisCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_STRUCTURE_ID:
        if (value == null) {
          unsetOrgStructureId();
        } else {
          setOrgStructureId((Integer)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((Boolean)value);
        }
        break;

      case INFIS_CODE:
        if (value == null) {
          unsetInfisCode();
        } else {
          setInfisCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_STRUCTURE_ID:
        return Integer.valueOf(getOrgStructureId());

      case RECURSIVE:
        return Boolean.valueOf(isRecursive());

      case INFIS_CODE:
        return getInfisCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_STRUCTURE_ID:
        return isSetOrgStructureId();
      case RECURSIVE:
        return isSetRecursive();
      case INFIS_CODE:
        return isSetInfisCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPersonnel_args)
        return this.equals((getPersonnel_args)that);
      return false;
    }

    public boolean equals(getPersonnel_args that) {
      if (that == null)
        return false;

      boolean this_present_orgStructureId = true;
      boolean that_present_orgStructureId = true;
      if (this_present_orgStructureId || that_present_orgStructureId) {
        if (!(this_present_orgStructureId && that_present_orgStructureId))
          return false;
        if (this.orgStructureId != that.orgStructureId)
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      boolean this_present_infisCode = true && this.isSetInfisCode();
      boolean that_present_infisCode = true && that.isSetInfisCode();
      if (this_present_infisCode || that_present_infisCode) {
        if (!(this_present_infisCode && that_present_infisCode))
          return false;
        if (!this.infisCode.equals(that.infisCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPersonnel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPersonnel_args typedOther = (getPersonnel_args)other;

      lastComparison = Boolean.valueOf(isSetOrgStructureId()).compareTo(typedOther.isSetOrgStructureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgStructureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgStructureId, typedOther.orgStructureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(typedOther.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, typedOther.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInfisCode()).compareTo(typedOther.isSetInfisCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfisCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infisCode, typedOther.infisCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPersonnel_args(");
      boolean first = true;

      sb.append("orgStructureId:");
      sb.append(this.orgStructureId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      if (!first) sb.append(", ");
      sb.append("infisCode:");
      if (this.infisCode == null) {
        sb.append("null");
      } else {
        sb.append(this.infisCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPersonnel_argsStandardSchemeFactory implements SchemeFactory {
      public getPersonnel_argsStandardScheme getScheme() {
        return new getPersonnel_argsStandardScheme();
      }
    }

    private static class getPersonnel_argsStandardScheme extends StandardScheme<getPersonnel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPersonnel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_STRUCTURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orgStructureId = iprot.readI32();
                struct.setOrgStructureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INFIS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.infisCode = iprot.readString();
                struct.setInfisCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPersonnel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORG_STRUCTURE_ID_FIELD_DESC);
        oprot.writeI32(struct.orgStructureId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        if (struct.infisCode != null) {
          oprot.writeFieldBegin(INFIS_CODE_FIELD_DESC);
          oprot.writeString(struct.infisCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPersonnel_argsTupleSchemeFactory implements SchemeFactory {
      public getPersonnel_argsTupleScheme getScheme() {
        return new getPersonnel_argsTupleScheme();
      }
    }

    private static class getPersonnel_argsTupleScheme extends TupleScheme<getPersonnel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPersonnel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgStructureId()) {
          optionals.set(0);
        }
        if (struct.isSetRecursive()) {
          optionals.set(1);
        }
        if (struct.isSetInfisCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOrgStructureId()) {
          oprot.writeI32(struct.orgStructureId);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
        if (struct.isSetInfisCode()) {
          oprot.writeString(struct.infisCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPersonnel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.orgStructureId = iprot.readI32();
          struct.setOrgStructureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
        if (incoming.get(2)) {
          struct.infisCode = iprot.readString();
          struct.setInfisCodeIsSet(true);
        }
      }
    }

  }

  public static class getPersonnel_result implements org.apache.thrift.TBase<getPersonnel_result, getPersonnel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPersonnel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPersonnel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPersonnel_resultTupleSchemeFactory());
    }

    public List<Person> success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Person.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPersonnel_result.class, metaDataMap);
    }

    public getPersonnel_result() {
    }

    public getPersonnel_result(
      List<Person> success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPersonnel_result(getPersonnel_result other) {
      if (other.isSetSuccess()) {
        List<Person> __this__success = new ArrayList<Person>();
        for (Person other_element : other.success) {
          __this__success.add(new Person(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public getPersonnel_result deepCopy() {
      return new getPersonnel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Person> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Person elem) {
      if (this.success == null) {
        this.success = new ArrayList<Person>();
      }
      this.success.add(elem);
    }

    public List<Person> getSuccess() {
      return this.success;
    }

    public getPersonnel_result setSuccess(List<Person> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getPersonnel_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public getPersonnel_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Person>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPersonnel_result)
        return this.equals((getPersonnel_result)that);
      return false;
    }

    public boolean equals(getPersonnel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPersonnel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPersonnel_result typedOther = (getPersonnel_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPersonnel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPersonnel_resultStandardSchemeFactory implements SchemeFactory {
      public getPersonnel_resultStandardScheme getScheme() {
        return new getPersonnel_resultStandardScheme();
      }
    }

    private static class getPersonnel_resultStandardScheme extends StandardScheme<getPersonnel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPersonnel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                  struct.success = new ArrayList<Person>(_list52.size);
                  for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                  {
                    Person _elem54; // required
                    _elem54 = new Person();
                    _elem54.read(iprot);
                    struct.success.add(_elem54);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPersonnel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Person _iter55 : struct.success)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPersonnel_resultTupleSchemeFactory implements SchemeFactory {
      public getPersonnel_resultTupleScheme getScheme() {
        return new getPersonnel_resultTupleScheme();
      }
    }

    private static class getPersonnel_resultTupleScheme extends TupleScheme<getPersonnel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPersonnel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Person _iter56 : struct.success)
            {
              _iter56.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPersonnel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Person>(_list57.size);
            for (int _i58 = 0; _i58 < _list57.size; ++_i58)
            {
              Person _elem59; // required
              _elem59 = new Person();
              _elem59.read(iprot);
              struct.success.add(_elem59);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class getTotalTicketsAvailability_args implements org.apache.thrift.TBase<getTotalTicketsAvailability_args, getTotalTicketsAvailability_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalTicketsAvailability_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalTicketsAvailability_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalTicketsAvailability_argsTupleSchemeFactory());
    }

    public GetTicketsAvailabilityParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetTicketsAvailabilityParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalTicketsAvailability_args.class, metaDataMap);
    }

    public getTotalTicketsAvailability_args() {
    }

    public getTotalTicketsAvailability_args(
      GetTicketsAvailabilityParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalTicketsAvailability_args(getTotalTicketsAvailability_args other) {
      if (other.isSetParams()) {
        this.params = new GetTicketsAvailabilityParameters(other.params);
      }
    }

    public getTotalTicketsAvailability_args deepCopy() {
      return new getTotalTicketsAvailability_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public GetTicketsAvailabilityParameters getParams() {
      return this.params;
    }

    public getTotalTicketsAvailability_args setParams(GetTicketsAvailabilityParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((GetTicketsAvailabilityParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalTicketsAvailability_args)
        return this.equals((getTotalTicketsAvailability_args)that);
      return false;
    }

    public boolean equals(getTotalTicketsAvailability_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTotalTicketsAvailability_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTotalTicketsAvailability_args typedOther = (getTotalTicketsAvailability_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalTicketsAvailability_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalTicketsAvailability_argsStandardSchemeFactory implements SchemeFactory {
      public getTotalTicketsAvailability_argsStandardScheme getScheme() {
        return new getTotalTicketsAvailability_argsStandardScheme();
      }
    }

    private static class getTotalTicketsAvailability_argsStandardScheme extends StandardScheme<getTotalTicketsAvailability_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalTicketsAvailability_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new GetTicketsAvailabilityParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalTicketsAvailability_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalTicketsAvailability_argsTupleSchemeFactory implements SchemeFactory {
      public getTotalTicketsAvailability_argsTupleScheme getScheme() {
        return new getTotalTicketsAvailability_argsTupleScheme();
      }
    }

    private static class getTotalTicketsAvailability_argsTupleScheme extends TupleScheme<getTotalTicketsAvailability_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalTicketsAvailability_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalTicketsAvailability_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new GetTicketsAvailabilityParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class getTotalTicketsAvailability_result implements org.apache.thrift.TBase<getTotalTicketsAvailability_result, getTotalTicketsAvailability_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalTicketsAvailability_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalTicketsAvailability_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalTicketsAvailability_resultTupleSchemeFactory());
    }

    public TicketsAvailability success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TicketsAvailability.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalTicketsAvailability_result.class, metaDataMap);
    }

    public getTotalTicketsAvailability_result() {
    }

    public getTotalTicketsAvailability_result(
      TicketsAvailability success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalTicketsAvailability_result(getTotalTicketsAvailability_result other) {
      if (other.isSetSuccess()) {
        this.success = new TicketsAvailability(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public getTotalTicketsAvailability_result deepCopy() {
      return new getTotalTicketsAvailability_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public TicketsAvailability getSuccess() {
      return this.success;
    }

    public getTotalTicketsAvailability_result setSuccess(TicketsAvailability success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getTotalTicketsAvailability_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public getTotalTicketsAvailability_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TicketsAvailability)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalTicketsAvailability_result)
        return this.equals((getTotalTicketsAvailability_result)that);
      return false;
    }

    public boolean equals(getTotalTicketsAvailability_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTotalTicketsAvailability_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTotalTicketsAvailability_result typedOther = (getTotalTicketsAvailability_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalTicketsAvailability_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalTicketsAvailability_resultStandardSchemeFactory implements SchemeFactory {
      public getTotalTicketsAvailability_resultStandardScheme getScheme() {
        return new getTotalTicketsAvailability_resultStandardScheme();
      }
    }

    private static class getTotalTicketsAvailability_resultStandardScheme extends StandardScheme<getTotalTicketsAvailability_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalTicketsAvailability_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TicketsAvailability();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalTicketsAvailability_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalTicketsAvailability_resultTupleSchemeFactory implements SchemeFactory {
      public getTotalTicketsAvailability_resultTupleScheme getScheme() {
        return new getTotalTicketsAvailability_resultTupleScheme();
      }
    }

    private static class getTotalTicketsAvailability_resultTupleScheme extends TupleScheme<getTotalTicketsAvailability_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalTicketsAvailability_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalTicketsAvailability_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TicketsAvailability();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class getTicketsAvailability_args implements org.apache.thrift.TBase<getTicketsAvailability_args, getTicketsAvailability_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketsAvailability_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketsAvailability_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketsAvailability_argsTupleSchemeFactory());
    }

    public GetTicketsAvailabilityParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetTicketsAvailabilityParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketsAvailability_args.class, metaDataMap);
    }

    public getTicketsAvailability_args() {
    }

    public getTicketsAvailability_args(
      GetTicketsAvailabilityParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketsAvailability_args(getTicketsAvailability_args other) {
      if (other.isSetParams()) {
        this.params = new GetTicketsAvailabilityParameters(other.params);
      }
    }

    public getTicketsAvailability_args deepCopy() {
      return new getTicketsAvailability_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public GetTicketsAvailabilityParameters getParams() {
      return this.params;
    }

    public getTicketsAvailability_args setParams(GetTicketsAvailabilityParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((GetTicketsAvailabilityParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketsAvailability_args)
        return this.equals((getTicketsAvailability_args)that);
      return false;
    }

    public boolean equals(getTicketsAvailability_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTicketsAvailability_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTicketsAvailability_args typedOther = (getTicketsAvailability_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketsAvailability_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketsAvailability_argsStandardSchemeFactory implements SchemeFactory {
      public getTicketsAvailability_argsStandardScheme getScheme() {
        return new getTicketsAvailability_argsStandardScheme();
      }
    }

    private static class getTicketsAvailability_argsStandardScheme extends StandardScheme<getTicketsAvailability_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketsAvailability_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new GetTicketsAvailabilityParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketsAvailability_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketsAvailability_argsTupleSchemeFactory implements SchemeFactory {
      public getTicketsAvailability_argsTupleScheme getScheme() {
        return new getTicketsAvailability_argsTupleScheme();
      }
    }

    private static class getTicketsAvailability_argsTupleScheme extends TupleScheme<getTicketsAvailability_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketsAvailability_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketsAvailability_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new GetTicketsAvailabilityParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class getTicketsAvailability_result implements org.apache.thrift.TBase<getTicketsAvailability_result, getTicketsAvailability_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketsAvailability_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketsAvailability_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketsAvailability_resultTupleSchemeFactory());
    }

    public List<ExtendedTicketsAvailability> success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExtendedTicketsAvailability.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketsAvailability_result.class, metaDataMap);
    }

    public getTicketsAvailability_result() {
    }

    public getTicketsAvailability_result(
      List<ExtendedTicketsAvailability> success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketsAvailability_result(getTicketsAvailability_result other) {
      if (other.isSetSuccess()) {
        List<ExtendedTicketsAvailability> __this__success = new ArrayList<ExtendedTicketsAvailability>();
        for (ExtendedTicketsAvailability other_element : other.success) {
          __this__success.add(new ExtendedTicketsAvailability(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public getTicketsAvailability_result deepCopy() {
      return new getTicketsAvailability_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ExtendedTicketsAvailability> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ExtendedTicketsAvailability elem) {
      if (this.success == null) {
        this.success = new ArrayList<ExtendedTicketsAvailability>();
      }
      this.success.add(elem);
    }

    public List<ExtendedTicketsAvailability> getSuccess() {
      return this.success;
    }

    public getTicketsAvailability_result setSuccess(List<ExtendedTicketsAvailability> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getTicketsAvailability_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public getTicketsAvailability_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ExtendedTicketsAvailability>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketsAvailability_result)
        return this.equals((getTicketsAvailability_result)that);
      return false;
    }

    public boolean equals(getTicketsAvailability_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTicketsAvailability_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTicketsAvailability_result typedOther = (getTicketsAvailability_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketsAvailability_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketsAvailability_resultStandardSchemeFactory implements SchemeFactory {
      public getTicketsAvailability_resultStandardScheme getScheme() {
        return new getTicketsAvailability_resultStandardScheme();
      }
    }

    private static class getTicketsAvailability_resultStandardScheme extends StandardScheme<getTicketsAvailability_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketsAvailability_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.success = new ArrayList<ExtendedTicketsAvailability>(_list60.size);
                  for (int _i61 = 0; _i61 < _list60.size; ++_i61)
                  {
                    ExtendedTicketsAvailability _elem62; // required
                    _elem62 = new ExtendedTicketsAvailability();
                    _elem62.read(iprot);
                    struct.success.add(_elem62);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketsAvailability_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ExtendedTicketsAvailability _iter63 : struct.success)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketsAvailability_resultTupleSchemeFactory implements SchemeFactory {
      public getTicketsAvailability_resultTupleScheme getScheme() {
        return new getTicketsAvailability_resultTupleScheme();
      }
    }

    private static class getTicketsAvailability_resultTupleScheme extends TupleScheme<getTicketsAvailability_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketsAvailability_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ExtendedTicketsAvailability _iter64 : struct.success)
            {
              _iter64.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketsAvailability_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ExtendedTicketsAvailability>(_list65.size);
            for (int _i66 = 0; _i66 < _list65.size; ++_i66)
            {
              ExtendedTicketsAvailability _elem67; // required
              _elem67 = new ExtendedTicketsAvailability();
              _elem67.read(iprot);
              struct.success.add(_elem67);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class getWorkTimeAndStatus_args implements org.apache.thrift.TBase<getWorkTimeAndStatus_args, getWorkTimeAndStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkTimeAndStatus_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkTimeAndStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkTimeAndStatus_argsTupleSchemeFactory());
    }

    public GetTimeWorkAndStatusParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetTimeWorkAndStatusParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkTimeAndStatus_args.class, metaDataMap);
    }

    public getWorkTimeAndStatus_args() {
    }

    public getWorkTimeAndStatus_args(
      GetTimeWorkAndStatusParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkTimeAndStatus_args(getWorkTimeAndStatus_args other) {
      if (other.isSetParams()) {
        this.params = new GetTimeWorkAndStatusParameters(other.params);
      }
    }

    public getWorkTimeAndStatus_args deepCopy() {
      return new getWorkTimeAndStatus_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public GetTimeWorkAndStatusParameters getParams() {
      return this.params;
    }

    public getWorkTimeAndStatus_args setParams(GetTimeWorkAndStatusParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((GetTimeWorkAndStatusParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkTimeAndStatus_args)
        return this.equals((getWorkTimeAndStatus_args)that);
      return false;
    }

    public boolean equals(getWorkTimeAndStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWorkTimeAndStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWorkTimeAndStatus_args typedOther = (getWorkTimeAndStatus_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkTimeAndStatus_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkTimeAndStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getWorkTimeAndStatus_argsStandardScheme getScheme() {
        return new getWorkTimeAndStatus_argsStandardScheme();
      }
    }

    private static class getWorkTimeAndStatus_argsStandardScheme extends StandardScheme<getWorkTimeAndStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkTimeAndStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new GetTimeWorkAndStatusParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkTimeAndStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkTimeAndStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getWorkTimeAndStatus_argsTupleScheme getScheme() {
        return new getWorkTimeAndStatus_argsTupleScheme();
      }
    }

    private static class getWorkTimeAndStatus_argsTupleScheme extends TupleScheme<getWorkTimeAndStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkTimeAndStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkTimeAndStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new GetTimeWorkAndStatusParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class getWorkTimeAndStatus_result implements org.apache.thrift.TBase<getWorkTimeAndStatus_result, getWorkTimeAndStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkTimeAndStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkTimeAndStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkTimeAndStatus_resultTupleSchemeFactory());
    }

    public Amb success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Amb.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkTimeAndStatus_result.class, metaDataMap);
    }

    public getWorkTimeAndStatus_result() {
    }

    public getWorkTimeAndStatus_result(
      Amb success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkTimeAndStatus_result(getWorkTimeAndStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new Amb(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public getWorkTimeAndStatus_result deepCopy() {
      return new getWorkTimeAndStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public Amb getSuccess() {
      return this.success;
    }

    public getWorkTimeAndStatus_result setSuccess(Amb success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getWorkTimeAndStatus_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public getWorkTimeAndStatus_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Amb)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkTimeAndStatus_result)
        return this.equals((getWorkTimeAndStatus_result)that);
      return false;
    }

    public boolean equals(getWorkTimeAndStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWorkTimeAndStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWorkTimeAndStatus_result typedOther = (getWorkTimeAndStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkTimeAndStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkTimeAndStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getWorkTimeAndStatus_resultStandardScheme getScheme() {
        return new getWorkTimeAndStatus_resultStandardScheme();
      }
    }

    private static class getWorkTimeAndStatus_resultStandardScheme extends StandardScheme<getWorkTimeAndStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkTimeAndStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Amb();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkTimeAndStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkTimeAndStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getWorkTimeAndStatus_resultTupleScheme getScheme() {
        return new getWorkTimeAndStatus_resultTupleScheme();
      }
    }

    private static class getWorkTimeAndStatus_resultTupleScheme extends TupleScheme<getWorkTimeAndStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkTimeAndStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkTimeAndStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Amb();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class addPatient_args implements org.apache.thrift.TBase<addPatient_args, addPatient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPatient_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPatient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPatient_argsTupleSchemeFactory());
    }

    public AddPatientParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddPatientParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPatient_args.class, metaDataMap);
    }

    public addPatient_args() {
    }

    public addPatient_args(
      AddPatientParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPatient_args(addPatient_args other) {
      if (other.isSetParams()) {
        this.params = new AddPatientParameters(other.params);
      }
    }

    public addPatient_args deepCopy() {
      return new addPatient_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public AddPatientParameters getParams() {
      return this.params;
    }

    public addPatient_args setParams(AddPatientParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((AddPatientParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPatient_args)
        return this.equals((addPatient_args)that);
      return false;
    }

    public boolean equals(addPatient_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPatient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPatient_args typedOther = (addPatient_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPatient_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPatient_argsStandardSchemeFactory implements SchemeFactory {
      public addPatient_argsStandardScheme getScheme() {
        return new addPatient_argsStandardScheme();
      }
    }

    private static class addPatient_argsStandardScheme extends StandardScheme<addPatient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPatient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new AddPatientParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPatient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPatient_argsTupleSchemeFactory implements SchemeFactory {
      public addPatient_argsTupleScheme getScheme() {
        return new addPatient_argsTupleScheme();
      }
    }

    private static class addPatient_argsTupleScheme extends TupleScheme<addPatient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new AddPatientParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class addPatient_result implements org.apache.thrift.TBase<addPatient_result, addPatient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPatient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPatient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPatient_resultTupleSchemeFactory());
    }

    public PatientStatus success; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXCSQL((short)1, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientStatus.class)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPatient_result.class, metaDataMap);
    }

    public addPatient_result() {
    }

    public addPatient_result(
      PatientStatus success,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPatient_result(addPatient_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatientStatus(other.success);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public addPatient_result deepCopy() {
      return new addPatient_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.excsql = null;
    }

    public PatientStatus getSuccess() {
      return this.success;
    }

    public addPatient_result setSuccess(PatientStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public addPatient_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatientStatus)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPatient_result)
        return this.equals((addPatient_result)that);
      return false;
    }

    public boolean equals(addPatient_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPatient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPatient_result typedOther = (addPatient_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPatient_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPatient_resultStandardSchemeFactory implements SchemeFactory {
      public addPatient_resultStandardScheme getScheme() {
        return new addPatient_resultStandardScheme();
      }
    }

    private static class addPatient_resultStandardScheme extends StandardScheme<addPatient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPatient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatientStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPatient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPatient_resultTupleSchemeFactory implements SchemeFactory {
      public addPatient_resultTupleScheme getScheme() {
        return new addPatient_resultTupleScheme();
      }
    }

    private static class addPatient_resultTupleScheme extends TupleScheme<addPatient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExcsql()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PatientStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class findPatient_args implements org.apache.thrift.TBase<findPatient_args, findPatient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatient_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPatient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPatient_argsTupleSchemeFactory());
    }

    public FindPatientParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FindPatientParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatient_args.class, metaDataMap);
    }

    public findPatient_args() {
    }

    public findPatient_args(
      FindPatientParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatient_args(findPatient_args other) {
      if (other.isSetParams()) {
        this.params = new FindPatientParameters(other.params);
      }
    }

    public findPatient_args deepCopy() {
      return new findPatient_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public FindPatientParameters getParams() {
      return this.params;
    }

    public findPatient_args setParams(FindPatientParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((FindPatientParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatient_args)
        return this.equals((findPatient_args)that);
      return false;
    }

    public boolean equals(findPatient_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPatient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPatient_args typedOther = (findPatient_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPatient_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatient_argsStandardSchemeFactory implements SchemeFactory {
      public findPatient_argsStandardScheme getScheme() {
        return new findPatient_argsStandardScheme();
      }
    }

    private static class findPatient_argsStandardScheme extends StandardScheme<findPatient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new FindPatientParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatient_argsTupleSchemeFactory implements SchemeFactory {
      public findPatient_argsTupleScheme getScheme() {
        return new findPatient_argsTupleScheme();
      }
    }

    private static class findPatient_argsTupleScheme extends TupleScheme<findPatient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new FindPatientParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findPatient_result implements org.apache.thrift.TBase<findPatient_result, findPatient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPatient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPatient_resultTupleSchemeFactory());
    }

    public PatientStatus success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientStatus.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatient_result.class, metaDataMap);
    }

    public findPatient_result() {
    }

    public findPatient_result(
      PatientStatus success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatient_result(findPatient_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatientStatus(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public findPatient_result deepCopy() {
      return new findPatient_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public PatientStatus getSuccess() {
      return this.success;
    }

    public findPatient_result setSuccess(PatientStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public findPatient_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public findPatient_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatientStatus)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatient_result)
        return this.equals((findPatient_result)that);
      return false;
    }

    public boolean equals(findPatient_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPatient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPatient_result typedOther = (findPatient_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPatient_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatient_resultStandardSchemeFactory implements SchemeFactory {
      public findPatient_resultStandardScheme getScheme() {
        return new findPatient_resultStandardScheme();
      }
    }

    private static class findPatient_resultStandardScheme extends StandardScheme<findPatient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatientStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatient_resultTupleSchemeFactory implements SchemeFactory {
      public findPatient_resultTupleScheme getScheme() {
        return new findPatient_resultTupleScheme();
      }
    }

    private static class findPatient_resultTupleScheme extends TupleScheme<findPatient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new PatientStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class findPatients_args implements org.apache.thrift.TBase<findPatients_args, findPatients_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatients_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPatients_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPatients_argsTupleSchemeFactory());
    }

    public FindMultiplePatientsParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FindMultiplePatientsParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatients_args.class, metaDataMap);
    }

    public findPatients_args() {
    }

    public findPatients_args(
      FindMultiplePatientsParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatients_args(findPatients_args other) {
      if (other.isSetParams()) {
        this.params = new FindMultiplePatientsParameters(other.params);
      }
    }

    public findPatients_args deepCopy() {
      return new findPatients_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public FindMultiplePatientsParameters getParams() {
      return this.params;
    }

    public findPatients_args setParams(FindMultiplePatientsParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((FindMultiplePatientsParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatients_args)
        return this.equals((findPatients_args)that);
      return false;
    }

    public boolean equals(findPatients_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPatients_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPatients_args typedOther = (findPatients_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPatients_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatients_argsStandardSchemeFactory implements SchemeFactory {
      public findPatients_argsStandardScheme getScheme() {
        return new findPatients_argsStandardScheme();
      }
    }

    private static class findPatients_argsStandardScheme extends StandardScheme<findPatients_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatients_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new FindMultiplePatientsParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatients_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatients_argsTupleSchemeFactory implements SchemeFactory {
      public findPatients_argsTupleScheme getScheme() {
        return new findPatients_argsTupleScheme();
      }
    }

    private static class findPatients_argsTupleScheme extends TupleScheme<findPatients_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatients_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatients_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new FindMultiplePatientsParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findPatients_result implements org.apache.thrift.TBase<findPatients_result, findPatients_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatients_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPatients_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPatients_resultTupleSchemeFactory());
    }

    public List<Patient> success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Patient.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatients_result.class, metaDataMap);
    }

    public findPatients_result() {
    }

    public findPatients_result(
      List<Patient> success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatients_result(findPatients_result other) {
      if (other.isSetSuccess()) {
        List<Patient> __this__success = new ArrayList<Patient>();
        for (Patient other_element : other.success) {
          __this__success.add(new Patient(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public findPatients_result deepCopy() {
      return new findPatients_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Patient> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Patient elem) {
      if (this.success == null) {
        this.success = new ArrayList<Patient>();
      }
      this.success.add(elem);
    }

    public List<Patient> getSuccess() {
      return this.success;
    }

    public findPatients_result setSuccess(List<Patient> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public findPatients_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public findPatients_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Patient>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatients_result)
        return this.equals((findPatients_result)that);
      return false;
    }

    public boolean equals(findPatients_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPatients_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPatients_result typedOther = (findPatients_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPatients_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatients_resultStandardSchemeFactory implements SchemeFactory {
      public findPatients_resultStandardScheme getScheme() {
        return new findPatients_resultStandardScheme();
      }
    }

    private static class findPatients_resultStandardScheme extends StandardScheme<findPatients_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatients_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                  struct.success = new ArrayList<Patient>(_list68.size);
                  for (int _i69 = 0; _i69 < _list68.size; ++_i69)
                  {
                    Patient _elem70; // required
                    _elem70 = new Patient();
                    _elem70.read(iprot);
                    struct.success.add(_elem70);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatients_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Patient _iter71 : struct.success)
            {
              _iter71.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatients_resultTupleSchemeFactory implements SchemeFactory {
      public findPatients_resultTupleScheme getScheme() {
        return new findPatients_resultTupleScheme();
      }
    }

    private static class findPatients_resultTupleScheme extends TupleScheme<findPatients_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatients_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Patient _iter72 : struct.success)
            {
              _iter72.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatients_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Patient>(_list73.size);
            for (int _i74 = 0; _i74 < _list73.size; ++_i74)
            {
              Patient _elem75; // required
              _elem75 = new Patient();
              _elem75.read(iprot);
              struct.success.add(_elem75);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class findPatientByPolicyAndDocument_args implements org.apache.thrift.TBase<findPatientByPolicyAndDocument_args, findPatientByPolicyAndDocument_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatientByPolicyAndDocument_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPatientByPolicyAndDocument_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPatientByPolicyAndDocument_argsTupleSchemeFactory());
    }

    public FindPatientByPolicyAndDocumentParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FindPatientByPolicyAndDocumentParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatientByPolicyAndDocument_args.class, metaDataMap);
    }

    public findPatientByPolicyAndDocument_args() {
    }

    public findPatientByPolicyAndDocument_args(
      FindPatientByPolicyAndDocumentParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatientByPolicyAndDocument_args(findPatientByPolicyAndDocument_args other) {
      if (other.isSetParams()) {
        this.params = new FindPatientByPolicyAndDocumentParameters(other.params);
      }
    }

    public findPatientByPolicyAndDocument_args deepCopy() {
      return new findPatientByPolicyAndDocument_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public FindPatientByPolicyAndDocumentParameters getParams() {
      return this.params;
    }

    public findPatientByPolicyAndDocument_args setParams(FindPatientByPolicyAndDocumentParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((FindPatientByPolicyAndDocumentParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatientByPolicyAndDocument_args)
        return this.equals((findPatientByPolicyAndDocument_args)that);
      return false;
    }

    public boolean equals(findPatientByPolicyAndDocument_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPatientByPolicyAndDocument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPatientByPolicyAndDocument_args typedOther = (findPatientByPolicyAndDocument_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPatientByPolicyAndDocument_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatientByPolicyAndDocument_argsStandardSchemeFactory implements SchemeFactory {
      public findPatientByPolicyAndDocument_argsStandardScheme getScheme() {
        return new findPatientByPolicyAndDocument_argsStandardScheme();
      }
    }

    private static class findPatientByPolicyAndDocument_argsStandardScheme extends StandardScheme<findPatientByPolicyAndDocument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatientByPolicyAndDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new FindPatientByPolicyAndDocumentParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatientByPolicyAndDocument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatientByPolicyAndDocument_argsTupleSchemeFactory implements SchemeFactory {
      public findPatientByPolicyAndDocument_argsTupleScheme getScheme() {
        return new findPatientByPolicyAndDocument_argsTupleScheme();
      }
    }

    private static class findPatientByPolicyAndDocument_argsTupleScheme extends TupleScheme<findPatientByPolicyAndDocument_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatientByPolicyAndDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatientByPolicyAndDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new FindPatientByPolicyAndDocumentParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findPatientByPolicyAndDocument_result implements org.apache.thrift.TBase<findPatientByPolicyAndDocument_result, findPatientByPolicyAndDocument_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatientByPolicyAndDocument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField NF_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("nfExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INV_INFO_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("invInfoExc", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField INV_DOC_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("invDocExc", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ANOTHER_POL_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("anotherPolExc", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField N_UNIQUE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("nUniqueExc", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPatientByPolicyAndDocument_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPatientByPolicyAndDocument_resultTupleSchemeFactory());
    }

    public PatientStatus success; // required
    public NotFoundException nfExc; // required
    public InvalidPersonalInfoException invInfoExc; // required
    public InvalidDocumentException invDocExc; // required
    public AnotherPolicyException anotherPolExc; // required
    public NotUniqueException nUniqueExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NF_EXC((short)1, "nfExc"),
      INV_INFO_EXC((short)2, "invInfoExc"),
      INV_DOC_EXC((short)3, "invDocExc"),
      ANOTHER_POL_EXC((short)4, "anotherPolExc"),
      N_UNIQUE_EXC((short)5, "nUniqueExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NF_EXC
            return NF_EXC;
          case 2: // INV_INFO_EXC
            return INV_INFO_EXC;
          case 3: // INV_DOC_EXC
            return INV_DOC_EXC;
          case 4: // ANOTHER_POL_EXC
            return ANOTHER_POL_EXC;
          case 5: // N_UNIQUE_EXC
            return N_UNIQUE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientStatus.class)));
      tmpMap.put(_Fields.NF_EXC, new org.apache.thrift.meta_data.FieldMetaData("nfExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INV_INFO_EXC, new org.apache.thrift.meta_data.FieldMetaData("invInfoExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INV_DOC_EXC, new org.apache.thrift.meta_data.FieldMetaData("invDocExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ANOTHER_POL_EXC, new org.apache.thrift.meta_data.FieldMetaData("anotherPolExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.N_UNIQUE_EXC, new org.apache.thrift.meta_data.FieldMetaData("nUniqueExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatientByPolicyAndDocument_result.class, metaDataMap);
    }

    public findPatientByPolicyAndDocument_result() {
    }

    public findPatientByPolicyAndDocument_result(
      PatientStatus success,
      NotFoundException nfExc,
      InvalidPersonalInfoException invInfoExc,
      InvalidDocumentException invDocExc,
      AnotherPolicyException anotherPolExc,
      NotUniqueException nUniqueExc)
    {
      this();
      this.success = success;
      this.nfExc = nfExc;
      this.invInfoExc = invInfoExc;
      this.invDocExc = invDocExc;
      this.anotherPolExc = anotherPolExc;
      this.nUniqueExc = nUniqueExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatientByPolicyAndDocument_result(findPatientByPolicyAndDocument_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatientStatus(other.success);
      }
      if (other.isSetNfExc()) {
        this.nfExc = new NotFoundException(other.nfExc);
      }
      if (other.isSetInvInfoExc()) {
        this.invInfoExc = new InvalidPersonalInfoException(other.invInfoExc);
      }
      if (other.isSetInvDocExc()) {
        this.invDocExc = new InvalidDocumentException(other.invDocExc);
      }
      if (other.isSetAnotherPolExc()) {
        this.anotherPolExc = new AnotherPolicyException(other.anotherPolExc);
      }
      if (other.isSetNUniqueExc()) {
        this.nUniqueExc = new NotUniqueException(other.nUniqueExc);
      }
    }

    public findPatientByPolicyAndDocument_result deepCopy() {
      return new findPatientByPolicyAndDocument_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.nfExc = null;
      this.invInfoExc = null;
      this.invDocExc = null;
      this.anotherPolExc = null;
      this.nUniqueExc = null;
    }

    public PatientStatus getSuccess() {
      return this.success;
    }

    public findPatientByPolicyAndDocument_result setSuccess(PatientStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getNfExc() {
      return this.nfExc;
    }

    public findPatientByPolicyAndDocument_result setNfExc(NotFoundException nfExc) {
      this.nfExc = nfExc;
      return this;
    }

    public void unsetNfExc() {
      this.nfExc = null;
    }

    /** Returns true if field nfExc is set (has been assigned a value) and false otherwise */
    public boolean isSetNfExc() {
      return this.nfExc != null;
    }

    public void setNfExcIsSet(boolean value) {
      if (!value) {
        this.nfExc = null;
      }
    }

    public InvalidPersonalInfoException getInvInfoExc() {
      return this.invInfoExc;
    }

    public findPatientByPolicyAndDocument_result setInvInfoExc(InvalidPersonalInfoException invInfoExc) {
      this.invInfoExc = invInfoExc;
      return this;
    }

    public void unsetInvInfoExc() {
      this.invInfoExc = null;
    }

    /** Returns true if field invInfoExc is set (has been assigned a value) and false otherwise */
    public boolean isSetInvInfoExc() {
      return this.invInfoExc != null;
    }

    public void setInvInfoExcIsSet(boolean value) {
      if (!value) {
        this.invInfoExc = null;
      }
    }

    public InvalidDocumentException getInvDocExc() {
      return this.invDocExc;
    }

    public findPatientByPolicyAndDocument_result setInvDocExc(InvalidDocumentException invDocExc) {
      this.invDocExc = invDocExc;
      return this;
    }

    public void unsetInvDocExc() {
      this.invDocExc = null;
    }

    /** Returns true if field invDocExc is set (has been assigned a value) and false otherwise */
    public boolean isSetInvDocExc() {
      return this.invDocExc != null;
    }

    public void setInvDocExcIsSet(boolean value) {
      if (!value) {
        this.invDocExc = null;
      }
    }

    public AnotherPolicyException getAnotherPolExc() {
      return this.anotherPolExc;
    }

    public findPatientByPolicyAndDocument_result setAnotherPolExc(AnotherPolicyException anotherPolExc) {
      this.anotherPolExc = anotherPolExc;
      return this;
    }

    public void unsetAnotherPolExc() {
      this.anotherPolExc = null;
    }

    /** Returns true if field anotherPolExc is set (has been assigned a value) and false otherwise */
    public boolean isSetAnotherPolExc() {
      return this.anotherPolExc != null;
    }

    public void setAnotherPolExcIsSet(boolean value) {
      if (!value) {
        this.anotherPolExc = null;
      }
    }

    public NotUniqueException getNUniqueExc() {
      return this.nUniqueExc;
    }

    public findPatientByPolicyAndDocument_result setNUniqueExc(NotUniqueException nUniqueExc) {
      this.nUniqueExc = nUniqueExc;
      return this;
    }

    public void unsetNUniqueExc() {
      this.nUniqueExc = null;
    }

    /** Returns true if field nUniqueExc is set (has been assigned a value) and false otherwise */
    public boolean isSetNUniqueExc() {
      return this.nUniqueExc != null;
    }

    public void setNUniqueExcIsSet(boolean value) {
      if (!value) {
        this.nUniqueExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatientStatus)value);
        }
        break;

      case NF_EXC:
        if (value == null) {
          unsetNfExc();
        } else {
          setNfExc((NotFoundException)value);
        }
        break;

      case INV_INFO_EXC:
        if (value == null) {
          unsetInvInfoExc();
        } else {
          setInvInfoExc((InvalidPersonalInfoException)value);
        }
        break;

      case INV_DOC_EXC:
        if (value == null) {
          unsetInvDocExc();
        } else {
          setInvDocExc((InvalidDocumentException)value);
        }
        break;

      case ANOTHER_POL_EXC:
        if (value == null) {
          unsetAnotherPolExc();
        } else {
          setAnotherPolExc((AnotherPolicyException)value);
        }
        break;

      case N_UNIQUE_EXC:
        if (value == null) {
          unsetNUniqueExc();
        } else {
          setNUniqueExc((NotUniqueException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NF_EXC:
        return getNfExc();

      case INV_INFO_EXC:
        return getInvInfoExc();

      case INV_DOC_EXC:
        return getInvDocExc();

      case ANOTHER_POL_EXC:
        return getAnotherPolExc();

      case N_UNIQUE_EXC:
        return getNUniqueExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NF_EXC:
        return isSetNfExc();
      case INV_INFO_EXC:
        return isSetInvInfoExc();
      case INV_DOC_EXC:
        return isSetInvDocExc();
      case ANOTHER_POL_EXC:
        return isSetAnotherPolExc();
      case N_UNIQUE_EXC:
        return isSetNUniqueExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatientByPolicyAndDocument_result)
        return this.equals((findPatientByPolicyAndDocument_result)that);
      return false;
    }

    public boolean equals(findPatientByPolicyAndDocument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nfExc = true && this.isSetNfExc();
      boolean that_present_nfExc = true && that.isSetNfExc();
      if (this_present_nfExc || that_present_nfExc) {
        if (!(this_present_nfExc && that_present_nfExc))
          return false;
        if (!this.nfExc.equals(that.nfExc))
          return false;
      }

      boolean this_present_invInfoExc = true && this.isSetInvInfoExc();
      boolean that_present_invInfoExc = true && that.isSetInvInfoExc();
      if (this_present_invInfoExc || that_present_invInfoExc) {
        if (!(this_present_invInfoExc && that_present_invInfoExc))
          return false;
        if (!this.invInfoExc.equals(that.invInfoExc))
          return false;
      }

      boolean this_present_invDocExc = true && this.isSetInvDocExc();
      boolean that_present_invDocExc = true && that.isSetInvDocExc();
      if (this_present_invDocExc || that_present_invDocExc) {
        if (!(this_present_invDocExc && that_present_invDocExc))
          return false;
        if (!this.invDocExc.equals(that.invDocExc))
          return false;
      }

      boolean this_present_anotherPolExc = true && this.isSetAnotherPolExc();
      boolean that_present_anotherPolExc = true && that.isSetAnotherPolExc();
      if (this_present_anotherPolExc || that_present_anotherPolExc) {
        if (!(this_present_anotherPolExc && that_present_anotherPolExc))
          return false;
        if (!this.anotherPolExc.equals(that.anotherPolExc))
          return false;
      }

      boolean this_present_nUniqueExc = true && this.isSetNUniqueExc();
      boolean that_present_nUniqueExc = true && that.isSetNUniqueExc();
      if (this_present_nUniqueExc || that_present_nUniqueExc) {
        if (!(this_present_nUniqueExc && that_present_nUniqueExc))
          return false;
        if (!this.nUniqueExc.equals(that.nUniqueExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPatientByPolicyAndDocument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPatientByPolicyAndDocument_result typedOther = (findPatientByPolicyAndDocument_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNfExc()).compareTo(typedOther.isSetNfExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNfExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nfExc, typedOther.nfExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvInfoExc()).compareTo(typedOther.isSetInvInfoExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvInfoExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invInfoExc, typedOther.invInfoExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvDocExc()).compareTo(typedOther.isSetInvDocExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvDocExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invDocExc, typedOther.invDocExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAnotherPolExc()).compareTo(typedOther.isSetAnotherPolExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnotherPolExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anotherPolExc, typedOther.anotherPolExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNUniqueExc()).compareTo(typedOther.isSetNUniqueExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNUniqueExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nUniqueExc, typedOther.nUniqueExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPatientByPolicyAndDocument_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nfExc:");
      if (this.nfExc == null) {
        sb.append("null");
      } else {
        sb.append(this.nfExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invInfoExc:");
      if (this.invInfoExc == null) {
        sb.append("null");
      } else {
        sb.append(this.invInfoExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invDocExc:");
      if (this.invDocExc == null) {
        sb.append("null");
      } else {
        sb.append(this.invDocExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("anotherPolExc:");
      if (this.anotherPolExc == null) {
        sb.append("null");
      } else {
        sb.append(this.anotherPolExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nUniqueExc:");
      if (this.nUniqueExc == null) {
        sb.append("null");
      } else {
        sb.append(this.nUniqueExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatientByPolicyAndDocument_resultStandardSchemeFactory implements SchemeFactory {
      public findPatientByPolicyAndDocument_resultStandardScheme getScheme() {
        return new findPatientByPolicyAndDocument_resultStandardScheme();
      }
    }

    private static class findPatientByPolicyAndDocument_resultStandardScheme extends StandardScheme<findPatientByPolicyAndDocument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatientByPolicyAndDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatientStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NF_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nfExc = new NotFoundException();
                struct.nfExc.read(iprot);
                struct.setNfExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INV_INFO_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invInfoExc = new InvalidPersonalInfoException();
                struct.invInfoExc.read(iprot);
                struct.setInvInfoExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INV_DOC_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invDocExc = new InvalidDocumentException();
                struct.invDocExc.read(iprot);
                struct.setInvDocExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ANOTHER_POL_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.anotherPolExc = new AnotherPolicyException();
                struct.anotherPolExc.read(iprot);
                struct.setAnotherPolExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // N_UNIQUE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nUniqueExc = new NotUniqueException();
                struct.nUniqueExc.read(iprot);
                struct.setNUniqueExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatientByPolicyAndDocument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nfExc != null) {
          oprot.writeFieldBegin(NF_EXC_FIELD_DESC);
          struct.nfExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invInfoExc != null) {
          oprot.writeFieldBegin(INV_INFO_EXC_FIELD_DESC);
          struct.invInfoExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invDocExc != null) {
          oprot.writeFieldBegin(INV_DOC_EXC_FIELD_DESC);
          struct.invDocExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.anotherPolExc != null) {
          oprot.writeFieldBegin(ANOTHER_POL_EXC_FIELD_DESC);
          struct.anotherPolExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nUniqueExc != null) {
          oprot.writeFieldBegin(N_UNIQUE_EXC_FIELD_DESC);
          struct.nUniqueExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatientByPolicyAndDocument_resultTupleSchemeFactory implements SchemeFactory {
      public findPatientByPolicyAndDocument_resultTupleScheme getScheme() {
        return new findPatientByPolicyAndDocument_resultTupleScheme();
      }
    }

    private static class findPatientByPolicyAndDocument_resultTupleScheme extends TupleScheme<findPatientByPolicyAndDocument_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatientByPolicyAndDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNfExc()) {
          optionals.set(1);
        }
        if (struct.isSetInvInfoExc()) {
          optionals.set(2);
        }
        if (struct.isSetInvDocExc()) {
          optionals.set(3);
        }
        if (struct.isSetAnotherPolExc()) {
          optionals.set(4);
        }
        if (struct.isSetNUniqueExc()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetNfExc()) {
          struct.nfExc.write(oprot);
        }
        if (struct.isSetInvInfoExc()) {
          struct.invInfoExc.write(oprot);
        }
        if (struct.isSetInvDocExc()) {
          struct.invDocExc.write(oprot);
        }
        if (struct.isSetAnotherPolExc()) {
          struct.anotherPolExc.write(oprot);
        }
        if (struct.isSetNUniqueExc()) {
          struct.nUniqueExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatientByPolicyAndDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = new PatientStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nfExc = new NotFoundException();
          struct.nfExc.read(iprot);
          struct.setNfExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.invInfoExc = new InvalidPersonalInfoException();
          struct.invInfoExc.read(iprot);
          struct.setInvInfoExcIsSet(true);
        }
        if (incoming.get(3)) {
          struct.invDocExc = new InvalidDocumentException();
          struct.invDocExc.read(iprot);
          struct.setInvDocExcIsSet(true);
        }
        if (incoming.get(4)) {
          struct.anotherPolExc = new AnotherPolicyException();
          struct.anotherPolExc.read(iprot);
          struct.setAnotherPolExcIsSet(true);
        }
        if (incoming.get(5)) {
          struct.nUniqueExc = new NotUniqueException();
          struct.nUniqueExc.read(iprot);
          struct.setNUniqueExcIsSet(true);
        }
      }
    }

  }

  public static class changePatientPolicy_args implements org.apache.thrift.TBase<changePatientPolicy_args, changePatientPolicy_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePatientPolicy_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changePatientPolicy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changePatientPolicy_argsTupleSchemeFactory());
    }

    public ChangePolicyParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChangePolicyParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePatientPolicy_args.class, metaDataMap);
    }

    public changePatientPolicy_args() {
    }

    public changePatientPolicy_args(
      ChangePolicyParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePatientPolicy_args(changePatientPolicy_args other) {
      if (other.isSetParams()) {
        this.params = new ChangePolicyParameters(other.params);
      }
    }

    public changePatientPolicy_args deepCopy() {
      return new changePatientPolicy_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public ChangePolicyParameters getParams() {
      return this.params;
    }

    public changePatientPolicy_args setParams(ChangePolicyParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((ChangePolicyParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changePatientPolicy_args)
        return this.equals((changePatientPolicy_args)that);
      return false;
    }

    public boolean equals(changePatientPolicy_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(changePatientPolicy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      changePatientPolicy_args typedOther = (changePatientPolicy_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changePatientPolicy_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePatientPolicy_argsStandardSchemeFactory implements SchemeFactory {
      public changePatientPolicy_argsStandardScheme getScheme() {
        return new changePatientPolicy_argsStandardScheme();
      }
    }

    private static class changePatientPolicy_argsStandardScheme extends StandardScheme<changePatientPolicy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePatientPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new ChangePolicyParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePatientPolicy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePatientPolicy_argsTupleSchemeFactory implements SchemeFactory {
      public changePatientPolicy_argsTupleScheme getScheme() {
        return new changePatientPolicy_argsTupleScheme();
      }
    }

    private static class changePatientPolicy_argsTupleScheme extends TupleScheme<changePatientPolicy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePatientPolicy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePatientPolicy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new ChangePolicyParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class changePatientPolicy_result implements org.apache.thrift.TBase<changePatientPolicy_result, changePatientPolicy_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePatientPolicy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField PTNF_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("ptnfExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NF_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("nfExc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changePatientPolicy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changePatientPolicy_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PolicyTypeNotFoundException ptnfExc; // required
    public NotFoundException nfExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PTNF_EXC((short)1, "ptnfExc"),
      NF_EXC((short)2, "nfExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PTNF_EXC
            return PTNF_EXC;
          case 2: // NF_EXC
            return NF_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PTNF_EXC, new org.apache.thrift.meta_data.FieldMetaData("ptnfExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NF_EXC, new org.apache.thrift.meta_data.FieldMetaData("nfExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePatientPolicy_result.class, metaDataMap);
    }

    public changePatientPolicy_result() {
    }

    public changePatientPolicy_result(
      boolean success,
      PolicyTypeNotFoundException ptnfExc,
      NotFoundException nfExc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ptnfExc = ptnfExc;
      this.nfExc = nfExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePatientPolicy_result(changePatientPolicy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetPtnfExc()) {
        this.ptnfExc = new PolicyTypeNotFoundException(other.ptnfExc);
      }
      if (other.isSetNfExc()) {
        this.nfExc = new NotFoundException(other.nfExc);
      }
    }

    public changePatientPolicy_result deepCopy() {
      return new changePatientPolicy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ptnfExc = null;
      this.nfExc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public changePatientPolicy_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public PolicyTypeNotFoundException getPtnfExc() {
      return this.ptnfExc;
    }

    public changePatientPolicy_result setPtnfExc(PolicyTypeNotFoundException ptnfExc) {
      this.ptnfExc = ptnfExc;
      return this;
    }

    public void unsetPtnfExc() {
      this.ptnfExc = null;
    }

    /** Returns true if field ptnfExc is set (has been assigned a value) and false otherwise */
    public boolean isSetPtnfExc() {
      return this.ptnfExc != null;
    }

    public void setPtnfExcIsSet(boolean value) {
      if (!value) {
        this.ptnfExc = null;
      }
    }

    public NotFoundException getNfExc() {
      return this.nfExc;
    }

    public changePatientPolicy_result setNfExc(NotFoundException nfExc) {
      this.nfExc = nfExc;
      return this;
    }

    public void unsetNfExc() {
      this.nfExc = null;
    }

    /** Returns true if field nfExc is set (has been assigned a value) and false otherwise */
    public boolean isSetNfExc() {
      return this.nfExc != null;
    }

    public void setNfExcIsSet(boolean value) {
      if (!value) {
        this.nfExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case PTNF_EXC:
        if (value == null) {
          unsetPtnfExc();
        } else {
          setPtnfExc((PolicyTypeNotFoundException)value);
        }
        break;

      case NF_EXC:
        if (value == null) {
          unsetNfExc();
        } else {
          setNfExc((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case PTNF_EXC:
        return getPtnfExc();

      case NF_EXC:
        return getNfExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PTNF_EXC:
        return isSetPtnfExc();
      case NF_EXC:
        return isSetNfExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changePatientPolicy_result)
        return this.equals((changePatientPolicy_result)that);
      return false;
    }

    public boolean equals(changePatientPolicy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ptnfExc = true && this.isSetPtnfExc();
      boolean that_present_ptnfExc = true && that.isSetPtnfExc();
      if (this_present_ptnfExc || that_present_ptnfExc) {
        if (!(this_present_ptnfExc && that_present_ptnfExc))
          return false;
        if (!this.ptnfExc.equals(that.ptnfExc))
          return false;
      }

      boolean this_present_nfExc = true && this.isSetNfExc();
      boolean that_present_nfExc = true && that.isSetNfExc();
      if (this_present_nfExc || that_present_nfExc) {
        if (!(this_present_nfExc && that_present_nfExc))
          return false;
        if (!this.nfExc.equals(that.nfExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(changePatientPolicy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      changePatientPolicy_result typedOther = (changePatientPolicy_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPtnfExc()).compareTo(typedOther.isSetPtnfExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPtnfExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ptnfExc, typedOther.ptnfExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNfExc()).compareTo(typedOther.isSetNfExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNfExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nfExc, typedOther.nfExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changePatientPolicy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ptnfExc:");
      if (this.ptnfExc == null) {
        sb.append("null");
      } else {
        sb.append(this.ptnfExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nfExc:");
      if (this.nfExc == null) {
        sb.append("null");
      } else {
        sb.append(this.nfExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePatientPolicy_resultStandardSchemeFactory implements SchemeFactory {
      public changePatientPolicy_resultStandardScheme getScheme() {
        return new changePatientPolicy_resultStandardScheme();
      }
    }

    private static class changePatientPolicy_resultStandardScheme extends StandardScheme<changePatientPolicy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePatientPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PTNF_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ptnfExc = new PolicyTypeNotFoundException();
                struct.ptnfExc.read(iprot);
                struct.setPtnfExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NF_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nfExc = new NotFoundException();
                struct.nfExc.read(iprot);
                struct.setNfExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePatientPolicy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ptnfExc != null) {
          oprot.writeFieldBegin(PTNF_EXC_FIELD_DESC);
          struct.ptnfExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nfExc != null) {
          oprot.writeFieldBegin(NF_EXC_FIELD_DESC);
          struct.nfExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePatientPolicy_resultTupleSchemeFactory implements SchemeFactory {
      public changePatientPolicy_resultTupleScheme getScheme() {
        return new changePatientPolicy_resultTupleScheme();
      }
    }

    private static class changePatientPolicy_resultTupleScheme extends TupleScheme<changePatientPolicy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePatientPolicy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetPtnfExc()) {
          optionals.set(1);
        }
        if (struct.isSetNfExc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetPtnfExc()) {
          struct.ptnfExc.write(oprot);
        }
        if (struct.isSetNfExc()) {
          struct.nfExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePatientPolicy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ptnfExc = new PolicyTypeNotFoundException();
          struct.ptnfExc.read(iprot);
          struct.setPtnfExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nfExc = new NotFoundException();
          struct.nfExc.read(iprot);
          struct.setNfExcIsSet(true);
        }
      }
    }

  }

  public static class getPatientInfo_args implements org.apache.thrift.TBase<getPatientInfo_args, getPatientInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientInfo_args");

    private static final org.apache.thrift.protocol.TField PATIENT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("patientIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientInfo_argsTupleSchemeFactory());
    }

    public List<Integer> patientIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT_IDS((short)1, "patientIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT_IDS
            return PATIENT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT_IDS, new org.apache.thrift.meta_data.FieldMetaData("patientIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientInfo_args.class, metaDataMap);
    }

    public getPatientInfo_args() {
    }

    public getPatientInfo_args(
      List<Integer> patientIds)
    {
      this();
      this.patientIds = patientIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientInfo_args(getPatientInfo_args other) {
      if (other.isSetPatientIds()) {
        List<Integer> __this__patientIds = new ArrayList<Integer>();
        for (Integer other_element : other.patientIds) {
          __this__patientIds.add(other_element);
        }
        this.patientIds = __this__patientIds;
      }
    }

    public getPatientInfo_args deepCopy() {
      return new getPatientInfo_args(this);
    }

    @Override
    public void clear() {
      this.patientIds = null;
    }

    public int getPatientIdsSize() {
      return (this.patientIds == null) ? 0 : this.patientIds.size();
    }

    public java.util.Iterator<Integer> getPatientIdsIterator() {
      return (this.patientIds == null) ? null : this.patientIds.iterator();
    }

    public void addToPatientIds(int elem) {
      if (this.patientIds == null) {
        this.patientIds = new ArrayList<Integer>();
      }
      this.patientIds.add(elem);
    }

    public List<Integer> getPatientIds() {
      return this.patientIds;
    }

    public getPatientInfo_args setPatientIds(List<Integer> patientIds) {
      this.patientIds = patientIds;
      return this;
    }

    public void unsetPatientIds() {
      this.patientIds = null;
    }

    /** Returns true if field patientIds is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientIds() {
      return this.patientIds != null;
    }

    public void setPatientIdsIsSet(boolean value) {
      if (!value) {
        this.patientIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATIENT_IDS:
        if (value == null) {
          unsetPatientIds();
        } else {
          setPatientIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT_IDS:
        return getPatientIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATIENT_IDS:
        return isSetPatientIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientInfo_args)
        return this.equals((getPatientInfo_args)that);
      return false;
    }

    public boolean equals(getPatientInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_patientIds = true && this.isSetPatientIds();
      boolean that_present_patientIds = true && that.isSetPatientIds();
      if (this_present_patientIds || that_present_patientIds) {
        if (!(this_present_patientIds && that_present_patientIds))
          return false;
        if (!this.patientIds.equals(that.patientIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientInfo_args typedOther = (getPatientInfo_args)other;

      lastComparison = Boolean.valueOf(isSetPatientIds()).compareTo(typedOther.isSetPatientIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientIds, typedOther.patientIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientInfo_args(");
      boolean first = true;

      sb.append("patientIds:");
      if (this.patientIds == null) {
        sb.append("null");
      } else {
        sb.append(this.patientIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientInfo_argsStandardScheme getScheme() {
        return new getPatientInfo_argsStandardScheme();
      }
    }

    private static class getPatientInfo_argsStandardScheme extends StandardScheme<getPatientInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                  struct.patientIds = new ArrayList<Integer>(_list76.size);
                  for (int _i77 = 0; _i77 < _list76.size; ++_i77)
                  {
                    int _elem78; // required
                    _elem78 = iprot.readI32();
                    struct.patientIds.add(_elem78);
                  }
                  iprot.readListEnd();
                }
                struct.setPatientIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.patientIds != null) {
          oprot.writeFieldBegin(PATIENT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.patientIds.size()));
            for (int _iter79 : struct.patientIds)
            {
              oprot.writeI32(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientInfo_argsTupleScheme getScheme() {
        return new getPatientInfo_argsTupleScheme();
      }
    }

    private static class getPatientInfo_argsTupleScheme extends TupleScheme<getPatientInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatientIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPatientIds()) {
          {
            oprot.writeI32(struct.patientIds.size());
            for (int _iter80 : struct.patientIds)
            {
              oprot.writeI32(_iter80);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.patientIds = new ArrayList<Integer>(_list81.size);
            for (int _i82 = 0; _i82 < _list81.size; ++_i82)
            {
              int _elem83; // required
              _elem83 = iprot.readI32();
              struct.patientIds.add(_elem83);
            }
          }
          struct.setPatientIdsIsSet(true);
        }
      }
    }

  }

  public static class getPatientInfo_result implements org.apache.thrift.TBase<getPatientInfo_result, getPatientInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientInfo_resultTupleSchemeFactory());
    }

    public Map<Integer,PatientInfo> success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientInfo.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientInfo_result.class, metaDataMap);
    }

    public getPatientInfo_result() {
    }

    public getPatientInfo_result(
      Map<Integer,PatientInfo> success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientInfo_result(getPatientInfo_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,PatientInfo> __this__success = new HashMap<Integer,PatientInfo>();
        for (Map.Entry<Integer, PatientInfo> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          PatientInfo other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          PatientInfo __this__success_copy_value = new PatientInfo(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public getPatientInfo_result deepCopy() {
      return new getPatientInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, PatientInfo val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,PatientInfo>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,PatientInfo> getSuccess() {
      return this.success;
    }

    public getPatientInfo_result setSuccess(Map<Integer,PatientInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getPatientInfo_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public getPatientInfo_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,PatientInfo>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientInfo_result)
        return this.equals((getPatientInfo_result)that);
      return false;
    }

    public boolean equals(getPatientInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientInfo_result typedOther = (getPatientInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientInfo_resultStandardScheme getScheme() {
        return new getPatientInfo_resultStandardScheme();
      }
    }

    private static class getPatientInfo_resultStandardScheme extends StandardScheme<getPatientInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,PatientInfo>(2*_map84.size);
                  for (int _i85 = 0; _i85 < _map84.size; ++_i85)
                  {
                    int _key86; // required
                    PatientInfo _val87; // required
                    _key86 = iprot.readI32();
                    _val87 = new PatientInfo();
                    _val87.read(iprot);
                    struct.success.put(_key86, _val87);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<Integer, PatientInfo> _iter88 : struct.success.entrySet())
            {
              oprot.writeI32(_iter88.getKey());
              _iter88.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientInfo_resultTupleScheme getScheme() {
        return new getPatientInfo_resultTupleScheme();
      }
    }

    private static class getPatientInfo_resultTupleScheme extends TupleScheme<getPatientInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, PatientInfo> _iter89 : struct.success.entrySet())
            {
              oprot.writeI32(_iter89.getKey());
              _iter89.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<Integer,PatientInfo>(2*_map90.size);
            for (int _i91 = 0; _i91 < _map90.size; ++_i91)
            {
              int _key92; // required
              PatientInfo _val93; // required
              _key92 = iprot.readI32();
              _val93 = new PatientInfo();
              _val93.read(iprot);
              struct.success.put(_key92, _val93);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class getPatientContacts_args implements org.apache.thrift.TBase<getPatientContacts_args, getPatientContacts_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientContacts_args");

    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientContacts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientContacts_argsTupleSchemeFactory());
    }

    public int patientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT_ID((short)1, "patientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT_ID
            return PATIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PATIENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientContacts_args.class, metaDataMap);
    }

    public getPatientContacts_args() {
    }

    public getPatientContacts_args(
      int patientId)
    {
      this();
      this.patientId = patientId;
      setPatientIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientContacts_args(getPatientContacts_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.patientId = other.patientId;
    }

    public getPatientContacts_args deepCopy() {
      return new getPatientContacts_args(this);
    }

    @Override
    public void clear() {
      setPatientIdIsSet(false);
      this.patientId = 0;
    }

    public int getPatientId() {
      return this.patientId;
    }

    public getPatientContacts_args setPatientId(int patientId) {
      this.patientId = patientId;
      setPatientIdIsSet(true);
      return this;
    }

    public void unsetPatientId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientId() {
      return EncodingUtils.testBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    public void setPatientIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATIENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATIENT_ID:
        if (value == null) {
          unsetPatientId();
        } else {
          setPatientId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT_ID:
        return Integer.valueOf(getPatientId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATIENT_ID:
        return isSetPatientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientContacts_args)
        return this.equals((getPatientContacts_args)that);
      return false;
    }

    public boolean equals(getPatientContacts_args that) {
      if (that == null)
        return false;

      boolean this_present_patientId = true;
      boolean that_present_patientId = true;
      if (this_present_patientId || that_present_patientId) {
        if (!(this_present_patientId && that_present_patientId))
          return false;
        if (this.patientId != that.patientId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientContacts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientContacts_args typedOther = (getPatientContacts_args)other;

      lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(typedOther.isSetPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, typedOther.patientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientContacts_args(");
      boolean first = true;

      sb.append("patientId:");
      sb.append(this.patientId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientContacts_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientContacts_argsStandardScheme getScheme() {
        return new getPatientContacts_argsStandardScheme();
      }
    }

    private static class getPatientContacts_argsStandardScheme extends StandardScheme<getPatientContacts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientContacts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.patientId = iprot.readI32();
                struct.setPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientContacts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.patientId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientContacts_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientContacts_argsTupleScheme getScheme() {
        return new getPatientContacts_argsTupleScheme();
      }
    }

    private static class getPatientContacts_argsTupleScheme extends TupleScheme<getPatientContacts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientContacts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPatientId()) {
          oprot.writeI32(struct.patientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientContacts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.patientId = iprot.readI32();
          struct.setPatientIdIsSet(true);
        }
      }
    }

  }

  public static class getPatientContacts_result implements org.apache.thrift.TBase<getPatientContacts_result, getPatientContacts_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientContacts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientContacts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientContacts_resultTupleSchemeFactory());
    }

    public List<Contact> success; // required
    public NotFoundException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contact.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientContacts_result.class, metaDataMap);
    }

    public getPatientContacts_result() {
    }

    public getPatientContacts_result(
      List<Contact> success,
      NotFoundException exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientContacts_result(getPatientContacts_result other) {
      if (other.isSetSuccess()) {
        List<Contact> __this__success = new ArrayList<Contact>();
        for (Contact other_element : other.success) {
          __this__success.add(new Contact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
    }

    public getPatientContacts_result deepCopy() {
      return new getPatientContacts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Contact> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Contact elem) {
      if (this.success == null) {
        this.success = new ArrayList<Contact>();
      }
      this.success.add(elem);
    }

    public List<Contact> getSuccess() {
      return this.success;
    }

    public getPatientContacts_result setSuccess(List<Contact> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getPatientContacts_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Contact>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientContacts_result)
        return this.equals((getPatientContacts_result)that);
      return false;
    }

    public boolean equals(getPatientContacts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientContacts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientContacts_result typedOther = (getPatientContacts_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientContacts_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientContacts_resultStandardScheme getScheme() {
        return new getPatientContacts_resultStandardScheme();
      }
    }

    private static class getPatientContacts_resultStandardScheme extends StandardScheme<getPatientContacts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientContacts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                  struct.success = new ArrayList<Contact>(_list94.size);
                  for (int _i95 = 0; _i95 < _list94.size; ++_i95)
                  {
                    Contact _elem96; // required
                    _elem96 = new Contact();
                    _elem96.read(iprot);
                    struct.success.add(_elem96);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientContacts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Contact _iter97 : struct.success)
            {
              _iter97.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientContacts_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientContacts_resultTupleScheme getScheme() {
        return new getPatientContacts_resultTupleScheme();
      }
    }

    private static class getPatientContacts_resultTupleScheme extends TupleScheme<getPatientContacts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientContacts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Contact _iter98 : struct.success)
            {
              _iter98.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientContacts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Contact>(_list99.size);
            for (int _i100 = 0; _i100 < _list99.size; ++_i100)
            {
              Contact _elem101; // required
              _elem101 = new Contact();
              _elem101.read(iprot);
              struct.success.add(_elem101);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getPatientOrgStructures_args implements org.apache.thrift.TBase<getPatientOrgStructures_args, getPatientOrgStructures_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientOrgStructures_args");

    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientOrgStructures_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientOrgStructures_argsTupleSchemeFactory());
    }

    public int parentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARENT_ID((short)1, "parentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARENT_ID
            return PARENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientOrgStructures_args.class, metaDataMap);
    }

    public getPatientOrgStructures_args() {
    }

    public getPatientOrgStructures_args(
      int parentId)
    {
      this();
      this.parentId = parentId;
      setParentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientOrgStructures_args(getPatientOrgStructures_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.parentId = other.parentId;
    }

    public getPatientOrgStructures_args deepCopy() {
      return new getPatientOrgStructures_args(this);
    }

    @Override
    public void clear() {
      setParentIdIsSet(false);
      this.parentId = 0;
    }

    public int getParentId() {
      return this.parentId;
    }

    public getPatientOrgStructures_args setParentId(int parentId) {
      this.parentId = parentId;
      setParentIdIsSet(true);
      return this;
    }

    public void unsetParentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    public void setParentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARENT_ID:
        return Integer.valueOf(getParentId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARENT_ID:
        return isSetParentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientOrgStructures_args)
        return this.equals((getPatientOrgStructures_args)that);
      return false;
    }

    public boolean equals(getPatientOrgStructures_args that) {
      if (that == null)
        return false;

      boolean this_present_parentId = true;
      boolean that_present_parentId = true;
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (this.parentId != that.parentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientOrgStructures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientOrgStructures_args typedOther = (getPatientOrgStructures_args)other;

      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(typedOther.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, typedOther.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientOrgStructures_args(");
      boolean first = true;

      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientOrgStructures_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientOrgStructures_argsStandardScheme getScheme() {
        return new getPatientOrgStructures_argsStandardScheme();
      }
    }

    private static class getPatientOrgStructures_argsStandardScheme extends StandardScheme<getPatientOrgStructures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientOrgStructures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.parentId = iprot.readI32();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientOrgStructures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI32(struct.parentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientOrgStructures_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientOrgStructures_argsTupleScheme getScheme() {
        return new getPatientOrgStructures_argsTupleScheme();
      }
    }

    private static class getPatientOrgStructures_argsTupleScheme extends TupleScheme<getPatientOrgStructures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientOrgStructures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParentId()) {
          oprot.writeI32(struct.parentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientOrgStructures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.parentId = iprot.readI32();
          struct.setParentIdIsSet(true);
        }
      }
    }

  }

  public static class getPatientOrgStructures_result implements org.apache.thrift.TBase<getPatientOrgStructures_result, getPatientOrgStructures_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientOrgStructures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientOrgStructures_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientOrgStructures_resultTupleSchemeFactory());
    }

    public List<OrgStructuresProperties> success; // required
    public NotFoundException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrgStructuresProperties.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientOrgStructures_result.class, metaDataMap);
    }

    public getPatientOrgStructures_result() {
    }

    public getPatientOrgStructures_result(
      List<OrgStructuresProperties> success,
      NotFoundException exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientOrgStructures_result(getPatientOrgStructures_result other) {
      if (other.isSetSuccess()) {
        List<OrgStructuresProperties> __this__success = new ArrayList<OrgStructuresProperties>();
        for (OrgStructuresProperties other_element : other.success) {
          __this__success.add(new OrgStructuresProperties(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
    }

    public getPatientOrgStructures_result deepCopy() {
      return new getPatientOrgStructures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OrgStructuresProperties> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OrgStructuresProperties elem) {
      if (this.success == null) {
        this.success = new ArrayList<OrgStructuresProperties>();
      }
      this.success.add(elem);
    }

    public List<OrgStructuresProperties> getSuccess() {
      return this.success;
    }

    public getPatientOrgStructures_result setSuccess(List<OrgStructuresProperties> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getPatientOrgStructures_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OrgStructuresProperties>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientOrgStructures_result)
        return this.equals((getPatientOrgStructures_result)that);
      return false;
    }

    public boolean equals(getPatientOrgStructures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientOrgStructures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientOrgStructures_result typedOther = (getPatientOrgStructures_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientOrgStructures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientOrgStructures_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientOrgStructures_resultStandardScheme getScheme() {
        return new getPatientOrgStructures_resultStandardScheme();
      }
    }

    private static class getPatientOrgStructures_resultStandardScheme extends StandardScheme<getPatientOrgStructures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientOrgStructures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                  struct.success = new ArrayList<OrgStructuresProperties>(_list102.size);
                  for (int _i103 = 0; _i103 < _list102.size; ++_i103)
                  {
                    OrgStructuresProperties _elem104; // required
                    _elem104 = new OrgStructuresProperties();
                    _elem104.read(iprot);
                    struct.success.add(_elem104);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientOrgStructures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OrgStructuresProperties _iter105 : struct.success)
            {
              _iter105.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientOrgStructures_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientOrgStructures_resultTupleScheme getScheme() {
        return new getPatientOrgStructures_resultTupleScheme();
      }
    }

    private static class getPatientOrgStructures_resultTupleScheme extends TupleScheme<getPatientOrgStructures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientOrgStructures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OrgStructuresProperties _iter106 : struct.success)
            {
              _iter106.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientOrgStructures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OrgStructuresProperties>(_list107.size);
            for (int _i108 = 0; _i108 < _list107.size; ++_i108)
            {
              OrgStructuresProperties _elem109; // required
              _elem109 = new OrgStructuresProperties();
              _elem109.read(iprot);
              struct.success.add(_elem109);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class enqueuePatient_args implements org.apache.thrift.TBase<enqueuePatient_args, enqueuePatient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enqueuePatient_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueuePatient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueuePatient_argsTupleSchemeFactory());
    }

    public EnqueuePatientParameters params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EnqueuePatientParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enqueuePatient_args.class, metaDataMap);
    }

    public enqueuePatient_args() {
    }

    public enqueuePatient_args(
      EnqueuePatientParameters params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueuePatient_args(enqueuePatient_args other) {
      if (other.isSetParams()) {
        this.params = new EnqueuePatientParameters(other.params);
      }
    }

    public enqueuePatient_args deepCopy() {
      return new enqueuePatient_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public EnqueuePatientParameters getParams() {
      return this.params;
    }

    public enqueuePatient_args setParams(EnqueuePatientParameters params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((EnqueuePatientParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueuePatient_args)
        return this.equals((enqueuePatient_args)that);
      return false;
    }

    public boolean equals(enqueuePatient_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enqueuePatient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enqueuePatient_args typedOther = (enqueuePatient_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueuePatient_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueuePatient_argsStandardSchemeFactory implements SchemeFactory {
      public enqueuePatient_argsStandardScheme getScheme() {
        return new enqueuePatient_argsStandardScheme();
      }
    }

    private static class enqueuePatient_argsStandardScheme extends StandardScheme<enqueuePatient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enqueuePatient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new EnqueuePatientParameters();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enqueuePatient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueuePatient_argsTupleSchemeFactory implements SchemeFactory {
      public enqueuePatient_argsTupleScheme getScheme() {
        return new enqueuePatient_argsTupleScheme();
      }
    }

    private static class enqueuePatient_argsTupleScheme extends TupleScheme<enqueuePatient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enqueuePatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enqueuePatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.params = new EnqueuePatientParameters();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class enqueuePatient_result implements org.apache.thrift.TBase<enqueuePatient_result, enqueuePatient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enqueuePatient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueuePatient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueuePatient_resultTupleSchemeFactory());
    }

    public EnqueuePatientStatus success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EnqueuePatientStatus.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enqueuePatient_result.class, metaDataMap);
    }

    public enqueuePatient_result() {
    }

    public enqueuePatient_result(
      EnqueuePatientStatus success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueuePatient_result(enqueuePatient_result other) {
      if (other.isSetSuccess()) {
        this.success = new EnqueuePatientStatus(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public enqueuePatient_result deepCopy() {
      return new enqueuePatient_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public EnqueuePatientStatus getSuccess() {
      return this.success;
    }

    public enqueuePatient_result setSuccess(EnqueuePatientStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public enqueuePatient_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public enqueuePatient_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EnqueuePatientStatus)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueuePatient_result)
        return this.equals((enqueuePatient_result)that);
      return false;
    }

    public boolean equals(enqueuePatient_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enqueuePatient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enqueuePatient_result typedOther = (enqueuePatient_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueuePatient_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueuePatient_resultStandardSchemeFactory implements SchemeFactory {
      public enqueuePatient_resultStandardScheme getScheme() {
        return new enqueuePatient_resultStandardScheme();
      }
    }

    private static class enqueuePatient_resultStandardScheme extends StandardScheme<enqueuePatient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enqueuePatient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EnqueuePatientStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enqueuePatient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueuePatient_resultTupleSchemeFactory implements SchemeFactory {
      public enqueuePatient_resultTupleScheme getScheme() {
        return new enqueuePatient_resultTupleScheme();
      }
    }

    private static class enqueuePatient_resultTupleScheme extends TupleScheme<enqueuePatient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enqueuePatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enqueuePatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new EnqueuePatientStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class getPatientQueue_args implements org.apache.thrift.TBase<getPatientQueue_args, getPatientQueue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientQueue_args");

    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientQueue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientQueue_argsTupleSchemeFactory());
    }

    public int parentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARENT_ID((short)1, "parentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARENT_ID
            return PARENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientQueue_args.class, metaDataMap);
    }

    public getPatientQueue_args() {
    }

    public getPatientQueue_args(
      int parentId)
    {
      this();
      this.parentId = parentId;
      setParentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientQueue_args(getPatientQueue_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.parentId = other.parentId;
    }

    public getPatientQueue_args deepCopy() {
      return new getPatientQueue_args(this);
    }

    @Override
    public void clear() {
      setParentIdIsSet(false);
      this.parentId = 0;
    }

    public int getParentId() {
      return this.parentId;
    }

    public getPatientQueue_args setParentId(int parentId) {
      this.parentId = parentId;
      setParentIdIsSet(true);
      return this;
    }

    public void unsetParentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    public void setParentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARENT_ID:
        return Integer.valueOf(getParentId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARENT_ID:
        return isSetParentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientQueue_args)
        return this.equals((getPatientQueue_args)that);
      return false;
    }

    public boolean equals(getPatientQueue_args that) {
      if (that == null)
        return false;

      boolean this_present_parentId = true;
      boolean that_present_parentId = true;
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (this.parentId != that.parentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientQueue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientQueue_args typedOther = (getPatientQueue_args)other;

      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(typedOther.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, typedOther.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientQueue_args(");
      boolean first = true;

      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientQueue_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientQueue_argsStandardScheme getScheme() {
        return new getPatientQueue_argsStandardScheme();
      }
    }

    private static class getPatientQueue_argsStandardScheme extends StandardScheme<getPatientQueue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientQueue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.parentId = iprot.readI32();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientQueue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI32(struct.parentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientQueue_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientQueue_argsTupleScheme getScheme() {
        return new getPatientQueue_argsTupleScheme();
      }
    }

    private static class getPatientQueue_argsTupleScheme extends TupleScheme<getPatientQueue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientQueue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParentId()) {
          oprot.writeI32(struct.parentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientQueue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.parentId = iprot.readI32();
          struct.setParentIdIsSet(true);
        }
      }
    }

  }

  public static class getPatientQueue_result implements org.apache.thrift.TBase<getPatientQueue_result, getPatientQueue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientQueue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientQueue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientQueue_resultTupleSchemeFactory());
    }

    public List<Queue> success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Queue.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientQueue_result.class, metaDataMap);
    }

    public getPatientQueue_result() {
    }

    public getPatientQueue_result(
      List<Queue> success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientQueue_result(getPatientQueue_result other) {
      if (other.isSetSuccess()) {
        List<Queue> __this__success = new ArrayList<Queue>();
        for (Queue other_element : other.success) {
          __this__success.add(new Queue(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public getPatientQueue_result deepCopy() {
      return new getPatientQueue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Queue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Queue elem) {
      if (this.success == null) {
        this.success = new ArrayList<Queue>();
      }
      this.success.add(elem);
    }

    public List<Queue> getSuccess() {
      return this.success;
    }

    public getPatientQueue_result setSuccess(List<Queue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public getPatientQueue_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public getPatientQueue_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Queue>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientQueue_result)
        return this.equals((getPatientQueue_result)that);
      return false;
    }

    public boolean equals(getPatientQueue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientQueue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientQueue_result typedOther = (getPatientQueue_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientQueue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientQueue_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientQueue_resultStandardScheme getScheme() {
        return new getPatientQueue_resultStandardScheme();
      }
    }

    private static class getPatientQueue_resultStandardScheme extends StandardScheme<getPatientQueue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientQueue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                  struct.success = new ArrayList<Queue>(_list110.size);
                  for (int _i111 = 0; _i111 < _list110.size; ++_i111)
                  {
                    Queue _elem112; // required
                    _elem112 = new Queue();
                    _elem112.read(iprot);
                    struct.success.add(_elem112);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientQueue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Queue _iter113 : struct.success)
            {
              _iter113.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientQueue_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientQueue_resultTupleScheme getScheme() {
        return new getPatientQueue_resultTupleScheme();
      }
    }

    private static class getPatientQueue_resultTupleScheme extends TupleScheme<getPatientQueue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientQueue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Queue _iter114 : struct.success)
            {
              _iter114.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientQueue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Queue>(_list115.size);
            for (int _i116 = 0; _i116 < _list115.size; ++_i116)
            {
              Queue _elem117; // required
              _elem117 = new Queue();
              _elem117.read(iprot);
              struct.success.add(_elem117);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class dequeuePatient_args implements org.apache.thrift.TBase<dequeuePatient_args, dequeuePatient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dequeuePatient_args");

    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField QUEUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queueId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dequeuePatient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dequeuePatient_argsTupleSchemeFactory());
    }

    public int patientId; // required
    public int queueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT_ID((short)1, "patientId"),
      QUEUE_ID((short)2, "queueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT_ID
            return PATIENT_ID;
          case 2: // QUEUE_ID
            return QUEUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PATIENTID_ISSET_ID = 0;
    private static final int __QUEUEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QUEUE_ID, new org.apache.thrift.meta_data.FieldMetaData("queueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dequeuePatient_args.class, metaDataMap);
    }

    public dequeuePatient_args() {
    }

    public dequeuePatient_args(
      int patientId,
      int queueId)
    {
      this();
      this.patientId = patientId;
      setPatientIdIsSet(true);
      this.queueId = queueId;
      setQueueIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dequeuePatient_args(dequeuePatient_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.patientId = other.patientId;
      this.queueId = other.queueId;
    }

    public dequeuePatient_args deepCopy() {
      return new dequeuePatient_args(this);
    }

    @Override
    public void clear() {
      setPatientIdIsSet(false);
      this.patientId = 0;
      setQueueIdIsSet(false);
      this.queueId = 0;
    }

    public int getPatientId() {
      return this.patientId;
    }

    public dequeuePatient_args setPatientId(int patientId) {
      this.patientId = patientId;
      setPatientIdIsSet(true);
      return this;
    }

    public void unsetPatientId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientId() {
      return EncodingUtils.testBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    public void setPatientIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATIENTID_ISSET_ID, value);
    }

    public int getQueueId() {
      return this.queueId;
    }

    public dequeuePatient_args setQueueId(int queueId) {
      this.queueId = queueId;
      setQueueIdIsSet(true);
      return this;
    }

    public void unsetQueueId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUEID_ISSET_ID);
    }

    /** Returns true if field queueId is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueId() {
      return EncodingUtils.testBit(__isset_bitfield, __QUEUEID_ISSET_ID);
    }

    public void setQueueIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATIENT_ID:
        if (value == null) {
          unsetPatientId();
        } else {
          setPatientId((Integer)value);
        }
        break;

      case QUEUE_ID:
        if (value == null) {
          unsetQueueId();
        } else {
          setQueueId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT_ID:
        return Integer.valueOf(getPatientId());

      case QUEUE_ID:
        return Integer.valueOf(getQueueId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATIENT_ID:
        return isSetPatientId();
      case QUEUE_ID:
        return isSetQueueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dequeuePatient_args)
        return this.equals((dequeuePatient_args)that);
      return false;
    }

    public boolean equals(dequeuePatient_args that) {
      if (that == null)
        return false;

      boolean this_present_patientId = true;
      boolean that_present_patientId = true;
      if (this_present_patientId || that_present_patientId) {
        if (!(this_present_patientId && that_present_patientId))
          return false;
        if (this.patientId != that.patientId)
          return false;
      }

      boolean this_present_queueId = true;
      boolean that_present_queueId = true;
      if (this_present_queueId || that_present_queueId) {
        if (!(this_present_queueId && that_present_queueId))
          return false;
        if (this.queueId != that.queueId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dequeuePatient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dequeuePatient_args typedOther = (dequeuePatient_args)other;

      lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(typedOther.isSetPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, typedOther.patientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQueueId()).compareTo(typedOther.isSetQueueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueId, typedOther.queueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dequeuePatient_args(");
      boolean first = true;

      sb.append("patientId:");
      sb.append(this.patientId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueId:");
      sb.append(this.queueId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dequeuePatient_argsStandardSchemeFactory implements SchemeFactory {
      public dequeuePatient_argsStandardScheme getScheme() {
        return new dequeuePatient_argsStandardScheme();
      }
    }

    private static class dequeuePatient_argsStandardScheme extends StandardScheme<dequeuePatient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dequeuePatient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.patientId = iprot.readI32();
                struct.setPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUEUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.queueId = iprot.readI32();
                struct.setQueueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dequeuePatient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.patientId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUEUE_ID_FIELD_DESC);
        oprot.writeI32(struct.queueId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dequeuePatient_argsTupleSchemeFactory implements SchemeFactory {
      public dequeuePatient_argsTupleScheme getScheme() {
        return new dequeuePatient_argsTupleScheme();
      }
    }

    private static class dequeuePatient_argsTupleScheme extends TupleScheme<dequeuePatient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dequeuePatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatientId()) {
          optionals.set(0);
        }
        if (struct.isSetQueueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPatientId()) {
          oprot.writeI32(struct.patientId);
        }
        if (struct.isSetQueueId()) {
          oprot.writeI32(struct.queueId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dequeuePatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.patientId = iprot.readI32();
          struct.setPatientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.queueId = iprot.readI32();
          struct.setQueueIdIsSet(true);
        }
      }
    }

  }

  public static class dequeuePatient_result implements org.apache.thrift.TBase<dequeuePatient_result, dequeuePatient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dequeuePatient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCSQL_FIELD_DESC = new org.apache.thrift.protocol.TField("excsql", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dequeuePatient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dequeuePatient_resultTupleSchemeFactory());
    }

    public DequeuePatientStatus success; // required
    public NotFoundException exc; // required
    public SQLException excsql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      EXCSQL((short)2, "excsql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // EXCSQL
            return EXCSQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DequeuePatientStatus.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCSQL, new org.apache.thrift.meta_data.FieldMetaData("excsql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dequeuePatient_result.class, metaDataMap);
    }

    public dequeuePatient_result() {
    }

    public dequeuePatient_result(
      DequeuePatientStatus success,
      NotFoundException exc,
      SQLException excsql)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.excsql = excsql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dequeuePatient_result(dequeuePatient_result other) {
      if (other.isSetSuccess()) {
        this.success = new DequeuePatientStatus(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new NotFoundException(other.exc);
      }
      if (other.isSetExcsql()) {
        this.excsql = new SQLException(other.excsql);
      }
    }

    public dequeuePatient_result deepCopy() {
      return new dequeuePatient_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.excsql = null;
    }

    public DequeuePatientStatus getSuccess() {
      return this.success;
    }

    public dequeuePatient_result setSuccess(DequeuePatientStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getExc() {
      return this.exc;
    }

    public dequeuePatient_result setExc(NotFoundException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public SQLException getExcsql() {
      return this.excsql;
    }

    public dequeuePatient_result setExcsql(SQLException excsql) {
      this.excsql = excsql;
      return this;
    }

    public void unsetExcsql() {
      this.excsql = null;
    }

    /** Returns true if field excsql is set (has been assigned a value) and false otherwise */
    public boolean isSetExcsql() {
      return this.excsql != null;
    }

    public void setExcsqlIsSet(boolean value) {
      if (!value) {
        this.excsql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DequeuePatientStatus)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotFoundException)value);
        }
        break;

      case EXCSQL:
        if (value == null) {
          unsetExcsql();
        } else {
          setExcsql((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case EXCSQL:
        return getExcsql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case EXCSQL:
        return isSetExcsql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dequeuePatient_result)
        return this.equals((dequeuePatient_result)that);
      return false;
    }

    public boolean equals(dequeuePatient_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_excsql = true && this.isSetExcsql();
      boolean that_present_excsql = true && that.isSetExcsql();
      if (this_present_excsql || that_present_excsql) {
        if (!(this_present_excsql && that_present_excsql))
          return false;
        if (!this.excsql.equals(that.excsql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dequeuePatient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dequeuePatient_result typedOther = (dequeuePatient_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcsql()).compareTo(typedOther.isSetExcsql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcsql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excsql, typedOther.excsql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dequeuePatient_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excsql:");
      if (this.excsql == null) {
        sb.append("null");
      } else {
        sb.append(this.excsql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dequeuePatient_resultStandardSchemeFactory implements SchemeFactory {
      public dequeuePatient_resultStandardScheme getScheme() {
        return new dequeuePatient_resultStandardScheme();
      }
    }

    private static class dequeuePatient_resultStandardScheme extends StandardScheme<dequeuePatient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dequeuePatient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DequeuePatientStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotFoundException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCSQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excsql = new SQLException();
                struct.excsql.read(iprot);
                struct.setExcsqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dequeuePatient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.excsql != null) {
          oprot.writeFieldBegin(EXCSQL_FIELD_DESC);
          struct.excsql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dequeuePatient_resultTupleSchemeFactory implements SchemeFactory {
      public dequeuePatient_resultTupleScheme getScheme() {
        return new dequeuePatient_resultTupleScheme();
      }
    }

    private static class dequeuePatient_resultTupleScheme extends TupleScheme<dequeuePatient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dequeuePatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetExcsql()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExcsql()) {
          struct.excsql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dequeuePatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new DequeuePatientStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotFoundException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.excsql = new SQLException();
          struct.excsql.read(iprot);
          struct.setExcsqlIsSet(true);
        }
      }
    }

  }

  public static class getSpecialities_args implements org.apache.thrift.TBase<getSpecialities_args, getSpecialities_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecialities_args");

    private static final org.apache.thrift.protocol.TField HOSPITAL_UID_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("hospitalUidFrom", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpecialities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpecialities_argsTupleSchemeFactory());
    }

    public String hospitalUidFrom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOSPITAL_UID_FROM((short)1, "hospitalUidFrom");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOSPITAL_UID_FROM
            return HOSPITAL_UID_FROM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOSPITAL_UID_FROM, new org.apache.thrift.meta_data.FieldMetaData("hospitalUidFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecialities_args.class, metaDataMap);
    }

    public getSpecialities_args() {
    }

    public getSpecialities_args(
      String hospitalUidFrom)
    {
      this();
      this.hospitalUidFrom = hospitalUidFrom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecialities_args(getSpecialities_args other) {
      if (other.isSetHospitalUidFrom()) {
        this.hospitalUidFrom = other.hospitalUidFrom;
      }
    }

    public getSpecialities_args deepCopy() {
      return new getSpecialities_args(this);
    }

    @Override
    public void clear() {
      this.hospitalUidFrom = null;
    }

    public String getHospitalUidFrom() {
      return this.hospitalUidFrom;
    }

    public getSpecialities_args setHospitalUidFrom(String hospitalUidFrom) {
      this.hospitalUidFrom = hospitalUidFrom;
      return this;
    }

    public void unsetHospitalUidFrom() {
      this.hospitalUidFrom = null;
    }

    /** Returns true if field hospitalUidFrom is set (has been assigned a value) and false otherwise */
    public boolean isSetHospitalUidFrom() {
      return this.hospitalUidFrom != null;
    }

    public void setHospitalUidFromIsSet(boolean value) {
      if (!value) {
        this.hospitalUidFrom = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOSPITAL_UID_FROM:
        if (value == null) {
          unsetHospitalUidFrom();
        } else {
          setHospitalUidFrom((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOSPITAL_UID_FROM:
        return getHospitalUidFrom();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOSPITAL_UID_FROM:
        return isSetHospitalUidFrom();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecialities_args)
        return this.equals((getSpecialities_args)that);
      return false;
    }

    public boolean equals(getSpecialities_args that) {
      if (that == null)
        return false;

      boolean this_present_hospitalUidFrom = true && this.isSetHospitalUidFrom();
      boolean that_present_hospitalUidFrom = true && that.isSetHospitalUidFrom();
      if (this_present_hospitalUidFrom || that_present_hospitalUidFrom) {
        if (!(this_present_hospitalUidFrom && that_present_hospitalUidFrom))
          return false;
        if (!this.hospitalUidFrom.equals(that.hospitalUidFrom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpecialities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpecialities_args typedOther = (getSpecialities_args)other;

      lastComparison = Boolean.valueOf(isSetHospitalUidFrom()).compareTo(typedOther.isSetHospitalUidFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHospitalUidFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hospitalUidFrom, typedOther.hospitalUidFrom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpecialities_args(");
      boolean first = true;

      sb.append("hospitalUidFrom:");
      if (this.hospitalUidFrom == null) {
        sb.append("null");
      } else {
        sb.append(this.hospitalUidFrom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecialities_argsStandardSchemeFactory implements SchemeFactory {
      public getSpecialities_argsStandardScheme getScheme() {
        return new getSpecialities_argsStandardScheme();
      }
    }

    private static class getSpecialities_argsStandardScheme extends StandardScheme<getSpecialities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecialities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOSPITAL_UID_FROM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hospitalUidFrom = iprot.readString();
                struct.setHospitalUidFromIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecialities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hospitalUidFrom != null) {
          oprot.writeFieldBegin(HOSPITAL_UID_FROM_FIELD_DESC);
          oprot.writeString(struct.hospitalUidFrom);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecialities_argsTupleSchemeFactory implements SchemeFactory {
      public getSpecialities_argsTupleScheme getScheme() {
        return new getSpecialities_argsTupleScheme();
      }
    }

    private static class getSpecialities_argsTupleScheme extends TupleScheme<getSpecialities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecialities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHospitalUidFrom()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHospitalUidFrom()) {
          oprot.writeString(struct.hospitalUidFrom);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecialities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hospitalUidFrom = iprot.readString();
          struct.setHospitalUidFromIsSet(true);
        }
      }
    }

  }

  public static class getSpecialities_result implements org.apache.thrift.TBase<getSpecialities_result, getSpecialities_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecialities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpecialities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpecialities_resultTupleSchemeFactory());
    }

    public List<Speciality> success; // required
    public SQLException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Speciality.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecialities_result.class, metaDataMap);
    }

    public getSpecialities_result() {
    }

    public getSpecialities_result(
      List<Speciality> success,
      SQLException exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecialities_result(getSpecialities_result other) {
      if (other.isSetSuccess()) {
        List<Speciality> __this__success = new ArrayList<Speciality>();
        for (Speciality other_element : other.success) {
          __this__success.add(new Speciality(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new SQLException(other.exc);
      }
    }

    public getSpecialities_result deepCopy() {
      return new getSpecialities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Speciality> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Speciality elem) {
      if (this.success == null) {
        this.success = new ArrayList<Speciality>();
      }
      this.success.add(elem);
    }

    public List<Speciality> getSuccess() {
      return this.success;
    }

    public getSpecialities_result setSuccess(List<Speciality> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SQLException getExc() {
      return this.exc;
    }

    public getSpecialities_result setExc(SQLException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Speciality>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecialities_result)
        return this.equals((getSpecialities_result)that);
      return false;
    }

    public boolean equals(getSpecialities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpecialities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpecialities_result typedOther = (getSpecialities_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpecialities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecialities_resultStandardSchemeFactory implements SchemeFactory {
      public getSpecialities_resultStandardScheme getScheme() {
        return new getSpecialities_resultStandardScheme();
      }
    }

    private static class getSpecialities_resultStandardScheme extends StandardScheme<getSpecialities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecialities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                  struct.success = new ArrayList<Speciality>(_list118.size);
                  for (int _i119 = 0; _i119 < _list118.size; ++_i119)
                  {
                    Speciality _elem120; // required
                    _elem120 = new Speciality();
                    _elem120.read(iprot);
                    struct.success.add(_elem120);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new SQLException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecialities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Speciality _iter121 : struct.success)
            {
              _iter121.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecialities_resultTupleSchemeFactory implements SchemeFactory {
      public getSpecialities_resultTupleScheme getScheme() {
        return new getSpecialities_resultTupleScheme();
      }
    }

    private static class getSpecialities_resultTupleScheme extends TupleScheme<getSpecialities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecialities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Speciality _iter122 : struct.success)
            {
              _iter122.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecialities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list123 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Speciality>(_list123.size);
            for (int _i124 = 0; _i124 < _list123.size; ++_i124)
            {
              Speciality _elem125; // required
              _elem125 = new Speciality();
              _elem125.read(iprot);
              struct.success.add(_elem125);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new SQLException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

}
