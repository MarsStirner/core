/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Speciality implements org.apache.thrift.TBase<Speciality, Speciality._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Speciality");

    private static final org.apache.thrift.protocol.TField TICKETS_PER_MONTHS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketsPerMonths", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField TICKETS_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketsAvailable", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField SPECIALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("speciality", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new SpecialityStandardSchemeFactory());
        schemes.put(TupleScheme.class, new SpecialityTupleSchemeFactory());
    }

    public int ticketsPerMonths; // optional
    public int ticketsAvailable; // optional
    public String speciality; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        TICKETS_PER_MONTHS((short) 1, "ticketsPerMonths"),
        TICKETS_AVAILABLE((short) 2, "ticketsAvailable"),
        SPECIALITY((short) 3, "speciality");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // TICKETS_PER_MONTHS
                    return TICKETS_PER_MONTHS;
                case 2: // TICKETS_AVAILABLE
                    return TICKETS_AVAILABLE;
                case 3: // SPECIALITY
                    return SPECIALITY;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __TICKETSPERMONTHS_ISSET_ID = 0;
    private static final int __TICKETSAVAILABLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    private _Fields optionals[] = {_Fields.TICKETS_PER_MONTHS, _Fields.TICKETS_AVAILABLE, _Fields.SPECIALITY};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TICKETS_PER_MONTHS, new org.apache.thrift.meta_data.FieldMetaData("ticketsPerMonths", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TICKETS_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("ticketsAvailable", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SPECIALITY, new org.apache.thrift.meta_data.FieldMetaData("speciality", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Speciality.class, metaDataMap);
    }

    public Speciality() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Speciality(Speciality other) {
        __isset_bitfield = other.__isset_bitfield;
        this.ticketsPerMonths = other.ticketsPerMonths;
        this.ticketsAvailable = other.ticketsAvailable;
        if (other.isSetSpeciality()) {
            this.speciality = other.speciality;
        }
    }

    public Speciality deepCopy() {
        return new Speciality(this);
    }

    @Override
    public void clear() {
        setTicketsPerMonthsIsSet(false);
        this.ticketsPerMonths = 0;
        setTicketsAvailableIsSet(false);
        this.ticketsAvailable = 0;
        this.speciality = null;
    }

    public int getTicketsPerMonths() {
        return this.ticketsPerMonths;
    }

    public Speciality setTicketsPerMonths(int ticketsPerMonths) {
        this.ticketsPerMonths = ticketsPerMonths;
        setTicketsPerMonthsIsSet(true);
        return this;
    }

    public void unsetTicketsPerMonths() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKETSPERMONTHS_ISSET_ID);
    }

    /**
     * Returns true if field ticketsPerMonths is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTicketsPerMonths() {
        return EncodingUtils.testBit(__isset_bitfield, __TICKETSPERMONTHS_ISSET_ID);
    }

    public void setTicketsPerMonthsIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKETSPERMONTHS_ISSET_ID, value);
    }

    public int getTicketsAvailable() {
        return this.ticketsAvailable;
    }

    public Speciality setTicketsAvailable(int ticketsAvailable) {
        this.ticketsAvailable = ticketsAvailable;
        setTicketsAvailableIsSet(true);
        return this;
    }

    public void unsetTicketsAvailable() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKETSAVAILABLE_ISSET_ID);
    }

    /**
     * Returns true if field ticketsAvailable is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTicketsAvailable() {
        return EncodingUtils.testBit(__isset_bitfield, __TICKETSAVAILABLE_ISSET_ID);
    }

    public void setTicketsAvailableIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKETSAVAILABLE_ISSET_ID, value);
    }

    public String getSpeciality() {
        return this.speciality;
    }

    public Speciality setSpeciality(String speciality) {
        this.speciality = speciality;
        return this;
    }

    public void unsetSpeciality() {
        this.speciality = null;
    }

    /**
     * Returns true if field speciality is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSpeciality() {
        return this.speciality != null;
    }

    public void setSpecialityIsSet(boolean value) {
        if (!value) {
            this.speciality = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case TICKETS_PER_MONTHS:
                if (value == null) {
                    unsetTicketsPerMonths();
                } else {
                    setTicketsPerMonths((Integer) value);
                }
                break;

            case TICKETS_AVAILABLE:
                if (value == null) {
                    unsetTicketsAvailable();
                } else {
                    setTicketsAvailable((Integer) value);
                }
                break;

            case SPECIALITY:
                if (value == null) {
                    unsetSpeciality();
                } else {
                    setSpeciality((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case TICKETS_PER_MONTHS:
                return Integer.valueOf(getTicketsPerMonths());

            case TICKETS_AVAILABLE:
                return Integer.valueOf(getTicketsAvailable());

            case SPECIALITY:
                return getSpeciality();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case TICKETS_PER_MONTHS:
                return isSetTicketsPerMonths();
            case TICKETS_AVAILABLE:
                return isSetTicketsAvailable();
            case SPECIALITY:
                return isSetSpeciality();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Speciality)
            return this.equals((Speciality) that);
        return false;
    }

    public boolean equals(Speciality that) {
        if (that == null)
            return false;

        boolean this_present_ticketsPerMonths = true && this.isSetTicketsPerMonths();
        boolean that_present_ticketsPerMonths = true && that.isSetTicketsPerMonths();
        if (this_present_ticketsPerMonths || that_present_ticketsPerMonths) {
            if (!(this_present_ticketsPerMonths && that_present_ticketsPerMonths))
                return false;
            if (this.ticketsPerMonths != that.ticketsPerMonths)
                return false;
        }

        boolean this_present_ticketsAvailable = true && this.isSetTicketsAvailable();
        boolean that_present_ticketsAvailable = true && that.isSetTicketsAvailable();
        if (this_present_ticketsAvailable || that_present_ticketsAvailable) {
            if (!(this_present_ticketsAvailable && that_present_ticketsAvailable))
                return false;
            if (this.ticketsAvailable != that.ticketsAvailable)
                return false;
        }

        boolean this_present_speciality = true && this.isSetSpeciality();
        boolean that_present_speciality = true && that.isSetSpeciality();
        if (this_present_speciality || that_present_speciality) {
            if (!(this_present_speciality && that_present_speciality))
                return false;
            if (!this.speciality.equals(that.speciality))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(Speciality other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        Speciality typedOther = (Speciality) other;

        lastComparison = Boolean.valueOf(isSetTicketsPerMonths()).compareTo(typedOther.isSetTicketsPerMonths());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTicketsPerMonths()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketsPerMonths, typedOther.ticketsPerMonths);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTicketsAvailable()).compareTo(typedOther.isSetTicketsAvailable());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTicketsAvailable()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketsAvailable, typedOther.ticketsAvailable);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSpeciality()).compareTo(typedOther.isSetSpeciality());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSpeciality()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speciality, typedOther.speciality);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Speciality(");
        boolean first = true;

        if (isSetTicketsPerMonths()) {
            sb.append("ticketsPerMonths:");
            sb.append(this.ticketsPerMonths);
            first = false;
        }
        if (isSetTicketsAvailable()) {
            if (!first) sb.append(", ");
            sb.append("ticketsAvailable:");
            sb.append(this.ticketsAvailable);
            first = false;
        }
        if (isSetSpeciality()) {
            if (!first) sb.append(", ");
            sb.append("speciality:");
            if (this.speciality == null) {
                sb.append("null");
            } else {
                sb.append(this.speciality);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SpecialityStandardSchemeFactory implements SchemeFactory {
        public SpecialityStandardScheme getScheme() {
            return new SpecialityStandardScheme();
        }
    }

    private static class SpecialityStandardScheme extends StandardScheme<Speciality> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Speciality struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TICKETS_PER_MONTHS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.ticketsPerMonths = iprot.readI32();
                            struct.setTicketsPerMonthsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TICKETS_AVAILABLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.ticketsAvailable = iprot.readI32();
                            struct.setTicketsAvailableIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // SPECIALITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.speciality = iprot.readString();
                            struct.setSpecialityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Speciality struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetTicketsPerMonths()) {
                oprot.writeFieldBegin(TICKETS_PER_MONTHS_FIELD_DESC);
                oprot.writeI32(struct.ticketsPerMonths);
                oprot.writeFieldEnd();
            }
            if (struct.isSetTicketsAvailable()) {
                oprot.writeFieldBegin(TICKETS_AVAILABLE_FIELD_DESC);
                oprot.writeI32(struct.ticketsAvailable);
                oprot.writeFieldEnd();
            }
            if (struct.speciality != null) {
                if (struct.isSetSpeciality()) {
                    oprot.writeFieldBegin(SPECIALITY_FIELD_DESC);
                    oprot.writeString(struct.speciality);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SpecialityTupleSchemeFactory implements SchemeFactory {
        public SpecialityTupleScheme getScheme() {
            return new SpecialityTupleScheme();
        }
    }

    private static class SpecialityTupleScheme extends TupleScheme<Speciality> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Speciality struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetTicketsPerMonths()) {
                optionals.set(0);
            }
            if (struct.isSetTicketsAvailable()) {
                optionals.set(1);
            }
            if (struct.isSetSpeciality()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetTicketsPerMonths()) {
                oprot.writeI32(struct.ticketsPerMonths);
            }
            if (struct.isSetTicketsAvailable()) {
                oprot.writeI32(struct.ticketsAvailable);
            }
            if (struct.isSetSpeciality()) {
                oprot.writeString(struct.speciality);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Speciality struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.ticketsPerMonths = iprot.readI32();
                struct.setTicketsPerMonthsIsSet(true);
            }
            if (incoming.get(1)) {
                struct.ticketsAvailable = iprot.readI32();
                struct.setTicketsAvailableIsSet(true);
            }
            if (incoming.get(2)) {
                struct.speciality = iprot.readString();
                struct.setSpecialityIsSet(true);
            }
        }
    }

}

