/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * TTicket
 * Структура с данными о талончике на прием к врачу
 * @param begTime           1)Время начала талончика
 * @param endTime           2)Время конца талончика
 * @param free              3)признак, указывающий занят ли этот талончик каким-либо пациентом
 * @param available         4)признак, указывающий доступен ли этот талончик для записи
 * @param patientId         5) OPTIONAL: Идентификатор пациента, который занял этот талончик
 * @param patientInfo       6) OPTIONAL: ФИО пациента, который занял этот талончик
 * @param timeIndex         7) OPTIONAL: Индекс ячейки времени в расписании врача, на который ссылается этот талончик
 * @param date              8) OPTIONAL: Дата приема врача. Будет выставляться для метода getFirstFreeTicket
 * @param office            9) OPTIONAL: Офис, в котором будет происходить прием врача. Будет выставляться для метода getFirstFreeTicket
 */
public class TTicket implements org.apache.thrift.TBase<TTicket, TTicket._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTicket");

  private static final org.apache.thrift.protocol.TField BEG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("begTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("free", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("available", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PATIENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("patientInfo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("timeIndex", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField OFFICE_FIELD_DESC = new org.apache.thrift.protocol.TField("office", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTicketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTicketTupleSchemeFactory());
  }

  public long begTime; // required
  public long endTime; // required
  public boolean free; // required
  public boolean available; // required
  public int patientId; // optional
  public String patientInfo; // optional
  public int timeIndex; // optional
  public long date; // optional
  public String office; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEG_TIME((short)1, "begTime"),
    END_TIME((short)2, "endTime"),
    FREE((short)3, "free"),
    AVAILABLE((short)4, "available"),
    PATIENT_ID((short)5, "patientId"),
    PATIENT_INFO((short)6, "patientInfo"),
    TIME_INDEX((short)7, "timeIndex"),
    DATE((short)8, "date"),
    OFFICE((short)9, "office");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEG_TIME
          return BEG_TIME;
        case 2: // END_TIME
          return END_TIME;
        case 3: // FREE
          return FREE;
        case 4: // AVAILABLE
          return AVAILABLE;
        case 5: // PATIENT_ID
          return PATIENT_ID;
        case 6: // PATIENT_INFO
          return PATIENT_INFO;
        case 7: // TIME_INDEX
          return TIME_INDEX;
        case 8: // DATE
          return DATE;
        case 9: // OFFICE
          return OFFICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BEGTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private static final int __FREE_ISSET_ID = 2;
  private static final int __AVAILABLE_ISSET_ID = 3;
  private static final int __PATIENTID_ISSET_ID = 4;
  private static final int __TIMEINDEX_ISSET_ID = 5;
  private static final int __DATE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PATIENT_ID,_Fields.PATIENT_INFO,_Fields.TIME_INDEX,_Fields.DATE,_Fields.OFFICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEG_TIME, new org.apache.thrift.meta_data.FieldMetaData("begTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.FREE, new org.apache.thrift.meta_data.FieldMetaData("free", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("available", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PATIENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("patientInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("timeIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.OFFICE, new org.apache.thrift.meta_data.FieldMetaData("office", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTicket.class, metaDataMap);
  }

  public TTicket() {
  }

  public TTicket(
    long begTime,
    long endTime,
    boolean free,
    boolean available)
  {
    this();
    this.begTime = begTime;
    setBegTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.free = free;
    setFreeIsSet(true);
    this.available = available;
    setAvailableIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTicket(TTicket other) {
    __isset_bitfield = other.__isset_bitfield;
    this.begTime = other.begTime;
    this.endTime = other.endTime;
    this.free = other.free;
    this.available = other.available;
    this.patientId = other.patientId;
    if (other.isSetPatientInfo()) {
      this.patientInfo = other.patientInfo;
    }
    this.timeIndex = other.timeIndex;
    this.date = other.date;
    if (other.isSetOffice()) {
      this.office = other.office;
    }
  }

  public TTicket deepCopy() {
    return new TTicket(this);
  }

  @Override
  public void clear() {
    setBegTimeIsSet(false);
    this.begTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setFreeIsSet(false);
    this.free = false;
    setAvailableIsSet(false);
    this.available = false;
    setPatientIdIsSet(false);
    this.patientId = 0;
    this.patientInfo = null;
    setTimeIndexIsSet(false);
    this.timeIndex = 0;
    setDateIsSet(false);
    this.date = 0;
    this.office = null;
  }

  public long getBegTime() {
    return this.begTime;
  }

  public TTicket setBegTime(long begTime) {
    this.begTime = begTime;
    setBegTimeIsSet(true);
    return this;
  }

  public void unsetBegTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGTIME_ISSET_ID);
  }

  /** Returns true if field begTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBegTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGTIME_ISSET_ID);
  }

  public void setBegTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public TTicket setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public boolean isFree() {
    return this.free;
  }

  public TTicket setFree(boolean free) {
    this.free = free;
    setFreeIsSet(true);
    return this;
  }

  public void unsetFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREE_ISSET_ID);
  }

  /** Returns true if field free is set (has been assigned a value) and false otherwise */
  public boolean isSetFree() {
    return EncodingUtils.testBit(__isset_bitfield, __FREE_ISSET_ID);
  }

  public void setFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREE_ISSET_ID, value);
  }

  public boolean isAvailable() {
    return this.available;
  }

  public TTicket setAvailable(boolean available) {
    this.available = available;
    setAvailableIsSet(true);
    return this;
  }

  public void unsetAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  /** Returns true if field available is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  public void setAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLE_ISSET_ID, value);
  }

  public int getPatientId() {
    return this.patientId;
  }

  public TTicket setPatientId(int patientId) {
    this.patientId = patientId;
    setPatientIdIsSet(true);
    return this;
  }

  public void unsetPatientId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATIENTID_ISSET_ID);
  }

  /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
  public boolean isSetPatientId() {
    return EncodingUtils.testBit(__isset_bitfield, __PATIENTID_ISSET_ID);
  }

  public void setPatientIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATIENTID_ISSET_ID, value);
  }

  public String getPatientInfo() {
    return this.patientInfo;
  }

  public TTicket setPatientInfo(String patientInfo) {
    this.patientInfo = patientInfo;
    return this;
  }

  public void unsetPatientInfo() {
    this.patientInfo = null;
  }

  /** Returns true if field patientInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPatientInfo() {
    return this.patientInfo != null;
  }

  public void setPatientInfoIsSet(boolean value) {
    if (!value) {
      this.patientInfo = null;
    }
  }

  public int getTimeIndex() {
    return this.timeIndex;
  }

  public TTicket setTimeIndex(int timeIndex) {
    this.timeIndex = timeIndex;
    setTimeIndexIsSet(true);
    return this;
  }

  public void unsetTimeIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
  }

  /** Returns true if field timeIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
  }

  public void setTimeIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEINDEX_ISSET_ID, value);
  }

  public long getDate() {
    return this.date;
  }

  public TTicket setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  public String getOffice() {
    return this.office;
  }

  public TTicket setOffice(String office) {
    this.office = office;
    return this;
  }

  public void unsetOffice() {
    this.office = null;
  }

  /** Returns true if field office is set (has been assigned a value) and false otherwise */
  public boolean isSetOffice() {
    return this.office != null;
  }

  public void setOfficeIsSet(boolean value) {
    if (!value) {
      this.office = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BEG_TIME:
      if (value == null) {
        unsetBegTime();
      } else {
        setBegTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case FREE:
      if (value == null) {
        unsetFree();
      } else {
        setFree((Boolean)value);
      }
      break;

    case AVAILABLE:
      if (value == null) {
        unsetAvailable();
      } else {
        setAvailable((Boolean)value);
      }
      break;

    case PATIENT_ID:
      if (value == null) {
        unsetPatientId();
      } else {
        setPatientId((Integer)value);
      }
      break;

    case PATIENT_INFO:
      if (value == null) {
        unsetPatientInfo();
      } else {
        setPatientInfo((String)value);
      }
      break;

    case TIME_INDEX:
      if (value == null) {
        unsetTimeIndex();
      } else {
        setTimeIndex((Integer)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case OFFICE:
      if (value == null) {
        unsetOffice();
      } else {
        setOffice((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BEG_TIME:
      return Long.valueOf(getBegTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case FREE:
      return Boolean.valueOf(isFree());

    case AVAILABLE:
      return Boolean.valueOf(isAvailable());

    case PATIENT_ID:
      return Integer.valueOf(getPatientId());

    case PATIENT_INFO:
      return getPatientInfo();

    case TIME_INDEX:
      return Integer.valueOf(getTimeIndex());

    case DATE:
      return Long.valueOf(getDate());

    case OFFICE:
      return getOffice();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BEG_TIME:
      return isSetBegTime();
    case END_TIME:
      return isSetEndTime();
    case FREE:
      return isSetFree();
    case AVAILABLE:
      return isSetAvailable();
    case PATIENT_ID:
      return isSetPatientId();
    case PATIENT_INFO:
      return isSetPatientInfo();
    case TIME_INDEX:
      return isSetTimeIndex();
    case DATE:
      return isSetDate();
    case OFFICE:
      return isSetOffice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTicket)
      return this.equals((TTicket)that);
    return false;
  }

  public boolean equals(TTicket that) {
    if (that == null)
      return false;

    boolean this_present_begTime = true;
    boolean that_present_begTime = true;
    if (this_present_begTime || that_present_begTime) {
      if (!(this_present_begTime && that_present_begTime))
        return false;
      if (this.begTime != that.begTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_free = true;
    boolean that_present_free = true;
    if (this_present_free || that_present_free) {
      if (!(this_present_free && that_present_free))
        return false;
      if (this.free != that.free)
        return false;
    }

    boolean this_present_available = true;
    boolean that_present_available = true;
    if (this_present_available || that_present_available) {
      if (!(this_present_available && that_present_available))
        return false;
      if (this.available != that.available)
        return false;
    }

    boolean this_present_patientId = true && this.isSetPatientId();
    boolean that_present_patientId = true && that.isSetPatientId();
    if (this_present_patientId || that_present_patientId) {
      if (!(this_present_patientId && that_present_patientId))
        return false;
      if (this.patientId != that.patientId)
        return false;
    }

    boolean this_present_patientInfo = true && this.isSetPatientInfo();
    boolean that_present_patientInfo = true && that.isSetPatientInfo();
    if (this_present_patientInfo || that_present_patientInfo) {
      if (!(this_present_patientInfo && that_present_patientInfo))
        return false;
      if (!this.patientInfo.equals(that.patientInfo))
        return false;
    }

    boolean this_present_timeIndex = true && this.isSetTimeIndex();
    boolean that_present_timeIndex = true && that.isSetTimeIndex();
    if (this_present_timeIndex || that_present_timeIndex) {
      if (!(this_present_timeIndex && that_present_timeIndex))
        return false;
      if (this.timeIndex != that.timeIndex)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_office = true && this.isSetOffice();
    boolean that_present_office = true && that.isSetOffice();
    if (this_present_office || that_present_office) {
      if (!(this_present_office && that_present_office))
        return false;
      if (!this.office.equals(that.office))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TTicket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TTicket typedOther = (TTicket)other;

    lastComparison = Boolean.valueOf(isSetBegTime()).compareTo(typedOther.isSetBegTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBegTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begTime, typedOther.begTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFree()).compareTo(typedOther.isSetFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.free, typedOther.free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailable()).compareTo(typedOther.isSetAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.available, typedOther.available);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(typedOther.isSetPatientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, typedOther.patientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatientInfo()).compareTo(typedOther.isSetPatientInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatientInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientInfo, typedOther.patientInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeIndex()).compareTo(typedOther.isSetTimeIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeIndex, typedOther.timeIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffice()).compareTo(typedOther.isSetOffice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.office, typedOther.office);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTicket(");
    boolean first = true;

    sb.append("begTime:");
    sb.append(this.begTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("free:");
    sb.append(this.free);
    first = false;
    if (!first) sb.append(", ");
    sb.append("available:");
    sb.append(this.available);
    first = false;
    if (isSetPatientId()) {
      if (!first) sb.append(", ");
      sb.append("patientId:");
      sb.append(this.patientId);
      first = false;
    }
    if (isSetPatientInfo()) {
      if (!first) sb.append(", ");
      sb.append("patientInfo:");
      if (this.patientInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.patientInfo);
      }
      first = false;
    }
    if (isSetTimeIndex()) {
      if (!first) sb.append(", ");
      sb.append("timeIndex:");
      sb.append(this.timeIndex);
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
    }
    if (isSetOffice()) {
      if (!first) sb.append(", ");
      sb.append("office:");
      if (this.office == null) {
        sb.append("null");
      } else {
        sb.append(this.office);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'begTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'free' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'available' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTicketStandardSchemeFactory implements SchemeFactory {
    public TTicketStandardScheme getScheme() {
      return new TTicketStandardScheme();
    }
  }

  private static class TTicketStandardScheme extends StandardScheme<TTicket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTicket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.begTime = iprot.readI64();
              struct.setBegTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.free = iprot.readBool();
              struct.setFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.available = iprot.readBool();
              struct.setAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PATIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.patientId = iprot.readI32();
              struct.setPatientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PATIENT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.patientInfo = iprot.readString();
              struct.setPatientInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIME_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeIndex = iprot.readI32();
              struct.setTimeIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OFFICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.office = iprot.readString();
              struct.setOfficeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBegTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'begTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFree()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'free' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAvailable()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'available' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTicket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BEG_TIME_FIELD_DESC);
      oprot.writeI64(struct.begTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREE_FIELD_DESC);
      oprot.writeBool(struct.free);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_FIELD_DESC);
      oprot.writeBool(struct.available);
      oprot.writeFieldEnd();
      if (struct.isSetPatientId()) {
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.patientId);
        oprot.writeFieldEnd();
      }
      if (struct.patientInfo != null) {
        if (struct.isSetPatientInfo()) {
          oprot.writeFieldBegin(PATIENT_INFO_FIELD_DESC);
          oprot.writeString(struct.patientInfo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimeIndex()) {
        oprot.writeFieldBegin(TIME_INDEX_FIELD_DESC);
        oprot.writeI32(struct.timeIndex);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDate()) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI64(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.office != null) {
        if (struct.isSetOffice()) {
          oprot.writeFieldBegin(OFFICE_FIELD_DESC);
          oprot.writeString(struct.office);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTicketTupleSchemeFactory implements SchemeFactory {
    public TTicketTupleScheme getScheme() {
      return new TTicketTupleScheme();
    }
  }

  private static class TTicketTupleScheme extends TupleScheme<TTicket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTicket struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.begTime);
      oprot.writeI64(struct.endTime);
      oprot.writeBool(struct.free);
      oprot.writeBool(struct.available);
      BitSet optionals = new BitSet();
      if (struct.isSetPatientId()) {
        optionals.set(0);
      }
      if (struct.isSetPatientInfo()) {
        optionals.set(1);
      }
      if (struct.isSetTimeIndex()) {
        optionals.set(2);
      }
      if (struct.isSetDate()) {
        optionals.set(3);
      }
      if (struct.isSetOffice()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPatientId()) {
        oprot.writeI32(struct.patientId);
      }
      if (struct.isSetPatientInfo()) {
        oprot.writeString(struct.patientInfo);
      }
      if (struct.isSetTimeIndex()) {
        oprot.writeI32(struct.timeIndex);
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetOffice()) {
        oprot.writeString(struct.office);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTicket struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.begTime = iprot.readI64();
      struct.setBegTimeIsSet(true);
      struct.endTime = iprot.readI64();
      struct.setEndTimeIsSet(true);
      struct.free = iprot.readBool();
      struct.setFreeIsSet(true);
      struct.available = iprot.readBool();
      struct.setAvailableIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.patientId = iprot.readI32();
        struct.setPatientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.patientInfo = iprot.readString();
        struct.setPatientInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeIndex = iprot.readI32();
        struct.setTimeIndexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.office = iprot.readString();
        struct.setOfficeIsSet(true);
      }
    }
  }

}

