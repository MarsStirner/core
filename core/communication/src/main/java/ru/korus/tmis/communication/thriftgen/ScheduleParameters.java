/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * * Структура с данными для получения расписания пачкой и поиска превого свободного талончика
 * * @param personId                  1)Идетификатор врача
 * * @param beginDateTime             2)Время с которого начинается поиск свободных талончиков
 * * @param endDateTime               3)Время до которого происходит поиск свободных талончиков
 * (если не установлено - то плюс месяц к beginDateTime)
 * * @param hospitalUidFrom           4)Идентификатор ЛПУ из которого производится запись
 * * @param quotingType               5)Тип квотирования
 */
public class ScheduleParameters implements org.apache.thrift.TBase<ScheduleParameters, ScheduleParameters._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ScheduleParameters");

  private static final org.apache.thrift.protocol.TField PERSON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("personId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BEGIN_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginDateTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField END_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endDateTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField HOSPITAL_UID_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("hospitalUidFrom", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField QUOTING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("quotingType", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ScheduleParametersStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ScheduleParametersTupleSchemeFactory());
  }

  public int personId; // required
  public long beginDateTime; // required
  public long endDateTime; // optional
  public String hospitalUidFrom; // optional
  /**
   * 
   * @see QuotingType
   */
  public QuotingType quotingType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PERSON_ID((short)1, "personId"),
    BEGIN_DATE_TIME((short)2, "beginDateTime"),
    END_DATE_TIME((short)3, "endDateTime"),
    HOSPITAL_UID_FROM((short)4, "hospitalUidFrom"),
    /**
     * 
     * @see QuotingType
     */
    QUOTING_TYPE((short)5, "quotingType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PERSON_ID
          return PERSON_ID;
        case 2: // BEGIN_DATE_TIME
          return BEGIN_DATE_TIME;
        case 3: // END_DATE_TIME
          return END_DATE_TIME;
        case 4: // HOSPITAL_UID_FROM
          return HOSPITAL_UID_FROM;
        case 5: // QUOTING_TYPE
          return QUOTING_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PERSONID_ISSET_ID = 0;
  private static final int __BEGINDATETIME_ISSET_ID = 1;
  private static final int __ENDDATETIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.END_DATE_TIME,_Fields.HOSPITAL_UID_FROM,_Fields.QUOTING_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PERSON_ID, new org.apache.thrift.meta_data.FieldMetaData("personId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BEGIN_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.END_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("endDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.HOSPITAL_UID_FROM, new org.apache.thrift.meta_data.FieldMetaData("hospitalUidFrom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUOTING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("quotingType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, QuotingType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScheduleParameters.class, metaDataMap);
  }

  public ScheduleParameters() {
  }

  public ScheduleParameters(
    int personId,
    long beginDateTime)
  {
    this();
    this.personId = personId;
    setPersonIdIsSet(true);
    this.beginDateTime = beginDateTime;
    setBeginDateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScheduleParameters(ScheduleParameters other) {
    __isset_bitfield = other.__isset_bitfield;
    this.personId = other.personId;
    this.beginDateTime = other.beginDateTime;
    this.endDateTime = other.endDateTime;
    if (other.isSetHospitalUidFrom()) {
      this.hospitalUidFrom = other.hospitalUidFrom;
    }
    if (other.isSetQuotingType()) {
      this.quotingType = other.quotingType;
    }
  }

  public ScheduleParameters deepCopy() {
    return new ScheduleParameters(this);
  }

  @Override
  public void clear() {
    setPersonIdIsSet(false);
    this.personId = 0;
    setBeginDateTimeIsSet(false);
    this.beginDateTime = 0;
    setEndDateTimeIsSet(false);
    this.endDateTime = 0;
    this.hospitalUidFrom = null;
    this.quotingType = null;
  }

  public int getPersonId() {
    return this.personId;
  }

  public ScheduleParameters setPersonId(int personId) {
    this.personId = personId;
    setPersonIdIsSet(true);
    return this;
  }

  public void unsetPersonId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERSONID_ISSET_ID);
  }

  /** Returns true if field personId is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonId() {
    return EncodingUtils.testBit(__isset_bitfield, __PERSONID_ISSET_ID);
  }

  public void setPersonIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERSONID_ISSET_ID, value);
  }

  public long getBeginDateTime() {
    return this.beginDateTime;
  }

  public ScheduleParameters setBeginDateTime(long beginDateTime) {
    this.beginDateTime = beginDateTime;
    setBeginDateTimeIsSet(true);
    return this;
  }

  public void unsetBeginDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATETIME_ISSET_ID);
  }

  /** Returns true if field beginDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINDATETIME_ISSET_ID);
  }

  public void setBeginDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATETIME_ISSET_ID, value);
  }

  public long getEndDateTime() {
    return this.endDateTime;
  }

  public ScheduleParameters setEndDateTime(long endDateTime) {
    this.endDateTime = endDateTime;
    setEndDateTimeIsSet(true);
    return this;
  }

  public void unsetEndDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
  }

  /** Returns true if field endDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
  }

  public void setEndDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATETIME_ISSET_ID, value);
  }

  public String getHospitalUidFrom() {
    return this.hospitalUidFrom;
  }

  public ScheduleParameters setHospitalUidFrom(String hospitalUidFrom) {
    this.hospitalUidFrom = hospitalUidFrom;
    return this;
  }

  public void unsetHospitalUidFrom() {
    this.hospitalUidFrom = null;
  }

  /** Returns true if field hospitalUidFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetHospitalUidFrom() {
    return this.hospitalUidFrom != null;
  }

  public void setHospitalUidFromIsSet(boolean value) {
    if (!value) {
      this.hospitalUidFrom = null;
    }
  }

  /**
   * 
   * @see QuotingType
   */
  public QuotingType getQuotingType() {
    return this.quotingType;
  }

  /**
   * 
   * @see QuotingType
   */
  public ScheduleParameters setQuotingType(QuotingType quotingType) {
    this.quotingType = quotingType;
    return this;
  }

  public void unsetQuotingType() {
    this.quotingType = null;
  }

  /** Returns true if field quotingType is set (has been assigned a value) and false otherwise */
  public boolean isSetQuotingType() {
    return this.quotingType != null;
  }

  public void setQuotingTypeIsSet(boolean value) {
    if (!value) {
      this.quotingType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PERSON_ID:
      if (value == null) {
        unsetPersonId();
      } else {
        setPersonId((Integer)value);
      }
      break;

    case BEGIN_DATE_TIME:
      if (value == null) {
        unsetBeginDateTime();
      } else {
        setBeginDateTime((Long)value);
      }
      break;

    case END_DATE_TIME:
      if (value == null) {
        unsetEndDateTime();
      } else {
        setEndDateTime((Long)value);
      }
      break;

    case HOSPITAL_UID_FROM:
      if (value == null) {
        unsetHospitalUidFrom();
      } else {
        setHospitalUidFrom((String)value);
      }
      break;

    case QUOTING_TYPE:
      if (value == null) {
        unsetQuotingType();
      } else {
        setQuotingType((QuotingType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PERSON_ID:
      return Integer.valueOf(getPersonId());

    case BEGIN_DATE_TIME:
      return Long.valueOf(getBeginDateTime());

    case END_DATE_TIME:
      return Long.valueOf(getEndDateTime());

    case HOSPITAL_UID_FROM:
      return getHospitalUidFrom();

    case QUOTING_TYPE:
      return getQuotingType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PERSON_ID:
      return isSetPersonId();
    case BEGIN_DATE_TIME:
      return isSetBeginDateTime();
    case END_DATE_TIME:
      return isSetEndDateTime();
    case HOSPITAL_UID_FROM:
      return isSetHospitalUidFrom();
    case QUOTING_TYPE:
      return isSetQuotingType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScheduleParameters)
      return this.equals((ScheduleParameters)that);
    return false;
  }

  public boolean equals(ScheduleParameters that) {
    if (that == null)
      return false;

    boolean this_present_personId = true;
    boolean that_present_personId = true;
    if (this_present_personId || that_present_personId) {
      if (!(this_present_personId && that_present_personId))
        return false;
      if (this.personId != that.personId)
        return false;
    }

    boolean this_present_beginDateTime = true;
    boolean that_present_beginDateTime = true;
    if (this_present_beginDateTime || that_present_beginDateTime) {
      if (!(this_present_beginDateTime && that_present_beginDateTime))
        return false;
      if (this.beginDateTime != that.beginDateTime)
        return false;
    }

    boolean this_present_endDateTime = true && this.isSetEndDateTime();
    boolean that_present_endDateTime = true && that.isSetEndDateTime();
    if (this_present_endDateTime || that_present_endDateTime) {
      if (!(this_present_endDateTime && that_present_endDateTime))
        return false;
      if (this.endDateTime != that.endDateTime)
        return false;
    }

    boolean this_present_hospitalUidFrom = true && this.isSetHospitalUidFrom();
    boolean that_present_hospitalUidFrom = true && that.isSetHospitalUidFrom();
    if (this_present_hospitalUidFrom || that_present_hospitalUidFrom) {
      if (!(this_present_hospitalUidFrom && that_present_hospitalUidFrom))
        return false;
      if (!this.hospitalUidFrom.equals(that.hospitalUidFrom))
        return false;
    }

    boolean this_present_quotingType = true && this.isSetQuotingType();
    boolean that_present_quotingType = true && that.isSetQuotingType();
    if (this_present_quotingType || that_present_quotingType) {
      if (!(this_present_quotingType && that_present_quotingType))
        return false;
      if (!this.quotingType.equals(that.quotingType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ScheduleParameters other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ScheduleParameters typedOther = (ScheduleParameters)other;

    lastComparison = Boolean.valueOf(isSetPersonId()).compareTo(typedOther.isSetPersonId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personId, typedOther.personId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginDateTime()).compareTo(typedOther.isSetBeginDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginDateTime, typedOther.beginDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDateTime()).compareTo(typedOther.isSetEndDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDateTime, typedOther.endDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHospitalUidFrom()).compareTo(typedOther.isSetHospitalUidFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHospitalUidFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hospitalUidFrom, typedOther.hospitalUidFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuotingType()).compareTo(typedOther.isSetQuotingType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuotingType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quotingType, typedOther.quotingType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScheduleParameters(");
    boolean first = true;

    sb.append("personId:");
    sb.append(this.personId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginDateTime:");
    sb.append(this.beginDateTime);
    first = false;
    if (isSetEndDateTime()) {
      if (!first) sb.append(", ");
      sb.append("endDateTime:");
      sb.append(this.endDateTime);
      first = false;
    }
    if (isSetHospitalUidFrom()) {
      if (!first) sb.append(", ");
      sb.append("hospitalUidFrom:");
      if (this.hospitalUidFrom == null) {
        sb.append("null");
      } else {
        sb.append(this.hospitalUidFrom);
      }
      first = false;
    }
    if (isSetQuotingType()) {
      if (!first) sb.append(", ");
      sb.append("quotingType:");
      if (this.quotingType == null) {
        sb.append("null");
      } else {
        sb.append(this.quotingType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'personId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'beginDateTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScheduleParametersStandardSchemeFactory implements SchemeFactory {
    public ScheduleParametersStandardScheme getScheme() {
      return new ScheduleParametersStandardScheme();
    }
  }

  private static class ScheduleParametersStandardScheme extends StandardScheme<ScheduleParameters> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ScheduleParameters struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PERSON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.personId = iprot.readI32();
              struct.setPersonIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BEGIN_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginDateTime = iprot.readI64();
              struct.setBeginDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endDateTime = iprot.readI64();
              struct.setEndDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOSPITAL_UID_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hospitalUidFrom = iprot.readString();
              struct.setHospitalUidFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUOTING_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quotingType = QuotingType.findByValue(iprot.readI32());
              struct.setQuotingTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPersonId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'personId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBeginDateTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'beginDateTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ScheduleParameters struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PERSON_ID_FIELD_DESC);
      oprot.writeI32(struct.personId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEGIN_DATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.beginDateTime);
      oprot.writeFieldEnd();
      if (struct.isSetEndDateTime()) {
        oprot.writeFieldBegin(END_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.endDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.hospitalUidFrom != null) {
        if (struct.isSetHospitalUidFrom()) {
          oprot.writeFieldBegin(HOSPITAL_UID_FROM_FIELD_DESC);
          oprot.writeString(struct.hospitalUidFrom);
          oprot.writeFieldEnd();
        }
      }
      if (struct.quotingType != null) {
        if (struct.isSetQuotingType()) {
          oprot.writeFieldBegin(QUOTING_TYPE_FIELD_DESC);
          oprot.writeI32(struct.quotingType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScheduleParametersTupleSchemeFactory implements SchemeFactory {
    public ScheduleParametersTupleScheme getScheme() {
      return new ScheduleParametersTupleScheme();
    }
  }

  private static class ScheduleParametersTupleScheme extends TupleScheme<ScheduleParameters> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ScheduleParameters struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.personId);
      oprot.writeI64(struct.beginDateTime);
      BitSet optionals = new BitSet();
      if (struct.isSetEndDateTime()) {
        optionals.set(0);
      }
      if (struct.isSetHospitalUidFrom()) {
        optionals.set(1);
      }
      if (struct.isSetQuotingType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetEndDateTime()) {
        oprot.writeI64(struct.endDateTime);
      }
      if (struct.isSetHospitalUidFrom()) {
        oprot.writeString(struct.hospitalUidFrom);
      }
      if (struct.isSetQuotingType()) {
        oprot.writeI32(struct.quotingType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ScheduleParameters struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.personId = iprot.readI32();
      struct.setPersonIdIsSet(true);
      struct.beginDateTime = iprot.readI64();
      struct.setBeginDateTimeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.endDateTime = iprot.readI64();
        struct.setEndDateTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hospitalUidFrom = iprot.readString();
        struct.setHospitalUidFromIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quotingType = QuotingType.findByValue(iprot.readI32());
        struct.setQuotingTypeIsSet(true);
      }
    }
  }

}

