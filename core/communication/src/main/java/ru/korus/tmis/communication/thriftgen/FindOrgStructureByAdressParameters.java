/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class FindOrgStructureByAdressParameters implements org.apache.thrift.TBase<FindOrgStructureByAdressParameters, FindOrgStructureByAdressParameters._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindOrgStructureByAdressParameters");

    private static final org.apache.thrift.protocol.TField POINT_KLADR_FIELD_DESC = new org.apache.thrift.protocol.TField("pointKLADR", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField STREET_KLADR_FIELD_DESC = new org.apache.thrift.protocol.TField("streetKLADR", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField CORPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("corpus", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField FLAT_FIELD_DESC = new org.apache.thrift.protocol.TField("flat", org.apache.thrift.protocol.TType.I32, (short) 5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new FindOrgStructureByAdressParametersStandardSchemeFactory());
        schemes.put(TupleScheme.class, new FindOrgStructureByAdressParametersTupleSchemeFactory());
    }

    public String pointKLADR; // required
    public String streetKLADR; // optional
    public String number; // optional
    public String corpus; // optional
    public int flat; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        POINT_KLADR((short) 1, "pointKLADR"),
        STREET_KLADR((short) 2, "streetKLADR"),
        NUMBER((short) 3, "number"),
        CORPUS((short) 4, "corpus"),
        FLAT((short) 5, "flat");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // POINT_KLADR
                    return POINT_KLADR;
                case 2: // STREET_KLADR
                    return STREET_KLADR;
                case 3: // NUMBER
                    return NUMBER;
                case 4: // CORPUS
                    return CORPUS;
                case 5: // FLAT
                    return FLAT;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __FLAT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private _Fields optionals[] = {_Fields.STREET_KLADR, _Fields.NUMBER, _Fields.CORPUS, _Fields.FLAT};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.POINT_KLADR, new org.apache.thrift.meta_data.FieldMetaData("pointKLADR", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.STREET_KLADR, new org.apache.thrift.meta_data.FieldMetaData("streetKLADR", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CORPUS, new org.apache.thrift.meta_data.FieldMetaData("corpus", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FLAT, new org.apache.thrift.meta_data.FieldMetaData("flat", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindOrgStructureByAdressParameters.class, metaDataMap);
    }

    public FindOrgStructureByAdressParameters() {
        this.streetKLADR = "";

        this.number = "";

        this.corpus = "";

        this.flat = 0;

    }

    public FindOrgStructureByAdressParameters(
            String pointKLADR) {
        this();
        this.pointKLADR = pointKLADR;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindOrgStructureByAdressParameters(FindOrgStructureByAdressParameters other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetPointKLADR()) {
            this.pointKLADR = other.pointKLADR;
        }
        if (other.isSetStreetKLADR()) {
            this.streetKLADR = other.streetKLADR;
        }
        if (other.isSetNumber()) {
            this.number = other.number;
        }
        if (other.isSetCorpus()) {
            this.corpus = other.corpus;
        }
        this.flat = other.flat;
    }

    public FindOrgStructureByAdressParameters deepCopy() {
        return new FindOrgStructureByAdressParameters(this);
    }

    @Override
    public void clear() {
        this.pointKLADR = null;
        this.streetKLADR = "";

        this.number = "";

        this.corpus = "";

        this.flat = 0;

    }

    public String getPointKLADR() {
        return this.pointKLADR;
    }

    public FindOrgStructureByAdressParameters setPointKLADR(String pointKLADR) {
        this.pointKLADR = pointKLADR;
        return this;
    }

    public void unsetPointKLADR() {
        this.pointKLADR = null;
    }

    /**
     * Returns true if field pointKLADR is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPointKLADR() {
        return this.pointKLADR != null;
    }

    public void setPointKLADRIsSet(boolean value) {
        if (!value) {
            this.pointKLADR = null;
        }
    }

    public String getStreetKLADR() {
        return this.streetKLADR;
    }

    public FindOrgStructureByAdressParameters setStreetKLADR(String streetKLADR) {
        this.streetKLADR = streetKLADR;
        return this;
    }

    public void unsetStreetKLADR() {
        this.streetKLADR = null;
    }

    /**
     * Returns true if field streetKLADR is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStreetKLADR() {
        return this.streetKLADR != null;
    }

    public void setStreetKLADRIsSet(boolean value) {
        if (!value) {
            this.streetKLADR = null;
        }
    }

    public String getNumber() {
        return this.number;
    }

    public FindOrgStructureByAdressParameters setNumber(String number) {
        this.number = number;
        return this;
    }

    public void unsetNumber() {
        this.number = null;
    }

    /**
     * Returns true if field number is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNumber() {
        return this.number != null;
    }

    public void setNumberIsSet(boolean value) {
        if (!value) {
            this.number = null;
        }
    }

    public String getCorpus() {
        return this.corpus;
    }

    public FindOrgStructureByAdressParameters setCorpus(String corpus) {
        this.corpus = corpus;
        return this;
    }

    public void unsetCorpus() {
        this.corpus = null;
    }

    /**
     * Returns true if field corpus is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCorpus() {
        return this.corpus != null;
    }

    public void setCorpusIsSet(boolean value) {
        if (!value) {
            this.corpus = null;
        }
    }

    public int getFlat() {
        return this.flat;
    }

    public FindOrgStructureByAdressParameters setFlat(int flat) {
        this.flat = flat;
        setFlatIsSet(true);
        return this;
    }

    public void unsetFlat() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAT_ISSET_ID);
    }

    /**
     * Returns true if field flat is set (has been assigned a value) and false otherwise
     */
    public boolean isSetFlat() {
        return EncodingUtils.testBit(__isset_bitfield, __FLAT_ISSET_ID);
    }

    public void setFlatIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case POINT_KLADR:
                if (value == null) {
                    unsetPointKLADR();
                } else {
                    setPointKLADR((String) value);
                }
                break;

            case STREET_KLADR:
                if (value == null) {
                    unsetStreetKLADR();
                } else {
                    setStreetKLADR((String) value);
                }
                break;

            case NUMBER:
                if (value == null) {
                    unsetNumber();
                } else {
                    setNumber((String) value);
                }
                break;

            case CORPUS:
                if (value == null) {
                    unsetCorpus();
                } else {
                    setCorpus((String) value);
                }
                break;

            case FLAT:
                if (value == null) {
                    unsetFlat();
                } else {
                    setFlat((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case POINT_KLADR:
                return getPointKLADR();

            case STREET_KLADR:
                return getStreetKLADR();

            case NUMBER:
                return getNumber();

            case CORPUS:
                return getCorpus();

            case FLAT:
                return Integer.valueOf(getFlat());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case POINT_KLADR:
                return isSetPointKLADR();
            case STREET_KLADR:
                return isSetStreetKLADR();
            case NUMBER:
                return isSetNumber();
            case CORPUS:
                return isSetCorpus();
            case FLAT:
                return isSetFlat();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof FindOrgStructureByAdressParameters)
            return this.equals((FindOrgStructureByAdressParameters) that);
        return false;
    }

    public boolean equals(FindOrgStructureByAdressParameters that) {
        if (that == null)
            return false;

        boolean this_present_pointKLADR = true && this.isSetPointKLADR();
        boolean that_present_pointKLADR = true && that.isSetPointKLADR();
        if (this_present_pointKLADR || that_present_pointKLADR) {
            if (!(this_present_pointKLADR && that_present_pointKLADR))
                return false;
            if (!this.pointKLADR.equals(that.pointKLADR))
                return false;
        }

        boolean this_present_streetKLADR = true && this.isSetStreetKLADR();
        boolean that_present_streetKLADR = true && that.isSetStreetKLADR();
        if (this_present_streetKLADR || that_present_streetKLADR) {
            if (!(this_present_streetKLADR && that_present_streetKLADR))
                return false;
            if (!this.streetKLADR.equals(that.streetKLADR))
                return false;
        }

        boolean this_present_number = true && this.isSetNumber();
        boolean that_present_number = true && that.isSetNumber();
        if (this_present_number || that_present_number) {
            if (!(this_present_number && that_present_number))
                return false;
            if (!this.number.equals(that.number))
                return false;
        }

        boolean this_present_corpus = true && this.isSetCorpus();
        boolean that_present_corpus = true && that.isSetCorpus();
        if (this_present_corpus || that_present_corpus) {
            if (!(this_present_corpus && that_present_corpus))
                return false;
            if (!this.corpus.equals(that.corpus))
                return false;
        }

        boolean this_present_flat = true && this.isSetFlat();
        boolean that_present_flat = true && that.isSetFlat();
        if (this_present_flat || that_present_flat) {
            if (!(this_present_flat && that_present_flat))
                return false;
            if (this.flat != that.flat)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(FindOrgStructureByAdressParameters other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        FindOrgStructureByAdressParameters typedOther = (FindOrgStructureByAdressParameters) other;

        lastComparison = Boolean.valueOf(isSetPointKLADR()).compareTo(typedOther.isSetPointKLADR());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPointKLADR()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointKLADR, typedOther.pointKLADR);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStreetKLADR()).compareTo(typedOther.isSetStreetKLADR());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStreetKLADR()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streetKLADR, typedOther.streetKLADR);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNumber()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCorpus()).compareTo(typedOther.isSetCorpus());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCorpus()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpus, typedOther.corpus);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFlat()).compareTo(typedOther.isSetFlat());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFlat()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flat, typedOther.flat);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FindOrgStructureByAdressParameters(");
        boolean first = true;

        sb.append("pointKLADR:");
        if (this.pointKLADR == null) {
            sb.append("null");
        } else {
            sb.append(this.pointKLADR);
        }
        first = false;
        if (isSetStreetKLADR()) {
            if (!first) sb.append(", ");
            sb.append("streetKLADR:");
            if (this.streetKLADR == null) {
                sb.append("null");
            } else {
                sb.append(this.streetKLADR);
            }
            first = false;
        }
        if (isSetNumber()) {
            if (!first) sb.append(", ");
            sb.append("number:");
            if (this.number == null) {
                sb.append("null");
            } else {
                sb.append(this.number);
            }
            first = false;
        }
        if (isSetCorpus()) {
            if (!first) sb.append(", ");
            sb.append("corpus:");
            if (this.corpus == null) {
                sb.append("null");
            } else {
                sb.append(this.corpus);
            }
            first = false;
        }
        if (isSetFlat()) {
            if (!first) sb.append(", ");
            sb.append("flat:");
            sb.append(this.flat);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (pointKLADR == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'pointKLADR' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class FindOrgStructureByAdressParametersStandardSchemeFactory implements SchemeFactory {
        public FindOrgStructureByAdressParametersStandardScheme getScheme() {
            return new FindOrgStructureByAdressParametersStandardScheme();
        }
    }

    private static class FindOrgStructureByAdressParametersStandardScheme extends StandardScheme<FindOrgStructureByAdressParameters> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, FindOrgStructureByAdressParameters struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // POINT_KLADR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.pointKLADR = iprot.readString();
                            struct.setPointKLADRIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // STREET_KLADR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.streetKLADR = iprot.readString();
                            struct.setStreetKLADRIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // NUMBER
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.number = iprot.readString();
                            struct.setNumberIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // CORPUS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.corpus = iprot.readString();
                            struct.setCorpusIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // FLAT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.flat = iprot.readI32();
                            struct.setFlatIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, FindOrgStructureByAdressParameters struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.pointKLADR != null) {
                oprot.writeFieldBegin(POINT_KLADR_FIELD_DESC);
                oprot.writeString(struct.pointKLADR);
                oprot.writeFieldEnd();
            }
            if (struct.streetKLADR != null) {
                if (struct.isSetStreetKLADR()) {
                    oprot.writeFieldBegin(STREET_KLADR_FIELD_DESC);
                    oprot.writeString(struct.streetKLADR);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.number != null) {
                if (struct.isSetNumber()) {
                    oprot.writeFieldBegin(NUMBER_FIELD_DESC);
                    oprot.writeString(struct.number);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.corpus != null) {
                if (struct.isSetCorpus()) {
                    oprot.writeFieldBegin(CORPUS_FIELD_DESC);
                    oprot.writeString(struct.corpus);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetFlat()) {
                oprot.writeFieldBegin(FLAT_FIELD_DESC);
                oprot.writeI32(struct.flat);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class FindOrgStructureByAdressParametersTupleSchemeFactory implements SchemeFactory {
        public FindOrgStructureByAdressParametersTupleScheme getScheme() {
            return new FindOrgStructureByAdressParametersTupleScheme();
        }
    }

    private static class FindOrgStructureByAdressParametersTupleScheme extends TupleScheme<FindOrgStructureByAdressParameters> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, FindOrgStructureByAdressParameters struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.pointKLADR);
            BitSet optionals = new BitSet();
            if (struct.isSetStreetKLADR()) {
                optionals.set(0);
            }
            if (struct.isSetNumber()) {
                optionals.set(1);
            }
            if (struct.isSetCorpus()) {
                optionals.set(2);
            }
            if (struct.isSetFlat()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetStreetKLADR()) {
                oprot.writeString(struct.streetKLADR);
            }
            if (struct.isSetNumber()) {
                oprot.writeString(struct.number);
            }
            if (struct.isSetCorpus()) {
                oprot.writeString(struct.corpus);
            }
            if (struct.isSetFlat()) {
                oprot.writeI32(struct.flat);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, FindOrgStructureByAdressParameters struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.pointKLADR = iprot.readString();
            struct.setPointKLADRIsSet(true);
            BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.streetKLADR = iprot.readString();
                struct.setStreetKLADRIsSet(true);
            }
            if (incoming.get(1)) {
                struct.number = iprot.readString();
                struct.setNumberIsSet(true);
            }
            if (incoming.get(2)) {
                struct.corpus = iprot.readString();
                struct.setCorpusIsSet(true);
            }
            if (incoming.get(3)) {
                struct.flat = iprot.readI32();
                struct.setFlatIsSet(true);
            }
        }
    }

}

