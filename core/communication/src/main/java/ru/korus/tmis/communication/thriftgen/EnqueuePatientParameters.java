/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EnqueuePatientParameters implements org.apache.thrift.TBase<EnqueuePatientParameters, EnqueuePatientParameters._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnqueuePatientParameters");

    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField PERSON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("personId", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTime", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField HOSPITAL_UID_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("hospitalUidFrom", org.apache.thrift.protocol.TType.I32, (short) 5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new EnqueuePatientParametersStandardSchemeFactory());
        schemes.put(TupleScheme.class, new EnqueuePatientParametersTupleSchemeFactory());
    }

    public int patientId; // required
    public int personId; // required
    public long dateTime; // optional
    public String note; // optional
    public int hospitalUidFrom; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        PATIENT_ID((short) 1, "patientId"),
        PERSON_ID((short) 2, "personId"),
        DATE_TIME((short) 3, "dateTime"),
        NOTE((short) 4, "note"),
        HOSPITAL_UID_FROM((short) 5, "hospitalUidFrom");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // PATIENT_ID
                    return PATIENT_ID;
                case 2: // PERSON_ID
                    return PERSON_ID;
                case 3: // DATE_TIME
                    return DATE_TIME;
                case 4: // NOTE
                    return NOTE;
                case 5: // HOSPITAL_UID_FROM
                    return HOSPITAL_UID_FROM;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PATIENTID_ISSET_ID = 0;
    private static final int __PERSONID_ISSET_ID = 1;
    private static final int __DATETIME_ISSET_ID = 2;
    private static final int __HOSPITALUIDFROM_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    private _Fields optionals[] = {_Fields.DATE_TIME, _Fields.NOTE, _Fields.HOSPITAL_UID_FROM};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PERSON_ID, new org.apache.thrift.meta_data.FieldMetaData("personId", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "timestamp")));
        tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.HOSPITAL_UID_FROM, new org.apache.thrift.meta_data.FieldMetaData("hospitalUidFrom", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnqueuePatientParameters.class, metaDataMap);
    }

    public EnqueuePatientParameters() {
    }

    public EnqueuePatientParameters(
            int patientId,
            int personId) {
        this();
        this.patientId = patientId;
        setPatientIdIsSet(true);
        this.personId = personId;
        setPersonIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EnqueuePatientParameters(EnqueuePatientParameters other) {
        __isset_bitfield = other.__isset_bitfield;
        this.patientId = other.patientId;
        this.personId = other.personId;
        this.dateTime = other.dateTime;
        if (other.isSetNote()) {
            this.note = other.note;
        }
        this.hospitalUidFrom = other.hospitalUidFrom;
    }

    public EnqueuePatientParameters deepCopy() {
        return new EnqueuePatientParameters(this);
    }

    @Override
    public void clear() {
        setPatientIdIsSet(false);
        this.patientId = 0;
        setPersonIdIsSet(false);
        this.personId = 0;
        setDateTimeIsSet(false);
        this.dateTime = 0;
        this.note = null;
        setHospitalUidFromIsSet(false);
        this.hospitalUidFrom = 0;
    }

    public int getPatientId() {
        return this.patientId;
    }

    public EnqueuePatientParameters setPatientId(int patientId) {
        this.patientId = patientId;
        setPatientIdIsSet(true);
        return this;
    }

    public void unsetPatientId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    /**
     * Returns true if field patientId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPatientId() {
        return EncodingUtils.testBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    public void setPatientIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATIENTID_ISSET_ID, value);
    }

    public int getPersonId() {
        return this.personId;
    }

    public EnqueuePatientParameters setPersonId(int personId) {
        this.personId = personId;
        setPersonIdIsSet(true);
        return this;
    }

    public void unsetPersonId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERSONID_ISSET_ID);
    }

    /**
     * Returns true if field personId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPersonId() {
        return EncodingUtils.testBit(__isset_bitfield, __PERSONID_ISSET_ID);
    }

    public void setPersonIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERSONID_ISSET_ID, value);
    }

    public long getDateTime() {
        return this.dateTime;
    }

    public EnqueuePatientParameters setDateTime(long dateTime) {
        this.dateTime = dateTime;
        setDateTimeIsSet(true);
        return this;
    }

    public void unsetDateTime() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATETIME_ISSET_ID);
    }

    /**
     * Returns true if field dateTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetDateTime() {
        return EncodingUtils.testBit(__isset_bitfield, __DATETIME_ISSET_ID);
    }

    public void setDateTimeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATETIME_ISSET_ID, value);
    }

    public String getNote() {
        return this.note;
    }

    public EnqueuePatientParameters setNote(String note) {
        this.note = note;
        return this;
    }

    public void unsetNote() {
        this.note = null;
    }

    /**
     * Returns true if field note is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNote() {
        return this.note != null;
    }

    public void setNoteIsSet(boolean value) {
        if (!value) {
            this.note = null;
        }
    }

    public int getHospitalUidFrom() {
        return this.hospitalUidFrom;
    }

    public EnqueuePatientParameters setHospitalUidFrom(int hospitalUidFrom) {
        this.hospitalUidFrom = hospitalUidFrom;
        setHospitalUidFromIsSet(true);
        return this;
    }

    public void unsetHospitalUidFrom() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOSPITALUIDFROM_ISSET_ID);
    }

    /**
     * Returns true if field hospitalUidFrom is set (has been assigned a value) and false otherwise
     */
    public boolean isSetHospitalUidFrom() {
        return EncodingUtils.testBit(__isset_bitfield, __HOSPITALUIDFROM_ISSET_ID);
    }

    public void setHospitalUidFromIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOSPITALUIDFROM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case PATIENT_ID:
                if (value == null) {
                    unsetPatientId();
                } else {
                    setPatientId((Integer) value);
                }
                break;

            case PERSON_ID:
                if (value == null) {
                    unsetPersonId();
                } else {
                    setPersonId((Integer) value);
                }
                break;

            case DATE_TIME:
                if (value == null) {
                    unsetDateTime();
                } else {
                    setDateTime((Long) value);
                }
                break;

            case NOTE:
                if (value == null) {
                    unsetNote();
                } else {
                    setNote((String) value);
                }
                break;

            case HOSPITAL_UID_FROM:
                if (value == null) {
                    unsetHospitalUidFrom();
                } else {
                    setHospitalUidFrom((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case PATIENT_ID:
                return Integer.valueOf(getPatientId());

            case PERSON_ID:
                return Integer.valueOf(getPersonId());

            case DATE_TIME:
                return Long.valueOf(getDateTime());

            case NOTE:
                return getNote();

            case HOSPITAL_UID_FROM:
                return Integer.valueOf(getHospitalUidFrom());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case PATIENT_ID:
                return isSetPatientId();
            case PERSON_ID:
                return isSetPersonId();
            case DATE_TIME:
                return isSetDateTime();
            case NOTE:
                return isSetNote();
            case HOSPITAL_UID_FROM:
                return isSetHospitalUidFrom();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof EnqueuePatientParameters)
            return this.equals((EnqueuePatientParameters) that);
        return false;
    }

    public boolean equals(EnqueuePatientParameters that) {
        if (that == null)
            return false;

        boolean this_present_patientId = true;
        boolean that_present_patientId = true;
        if (this_present_patientId || that_present_patientId) {
            if (!(this_present_patientId && that_present_patientId))
                return false;
            if (this.patientId != that.patientId)
                return false;
        }

        boolean this_present_personId = true;
        boolean that_present_personId = true;
        if (this_present_personId || that_present_personId) {
            if (!(this_present_personId && that_present_personId))
                return false;
            if (this.personId != that.personId)
                return false;
        }

        boolean this_present_dateTime = true && this.isSetDateTime();
        boolean that_present_dateTime = true && that.isSetDateTime();
        if (this_present_dateTime || that_present_dateTime) {
            if (!(this_present_dateTime && that_present_dateTime))
                return false;
            if (this.dateTime != that.dateTime)
                return false;
        }

        boolean this_present_note = true && this.isSetNote();
        boolean that_present_note = true && that.isSetNote();
        if (this_present_note || that_present_note) {
            if (!(this_present_note && that_present_note))
                return false;
            if (!this.note.equals(that.note))
                return false;
        }

        boolean this_present_hospitalUidFrom = true && this.isSetHospitalUidFrom();
        boolean that_present_hospitalUidFrom = true && that.isSetHospitalUidFrom();
        if (this_present_hospitalUidFrom || that_present_hospitalUidFrom) {
            if (!(this_present_hospitalUidFrom && that_present_hospitalUidFrom))
                return false;
            if (this.hospitalUidFrom != that.hospitalUidFrom)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(EnqueuePatientParameters other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        EnqueuePatientParameters typedOther = (EnqueuePatientParameters) other;

        lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(typedOther.isSetPatientId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPatientId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, typedOther.patientId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPersonId()).compareTo(typedOther.isSetPersonId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPersonId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personId, typedOther.personId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDateTime()).compareTo(typedOther.isSetDateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTime, typedOther.dateTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNote()).compareTo(typedOther.isSetNote());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNote()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, typedOther.note);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHospitalUidFrom()).compareTo(typedOther.isSetHospitalUidFrom());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHospitalUidFrom()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hospitalUidFrom, typedOther.hospitalUidFrom);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("EnqueuePatientParameters(");
        boolean first = true;

        sb.append("patientId:");
        sb.append(this.patientId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("personId:");
        sb.append(this.personId);
        first = false;
        if (isSetDateTime()) {
            if (!first) sb.append(", ");
            sb.append("dateTime:");
            sb.append(this.dateTime);
            first = false;
        }
        if (isSetNote()) {
            if (!first) sb.append(", ");
            sb.append("note:");
            if (this.note == null) {
                sb.append("null");
            } else {
                sb.append(this.note);
            }
            first = false;
        }
        if (isSetHospitalUidFrom()) {
            if (!first) sb.append(", ");
            sb.append("hospitalUidFrom:");
            sb.append(this.hospitalUidFrom);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'patientId' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'personId' because it's a primitive and you chose the non-beans generator.
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class EnqueuePatientParametersStandardSchemeFactory implements SchemeFactory {
        public EnqueuePatientParametersStandardScheme getScheme() {
            return new EnqueuePatientParametersStandardScheme();
        }
    }

    private static class EnqueuePatientParametersStandardScheme extends StandardScheme<EnqueuePatientParameters> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, EnqueuePatientParameters struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // PATIENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.patientId = iprot.readI32();
                            struct.setPatientIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PERSON_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.personId = iprot.readI32();
                            struct.setPersonIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // DATE_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.dateTime = iprot.readI64();
                            struct.setDateTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // NOTE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.note = iprot.readString();
                            struct.setNoteIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // HOSPITAL_UID_FROM
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.hospitalUidFrom = iprot.readI32();
                            struct.setHospitalUidFromIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetPatientId()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'patientId' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetPersonId()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'personId' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, EnqueuePatientParameters struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
            oprot.writeI32(struct.patientId);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(PERSON_ID_FIELD_DESC);
            oprot.writeI32(struct.personId);
            oprot.writeFieldEnd();
            if (struct.isSetDateTime()) {
                oprot.writeFieldBegin(DATE_TIME_FIELD_DESC);
                oprot.writeI64(struct.dateTime);
                oprot.writeFieldEnd();
            }
            if (struct.note != null) {
                if (struct.isSetNote()) {
                    oprot.writeFieldBegin(NOTE_FIELD_DESC);
                    oprot.writeString(struct.note);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetHospitalUidFrom()) {
                oprot.writeFieldBegin(HOSPITAL_UID_FROM_FIELD_DESC);
                oprot.writeI32(struct.hospitalUidFrom);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class EnqueuePatientParametersTupleSchemeFactory implements SchemeFactory {
        public EnqueuePatientParametersTupleScheme getScheme() {
            return new EnqueuePatientParametersTupleScheme();
        }
    }

    private static class EnqueuePatientParametersTupleScheme extends TupleScheme<EnqueuePatientParameters> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, EnqueuePatientParameters struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI32(struct.patientId);
            oprot.writeI32(struct.personId);
            BitSet optionals = new BitSet();
            if (struct.isSetDateTime()) {
                optionals.set(0);
            }
            if (struct.isSetNote()) {
                optionals.set(1);
            }
            if (struct.isSetHospitalUidFrom()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetDateTime()) {
                oprot.writeI64(struct.dateTime);
            }
            if (struct.isSetNote()) {
                oprot.writeString(struct.note);
            }
            if (struct.isSetHospitalUidFrom()) {
                oprot.writeI32(struct.hospitalUidFrom);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, EnqueuePatientParameters struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.patientId = iprot.readI32();
            struct.setPatientIdIsSet(true);
            struct.personId = iprot.readI32();
            struct.setPersonIdIsSet(true);
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.dateTime = iprot.readI64();
                struct.setDateTimeIsSet(true);
            }
            if (incoming.get(1)) {
                struct.note = iprot.readString();
                struct.setNoteIsSet(true);
            }
            if (incoming.get(2)) {
                struct.hospitalUidFrom = iprot.readI32();
                struct.setHospitalUidFromIsSet(true);
            }
        }
    }

}

