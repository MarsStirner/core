/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * AddPatientParameters
 * Структура для создания нового пациента
 * @param lastName				1) Фамилия пациента
 * @param firstName				2) Имя пациента
 * @param patrName				3) Отчество пациента
 * @param birthDate				4) Дата рождения пациента
 * @param sex					5) Пол пациента
 * @param documentSerial		6) Серия документа
 * @param documentNumber		7) Номер документа
 * @param documentTypeCode		8) Код типа документа
 * @param policySerial			9) Серия полиса
 * @param policyNumber			10) Номер полиса
 * @param policyTypeCode		11) Код типа полиса
 * @param policyInsurerInfisCode	12)Инфис код страховой, полис которой представлен выше
 */
public class AddPatientParameters implements org.apache.thrift.TBase<AddPatientParameters, AddPatientParameters._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPatientParameters");

  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PATR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("patrName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BIRTH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("birthDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DOCUMENT_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("documentSerial", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DOCUMENT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("documentNumber", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DOCUMENT_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("documentTypeCode", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField POLICY_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("policySerial", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField POLICY_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("policyNumber", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField POLICY_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("policyTypeCode", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField POLICY_INSURER_INFIS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("policyInsurerInfisCode", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddPatientParametersStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddPatientParametersTupleSchemeFactory());
  }

  public String lastName; // optional
  public String firstName; // optional
  public String patrName; // optional
  public long birthDate; // optional
  public int sex; // optional
  public String documentSerial; // optional
  public String documentNumber; // optional
  public String documentTypeCode; // optional
  public String policySerial; // optional
  public String policyNumber; // optional
  public String policyTypeCode; // optional
  public String policyInsurerInfisCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAST_NAME((short)1, "lastName"),
    FIRST_NAME((short)2, "firstName"),
    PATR_NAME((short)3, "patrName"),
    BIRTH_DATE((short)4, "birthDate"),
    SEX((short)5, "sex"),
    DOCUMENT_SERIAL((short)6, "documentSerial"),
    DOCUMENT_NUMBER((short)7, "documentNumber"),
    DOCUMENT_TYPE_CODE((short)8, "documentTypeCode"),
    POLICY_SERIAL((short)9, "policySerial"),
    POLICY_NUMBER((short)10, "policyNumber"),
    POLICY_TYPE_CODE((short)11, "policyTypeCode"),
    POLICY_INSURER_INFIS_CODE((short)12, "policyInsurerInfisCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAST_NAME
          return LAST_NAME;
        case 2: // FIRST_NAME
          return FIRST_NAME;
        case 3: // PATR_NAME
          return PATR_NAME;
        case 4: // BIRTH_DATE
          return BIRTH_DATE;
        case 5: // SEX
          return SEX;
        case 6: // DOCUMENT_SERIAL
          return DOCUMENT_SERIAL;
        case 7: // DOCUMENT_NUMBER
          return DOCUMENT_NUMBER;
        case 8: // DOCUMENT_TYPE_CODE
          return DOCUMENT_TYPE_CODE;
        case 9: // POLICY_SERIAL
          return POLICY_SERIAL;
        case 10: // POLICY_NUMBER
          return POLICY_NUMBER;
        case 11: // POLICY_TYPE_CODE
          return POLICY_TYPE_CODE;
        case 12: // POLICY_INSURER_INFIS_CODE
          return POLICY_INSURER_INFIS_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIRTHDATE_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LAST_NAME,_Fields.FIRST_NAME,_Fields.PATR_NAME,_Fields.BIRTH_DATE,_Fields.SEX,_Fields.DOCUMENT_SERIAL,_Fields.DOCUMENT_NUMBER,_Fields.DOCUMENT_TYPE_CODE,_Fields.POLICY_SERIAL,_Fields.POLICY_NUMBER,_Fields.POLICY_TYPE_CODE,_Fields.POLICY_INSURER_INFIS_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATR_NAME, new org.apache.thrift.meta_data.FieldMetaData("patrName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTH_DATE, new org.apache.thrift.meta_data.FieldMetaData("birthDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOCUMENT_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("documentSerial", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("documentNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("documentTypeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLICY_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("policySerial", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLICY_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("policyNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLICY_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("policyTypeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLICY_INSURER_INFIS_CODE, new org.apache.thrift.meta_data.FieldMetaData("policyInsurerInfisCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPatientParameters.class, metaDataMap);
  }

  public AddPatientParameters() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddPatientParameters(AddPatientParameters other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetPatrName()) {
      this.patrName = other.patrName;
    }
    this.birthDate = other.birthDate;
    this.sex = other.sex;
    if (other.isSetDocumentSerial()) {
      this.documentSerial = other.documentSerial;
    }
    if (other.isSetDocumentNumber()) {
      this.documentNumber = other.documentNumber;
    }
    if (other.isSetDocumentTypeCode()) {
      this.documentTypeCode = other.documentTypeCode;
    }
    if (other.isSetPolicySerial()) {
      this.policySerial = other.policySerial;
    }
    if (other.isSetPolicyNumber()) {
      this.policyNumber = other.policyNumber;
    }
    if (other.isSetPolicyTypeCode()) {
      this.policyTypeCode = other.policyTypeCode;
    }
    if (other.isSetPolicyInsurerInfisCode()) {
      this.policyInsurerInfisCode = other.policyInsurerInfisCode;
    }
  }

  public AddPatientParameters deepCopy() {
    return new AddPatientParameters(this);
  }

  @Override
  public void clear() {
    this.lastName = null;
    this.firstName = null;
    this.patrName = null;
    setBirthDateIsSet(false);
    this.birthDate = 0;
    setSexIsSet(false);
    this.sex = 0;
    this.documentSerial = null;
    this.documentNumber = null;
    this.documentTypeCode = null;
    this.policySerial = null;
    this.policyNumber = null;
    this.policyTypeCode = null;
    this.policyInsurerInfisCode = null;
  }

  public String getLastName() {
    return this.lastName;
  }

  public AddPatientParameters setLastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public String getFirstName() {
    return this.firstName;
  }

  public AddPatientParameters setFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getPatrName() {
    return this.patrName;
  }

  public AddPatientParameters setPatrName(String patrName) {
    this.patrName = patrName;
    return this;
  }

  public void unsetPatrName() {
    this.patrName = null;
  }

  /** Returns true if field patrName is set (has been assigned a value) and false otherwise */
  public boolean isSetPatrName() {
    return this.patrName != null;
  }

  public void setPatrNameIsSet(boolean value) {
    if (!value) {
      this.patrName = null;
    }
  }

  public long getBirthDate() {
    return this.birthDate;
  }

  public AddPatientParameters setBirthDate(long birthDate) {
    this.birthDate = birthDate;
    setBirthDateIsSet(true);
    return this;
  }

  public void unsetBirthDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDATE_ISSET_ID);
  }

  /** Returns true if field birthDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthDate() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDATE_ISSET_ID);
  }

  public void setBirthDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDATE_ISSET_ID, value);
  }

  public int getSex() {
    return this.sex;
  }

  public AddPatientParameters setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getDocumentSerial() {
    return this.documentSerial;
  }

  public AddPatientParameters setDocumentSerial(String documentSerial) {
    this.documentSerial = documentSerial;
    return this;
  }

  public void unsetDocumentSerial() {
    this.documentSerial = null;
  }

  /** Returns true if field documentSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentSerial() {
    return this.documentSerial != null;
  }

  public void setDocumentSerialIsSet(boolean value) {
    if (!value) {
      this.documentSerial = null;
    }
  }

  public String getDocumentNumber() {
    return this.documentNumber;
  }

  public AddPatientParameters setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  public void unsetDocumentNumber() {
    this.documentNumber = null;
  }

  /** Returns true if field documentNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentNumber() {
    return this.documentNumber != null;
  }

  public void setDocumentNumberIsSet(boolean value) {
    if (!value) {
      this.documentNumber = null;
    }
  }

  public String getDocumentTypeCode() {
    return this.documentTypeCode;
  }

  public AddPatientParameters setDocumentTypeCode(String documentTypeCode) {
    this.documentTypeCode = documentTypeCode;
    return this;
  }

  public void unsetDocumentTypeCode() {
    this.documentTypeCode = null;
  }

  /** Returns true if field documentTypeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentTypeCode() {
    return this.documentTypeCode != null;
  }

  public void setDocumentTypeCodeIsSet(boolean value) {
    if (!value) {
      this.documentTypeCode = null;
    }
  }

  public String getPolicySerial() {
    return this.policySerial;
  }

  public AddPatientParameters setPolicySerial(String policySerial) {
    this.policySerial = policySerial;
    return this;
  }

  public void unsetPolicySerial() {
    this.policySerial = null;
  }

  /** Returns true if field policySerial is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicySerial() {
    return this.policySerial != null;
  }

  public void setPolicySerialIsSet(boolean value) {
    if (!value) {
      this.policySerial = null;
    }
  }

  public String getPolicyNumber() {
    return this.policyNumber;
  }

  public AddPatientParameters setPolicyNumber(String policyNumber) {
    this.policyNumber = policyNumber;
    return this;
  }

  public void unsetPolicyNumber() {
    this.policyNumber = null;
  }

  /** Returns true if field policyNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicyNumber() {
    return this.policyNumber != null;
  }

  public void setPolicyNumberIsSet(boolean value) {
    if (!value) {
      this.policyNumber = null;
    }
  }

  public String getPolicyTypeCode() {
    return this.policyTypeCode;
  }

  public AddPatientParameters setPolicyTypeCode(String policyTypeCode) {
    this.policyTypeCode = policyTypeCode;
    return this;
  }

  public void unsetPolicyTypeCode() {
    this.policyTypeCode = null;
  }

  /** Returns true if field policyTypeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicyTypeCode() {
    return this.policyTypeCode != null;
  }

  public void setPolicyTypeCodeIsSet(boolean value) {
    if (!value) {
      this.policyTypeCode = null;
    }
  }

  public String getPolicyInsurerInfisCode() {
    return this.policyInsurerInfisCode;
  }

  public AddPatientParameters setPolicyInsurerInfisCode(String policyInsurerInfisCode) {
    this.policyInsurerInfisCode = policyInsurerInfisCode;
    return this;
  }

  public void unsetPolicyInsurerInfisCode() {
    this.policyInsurerInfisCode = null;
  }

  /** Returns true if field policyInsurerInfisCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicyInsurerInfisCode() {
    return this.policyInsurerInfisCode != null;
  }

  public void setPolicyInsurerInfisCodeIsSet(boolean value) {
    if (!value) {
      this.policyInsurerInfisCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((String)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case PATR_NAME:
      if (value == null) {
        unsetPatrName();
      } else {
        setPatrName((String)value);
      }
      break;

    case BIRTH_DATE:
      if (value == null) {
        unsetBirthDate();
      } else {
        setBirthDate((Long)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case DOCUMENT_SERIAL:
      if (value == null) {
        unsetDocumentSerial();
      } else {
        setDocumentSerial((String)value);
      }
      break;

    case DOCUMENT_NUMBER:
      if (value == null) {
        unsetDocumentNumber();
      } else {
        setDocumentNumber((String)value);
      }
      break;

    case DOCUMENT_TYPE_CODE:
      if (value == null) {
        unsetDocumentTypeCode();
      } else {
        setDocumentTypeCode((String)value);
      }
      break;

    case POLICY_SERIAL:
      if (value == null) {
        unsetPolicySerial();
      } else {
        setPolicySerial((String)value);
      }
      break;

    case POLICY_NUMBER:
      if (value == null) {
        unsetPolicyNumber();
      } else {
        setPolicyNumber((String)value);
      }
      break;

    case POLICY_TYPE_CODE:
      if (value == null) {
        unsetPolicyTypeCode();
      } else {
        setPolicyTypeCode((String)value);
      }
      break;

    case POLICY_INSURER_INFIS_CODE:
      if (value == null) {
        unsetPolicyInsurerInfisCode();
      } else {
        setPolicyInsurerInfisCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAST_NAME:
      return getLastName();

    case FIRST_NAME:
      return getFirstName();

    case PATR_NAME:
      return getPatrName();

    case BIRTH_DATE:
      return Long.valueOf(getBirthDate());

    case SEX:
      return Integer.valueOf(getSex());

    case DOCUMENT_SERIAL:
      return getDocumentSerial();

    case DOCUMENT_NUMBER:
      return getDocumentNumber();

    case DOCUMENT_TYPE_CODE:
      return getDocumentTypeCode();

    case POLICY_SERIAL:
      return getPolicySerial();

    case POLICY_NUMBER:
      return getPolicyNumber();

    case POLICY_TYPE_CODE:
      return getPolicyTypeCode();

    case POLICY_INSURER_INFIS_CODE:
      return getPolicyInsurerInfisCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAST_NAME:
      return isSetLastName();
    case FIRST_NAME:
      return isSetFirstName();
    case PATR_NAME:
      return isSetPatrName();
    case BIRTH_DATE:
      return isSetBirthDate();
    case SEX:
      return isSetSex();
    case DOCUMENT_SERIAL:
      return isSetDocumentSerial();
    case DOCUMENT_NUMBER:
      return isSetDocumentNumber();
    case DOCUMENT_TYPE_CODE:
      return isSetDocumentTypeCode();
    case POLICY_SERIAL:
      return isSetPolicySerial();
    case POLICY_NUMBER:
      return isSetPolicyNumber();
    case POLICY_TYPE_CODE:
      return isSetPolicyTypeCode();
    case POLICY_INSURER_INFIS_CODE:
      return isSetPolicyInsurerInfisCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddPatientParameters)
      return this.equals((AddPatientParameters)that);
    return false;
  }

  public boolean equals(AddPatientParameters that) {
    if (that == null)
      return false;

    boolean this_present_lastName = true && this.isSetLastName();
    boolean that_present_lastName = true && that.isSetLastName();
    if (this_present_lastName || that_present_lastName) {
      if (!(this_present_lastName && that_present_lastName))
        return false;
      if (!this.lastName.equals(that.lastName))
        return false;
    }

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_patrName = true && this.isSetPatrName();
    boolean that_present_patrName = true && that.isSetPatrName();
    if (this_present_patrName || that_present_patrName) {
      if (!(this_present_patrName && that_present_patrName))
        return false;
      if (!this.patrName.equals(that.patrName))
        return false;
    }

    boolean this_present_birthDate = true && this.isSetBirthDate();
    boolean that_present_birthDate = true && that.isSetBirthDate();
    if (this_present_birthDate || that_present_birthDate) {
      if (!(this_present_birthDate && that_present_birthDate))
        return false;
      if (this.birthDate != that.birthDate)
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_documentSerial = true && this.isSetDocumentSerial();
    boolean that_present_documentSerial = true && that.isSetDocumentSerial();
    if (this_present_documentSerial || that_present_documentSerial) {
      if (!(this_present_documentSerial && that_present_documentSerial))
        return false;
      if (!this.documentSerial.equals(that.documentSerial))
        return false;
    }

    boolean this_present_documentNumber = true && this.isSetDocumentNumber();
    boolean that_present_documentNumber = true && that.isSetDocumentNumber();
    if (this_present_documentNumber || that_present_documentNumber) {
      if (!(this_present_documentNumber && that_present_documentNumber))
        return false;
      if (!this.documentNumber.equals(that.documentNumber))
        return false;
    }

    boolean this_present_documentTypeCode = true && this.isSetDocumentTypeCode();
    boolean that_present_documentTypeCode = true && that.isSetDocumentTypeCode();
    if (this_present_documentTypeCode || that_present_documentTypeCode) {
      if (!(this_present_documentTypeCode && that_present_documentTypeCode))
        return false;
      if (!this.documentTypeCode.equals(that.documentTypeCode))
        return false;
    }

    boolean this_present_policySerial = true && this.isSetPolicySerial();
    boolean that_present_policySerial = true && that.isSetPolicySerial();
    if (this_present_policySerial || that_present_policySerial) {
      if (!(this_present_policySerial && that_present_policySerial))
        return false;
      if (!this.policySerial.equals(that.policySerial))
        return false;
    }

    boolean this_present_policyNumber = true && this.isSetPolicyNumber();
    boolean that_present_policyNumber = true && that.isSetPolicyNumber();
    if (this_present_policyNumber || that_present_policyNumber) {
      if (!(this_present_policyNumber && that_present_policyNumber))
        return false;
      if (!this.policyNumber.equals(that.policyNumber))
        return false;
    }

    boolean this_present_policyTypeCode = true && this.isSetPolicyTypeCode();
    boolean that_present_policyTypeCode = true && that.isSetPolicyTypeCode();
    if (this_present_policyTypeCode || that_present_policyTypeCode) {
      if (!(this_present_policyTypeCode && that_present_policyTypeCode))
        return false;
      if (!this.policyTypeCode.equals(that.policyTypeCode))
        return false;
    }

    boolean this_present_policyInsurerInfisCode = true && this.isSetPolicyInsurerInfisCode();
    boolean that_present_policyInsurerInfisCode = true && that.isSetPolicyInsurerInfisCode();
    if (this_present_policyInsurerInfisCode || that_present_policyInsurerInfisCode) {
      if (!(this_present_policyInsurerInfisCode && that_present_policyInsurerInfisCode))
        return false;
      if (!this.policyInsurerInfisCode.equals(that.policyInsurerInfisCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AddPatientParameters other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AddPatientParameters typedOther = (AddPatientParameters)other;

    lastComparison = Boolean.valueOf(isSetLastName()).compareTo(typedOther.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, typedOther.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(typedOther.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, typedOther.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatrName()).compareTo(typedOther.isSetPatrName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatrName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patrName, typedOther.patrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthDate()).compareTo(typedOther.isSetBirthDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthDate, typedOther.birthDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocumentSerial()).compareTo(typedOther.isSetDocumentSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentSerial, typedOther.documentSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocumentNumber()).compareTo(typedOther.isSetDocumentNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentNumber, typedOther.documentNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocumentTypeCode()).compareTo(typedOther.isSetDocumentTypeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentTypeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentTypeCode, typedOther.documentTypeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicySerial()).compareTo(typedOther.isSetPolicySerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicySerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policySerial, typedOther.policySerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicyNumber()).compareTo(typedOther.isSetPolicyNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicyNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policyNumber, typedOther.policyNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicyTypeCode()).compareTo(typedOther.isSetPolicyTypeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicyTypeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policyTypeCode, typedOther.policyTypeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicyInsurerInfisCode()).compareTo(typedOther.isSetPolicyInsurerInfisCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicyInsurerInfisCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policyInsurerInfisCode, typedOther.policyInsurerInfisCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddPatientParameters(");
    boolean first = true;

    if (isSetLastName()) {
      sb.append("lastName:");
      if (this.lastName == null) {
        sb.append("null");
      } else {
        sb.append(this.lastName);
      }
      first = false;
    }
    if (isSetFirstName()) {
      if (!first) sb.append(", ");
      sb.append("firstName:");
      if (this.firstName == null) {
        sb.append("null");
      } else {
        sb.append(this.firstName);
      }
      first = false;
    }
    if (isSetPatrName()) {
      if (!first) sb.append(", ");
      sb.append("patrName:");
      if (this.patrName == null) {
        sb.append("null");
      } else {
        sb.append(this.patrName);
      }
      first = false;
    }
    if (isSetBirthDate()) {
      if (!first) sb.append(", ");
      sb.append("birthDate:");
      sb.append(this.birthDate);
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetDocumentSerial()) {
      if (!first) sb.append(", ");
      sb.append("documentSerial:");
      if (this.documentSerial == null) {
        sb.append("null");
      } else {
        sb.append(this.documentSerial);
      }
      first = false;
    }
    if (isSetDocumentNumber()) {
      if (!first) sb.append(", ");
      sb.append("documentNumber:");
      if (this.documentNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.documentNumber);
      }
      first = false;
    }
    if (isSetDocumentTypeCode()) {
      if (!first) sb.append(", ");
      sb.append("documentTypeCode:");
      if (this.documentTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.documentTypeCode);
      }
      first = false;
    }
    if (isSetPolicySerial()) {
      if (!first) sb.append(", ");
      sb.append("policySerial:");
      if (this.policySerial == null) {
        sb.append("null");
      } else {
        sb.append(this.policySerial);
      }
      first = false;
    }
    if (isSetPolicyNumber()) {
      if (!first) sb.append(", ");
      sb.append("policyNumber:");
      if (this.policyNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.policyNumber);
      }
      first = false;
    }
    if (isSetPolicyTypeCode()) {
      if (!first) sb.append(", ");
      sb.append("policyTypeCode:");
      if (this.policyTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.policyTypeCode);
      }
      first = false;
    }
    if (isSetPolicyInsurerInfisCode()) {
      if (!first) sb.append(", ");
      sb.append("policyInsurerInfisCode:");
      if (this.policyInsurerInfisCode == null) {
        sb.append("null");
      } else {
        sb.append(this.policyInsurerInfisCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddPatientParametersStandardSchemeFactory implements SchemeFactory {
    public AddPatientParametersStandardScheme getScheme() {
      return new AddPatientParametersStandardScheme();
    }
  }

  private static class AddPatientParametersStandardScheme extends StandardScheme<AddPatientParameters> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddPatientParameters struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastName = iprot.readString();
              struct.setLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PATR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.patrName = iprot.readString();
              struct.setPatrNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BIRTH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.birthDate = iprot.readI64();
              struct.setBirthDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOCUMENT_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documentSerial = iprot.readString();
              struct.setDocumentSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOCUMENT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documentNumber = iprot.readString();
              struct.setDocumentNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOCUMENT_TYPE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documentTypeCode = iprot.readString();
              struct.setDocumentTypeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POLICY_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.policySerial = iprot.readString();
              struct.setPolicySerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POLICY_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.policyNumber = iprot.readString();
              struct.setPolicyNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POLICY_TYPE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.policyTypeCode = iprot.readString();
              struct.setPolicyTypeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POLICY_INSURER_INFIS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.policyInsurerInfisCode = iprot.readString();
              struct.setPolicyInsurerInfisCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddPatientParameters struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lastName != null) {
        if (struct.isSetLastName()) {
          oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
          oprot.writeString(struct.lastName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.firstName != null) {
        if (struct.isSetFirstName()) {
          oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
          oprot.writeString(struct.firstName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.patrName != null) {
        if (struct.isSetPatrName()) {
          oprot.writeFieldBegin(PATR_NAME_FIELD_DESC);
          oprot.writeString(struct.patrName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBirthDate()) {
        oprot.writeFieldBegin(BIRTH_DATE_FIELD_DESC);
        oprot.writeI64(struct.birthDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.documentSerial != null) {
        if (struct.isSetDocumentSerial()) {
          oprot.writeFieldBegin(DOCUMENT_SERIAL_FIELD_DESC);
          oprot.writeString(struct.documentSerial);
          oprot.writeFieldEnd();
        }
      }
      if (struct.documentNumber != null) {
        if (struct.isSetDocumentNumber()) {
          oprot.writeFieldBegin(DOCUMENT_NUMBER_FIELD_DESC);
          oprot.writeString(struct.documentNumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.documentTypeCode != null) {
        if (struct.isSetDocumentTypeCode()) {
          oprot.writeFieldBegin(DOCUMENT_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.documentTypeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.policySerial != null) {
        if (struct.isSetPolicySerial()) {
          oprot.writeFieldBegin(POLICY_SERIAL_FIELD_DESC);
          oprot.writeString(struct.policySerial);
          oprot.writeFieldEnd();
        }
      }
      if (struct.policyNumber != null) {
        if (struct.isSetPolicyNumber()) {
          oprot.writeFieldBegin(POLICY_NUMBER_FIELD_DESC);
          oprot.writeString(struct.policyNumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.policyTypeCode != null) {
        if (struct.isSetPolicyTypeCode()) {
          oprot.writeFieldBegin(POLICY_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.policyTypeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.policyInsurerInfisCode != null) {
        if (struct.isSetPolicyInsurerInfisCode()) {
          oprot.writeFieldBegin(POLICY_INSURER_INFIS_CODE_FIELD_DESC);
          oprot.writeString(struct.policyInsurerInfisCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddPatientParametersTupleSchemeFactory implements SchemeFactory {
    public AddPatientParametersTupleScheme getScheme() {
      return new AddPatientParametersTupleScheme();
    }
  }

  private static class AddPatientParametersTupleScheme extends TupleScheme<AddPatientParameters> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AddPatientParameters struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLastName()) {
        optionals.set(0);
      }
      if (struct.isSetFirstName()) {
        optionals.set(1);
      }
      if (struct.isSetPatrName()) {
        optionals.set(2);
      }
      if (struct.isSetBirthDate()) {
        optionals.set(3);
      }
      if (struct.isSetSex()) {
        optionals.set(4);
      }
      if (struct.isSetDocumentSerial()) {
        optionals.set(5);
      }
      if (struct.isSetDocumentNumber()) {
        optionals.set(6);
      }
      if (struct.isSetDocumentTypeCode()) {
        optionals.set(7);
      }
      if (struct.isSetPolicySerial()) {
        optionals.set(8);
      }
      if (struct.isSetPolicyNumber()) {
        optionals.set(9);
      }
      if (struct.isSetPolicyTypeCode()) {
        optionals.set(10);
      }
      if (struct.isSetPolicyInsurerInfisCode()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetLastName()) {
        oprot.writeString(struct.lastName);
      }
      if (struct.isSetFirstName()) {
        oprot.writeString(struct.firstName);
      }
      if (struct.isSetPatrName()) {
        oprot.writeString(struct.patrName);
      }
      if (struct.isSetBirthDate()) {
        oprot.writeI64(struct.birthDate);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetDocumentSerial()) {
        oprot.writeString(struct.documentSerial);
      }
      if (struct.isSetDocumentNumber()) {
        oprot.writeString(struct.documentNumber);
      }
      if (struct.isSetDocumentTypeCode()) {
        oprot.writeString(struct.documentTypeCode);
      }
      if (struct.isSetPolicySerial()) {
        oprot.writeString(struct.policySerial);
      }
      if (struct.isSetPolicyNumber()) {
        oprot.writeString(struct.policyNumber);
      }
      if (struct.isSetPolicyTypeCode()) {
        oprot.writeString(struct.policyTypeCode);
      }
      if (struct.isSetPolicyInsurerInfisCode()) {
        oprot.writeString(struct.policyInsurerInfisCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddPatientParameters struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.lastName = iprot.readString();
        struct.setLastNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.firstName = iprot.readString();
        struct.setFirstNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.patrName = iprot.readString();
        struct.setPatrNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.birthDate = iprot.readI64();
        struct.setBirthDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.documentSerial = iprot.readString();
        struct.setDocumentSerialIsSet(true);
      }
      if (incoming.get(6)) {
        struct.documentNumber = iprot.readString();
        struct.setDocumentNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.documentTypeCode = iprot.readString();
        struct.setDocumentTypeCodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.policySerial = iprot.readString();
        struct.setPolicySerialIsSet(true);
      }
      if (incoming.get(9)) {
        struct.policyNumber = iprot.readString();
        struct.setPolicyNumberIsSet(true);
      }
      if (incoming.get(10)) {
        struct.policyTypeCode = iprot.readString();
        struct.setPolicyTypeCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.policyInsurerInfisCode = iprot.readString();
        struct.setPolicyInsurerInfisCodeIsSet(true);
      }
    }
  }

}

