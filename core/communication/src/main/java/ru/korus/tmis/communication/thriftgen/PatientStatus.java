/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PatientStatus implements org.apache.thrift.TBase<PatientStatus, PatientStatus._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PatientStatus");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 1);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.I32, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new PatientStatusStandardSchemeFactory());
        schemes.put(TupleScheme.class, new PatientStatusTupleSchemeFactory());
    }

    public boolean success; // required
    public String message; // optional
    public int patientId; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        SUCCESS((short) 1, "success"),
        MESSAGE((short) 2, "message"),
        PATIENT_ID((short) 3, "patientId");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // SUCCESS
                    return SUCCESS;
                case 2: // MESSAGE
                    return MESSAGE;
                case 3: // PATIENT_ID
                    return PATIENT_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private static final int __PATIENTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    private _Fields optionals[] = {_Fields.MESSAGE, _Fields.PATIENT_ID};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PatientStatus.class, metaDataMap);
    }

    public PatientStatus() {
    }

    public PatientStatus(
            boolean success) {
        this();
        this.success = success;
        setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PatientStatus(PatientStatus other) {
        __isset_bitfield = other.__isset_bitfield;
        this.success = other.success;
        if (other.isSetMessage()) {
            this.message = other.message;
        }
        this.patientId = other.patientId;
    }

    public PatientStatus deepCopy() {
        return new PatientStatus(this);
    }

    @Override
    public void clear() {
        setSuccessIsSet(false);
        this.success = false;
        this.message = null;
        setPatientIdIsSet(false);
        this.patientId = 0;
    }

    public boolean isSuccess() {
        return this.success;
    }

    public PatientStatus setSuccess(boolean success) {
        this.success = success;
        setSuccessIsSet(true);
        return this;
    }

    public void unsetSuccess() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /**
     * Returns true if field success is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSuccess() {
        return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public String getMessage() {
        return this.message;
    }

    public PatientStatus setMessage(String message) {
        this.message = message;
        return this;
    }

    public void unsetMessage() {
        this.message = null;
    }

    /**
     * Returns true if field message is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMessage() {
        return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
        if (!value) {
            this.message = null;
        }
    }

    public int getPatientId() {
        return this.patientId;
    }

    public PatientStatus setPatientId(int patientId) {
        this.patientId = patientId;
        setPatientIdIsSet(true);
        return this;
    }

    public void unsetPatientId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    /**
     * Returns true if field patientId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPatientId() {
        return EncodingUtils.testBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    public void setPatientIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATIENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((Boolean) value);
                }
                break;

            case MESSAGE:
                if (value == null) {
                    unsetMessage();
                } else {
                    setMessage((String) value);
                }
                break;

            case PATIENT_ID:
                if (value == null) {
                    unsetPatientId();
                } else {
                    setPatientId((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case SUCCESS:
                return Boolean.valueOf(isSuccess());

            case MESSAGE:
                return getMessage();

            case PATIENT_ID:
                return Integer.valueOf(getPatientId());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case MESSAGE:
                return isSetMessage();
            case PATIENT_ID:
                return isSetPatientId();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof PatientStatus)
            return this.equals((PatientStatus) that);
        return false;
    }

    public boolean equals(PatientStatus that) {
        if (that == null)
            return false;

        boolean this_present_success = true;
        boolean that_present_success = true;
        if (this_present_success || that_present_success) {
            if (!(this_present_success && that_present_success))
                return false;
            if (this.success != that.success)
                return false;
        }

        boolean this_present_message = true && this.isSetMessage();
        boolean that_present_message = true && that.isSetMessage();
        if (this_present_message || that_present_message) {
            if (!(this_present_message && that_present_message))
                return false;
            if (!this.message.equals(that.message))
                return false;
        }

        boolean this_present_patientId = true && this.isSetPatientId();
        boolean that_present_patientId = true && that.isSetPatientId();
        if (this_present_patientId || that_present_patientId) {
            if (!(this_present_patientId && that_present_patientId))
                return false;
            if (this.patientId != that.patientId)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(PatientStatus other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        PatientStatus typedOther = (PatientStatus) other;

        lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSuccess()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMessage()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(typedOther.isSetPatientId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPatientId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, typedOther.patientId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PatientStatus(");
        boolean first = true;

        sb.append("success:");
        sb.append(this.success);
        first = false;
        if (isSetMessage()) {
            if (!first) sb.append(", ");
            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
        }
        if (isSetPatientId()) {
            if (!first) sb.append(", ");
            sb.append("patientId:");
            sb.append(this.patientId);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'success' because it's a primitive and you chose the non-beans generator.
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class PatientStatusStandardSchemeFactory implements SchemeFactory {
        public PatientStatusStandardScheme getScheme() {
            return new PatientStatusStandardScheme();
        }
    }

    private static class PatientStatusStandardScheme extends StandardScheme<PatientStatus> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, PatientStatus struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.success = iprot.readBool();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // MESSAGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.message = iprot.readString();
                            struct.setMessageIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PATIENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.patientId = iprot.readI32();
                            struct.setPatientIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetSuccess()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'success' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, PatientStatus struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            oprot.writeBool(struct.success);
            oprot.writeFieldEnd();
            if (struct.message != null) {
                if (struct.isSetMessage()) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    oprot.writeString(struct.message);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetPatientId()) {
                oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
                oprot.writeI32(struct.patientId);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class PatientStatusTupleSchemeFactory implements SchemeFactory {
        public PatientStatusTupleScheme getScheme() {
            return new PatientStatusTupleScheme();
        }
    }

    private static class PatientStatusTupleScheme extends TupleScheme<PatientStatus> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, PatientStatus struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeBool(struct.success);
            BitSet optionals = new BitSet();
            if (struct.isSetMessage()) {
                optionals.set(0);
            }
            if (struct.isSetPatientId()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetMessage()) {
                oprot.writeString(struct.message);
            }
            if (struct.isSetPatientId()) {
                oprot.writeI32(struct.patientId);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, PatientStatus struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.success = iprot.readBool();
            struct.setSuccessIsSet(true);
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
            }
            if (incoming.get(1)) {
                struct.patientId = iprot.readI32();
                struct.setPatientIdIsSet(true);
            }
        }
    }

}

