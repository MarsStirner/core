/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrgStructuresProperties implements org.apache.thrift.TBase<OrgStructuresProperties, OrgStructuresProperties._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgStructuresProperties");

    private static final org.apache.thrift.protocol.TField ORG_STRUCTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgStructureId", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField ATTACHED_FIELD_DESC = new org.apache.thrift.protocol.TField("attached", org.apache.thrift.protocol.TType.BOOL, (short) 2);
    private static final org.apache.thrift.protocol.TField MATCH_REG_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("matchRegAddress", org.apache.thrift.protocol.TType.BOOL, (short) 3);
    private static final org.apache.thrift.protocol.TField MATCH_LOC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("matchLocAddress", org.apache.thrift.protocol.TType.BOOL, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new OrgStructuresPropertiesStandardSchemeFactory());
        schemes.put(TupleScheme.class, new OrgStructuresPropertiesTupleSchemeFactory());
    }

    public int orgStructureId; // required
    public boolean attached; // optional
    public boolean matchRegAddress; // optional
    public boolean matchLocAddress; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ORG_STRUCTURE_ID((short) 1, "orgStructureId"),
        ATTACHED((short) 2, "attached"),
        MATCH_REG_ADDRESS((short) 3, "matchRegAddress"),
        MATCH_LOC_ADDRESS((short) 4, "matchLocAddress");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ORG_STRUCTURE_ID
                    return ORG_STRUCTURE_ID;
                case 2: // ATTACHED
                    return ATTACHED;
                case 3: // MATCH_REG_ADDRESS
                    return MATCH_REG_ADDRESS;
                case 4: // MATCH_LOC_ADDRESS
                    return MATCH_LOC_ADDRESS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ORGSTRUCTUREID_ISSET_ID = 0;
    private static final int __ATTACHED_ISSET_ID = 1;
    private static final int __MATCHREGADDRESS_ISSET_ID = 2;
    private static final int __MATCHLOCADDRESS_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    private _Fields optionals[] = {_Fields.ATTACHED, _Fields.MATCH_REG_ADDRESS, _Fields.MATCH_LOC_ADDRESS};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ORG_STRUCTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("orgStructureId", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ATTACHED, new org.apache.thrift.meta_data.FieldMetaData("attached", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.MATCH_REG_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("matchRegAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.MATCH_LOC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("matchLocAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgStructuresProperties.class, metaDataMap);
    }

    public OrgStructuresProperties() {
    }

    public OrgStructuresProperties(
            int orgStructureId) {
        this();
        this.orgStructureId = orgStructureId;
        setOrgStructureIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OrgStructuresProperties(OrgStructuresProperties other) {
        __isset_bitfield = other.__isset_bitfield;
        this.orgStructureId = other.orgStructureId;
        this.attached = other.attached;
        this.matchRegAddress = other.matchRegAddress;
        this.matchLocAddress = other.matchLocAddress;
    }

    public OrgStructuresProperties deepCopy() {
        return new OrgStructuresProperties(this);
    }

    @Override
    public void clear() {
        setOrgStructureIdIsSet(false);
        this.orgStructureId = 0;
        setAttachedIsSet(false);
        this.attached = false;
        setMatchRegAddressIsSet(false);
        this.matchRegAddress = false;
        setMatchLocAddressIsSet(false);
        this.matchLocAddress = false;
    }

    public int getOrgStructureId() {
        return this.orgStructureId;
    }

    public OrgStructuresProperties setOrgStructureId(int orgStructureId) {
        this.orgStructureId = orgStructureId;
        setOrgStructureIdIsSet(true);
        return this;
    }

    public void unsetOrgStructureId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGSTRUCTUREID_ISSET_ID);
    }

    /**
     * Returns true if field orgStructureId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetOrgStructureId() {
        return EncodingUtils.testBit(__isset_bitfield, __ORGSTRUCTUREID_ISSET_ID);
    }

    public void setOrgStructureIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGSTRUCTUREID_ISSET_ID, value);
    }

    public boolean isAttached() {
        return this.attached;
    }

    public OrgStructuresProperties setAttached(boolean attached) {
        this.attached = attached;
        setAttachedIsSet(true);
        return this;
    }

    public void unsetAttached() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTACHED_ISSET_ID);
    }

    /**
     * Returns true if field attached is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAttached() {
        return EncodingUtils.testBit(__isset_bitfield, __ATTACHED_ISSET_ID);
    }

    public void setAttachedIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTACHED_ISSET_ID, value);
    }

    public boolean isMatchRegAddress() {
        return this.matchRegAddress;
    }

    public OrgStructuresProperties setMatchRegAddress(boolean matchRegAddress) {
        this.matchRegAddress = matchRegAddress;
        setMatchRegAddressIsSet(true);
        return this;
    }

    public void unsetMatchRegAddress() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHREGADDRESS_ISSET_ID);
    }

    /**
     * Returns true if field matchRegAddress is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMatchRegAddress() {
        return EncodingUtils.testBit(__isset_bitfield, __MATCHREGADDRESS_ISSET_ID);
    }

    public void setMatchRegAddressIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHREGADDRESS_ISSET_ID, value);
    }

    public boolean isMatchLocAddress() {
        return this.matchLocAddress;
    }

    public OrgStructuresProperties setMatchLocAddress(boolean matchLocAddress) {
        this.matchLocAddress = matchLocAddress;
        setMatchLocAddressIsSet(true);
        return this;
    }

    public void unsetMatchLocAddress() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHLOCADDRESS_ISSET_ID);
    }

    /**
     * Returns true if field matchLocAddress is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMatchLocAddress() {
        return EncodingUtils.testBit(__isset_bitfield, __MATCHLOCADDRESS_ISSET_ID);
    }

    public void setMatchLocAddressIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHLOCADDRESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case ORG_STRUCTURE_ID:
                if (value == null) {
                    unsetOrgStructureId();
                } else {
                    setOrgStructureId((Integer) value);
                }
                break;

            case ATTACHED:
                if (value == null) {
                    unsetAttached();
                } else {
                    setAttached((Boolean) value);
                }
                break;

            case MATCH_REG_ADDRESS:
                if (value == null) {
                    unsetMatchRegAddress();
                } else {
                    setMatchRegAddress((Boolean) value);
                }
                break;

            case MATCH_LOC_ADDRESS:
                if (value == null) {
                    unsetMatchLocAddress();
                } else {
                    setMatchLocAddress((Boolean) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case ORG_STRUCTURE_ID:
                return Integer.valueOf(getOrgStructureId());

            case ATTACHED:
                return Boolean.valueOf(isAttached());

            case MATCH_REG_ADDRESS:
                return Boolean.valueOf(isMatchRegAddress());

            case MATCH_LOC_ADDRESS:
                return Boolean.valueOf(isMatchLocAddress());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case ORG_STRUCTURE_ID:
                return isSetOrgStructureId();
            case ATTACHED:
                return isSetAttached();
            case MATCH_REG_ADDRESS:
                return isSetMatchRegAddress();
            case MATCH_LOC_ADDRESS:
                return isSetMatchLocAddress();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof OrgStructuresProperties)
            return this.equals((OrgStructuresProperties) that);
        return false;
    }

    public boolean equals(OrgStructuresProperties that) {
        if (that == null)
            return false;

        boolean this_present_orgStructureId = true;
        boolean that_present_orgStructureId = true;
        if (this_present_orgStructureId || that_present_orgStructureId) {
            if (!(this_present_orgStructureId && that_present_orgStructureId))
                return false;
            if (this.orgStructureId != that.orgStructureId)
                return false;
        }

        boolean this_present_attached = true && this.isSetAttached();
        boolean that_present_attached = true && that.isSetAttached();
        if (this_present_attached || that_present_attached) {
            if (!(this_present_attached && that_present_attached))
                return false;
            if (this.attached != that.attached)
                return false;
        }

        boolean this_present_matchRegAddress = true && this.isSetMatchRegAddress();
        boolean that_present_matchRegAddress = true && that.isSetMatchRegAddress();
        if (this_present_matchRegAddress || that_present_matchRegAddress) {
            if (!(this_present_matchRegAddress && that_present_matchRegAddress))
                return false;
            if (this.matchRegAddress != that.matchRegAddress)
                return false;
        }

        boolean this_present_matchLocAddress = true && this.isSetMatchLocAddress();
        boolean that_present_matchLocAddress = true && that.isSetMatchLocAddress();
        if (this_present_matchLocAddress || that_present_matchLocAddress) {
            if (!(this_present_matchLocAddress && that_present_matchLocAddress))
                return false;
            if (this.matchLocAddress != that.matchLocAddress)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(OrgStructuresProperties other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        OrgStructuresProperties typedOther = (OrgStructuresProperties) other;

        lastComparison = Boolean.valueOf(isSetOrgStructureId()).compareTo(typedOther.isSetOrgStructureId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOrgStructureId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgStructureId, typedOther.orgStructureId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAttached()).compareTo(typedOther.isSetAttached());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAttached()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attached, typedOther.attached);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMatchRegAddress()).compareTo(typedOther.isSetMatchRegAddress());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMatchRegAddress()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchRegAddress, typedOther.matchRegAddress);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMatchLocAddress()).compareTo(typedOther.isSetMatchLocAddress());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMatchLocAddress()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchLocAddress, typedOther.matchLocAddress);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OrgStructuresProperties(");
        boolean first = true;

        sb.append("orgStructureId:");
        sb.append(this.orgStructureId);
        first = false;
        if (isSetAttached()) {
            if (!first) sb.append(", ");
            sb.append("attached:");
            sb.append(this.attached);
            first = false;
        }
        if (isSetMatchRegAddress()) {
            if (!first) sb.append(", ");
            sb.append("matchRegAddress:");
            sb.append(this.matchRegAddress);
            first = false;
        }
        if (isSetMatchLocAddress()) {
            if (!first) sb.append(", ");
            sb.append("matchLocAddress:");
            sb.append(this.matchLocAddress);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'orgStructureId' because it's a primitive and you chose the non-beans generator.
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class OrgStructuresPropertiesStandardSchemeFactory implements SchemeFactory {
        public OrgStructuresPropertiesStandardScheme getScheme() {
            return new OrgStructuresPropertiesStandardScheme();
        }
    }

    private static class OrgStructuresPropertiesStandardScheme extends StandardScheme<OrgStructuresProperties> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, OrgStructuresProperties struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ORG_STRUCTURE_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.orgStructureId = iprot.readI32();
                            struct.setOrgStructureIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // ATTACHED
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.attached = iprot.readBool();
                            struct.setAttachedIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // MATCH_REG_ADDRESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.matchRegAddress = iprot.readBool();
                            struct.setMatchRegAddressIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // MATCH_LOC_ADDRESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.matchLocAddress = iprot.readBool();
                            struct.setMatchLocAddressIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetOrgStructureId()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'orgStructureId' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, OrgStructuresProperties struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ORG_STRUCTURE_ID_FIELD_DESC);
            oprot.writeI32(struct.orgStructureId);
            oprot.writeFieldEnd();
            if (struct.isSetAttached()) {
                oprot.writeFieldBegin(ATTACHED_FIELD_DESC);
                oprot.writeBool(struct.attached);
                oprot.writeFieldEnd();
            }
            if (struct.isSetMatchRegAddress()) {
                oprot.writeFieldBegin(MATCH_REG_ADDRESS_FIELD_DESC);
                oprot.writeBool(struct.matchRegAddress);
                oprot.writeFieldEnd();
            }
            if (struct.isSetMatchLocAddress()) {
                oprot.writeFieldBegin(MATCH_LOC_ADDRESS_FIELD_DESC);
                oprot.writeBool(struct.matchLocAddress);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class OrgStructuresPropertiesTupleSchemeFactory implements SchemeFactory {
        public OrgStructuresPropertiesTupleScheme getScheme() {
            return new OrgStructuresPropertiesTupleScheme();
        }
    }

    private static class OrgStructuresPropertiesTupleScheme extends TupleScheme<OrgStructuresProperties> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, OrgStructuresProperties struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI32(struct.orgStructureId);
            BitSet optionals = new BitSet();
            if (struct.isSetAttached()) {
                optionals.set(0);
            }
            if (struct.isSetMatchRegAddress()) {
                optionals.set(1);
            }
            if (struct.isSetMatchLocAddress()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetAttached()) {
                oprot.writeBool(struct.attached);
            }
            if (struct.isSetMatchRegAddress()) {
                oprot.writeBool(struct.matchRegAddress);
            }
            if (struct.isSetMatchLocAddress()) {
                oprot.writeBool(struct.matchLocAddress);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, OrgStructuresProperties struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.orgStructureId = iprot.readI32();
            struct.setOrgStructureIdIsSet(true);
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.attached = iprot.readBool();
                struct.setAttachedIsSet(true);
            }
            if (incoming.get(1)) {
                struct.matchRegAddress = iprot.readBool();
                struct.setMatchRegAddressIsSet(true);
            }
            if (incoming.get(2)) {
                struct.matchLocAddress = iprot.readBool();
                struct.setMatchLocAddressIsSet(true);
            }
        }
    }

}

