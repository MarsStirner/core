/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.communication.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * PersonSchedule
 * Структура с данными о расписаниях врача за интервал
 * @param schedules             1) Расписания врача: map<timestamp, Schedule> - карта вида <[Дата приема], [Расписание на эту дату]>,
 *                                      в случае отсутствия расписания на указанную дату набор ключ-значение опускается
 * @param personAbsences        2) Список причин отсутствия врача
 */
public class PersonSchedule implements org.apache.thrift.TBase<PersonSchedule, PersonSchedule._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PersonSchedule");

  private static final org.apache.thrift.protocol.TField SCHEDULES_FIELD_DESC = new org.apache.thrift.protocol.TField("schedules", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField PERSON_ABSENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("personAbsences", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PersonScheduleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PersonScheduleTupleSchemeFactory());
  }

  public Map<Long,Schedule> schedules; // required
  public Map<Long,ReasonOfAbsenceException> personAbsences; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEDULES((short)1, "schedules"),
    PERSON_ABSENCES((short)2, "personAbsences");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEDULES
          return SCHEDULES;
        case 2: // PERSON_ABSENCES
          return PERSON_ABSENCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PERSON_ABSENCES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEDULES, new org.apache.thrift.meta_data.FieldMetaData("schedules", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "timestamp"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Schedule.class))));
    tmpMap.put(_Fields.PERSON_ABSENCES, new org.apache.thrift.meta_data.FieldMetaData("personAbsences", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "timestamp"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PersonSchedule.class, metaDataMap);
  }

  public PersonSchedule() {
  }

  public PersonSchedule(
    Map<Long,Schedule> schedules)
  {
    this();
    this.schedules = schedules;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PersonSchedule(PersonSchedule other) {
    if (other.isSetSchedules()) {
      Map<Long,Schedule> __this__schedules = new HashMap<Long,Schedule>();
      for (Map.Entry<Long, Schedule> other_element : other.schedules.entrySet()) {

        Long other_element_key = other_element.getKey();
        Schedule other_element_value = other_element.getValue();

        Long __this__schedules_copy_key = other_element_key;

        Schedule __this__schedules_copy_value = new Schedule(other_element_value);

        __this__schedules.put(__this__schedules_copy_key, __this__schedules_copy_value);
      }
      this.schedules = __this__schedules;
    }
    if (other.isSetPersonAbsences()) {
      Map<Long,ReasonOfAbsenceException> __this__personAbsences = new HashMap<Long,ReasonOfAbsenceException>();
      for (Map.Entry<Long, ReasonOfAbsenceException> other_element : other.personAbsences.entrySet()) {

        Long other_element_key = other_element.getKey();
        ReasonOfAbsenceException other_element_value = other_element.getValue();

        Long __this__personAbsences_copy_key = other_element_key;

        ReasonOfAbsenceException __this__personAbsences_copy_value = new ReasonOfAbsenceException(other_element_value);

        __this__personAbsences.put(__this__personAbsences_copy_key, __this__personAbsences_copy_value);
      }
      this.personAbsences = __this__personAbsences;
    }
  }

  public PersonSchedule deepCopy() {
    return new PersonSchedule(this);
  }

  @Override
  public void clear() {
    this.schedules = null;
    this.personAbsences = null;
  }

  public int getSchedulesSize() {
    return (this.schedules == null) ? 0 : this.schedules.size();
  }

  public void putToSchedules(long key, Schedule val) {
    if (this.schedules == null) {
      this.schedules = new HashMap<Long,Schedule>();
    }
    this.schedules.put(key, val);
  }

  public Map<Long,Schedule> getSchedules() {
    return this.schedules;
  }

  public PersonSchedule setSchedules(Map<Long,Schedule> schedules) {
    this.schedules = schedules;
    return this;
  }

  public void unsetSchedules() {
    this.schedules = null;
  }

  /** Returns true if field schedules is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedules() {
    return this.schedules != null;
  }

  public void setSchedulesIsSet(boolean value) {
    if (!value) {
      this.schedules = null;
    }
  }

  public int getPersonAbsencesSize() {
    return (this.personAbsences == null) ? 0 : this.personAbsences.size();
  }

  public void putToPersonAbsences(long key, ReasonOfAbsenceException val) {
    if (this.personAbsences == null) {
      this.personAbsences = new HashMap<Long,ReasonOfAbsenceException>();
    }
    this.personAbsences.put(key, val);
  }

  public Map<Long,ReasonOfAbsenceException> getPersonAbsences() {
    return this.personAbsences;
  }

  public PersonSchedule setPersonAbsences(Map<Long,ReasonOfAbsenceException> personAbsences) {
    this.personAbsences = personAbsences;
    return this;
  }

  public void unsetPersonAbsences() {
    this.personAbsences = null;
  }

  /** Returns true if field personAbsences is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonAbsences() {
    return this.personAbsences != null;
  }

  public void setPersonAbsencesIsSet(boolean value) {
    if (!value) {
      this.personAbsences = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHEDULES:
      if (value == null) {
        unsetSchedules();
      } else {
        setSchedules((Map<Long,Schedule>)value);
      }
      break;

    case PERSON_ABSENCES:
      if (value == null) {
        unsetPersonAbsences();
      } else {
        setPersonAbsences((Map<Long,ReasonOfAbsenceException>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEDULES:
      return getSchedules();

    case PERSON_ABSENCES:
      return getPersonAbsences();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHEDULES:
      return isSetSchedules();
    case PERSON_ABSENCES:
      return isSetPersonAbsences();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PersonSchedule)
      return this.equals((PersonSchedule)that);
    return false;
  }

  public boolean equals(PersonSchedule that) {
    if (that == null)
      return false;

    boolean this_present_schedules = true && this.isSetSchedules();
    boolean that_present_schedules = true && that.isSetSchedules();
    if (this_present_schedules || that_present_schedules) {
      if (!(this_present_schedules && that_present_schedules))
        return false;
      if (!this.schedules.equals(that.schedules))
        return false;
    }

    boolean this_present_personAbsences = true && this.isSetPersonAbsences();
    boolean that_present_personAbsences = true && that.isSetPersonAbsences();
    if (this_present_personAbsences || that_present_personAbsences) {
      if (!(this_present_personAbsences && that_present_personAbsences))
        return false;
      if (!this.personAbsences.equals(that.personAbsences))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PersonSchedule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PersonSchedule typedOther = (PersonSchedule)other;

    lastComparison = Boolean.valueOf(isSetSchedules()).compareTo(typedOther.isSetSchedules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedules, typedOther.schedules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonAbsences()).compareTo(typedOther.isSetPersonAbsences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonAbsences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personAbsences, typedOther.personAbsences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PersonSchedule(");
    boolean first = true;

    sb.append("schedules:");
    if (this.schedules == null) {
      sb.append("null");
    } else {
      sb.append(this.schedules);
    }
    first = false;
    if (isSetPersonAbsences()) {
      if (!first) sb.append(", ");
      sb.append("personAbsences:");
      if (this.personAbsences == null) {
        sb.append("null");
      } else {
        sb.append(this.personAbsences);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (schedules == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'schedules' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PersonScheduleStandardSchemeFactory implements SchemeFactory {
    public PersonScheduleStandardScheme getScheme() {
      return new PersonScheduleStandardScheme();
    }
  }

  private static class PersonScheduleStandardScheme extends StandardScheme<PersonSchedule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PersonSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEDULES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                struct.schedules = new HashMap<Long,Schedule>(2*_map32.size);
                for (int _i33 = 0; _i33 < _map32.size; ++_i33)
                {
                  long _key34; // required
                  Schedule _val35; // required
                  _key34 = iprot.readI64();
                  _val35 = new Schedule();
                  _val35.read(iprot);
                  struct.schedules.put(_key34, _val35);
                }
                iprot.readMapEnd();
              }
              struct.setSchedulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERSON_ABSENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                struct.personAbsences = new HashMap<Long,ReasonOfAbsenceException>(2*_map36.size);
                for (int _i37 = 0; _i37 < _map36.size; ++_i37)
                {
                  long _key38; // required
                  ReasonOfAbsenceException _val39; // required
                  _key38 = iprot.readI64();
                  _val39 = new ReasonOfAbsenceException();
                  _val39.read(iprot);
                  struct.personAbsences.put(_key38, _val39);
                }
                iprot.readMapEnd();
              }
              struct.setPersonAbsencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PersonSchedule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.schedules != null) {
        oprot.writeFieldBegin(SCHEDULES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.schedules.size()));
          for (Map.Entry<Long, Schedule> _iter40 : struct.schedules.entrySet())
          {
            oprot.writeI64(_iter40.getKey());
            _iter40.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.personAbsences != null) {
        if (struct.isSetPersonAbsences()) {
          oprot.writeFieldBegin(PERSON_ABSENCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.personAbsences.size()));
            for (Map.Entry<Long, ReasonOfAbsenceException> _iter41 : struct.personAbsences.entrySet())
            {
              oprot.writeI64(_iter41.getKey());
              _iter41.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PersonScheduleTupleSchemeFactory implements SchemeFactory {
    public PersonScheduleTupleScheme getScheme() {
      return new PersonScheduleTupleScheme();
    }
  }

  private static class PersonScheduleTupleScheme extends TupleScheme<PersonSchedule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PersonSchedule struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.schedules.size());
        for (Map.Entry<Long, Schedule> _iter42 : struct.schedules.entrySet())
        {
          oprot.writeI64(_iter42.getKey());
          _iter42.getValue().write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetPersonAbsences()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPersonAbsences()) {
        {
          oprot.writeI32(struct.personAbsences.size());
          for (Map.Entry<Long, ReasonOfAbsenceException> _iter43 : struct.personAbsences.entrySet())
          {
            oprot.writeI64(_iter43.getKey());
            _iter43.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PersonSchedule struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map44 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.schedules = new HashMap<Long,Schedule>(2*_map44.size);
        for (int _i45 = 0; _i45 < _map44.size; ++_i45)
        {
          long _key46; // required
          Schedule _val47; // required
          _key46 = iprot.readI64();
          _val47 = new Schedule();
          _val47.read(iprot);
          struct.schedules.put(_key46, _val47);
        }
      }
      struct.setSchedulesIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map48 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.personAbsences = new HashMap<Long,ReasonOfAbsenceException>(2*_map48.size);
          for (int _i49 = 0; _i49 < _map48.size; ++_i49)
          {
            long _key50; // required
            ReasonOfAbsenceException _val51; // required
            _key50 = iprot.readI64();
            _val51 = new ReasonOfAbsenceException();
            _val51.read(iprot);
            struct.personAbsences.put(_key50, _val51);
          }
        }
        struct.setPersonAbsencesIsSet(true);
      }
    }
  }

}

