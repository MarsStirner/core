/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Person
 * Данные о пациенте
 * *****************
 * Данные для тега PERS  (Не зависящие от даты оказания услуги)
 * *********
 * @param patientId     внутренний идентфикатор пациента в БД ЛПУ
 * @param FAM       Фамилия пациента
 * @param IM        Имя пациента
 * @param OT        Отчество пациента
 * @param DR        Дата рождения пациента
 * @param W         Пол пациента
 * @param SNILS     Номер снилс
 * @param MR        Место рождения
 * @param OKATOP    адрес проживания
 * @param OKATOG    адрес регистрации
 * @param spokesman         Представитель пациента
 */
public class Person implements org.apache.thrift.TBase<Person, Person._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Person");

  private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FAM_FIELD_DESC = new org.apache.thrift.protocol.TField("FAM", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IM_FIELD_DESC = new org.apache.thrift.protocol.TField("IM", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OT_FIELD_DESC = new org.apache.thrift.protocol.TField("OT", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DR_FIELD_DESC = new org.apache.thrift.protocol.TField("DR", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField W_FIELD_DESC = new org.apache.thrift.protocol.TField("W", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField SNILS_FIELD_DESC = new org.apache.thrift.protocol.TField("SNILS", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MR_FIELD_DESC = new org.apache.thrift.protocol.TField("MR", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OKATOG_FIELD_DESC = new org.apache.thrift.protocol.TField("OKATOG", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OKATOP_FIELD_DESC = new org.apache.thrift.protocol.TField("OKATOP", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SPOKESMAN_FIELD_DESC = new org.apache.thrift.protocol.TField("spokesman", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PersonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PersonTupleSchemeFactory());
  }

  public int patientId; // required
  public String FAM; // required
  public String IM; // required
  public String OT; // required
  public long DR; // required
  public short W; // required
  public String SNILS; // optional
  public String MR; // optional
  public String OKATOG; // optional
  public String OKATOP; // optional
  public Spokesman spokesman; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATIENT_ID((short)1, "patientId"),
    FAM((short)2, "FAM"),
    IM((short)3, "IM"),
    OT((short)4, "OT"),
    DR((short)5, "DR"),
    W((short)6, "W"),
    SNILS((short)7, "SNILS"),
    MR((short)8, "MR"),
    OKATOG((short)9, "OKATOG"),
    OKATOP((short)10, "OKATOP"),
    SPOKESMAN((short)11, "spokesman");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATIENT_ID
          return PATIENT_ID;
        case 2: // FAM
          return FAM;
        case 3: // IM
          return IM;
        case 4: // OT
          return OT;
        case 5: // DR
          return DR;
        case 6: // W
          return W;
        case 7: // SNILS
          return SNILS;
        case 8: // MR
          return MR;
        case 9: // OKATOG
          return OKATOG;
        case 10: // OKATOP
          return OKATOP;
        case 11: // SPOKESMAN
          return SPOKESMAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PATIENTID_ISSET_ID = 0;
  private static final int __DR_ISSET_ID = 1;
  private static final int __W_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SNILS,_Fields.MR,_Fields.OKATOG,_Fields.OKATOP,_Fields.SPOKESMAN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FAM, new org.apache.thrift.meta_data.FieldMetaData("FAM", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IM, new org.apache.thrift.meta_data.FieldMetaData("IM", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OT, new org.apache.thrift.meta_data.FieldMetaData("OT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DR, new org.apache.thrift.meta_data.FieldMetaData("DR", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.W, new org.apache.thrift.meta_data.FieldMetaData("W", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.SNILS, new org.apache.thrift.meta_data.FieldMetaData("SNILS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MR, new org.apache.thrift.meta_data.FieldMetaData("MR", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OKATOG, new org.apache.thrift.meta_data.FieldMetaData("OKATOG", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OKATOP, new org.apache.thrift.meta_data.FieldMetaData("OKATOP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPOKESMAN, new org.apache.thrift.meta_data.FieldMetaData("spokesman", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Spokesman.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Person.class, metaDataMap);
  }

  public Person() {
    this.patientId = -1;

  }

  public Person(
    int patientId,
    String FAM,
    String IM,
    String OT,
    long DR,
    short W)
  {
    this();
    this.patientId = patientId;
    setPatientIdIsSet(true);
    this.FAM = FAM;
    this.IM = IM;
    this.OT = OT;
    this.DR = DR;
    setDRIsSet(true);
    this.W = W;
    setWIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Person(Person other) {
    __isset_bitfield = other.__isset_bitfield;
    this.patientId = other.patientId;
    if (other.isSetFAM()) {
      this.FAM = other.FAM;
    }
    if (other.isSetIM()) {
      this.IM = other.IM;
    }
    if (other.isSetOT()) {
      this.OT = other.OT;
    }
    this.DR = other.DR;
    this.W = other.W;
    if (other.isSetSNILS()) {
      this.SNILS = other.SNILS;
    }
    if (other.isSetMR()) {
      this.MR = other.MR;
    }
    if (other.isSetOKATOG()) {
      this.OKATOG = other.OKATOG;
    }
    if (other.isSetOKATOP()) {
      this.OKATOP = other.OKATOP;
    }
    if (other.isSetSpokesman()) {
      this.spokesman = new Spokesman(other.spokesman);
    }
  }

  public Person deepCopy() {
    return new Person(this);
  }

  @Override
  public void clear() {
    this.patientId = -1;

    this.FAM = null;
    this.IM = null;
    this.OT = null;
    setDRIsSet(false);
    this.DR = 0;
    setWIsSet(false);
    this.W = 0;
    this.SNILS = null;
    this.MR = null;
    this.OKATOG = null;
    this.OKATOP = null;
    this.spokesman = null;
  }

  public int getPatientId() {
    return this.patientId;
  }

  public Person setPatientId(int patientId) {
    this.patientId = patientId;
    setPatientIdIsSet(true);
    return this;
  }

  public void unsetPatientId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATIENTID_ISSET_ID);
  }

  /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
  public boolean isSetPatientId() {
    return EncodingUtils.testBit(__isset_bitfield, __PATIENTID_ISSET_ID);
  }

  public void setPatientIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATIENTID_ISSET_ID, value);
  }

  public String getFAM() {
    return this.FAM;
  }

  public Person setFAM(String FAM) {
    this.FAM = FAM;
    return this;
  }

  public void unsetFAM() {
    this.FAM = null;
  }

  /** Returns true if field FAM is set (has been assigned a value) and false otherwise */
  public boolean isSetFAM() {
    return this.FAM != null;
  }

  public void setFAMIsSet(boolean value) {
    if (!value) {
      this.FAM = null;
    }
  }

  public String getIM() {
    return this.IM;
  }

  public Person setIM(String IM) {
    this.IM = IM;
    return this;
  }

  public void unsetIM() {
    this.IM = null;
  }

  /** Returns true if field IM is set (has been assigned a value) and false otherwise */
  public boolean isSetIM() {
    return this.IM != null;
  }

  public void setIMIsSet(boolean value) {
    if (!value) {
      this.IM = null;
    }
  }

  public String getOT() {
    return this.OT;
  }

  public Person setOT(String OT) {
    this.OT = OT;
    return this;
  }

  public void unsetOT() {
    this.OT = null;
  }

  /** Returns true if field OT is set (has been assigned a value) and false otherwise */
  public boolean isSetOT() {
    return this.OT != null;
  }

  public void setOTIsSet(boolean value) {
    if (!value) {
      this.OT = null;
    }
  }

  public long getDR() {
    return this.DR;
  }

  public Person setDR(long DR) {
    this.DR = DR;
    setDRIsSet(true);
    return this;
  }

  public void unsetDR() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DR_ISSET_ID);
  }

  /** Returns true if field DR is set (has been assigned a value) and false otherwise */
  public boolean isSetDR() {
    return EncodingUtils.testBit(__isset_bitfield, __DR_ISSET_ID);
  }

  public void setDRIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DR_ISSET_ID, value);
  }

  public short getW() {
    return this.W;
  }

  public Person setW(short W) {
    this.W = W;
    setWIsSet(true);
    return this;
  }

  public void unsetW() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __W_ISSET_ID);
  }

  /** Returns true if field W is set (has been assigned a value) and false otherwise */
  public boolean isSetW() {
    return EncodingUtils.testBit(__isset_bitfield, __W_ISSET_ID);
  }

  public void setWIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __W_ISSET_ID, value);
  }

  public String getSNILS() {
    return this.SNILS;
  }

  public Person setSNILS(String SNILS) {
    this.SNILS = SNILS;
    return this;
  }

  public void unsetSNILS() {
    this.SNILS = null;
  }

  /** Returns true if field SNILS is set (has been assigned a value) and false otherwise */
  public boolean isSetSNILS() {
    return this.SNILS != null;
  }

  public void setSNILSIsSet(boolean value) {
    if (!value) {
      this.SNILS = null;
    }
  }

  public String getMR() {
    return this.MR;
  }

  public Person setMR(String MR) {
    this.MR = MR;
    return this;
  }

  public void unsetMR() {
    this.MR = null;
  }

  /** Returns true if field MR is set (has been assigned a value) and false otherwise */
  public boolean isSetMR() {
    return this.MR != null;
  }

  public void setMRIsSet(boolean value) {
    if (!value) {
      this.MR = null;
    }
  }

  public String getOKATOG() {
    return this.OKATOG;
  }

  public Person setOKATOG(String OKATOG) {
    this.OKATOG = OKATOG;
    return this;
  }

  public void unsetOKATOG() {
    this.OKATOG = null;
  }

  /** Returns true if field OKATOG is set (has been assigned a value) and false otherwise */
  public boolean isSetOKATOG() {
    return this.OKATOG != null;
  }

  public void setOKATOGIsSet(boolean value) {
    if (!value) {
      this.OKATOG = null;
    }
  }

  public String getOKATOP() {
    return this.OKATOP;
  }

  public Person setOKATOP(String OKATOP) {
    this.OKATOP = OKATOP;
    return this;
  }

  public void unsetOKATOP() {
    this.OKATOP = null;
  }

  /** Returns true if field OKATOP is set (has been assigned a value) and false otherwise */
  public boolean isSetOKATOP() {
    return this.OKATOP != null;
  }

  public void setOKATOPIsSet(boolean value) {
    if (!value) {
      this.OKATOP = null;
    }
  }

  public Spokesman getSpokesman() {
    return this.spokesman;
  }

  public Person setSpokesman(Spokesman spokesman) {
    this.spokesman = spokesman;
    return this;
  }

  public void unsetSpokesman() {
    this.spokesman = null;
  }

  /** Returns true if field spokesman is set (has been assigned a value) and false otherwise */
  public boolean isSetSpokesman() {
    return this.spokesman != null;
  }

  public void setSpokesmanIsSet(boolean value) {
    if (!value) {
      this.spokesman = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PATIENT_ID:
      if (value == null) {
        unsetPatientId();
      } else {
        setPatientId((Integer)value);
      }
      break;

    case FAM:
      if (value == null) {
        unsetFAM();
      } else {
        setFAM((String)value);
      }
      break;

    case IM:
      if (value == null) {
        unsetIM();
      } else {
        setIM((String)value);
      }
      break;

    case OT:
      if (value == null) {
        unsetOT();
      } else {
        setOT((String)value);
      }
      break;

    case DR:
      if (value == null) {
        unsetDR();
      } else {
        setDR((Long)value);
      }
      break;

    case W:
      if (value == null) {
        unsetW();
      } else {
        setW((Short)value);
      }
      break;

    case SNILS:
      if (value == null) {
        unsetSNILS();
      } else {
        setSNILS((String)value);
      }
      break;

    case MR:
      if (value == null) {
        unsetMR();
      } else {
        setMR((String)value);
      }
      break;

    case OKATOG:
      if (value == null) {
        unsetOKATOG();
      } else {
        setOKATOG((String)value);
      }
      break;

    case OKATOP:
      if (value == null) {
        unsetOKATOP();
      } else {
        setOKATOP((String)value);
      }
      break;

    case SPOKESMAN:
      if (value == null) {
        unsetSpokesman();
      } else {
        setSpokesman((Spokesman)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PATIENT_ID:
      return Integer.valueOf(getPatientId());

    case FAM:
      return getFAM();

    case IM:
      return getIM();

    case OT:
      return getOT();

    case DR:
      return Long.valueOf(getDR());

    case W:
      return Short.valueOf(getW());

    case SNILS:
      return getSNILS();

    case MR:
      return getMR();

    case OKATOG:
      return getOKATOG();

    case OKATOP:
      return getOKATOP();

    case SPOKESMAN:
      return getSpokesman();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PATIENT_ID:
      return isSetPatientId();
    case FAM:
      return isSetFAM();
    case IM:
      return isSetIM();
    case OT:
      return isSetOT();
    case DR:
      return isSetDR();
    case W:
      return isSetW();
    case SNILS:
      return isSetSNILS();
    case MR:
      return isSetMR();
    case OKATOG:
      return isSetOKATOG();
    case OKATOP:
      return isSetOKATOP();
    case SPOKESMAN:
      return isSetSpokesman();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Person)
      return this.equals((Person)that);
    return false;
  }

  public boolean equals(Person that) {
    if (that == null)
      return false;

    boolean this_present_patientId = true;
    boolean that_present_patientId = true;
    if (this_present_patientId || that_present_patientId) {
      if (!(this_present_patientId && that_present_patientId))
        return false;
      if (this.patientId != that.patientId)
        return false;
    }

    boolean this_present_FAM = true && this.isSetFAM();
    boolean that_present_FAM = true && that.isSetFAM();
    if (this_present_FAM || that_present_FAM) {
      if (!(this_present_FAM && that_present_FAM))
        return false;
      if (!this.FAM.equals(that.FAM))
        return false;
    }

    boolean this_present_IM = true && this.isSetIM();
    boolean that_present_IM = true && that.isSetIM();
    if (this_present_IM || that_present_IM) {
      if (!(this_present_IM && that_present_IM))
        return false;
      if (!this.IM.equals(that.IM))
        return false;
    }

    boolean this_present_OT = true && this.isSetOT();
    boolean that_present_OT = true && that.isSetOT();
    if (this_present_OT || that_present_OT) {
      if (!(this_present_OT && that_present_OT))
        return false;
      if (!this.OT.equals(that.OT))
        return false;
    }

    boolean this_present_DR = true;
    boolean that_present_DR = true;
    if (this_present_DR || that_present_DR) {
      if (!(this_present_DR && that_present_DR))
        return false;
      if (this.DR != that.DR)
        return false;
    }

    boolean this_present_W = true;
    boolean that_present_W = true;
    if (this_present_W || that_present_W) {
      if (!(this_present_W && that_present_W))
        return false;
      if (this.W != that.W)
        return false;
    }

    boolean this_present_SNILS = true && this.isSetSNILS();
    boolean that_present_SNILS = true && that.isSetSNILS();
    if (this_present_SNILS || that_present_SNILS) {
      if (!(this_present_SNILS && that_present_SNILS))
        return false;
      if (!this.SNILS.equals(that.SNILS))
        return false;
    }

    boolean this_present_MR = true && this.isSetMR();
    boolean that_present_MR = true && that.isSetMR();
    if (this_present_MR || that_present_MR) {
      if (!(this_present_MR && that_present_MR))
        return false;
      if (!this.MR.equals(that.MR))
        return false;
    }

    boolean this_present_OKATOG = true && this.isSetOKATOG();
    boolean that_present_OKATOG = true && that.isSetOKATOG();
    if (this_present_OKATOG || that_present_OKATOG) {
      if (!(this_present_OKATOG && that_present_OKATOG))
        return false;
      if (!this.OKATOG.equals(that.OKATOG))
        return false;
    }

    boolean this_present_OKATOP = true && this.isSetOKATOP();
    boolean that_present_OKATOP = true && that.isSetOKATOP();
    if (this_present_OKATOP || that_present_OKATOP) {
      if (!(this_present_OKATOP && that_present_OKATOP))
        return false;
      if (!this.OKATOP.equals(that.OKATOP))
        return false;
    }

    boolean this_present_spokesman = true && this.isSetSpokesman();
    boolean that_present_spokesman = true && that.isSetSpokesman();
    if (this_present_spokesman || that_present_spokesman) {
      if (!(this_present_spokesman && that_present_spokesman))
        return false;
      if (!this.spokesman.equals(that.spokesman))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Person other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Person typedOther = (Person)other;

    lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(typedOther.isSetPatientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, typedOther.patientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFAM()).compareTo(typedOther.isSetFAM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFAM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FAM, typedOther.FAM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIM()).compareTo(typedOther.isSetIM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IM, typedOther.IM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOT()).compareTo(typedOther.isSetOT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OT, typedOther.OT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDR()).compareTo(typedOther.isSetDR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DR, typedOther.DR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetW()).compareTo(typedOther.isSetW());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetW()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.W, typedOther.W);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSNILS()).compareTo(typedOther.isSetSNILS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSNILS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SNILS, typedOther.SNILS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMR()).compareTo(typedOther.isSetMR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MR, typedOther.MR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOKATOG()).compareTo(typedOther.isSetOKATOG());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOKATOG()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OKATOG, typedOther.OKATOG);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOKATOP()).compareTo(typedOther.isSetOKATOP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOKATOP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OKATOP, typedOther.OKATOP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpokesman()).compareTo(typedOther.isSetSpokesman());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpokesman()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spokesman, typedOther.spokesman);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Person(");
    boolean first = true;

    sb.append("patientId:");
    sb.append(this.patientId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FAM:");
    if (this.FAM == null) {
      sb.append("null");
    } else {
      sb.append(this.FAM);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IM:");
    if (this.IM == null) {
      sb.append("null");
    } else {
      sb.append(this.IM);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OT:");
    if (this.OT == null) {
      sb.append("null");
    } else {
      sb.append(this.OT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DR:");
    sb.append(this.DR);
    first = false;
    if (!first) sb.append(", ");
    sb.append("W:");
    sb.append(this.W);
    first = false;
    if (isSetSNILS()) {
      if (!first) sb.append(", ");
      sb.append("SNILS:");
      if (this.SNILS == null) {
        sb.append("null");
      } else {
        sb.append(this.SNILS);
      }
      first = false;
    }
    if (isSetMR()) {
      if (!first) sb.append(", ");
      sb.append("MR:");
      if (this.MR == null) {
        sb.append("null");
      } else {
        sb.append(this.MR);
      }
      first = false;
    }
    if (isSetOKATOG()) {
      if (!first) sb.append(", ");
      sb.append("OKATOG:");
      if (this.OKATOG == null) {
        sb.append("null");
      } else {
        sb.append(this.OKATOG);
      }
      first = false;
    }
    if (isSetOKATOP()) {
      if (!first) sb.append(", ");
      sb.append("OKATOP:");
      if (this.OKATOP == null) {
        sb.append("null");
      } else {
        sb.append(this.OKATOP);
      }
      first = false;
    }
    if (isSetSpokesman()) {
      if (!first) sb.append(", ");
      sb.append("spokesman:");
      if (this.spokesman == null) {
        sb.append("null");
      } else {
        sb.append(this.spokesman);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'patientId' because it's a primitive and you chose the non-beans generator.
    if (FAM == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'FAM' was not present! Struct: " + toString());
    }
    if (IM == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'IM' was not present! Struct: " + toString());
    }
    if (OT == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'OT' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'DR' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'W' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (spokesman != null) {
      spokesman.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PersonStandardSchemeFactory implements SchemeFactory {
    public PersonStandardScheme getScheme() {
      return new PersonStandardScheme();
    }
  }

  private static class PersonStandardScheme extends StandardScheme<Person> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Person struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.patientId = iprot.readI32();
              struct.setPatientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FAM = iprot.readString();
              struct.setFAMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.IM = iprot.readString();
              struct.setIMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OT = iprot.readString();
              struct.setOTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DR = iprot.readI64();
              struct.setDRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // W
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.W = iprot.readI16();
              struct.setWIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SNILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SNILS = iprot.readString();
              struct.setSNILSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MR = iprot.readString();
              struct.setMRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OKATOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OKATOG = iprot.readString();
              struct.setOKATOGIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OKATOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OKATOP = iprot.readString();
              struct.setOKATOPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SPOKESMAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spokesman = new Spokesman();
              struct.spokesman.read(iprot);
              struct.setSpokesmanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPatientId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'patientId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDR()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DR' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetW()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'W' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Person struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
      oprot.writeI32(struct.patientId);
      oprot.writeFieldEnd();
      if (struct.FAM != null) {
        oprot.writeFieldBegin(FAM_FIELD_DESC);
        oprot.writeString(struct.FAM);
        oprot.writeFieldEnd();
      }
      if (struct.IM != null) {
        oprot.writeFieldBegin(IM_FIELD_DESC);
        oprot.writeString(struct.IM);
        oprot.writeFieldEnd();
      }
      if (struct.OT != null) {
        oprot.writeFieldBegin(OT_FIELD_DESC);
        oprot.writeString(struct.OT);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DR_FIELD_DESC);
      oprot.writeI64(struct.DR);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(W_FIELD_DESC);
      oprot.writeI16(struct.W);
      oprot.writeFieldEnd();
      if (struct.SNILS != null) {
        if (struct.isSetSNILS()) {
          oprot.writeFieldBegin(SNILS_FIELD_DESC);
          oprot.writeString(struct.SNILS);
          oprot.writeFieldEnd();
        }
      }
      if (struct.MR != null) {
        if (struct.isSetMR()) {
          oprot.writeFieldBegin(MR_FIELD_DESC);
          oprot.writeString(struct.MR);
          oprot.writeFieldEnd();
        }
      }
      if (struct.OKATOG != null) {
        if (struct.isSetOKATOG()) {
          oprot.writeFieldBegin(OKATOG_FIELD_DESC);
          oprot.writeString(struct.OKATOG);
          oprot.writeFieldEnd();
        }
      }
      if (struct.OKATOP != null) {
        if (struct.isSetOKATOP()) {
          oprot.writeFieldBegin(OKATOP_FIELD_DESC);
          oprot.writeString(struct.OKATOP);
          oprot.writeFieldEnd();
        }
      }
      if (struct.spokesman != null) {
        if (struct.isSetSpokesman()) {
          oprot.writeFieldBegin(SPOKESMAN_FIELD_DESC);
          struct.spokesman.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PersonTupleSchemeFactory implements SchemeFactory {
    public PersonTupleScheme getScheme() {
      return new PersonTupleScheme();
    }
  }

  private static class PersonTupleScheme extends TupleScheme<Person> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.patientId);
      oprot.writeString(struct.FAM);
      oprot.writeString(struct.IM);
      oprot.writeString(struct.OT);
      oprot.writeI64(struct.DR);
      oprot.writeI16(struct.W);
      BitSet optionals = new BitSet();
      if (struct.isSetSNILS()) {
        optionals.set(0);
      }
      if (struct.isSetMR()) {
        optionals.set(1);
      }
      if (struct.isSetOKATOG()) {
        optionals.set(2);
      }
      if (struct.isSetOKATOP()) {
        optionals.set(3);
      }
      if (struct.isSetSpokesman()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSNILS()) {
        oprot.writeString(struct.SNILS);
      }
      if (struct.isSetMR()) {
        oprot.writeString(struct.MR);
      }
      if (struct.isSetOKATOG()) {
        oprot.writeString(struct.OKATOG);
      }
      if (struct.isSetOKATOP()) {
        oprot.writeString(struct.OKATOP);
      }
      if (struct.isSetSpokesman()) {
        struct.spokesman.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.patientId = iprot.readI32();
      struct.setPatientIdIsSet(true);
      struct.FAM = iprot.readString();
      struct.setFAMIsSet(true);
      struct.IM = iprot.readString();
      struct.setIMIsSet(true);
      struct.OT = iprot.readString();
      struct.setOTIsSet(true);
      struct.DR = iprot.readI64();
      struct.setDRIsSet(true);
      struct.W = iprot.readI16();
      struct.setWIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.SNILS = iprot.readString();
        struct.setSNILSIsSet(true);
      }
      if (incoming.get(1)) {
        struct.MR = iprot.readString();
        struct.setMRIsSet(true);
      }
      if (incoming.get(2)) {
        struct.OKATOG = iprot.readString();
        struct.setOKATOGIsSet(true);
      }
      if (incoming.get(3)) {
        struct.OKATOP = iprot.readString();
        struct.setOKATOPIsSet(true);
      }
      if (incoming.get(4)) {
        struct.spokesman = new Spokesman();
        struct.spokesman.read(iprot);
        struct.setSpokesmanIsSet(true);
      }
    }
  }

}

