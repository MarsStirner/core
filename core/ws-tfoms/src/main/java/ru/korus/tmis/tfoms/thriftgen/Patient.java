/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Patient
 * Данные о пациенте
 * *****************
 * Данные для тега Pacient  (Зависящие от даты оказания услуги)
 * *********
 * @param patientId     внутренний идентфикатор пациента в БД ЛПУ
 * @param NOVOR         Признак новорожденного
 * @param DOCTYPE       Тип документа
 * @param DOCSER        Серия документа
 * @param DOCNUM        Номер документа
 * @param VPOLIS        Тип полиса
 * @param SPOLIS        Серия полиса
 * @param NPOLIS        Номер полиса
 * @param SMO           Инфис-код страховщика
 * @param SMO_OGRN      ОГРН страховщика
 * @param SMO_OK        Код окато страховщика
 * @param SMO_NAM       Полное наименование страховщика
 * @param VNOV_D    данные о весе ребенка при рождении (в случае оказания помощи маловесным и недоношенным детям)  Client.weight
 */
public class Patient implements org.apache.thrift.TBase<Patient, Patient._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Patient");

  private static final org.apache.thrift.protocol.TField NOVOR_FIELD_DESC = new org.apache.thrift.protocol.TField("NOVOR", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DOCTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("DOCTYPE", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DOCSER_FIELD_DESC = new org.apache.thrift.protocol.TField("DOCSER", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOCNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("DOCNUM", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VPOLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("VPOLIS", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField SPOLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("SPOLIS", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NPOLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("NPOLIS", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SMO_FIELD_DESC = new org.apache.thrift.protocol.TField("SMO", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SMO__OGRN_FIELD_DESC = new org.apache.thrift.protocol.TField("SMO_OGRN", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SMO__OK_FIELD_DESC = new org.apache.thrift.protocol.TField("SMO_OK", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SMO__NAM_FIELD_DESC = new org.apache.thrift.protocol.TField("SMO_NAM", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField VNOV__D_FIELD_DESC = new org.apache.thrift.protocol.TField("VNOV_D", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientTupleSchemeFactory());
  }

  public String NOVOR; // required
  public String DOCTYPE; // optional
  public String DOCSER; // optional
  public String DOCNUM; // optional
  public short VPOLIS; // required
  public String SPOLIS; // optional
  public String NPOLIS; // required
  public String SMO; // required
  public String SMO_OGRN; // optional
  public String SMO_OK; // optional
  public String SMO_NAM; // optional
  public int VNOV_D; // optional
  public int patientId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOVOR((short)1, "NOVOR"),
    DOCTYPE((short)2, "DOCTYPE"),
    DOCSER((short)3, "DOCSER"),
    DOCNUM((short)4, "DOCNUM"),
    VPOLIS((short)5, "VPOLIS"),
    SPOLIS((short)6, "SPOLIS"),
    NPOLIS((short)7, "NPOLIS"),
    SMO((short)8, "SMO"),
    SMO__OGRN((short)9, "SMO_OGRN"),
    SMO__OK((short)10, "SMO_OK"),
    SMO__NAM((short)11, "SMO_NAM"),
    VNOV__D((short)12, "VNOV_D"),
    PATIENT_ID((short)13, "patientId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOVOR
          return NOVOR;
        case 2: // DOCTYPE
          return DOCTYPE;
        case 3: // DOCSER
          return DOCSER;
        case 4: // DOCNUM
          return DOCNUM;
        case 5: // VPOLIS
          return VPOLIS;
        case 6: // SPOLIS
          return SPOLIS;
        case 7: // NPOLIS
          return NPOLIS;
        case 8: // SMO
          return SMO;
        case 9: // SMO__OGRN
          return SMO__OGRN;
        case 10: // SMO__OK
          return SMO__OK;
        case 11: // SMO__NAM
          return SMO__NAM;
        case 12: // VNOV__D
          return VNOV__D;
        case 13: // PATIENT_ID
          return PATIENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VPOLIS_ISSET_ID = 0;
  private static final int __VNOV_D_ISSET_ID = 1;
  private static final int __PATIENTID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DOCTYPE,_Fields.DOCSER,_Fields.DOCNUM,_Fields.SPOLIS,_Fields.SMO__OGRN,_Fields.SMO__OK,_Fields.SMO__NAM,_Fields.VNOV__D,_Fields.PATIENT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOVOR, new org.apache.thrift.meta_data.FieldMetaData("NOVOR", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCTYPE, new org.apache.thrift.meta_data.FieldMetaData("DOCTYPE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCSER, new org.apache.thrift.meta_data.FieldMetaData("DOCSER", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCNUM, new org.apache.thrift.meta_data.FieldMetaData("DOCNUM", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VPOLIS, new org.apache.thrift.meta_data.FieldMetaData("VPOLIS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.SPOLIS, new org.apache.thrift.meta_data.FieldMetaData("SPOLIS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NPOLIS, new org.apache.thrift.meta_data.FieldMetaData("NPOLIS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMO, new org.apache.thrift.meta_data.FieldMetaData("SMO", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMO__OGRN, new org.apache.thrift.meta_data.FieldMetaData("SMO_OGRN", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMO__OK, new org.apache.thrift.meta_data.FieldMetaData("SMO_OK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMO__NAM, new org.apache.thrift.meta_data.FieldMetaData("SMO_NAM", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VNOV__D, new org.apache.thrift.meta_data.FieldMetaData("VNOV_D", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Patient.class, metaDataMap);
  }

  public Patient() {
  }

  public Patient(
    String NOVOR,
    short VPOLIS,
    String NPOLIS,
    String SMO)
  {
    this();
    this.NOVOR = NOVOR;
    this.VPOLIS = VPOLIS;
    setVPOLISIsSet(true);
    this.NPOLIS = NPOLIS;
    this.SMO = SMO;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Patient(Patient other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNOVOR()) {
      this.NOVOR = other.NOVOR;
    }
    if (other.isSetDOCTYPE()) {
      this.DOCTYPE = other.DOCTYPE;
    }
    if (other.isSetDOCSER()) {
      this.DOCSER = other.DOCSER;
    }
    if (other.isSetDOCNUM()) {
      this.DOCNUM = other.DOCNUM;
    }
    this.VPOLIS = other.VPOLIS;
    if (other.isSetSPOLIS()) {
      this.SPOLIS = other.SPOLIS;
    }
    if (other.isSetNPOLIS()) {
      this.NPOLIS = other.NPOLIS;
    }
    if (other.isSetSMO()) {
      this.SMO = other.SMO;
    }
    if (other.isSetSMO_OGRN()) {
      this.SMO_OGRN = other.SMO_OGRN;
    }
    if (other.isSetSMO_OK()) {
      this.SMO_OK = other.SMO_OK;
    }
    if (other.isSetSMO_NAM()) {
      this.SMO_NAM = other.SMO_NAM;
    }
    this.VNOV_D = other.VNOV_D;
    this.patientId = other.patientId;
  }

  public Patient deepCopy() {
    return new Patient(this);
  }

  @Override
  public void clear() {
    this.NOVOR = null;
    this.DOCTYPE = null;
    this.DOCSER = null;
    this.DOCNUM = null;
    setVPOLISIsSet(false);
    this.VPOLIS = 0;
    this.SPOLIS = null;
    this.NPOLIS = null;
    this.SMO = null;
    this.SMO_OGRN = null;
    this.SMO_OK = null;
    this.SMO_NAM = null;
    setVNOV_DIsSet(false);
    this.VNOV_D = 0;
    setPatientIdIsSet(false);
    this.patientId = 0;
  }

  public String getNOVOR() {
    return this.NOVOR;
  }

  public Patient setNOVOR(String NOVOR) {
    this.NOVOR = NOVOR;
    return this;
  }

  public void unsetNOVOR() {
    this.NOVOR = null;
  }

  /** Returns true if field NOVOR is set (has been assigned a value) and false otherwise */
  public boolean isSetNOVOR() {
    return this.NOVOR != null;
  }

  public void setNOVORIsSet(boolean value) {
    if (!value) {
      this.NOVOR = null;
    }
  }

  public String getDOCTYPE() {
    return this.DOCTYPE;
  }

  public Patient setDOCTYPE(String DOCTYPE) {
    this.DOCTYPE = DOCTYPE;
    return this;
  }

  public void unsetDOCTYPE() {
    this.DOCTYPE = null;
  }

  /** Returns true if field DOCTYPE is set (has been assigned a value) and false otherwise */
  public boolean isSetDOCTYPE() {
    return this.DOCTYPE != null;
  }

  public void setDOCTYPEIsSet(boolean value) {
    if (!value) {
      this.DOCTYPE = null;
    }
  }

  public String getDOCSER() {
    return this.DOCSER;
  }

  public Patient setDOCSER(String DOCSER) {
    this.DOCSER = DOCSER;
    return this;
  }

  public void unsetDOCSER() {
    this.DOCSER = null;
  }

  /** Returns true if field DOCSER is set (has been assigned a value) and false otherwise */
  public boolean isSetDOCSER() {
    return this.DOCSER != null;
  }

  public void setDOCSERIsSet(boolean value) {
    if (!value) {
      this.DOCSER = null;
    }
  }

  public String getDOCNUM() {
    return this.DOCNUM;
  }

  public Patient setDOCNUM(String DOCNUM) {
    this.DOCNUM = DOCNUM;
    return this;
  }

  public void unsetDOCNUM() {
    this.DOCNUM = null;
  }

  /** Returns true if field DOCNUM is set (has been assigned a value) and false otherwise */
  public boolean isSetDOCNUM() {
    return this.DOCNUM != null;
  }

  public void setDOCNUMIsSet(boolean value) {
    if (!value) {
      this.DOCNUM = null;
    }
  }

  public short getVPOLIS() {
    return this.VPOLIS;
  }

  public Patient setVPOLIS(short VPOLIS) {
    this.VPOLIS = VPOLIS;
    setVPOLISIsSet(true);
    return this;
  }

  public void unsetVPOLIS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPOLIS_ISSET_ID);
  }

  /** Returns true if field VPOLIS is set (has been assigned a value) and false otherwise */
  public boolean isSetVPOLIS() {
    return EncodingUtils.testBit(__isset_bitfield, __VPOLIS_ISSET_ID);
  }

  public void setVPOLISIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPOLIS_ISSET_ID, value);
  }

  public String getSPOLIS() {
    return this.SPOLIS;
  }

  public Patient setSPOLIS(String SPOLIS) {
    this.SPOLIS = SPOLIS;
    return this;
  }

  public void unsetSPOLIS() {
    this.SPOLIS = null;
  }

  /** Returns true if field SPOLIS is set (has been assigned a value) and false otherwise */
  public boolean isSetSPOLIS() {
    return this.SPOLIS != null;
  }

  public void setSPOLISIsSet(boolean value) {
    if (!value) {
      this.SPOLIS = null;
    }
  }

  public String getNPOLIS() {
    return this.NPOLIS;
  }

  public Patient setNPOLIS(String NPOLIS) {
    this.NPOLIS = NPOLIS;
    return this;
  }

  public void unsetNPOLIS() {
    this.NPOLIS = null;
  }

  /** Returns true if field NPOLIS is set (has been assigned a value) and false otherwise */
  public boolean isSetNPOLIS() {
    return this.NPOLIS != null;
  }

  public void setNPOLISIsSet(boolean value) {
    if (!value) {
      this.NPOLIS = null;
    }
  }

  public String getSMO() {
    return this.SMO;
  }

  public Patient setSMO(String SMO) {
    this.SMO = SMO;
    return this;
  }

  public void unsetSMO() {
    this.SMO = null;
  }

  /** Returns true if field SMO is set (has been assigned a value) and false otherwise */
  public boolean isSetSMO() {
    return this.SMO != null;
  }

  public void setSMOIsSet(boolean value) {
    if (!value) {
      this.SMO = null;
    }
  }

  public String getSMO_OGRN() {
    return this.SMO_OGRN;
  }

  public Patient setSMO_OGRN(String SMO_OGRN) {
    this.SMO_OGRN = SMO_OGRN;
    return this;
  }

  public void unsetSMO_OGRN() {
    this.SMO_OGRN = null;
  }

  /** Returns true if field SMO_OGRN is set (has been assigned a value) and false otherwise */
  public boolean isSetSMO_OGRN() {
    return this.SMO_OGRN != null;
  }

  public void setSMO_OGRNIsSet(boolean value) {
    if (!value) {
      this.SMO_OGRN = null;
    }
  }

  public String getSMO_OK() {
    return this.SMO_OK;
  }

  public Patient setSMO_OK(String SMO_OK) {
    this.SMO_OK = SMO_OK;
    return this;
  }

  public void unsetSMO_OK() {
    this.SMO_OK = null;
  }

  /** Returns true if field SMO_OK is set (has been assigned a value) and false otherwise */
  public boolean isSetSMO_OK() {
    return this.SMO_OK != null;
  }

  public void setSMO_OKIsSet(boolean value) {
    if (!value) {
      this.SMO_OK = null;
    }
  }

  public String getSMO_NAM() {
    return this.SMO_NAM;
  }

  public Patient setSMO_NAM(String SMO_NAM) {
    this.SMO_NAM = SMO_NAM;
    return this;
  }

  public void unsetSMO_NAM() {
    this.SMO_NAM = null;
  }

  /** Returns true if field SMO_NAM is set (has been assigned a value) and false otherwise */
  public boolean isSetSMO_NAM() {
    return this.SMO_NAM != null;
  }

  public void setSMO_NAMIsSet(boolean value) {
    if (!value) {
      this.SMO_NAM = null;
    }
  }

  public int getVNOV_D() {
    return this.VNOV_D;
  }

  public Patient setVNOV_D(int VNOV_D) {
    this.VNOV_D = VNOV_D;
    setVNOV_DIsSet(true);
    return this;
  }

  public void unsetVNOV_D() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VNOV_D_ISSET_ID);
  }

  /** Returns true if field VNOV_D is set (has been assigned a value) and false otherwise */
  public boolean isSetVNOV_D() {
    return EncodingUtils.testBit(__isset_bitfield, __VNOV_D_ISSET_ID);
  }

  public void setVNOV_DIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VNOV_D_ISSET_ID, value);
  }

  public int getPatientId() {
    return this.patientId;
  }

  public Patient setPatientId(int patientId) {
    this.patientId = patientId;
    setPatientIdIsSet(true);
    return this;
  }

  public void unsetPatientId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATIENTID_ISSET_ID);
  }

  /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
  public boolean isSetPatientId() {
    return EncodingUtils.testBit(__isset_bitfield, __PATIENTID_ISSET_ID);
  }

  public void setPatientIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATIENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOVOR:
      if (value == null) {
        unsetNOVOR();
      } else {
        setNOVOR((String)value);
      }
      break;

    case DOCTYPE:
      if (value == null) {
        unsetDOCTYPE();
      } else {
        setDOCTYPE((String)value);
      }
      break;

    case DOCSER:
      if (value == null) {
        unsetDOCSER();
      } else {
        setDOCSER((String)value);
      }
      break;

    case DOCNUM:
      if (value == null) {
        unsetDOCNUM();
      } else {
        setDOCNUM((String)value);
      }
      break;

    case VPOLIS:
      if (value == null) {
        unsetVPOLIS();
      } else {
        setVPOLIS((Short)value);
      }
      break;

    case SPOLIS:
      if (value == null) {
        unsetSPOLIS();
      } else {
        setSPOLIS((String)value);
      }
      break;

    case NPOLIS:
      if (value == null) {
        unsetNPOLIS();
      } else {
        setNPOLIS((String)value);
      }
      break;

    case SMO:
      if (value == null) {
        unsetSMO();
      } else {
        setSMO((String)value);
      }
      break;

    case SMO__OGRN:
      if (value == null) {
        unsetSMO_OGRN();
      } else {
        setSMO_OGRN((String)value);
      }
      break;

    case SMO__OK:
      if (value == null) {
        unsetSMO_OK();
      } else {
        setSMO_OK((String)value);
      }
      break;

    case SMO__NAM:
      if (value == null) {
        unsetSMO_NAM();
      } else {
        setSMO_NAM((String)value);
      }
      break;

    case VNOV__D:
      if (value == null) {
        unsetVNOV_D();
      } else {
        setVNOV_D((Integer)value);
      }
      break;

    case PATIENT_ID:
      if (value == null) {
        unsetPatientId();
      } else {
        setPatientId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOVOR:
      return getNOVOR();

    case DOCTYPE:
      return getDOCTYPE();

    case DOCSER:
      return getDOCSER();

    case DOCNUM:
      return getDOCNUM();

    case VPOLIS:
      return Short.valueOf(getVPOLIS());

    case SPOLIS:
      return getSPOLIS();

    case NPOLIS:
      return getNPOLIS();

    case SMO:
      return getSMO();

    case SMO__OGRN:
      return getSMO_OGRN();

    case SMO__OK:
      return getSMO_OK();

    case SMO__NAM:
      return getSMO_NAM();

    case VNOV__D:
      return Integer.valueOf(getVNOV_D());

    case PATIENT_ID:
      return Integer.valueOf(getPatientId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOVOR:
      return isSetNOVOR();
    case DOCTYPE:
      return isSetDOCTYPE();
    case DOCSER:
      return isSetDOCSER();
    case DOCNUM:
      return isSetDOCNUM();
    case VPOLIS:
      return isSetVPOLIS();
    case SPOLIS:
      return isSetSPOLIS();
    case NPOLIS:
      return isSetNPOLIS();
    case SMO:
      return isSetSMO();
    case SMO__OGRN:
      return isSetSMO_OGRN();
    case SMO__OK:
      return isSetSMO_OK();
    case SMO__NAM:
      return isSetSMO_NAM();
    case VNOV__D:
      return isSetVNOV_D();
    case PATIENT_ID:
      return isSetPatientId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Patient)
      return this.equals((Patient)that);
    return false;
  }

  public boolean equals(Patient that) {
    if (that == null)
      return false;

    boolean this_present_NOVOR = true && this.isSetNOVOR();
    boolean that_present_NOVOR = true && that.isSetNOVOR();
    if (this_present_NOVOR || that_present_NOVOR) {
      if (!(this_present_NOVOR && that_present_NOVOR))
        return false;
      if (!this.NOVOR.equals(that.NOVOR))
        return false;
    }

    boolean this_present_DOCTYPE = true && this.isSetDOCTYPE();
    boolean that_present_DOCTYPE = true && that.isSetDOCTYPE();
    if (this_present_DOCTYPE || that_present_DOCTYPE) {
      if (!(this_present_DOCTYPE && that_present_DOCTYPE))
        return false;
      if (!this.DOCTYPE.equals(that.DOCTYPE))
        return false;
    }

    boolean this_present_DOCSER = true && this.isSetDOCSER();
    boolean that_present_DOCSER = true && that.isSetDOCSER();
    if (this_present_DOCSER || that_present_DOCSER) {
      if (!(this_present_DOCSER && that_present_DOCSER))
        return false;
      if (!this.DOCSER.equals(that.DOCSER))
        return false;
    }

    boolean this_present_DOCNUM = true && this.isSetDOCNUM();
    boolean that_present_DOCNUM = true && that.isSetDOCNUM();
    if (this_present_DOCNUM || that_present_DOCNUM) {
      if (!(this_present_DOCNUM && that_present_DOCNUM))
        return false;
      if (!this.DOCNUM.equals(that.DOCNUM))
        return false;
    }

    boolean this_present_VPOLIS = true;
    boolean that_present_VPOLIS = true;
    if (this_present_VPOLIS || that_present_VPOLIS) {
      if (!(this_present_VPOLIS && that_present_VPOLIS))
        return false;
      if (this.VPOLIS != that.VPOLIS)
        return false;
    }

    boolean this_present_SPOLIS = true && this.isSetSPOLIS();
    boolean that_present_SPOLIS = true && that.isSetSPOLIS();
    if (this_present_SPOLIS || that_present_SPOLIS) {
      if (!(this_present_SPOLIS && that_present_SPOLIS))
        return false;
      if (!this.SPOLIS.equals(that.SPOLIS))
        return false;
    }

    boolean this_present_NPOLIS = true && this.isSetNPOLIS();
    boolean that_present_NPOLIS = true && that.isSetNPOLIS();
    if (this_present_NPOLIS || that_present_NPOLIS) {
      if (!(this_present_NPOLIS && that_present_NPOLIS))
        return false;
      if (!this.NPOLIS.equals(that.NPOLIS))
        return false;
    }

    boolean this_present_SMO = true && this.isSetSMO();
    boolean that_present_SMO = true && that.isSetSMO();
    if (this_present_SMO || that_present_SMO) {
      if (!(this_present_SMO && that_present_SMO))
        return false;
      if (!this.SMO.equals(that.SMO))
        return false;
    }

    boolean this_present_SMO_OGRN = true && this.isSetSMO_OGRN();
    boolean that_present_SMO_OGRN = true && that.isSetSMO_OGRN();
    if (this_present_SMO_OGRN || that_present_SMO_OGRN) {
      if (!(this_present_SMO_OGRN && that_present_SMO_OGRN))
        return false;
      if (!this.SMO_OGRN.equals(that.SMO_OGRN))
        return false;
    }

    boolean this_present_SMO_OK = true && this.isSetSMO_OK();
    boolean that_present_SMO_OK = true && that.isSetSMO_OK();
    if (this_present_SMO_OK || that_present_SMO_OK) {
      if (!(this_present_SMO_OK && that_present_SMO_OK))
        return false;
      if (!this.SMO_OK.equals(that.SMO_OK))
        return false;
    }

    boolean this_present_SMO_NAM = true && this.isSetSMO_NAM();
    boolean that_present_SMO_NAM = true && that.isSetSMO_NAM();
    if (this_present_SMO_NAM || that_present_SMO_NAM) {
      if (!(this_present_SMO_NAM && that_present_SMO_NAM))
        return false;
      if (!this.SMO_NAM.equals(that.SMO_NAM))
        return false;
    }

    boolean this_present_VNOV_D = true && this.isSetVNOV_D();
    boolean that_present_VNOV_D = true && that.isSetVNOV_D();
    if (this_present_VNOV_D || that_present_VNOV_D) {
      if (!(this_present_VNOV_D && that_present_VNOV_D))
        return false;
      if (this.VNOV_D != that.VNOV_D)
        return false;
    }

    boolean this_present_patientId = true && this.isSetPatientId();
    boolean that_present_patientId = true && that.isSetPatientId();
    if (this_present_patientId || that_present_patientId) {
      if (!(this_present_patientId && that_present_patientId))
        return false;
      if (this.patientId != that.patientId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Patient other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Patient typedOther = (Patient)other;

    lastComparison = Boolean.valueOf(isSetNOVOR()).compareTo(typedOther.isSetNOVOR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNOVOR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NOVOR, typedOther.NOVOR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOCTYPE()).compareTo(typedOther.isSetDOCTYPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOCTYPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOCTYPE, typedOther.DOCTYPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOCSER()).compareTo(typedOther.isSetDOCSER());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOCSER()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOCSER, typedOther.DOCSER);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOCNUM()).compareTo(typedOther.isSetDOCNUM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOCNUM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOCNUM, typedOther.DOCNUM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVPOLIS()).compareTo(typedOther.isSetVPOLIS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVPOLIS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VPOLIS, typedOther.VPOLIS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSPOLIS()).compareTo(typedOther.isSetSPOLIS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSPOLIS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SPOLIS, typedOther.SPOLIS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNPOLIS()).compareTo(typedOther.isSetNPOLIS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNPOLIS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NPOLIS, typedOther.NPOLIS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSMO()).compareTo(typedOther.isSetSMO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSMO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SMO, typedOther.SMO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSMO_OGRN()).compareTo(typedOther.isSetSMO_OGRN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSMO_OGRN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SMO_OGRN, typedOther.SMO_OGRN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSMO_OK()).compareTo(typedOther.isSetSMO_OK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSMO_OK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SMO_OK, typedOther.SMO_OK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSMO_NAM()).compareTo(typedOther.isSetSMO_NAM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSMO_NAM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SMO_NAM, typedOther.SMO_NAM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVNOV_D()).compareTo(typedOther.isSetVNOV_D());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVNOV_D()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VNOV_D, typedOther.VNOV_D);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(typedOther.isSetPatientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, typedOther.patientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Patient(");
    boolean first = true;

    sb.append("NOVOR:");
    if (this.NOVOR == null) {
      sb.append("null");
    } else {
      sb.append(this.NOVOR);
    }
    first = false;
    if (isSetDOCTYPE()) {
      if (!first) sb.append(", ");
      sb.append("DOCTYPE:");
      if (this.DOCTYPE == null) {
        sb.append("null");
      } else {
        sb.append(this.DOCTYPE);
      }
      first = false;
    }
    if (isSetDOCSER()) {
      if (!first) sb.append(", ");
      sb.append("DOCSER:");
      if (this.DOCSER == null) {
        sb.append("null");
      } else {
        sb.append(this.DOCSER);
      }
      first = false;
    }
    if (isSetDOCNUM()) {
      if (!first) sb.append(", ");
      sb.append("DOCNUM:");
      if (this.DOCNUM == null) {
        sb.append("null");
      } else {
        sb.append(this.DOCNUM);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("VPOLIS:");
    sb.append(this.VPOLIS);
    first = false;
    if (isSetSPOLIS()) {
      if (!first) sb.append(", ");
      sb.append("SPOLIS:");
      if (this.SPOLIS == null) {
        sb.append("null");
      } else {
        sb.append(this.SPOLIS);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("NPOLIS:");
    if (this.NPOLIS == null) {
      sb.append("null");
    } else {
      sb.append(this.NPOLIS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SMO:");
    if (this.SMO == null) {
      sb.append("null");
    } else {
      sb.append(this.SMO);
    }
    first = false;
    if (isSetSMO_OGRN()) {
      if (!first) sb.append(", ");
      sb.append("SMO_OGRN:");
      if (this.SMO_OGRN == null) {
        sb.append("null");
      } else {
        sb.append(this.SMO_OGRN);
      }
      first = false;
    }
    if (isSetSMO_OK()) {
      if (!first) sb.append(", ");
      sb.append("SMO_OK:");
      if (this.SMO_OK == null) {
        sb.append("null");
      } else {
        sb.append(this.SMO_OK);
      }
      first = false;
    }
    if (isSetSMO_NAM()) {
      if (!first) sb.append(", ");
      sb.append("SMO_NAM:");
      if (this.SMO_NAM == null) {
        sb.append("null");
      } else {
        sb.append(this.SMO_NAM);
      }
      first = false;
    }
    if (isSetVNOV_D()) {
      if (!first) sb.append(", ");
      sb.append("VNOV_D:");
      sb.append(this.VNOV_D);
      first = false;
    }
    if (isSetPatientId()) {
      if (!first) sb.append(", ");
      sb.append("patientId:");
      sb.append(this.patientId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (NOVOR == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NOVOR' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'VPOLIS' because it's a primitive and you chose the non-beans generator.
    if (NPOLIS == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NPOLIS' was not present! Struct: " + toString());
    }
    if (SMO == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SMO' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientStandardSchemeFactory implements SchemeFactory {
    public PatientStandardScheme getScheme() {
      return new PatientStandardScheme();
    }
  }

  private static class PatientStandardScheme extends StandardScheme<Patient> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Patient struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOVOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NOVOR = iprot.readString();
              struct.setNOVORIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOCTYPE = iprot.readString();
              struct.setDOCTYPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOCSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOCSER = iprot.readString();
              struct.setDOCSERIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOCNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOCNUM = iprot.readString();
              struct.setDOCNUMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VPOLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.VPOLIS = iprot.readI16();
              struct.setVPOLISIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPOLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SPOLIS = iprot.readString();
              struct.setSPOLISIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NPOLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NPOLIS = iprot.readString();
              struct.setNPOLISIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SMO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SMO = iprot.readString();
              struct.setSMOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SMO__OGRN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SMO_OGRN = iprot.readString();
              struct.setSMO_OGRNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SMO__OK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SMO_OK = iprot.readString();
              struct.setSMO_OKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SMO__NAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SMO_NAM = iprot.readString();
              struct.setSMO_NAMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VNOV__D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.VNOV_D = iprot.readI32();
              struct.setVNOV_DIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PATIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.patientId = iprot.readI32();
              struct.setPatientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVPOLIS()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'VPOLIS' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Patient struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.NOVOR != null) {
        oprot.writeFieldBegin(NOVOR_FIELD_DESC);
        oprot.writeString(struct.NOVOR);
        oprot.writeFieldEnd();
      }
      if (struct.DOCTYPE != null) {
        if (struct.isSetDOCTYPE()) {
          oprot.writeFieldBegin(DOCTYPE_FIELD_DESC);
          oprot.writeString(struct.DOCTYPE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.DOCSER != null) {
        if (struct.isSetDOCSER()) {
          oprot.writeFieldBegin(DOCSER_FIELD_DESC);
          oprot.writeString(struct.DOCSER);
          oprot.writeFieldEnd();
        }
      }
      if (struct.DOCNUM != null) {
        if (struct.isSetDOCNUM()) {
          oprot.writeFieldBegin(DOCNUM_FIELD_DESC);
          oprot.writeString(struct.DOCNUM);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(VPOLIS_FIELD_DESC);
      oprot.writeI16(struct.VPOLIS);
      oprot.writeFieldEnd();
      if (struct.SPOLIS != null) {
        if (struct.isSetSPOLIS()) {
          oprot.writeFieldBegin(SPOLIS_FIELD_DESC);
          oprot.writeString(struct.SPOLIS);
          oprot.writeFieldEnd();
        }
      }
      if (struct.NPOLIS != null) {
        oprot.writeFieldBegin(NPOLIS_FIELD_DESC);
        oprot.writeString(struct.NPOLIS);
        oprot.writeFieldEnd();
      }
      if (struct.SMO != null) {
        oprot.writeFieldBegin(SMO_FIELD_DESC);
        oprot.writeString(struct.SMO);
        oprot.writeFieldEnd();
      }
      if (struct.SMO_OGRN != null) {
        if (struct.isSetSMO_OGRN()) {
          oprot.writeFieldBegin(SMO__OGRN_FIELD_DESC);
          oprot.writeString(struct.SMO_OGRN);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SMO_OK != null) {
        if (struct.isSetSMO_OK()) {
          oprot.writeFieldBegin(SMO__OK_FIELD_DESC);
          oprot.writeString(struct.SMO_OK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SMO_NAM != null) {
        if (struct.isSetSMO_NAM()) {
          oprot.writeFieldBegin(SMO__NAM_FIELD_DESC);
          oprot.writeString(struct.SMO_NAM);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVNOV_D()) {
        oprot.writeFieldBegin(VNOV__D_FIELD_DESC);
        oprot.writeI32(struct.VNOV_D);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPatientId()) {
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.patientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientTupleSchemeFactory implements SchemeFactory {
    public PatientTupleScheme getScheme() {
      return new PatientTupleScheme();
    }
  }

  private static class PatientTupleScheme extends TupleScheme<Patient> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Patient struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.NOVOR);
      oprot.writeI16(struct.VPOLIS);
      oprot.writeString(struct.NPOLIS);
      oprot.writeString(struct.SMO);
      BitSet optionals = new BitSet();
      if (struct.isSetDOCTYPE()) {
        optionals.set(0);
      }
      if (struct.isSetDOCSER()) {
        optionals.set(1);
      }
      if (struct.isSetDOCNUM()) {
        optionals.set(2);
      }
      if (struct.isSetSPOLIS()) {
        optionals.set(3);
      }
      if (struct.isSetSMO_OGRN()) {
        optionals.set(4);
      }
      if (struct.isSetSMO_OK()) {
        optionals.set(5);
      }
      if (struct.isSetSMO_NAM()) {
        optionals.set(6);
      }
      if (struct.isSetVNOV_D()) {
        optionals.set(7);
      }
      if (struct.isSetPatientId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetDOCTYPE()) {
        oprot.writeString(struct.DOCTYPE);
      }
      if (struct.isSetDOCSER()) {
        oprot.writeString(struct.DOCSER);
      }
      if (struct.isSetDOCNUM()) {
        oprot.writeString(struct.DOCNUM);
      }
      if (struct.isSetSPOLIS()) {
        oprot.writeString(struct.SPOLIS);
      }
      if (struct.isSetSMO_OGRN()) {
        oprot.writeString(struct.SMO_OGRN);
      }
      if (struct.isSetSMO_OK()) {
        oprot.writeString(struct.SMO_OK);
      }
      if (struct.isSetSMO_NAM()) {
        oprot.writeString(struct.SMO_NAM);
      }
      if (struct.isSetVNOV_D()) {
        oprot.writeI32(struct.VNOV_D);
      }
      if (struct.isSetPatientId()) {
        oprot.writeI32(struct.patientId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Patient struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.NOVOR = iprot.readString();
      struct.setNOVORIsSet(true);
      struct.VPOLIS = iprot.readI16();
      struct.setVPOLISIsSet(true);
      struct.NPOLIS = iprot.readString();
      struct.setNPOLISIsSet(true);
      struct.SMO = iprot.readString();
      struct.setSMOIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.DOCTYPE = iprot.readString();
        struct.setDOCTYPEIsSet(true);
      }
      if (incoming.get(1)) {
        struct.DOCSER = iprot.readString();
        struct.setDOCSERIsSet(true);
      }
      if (incoming.get(2)) {
        struct.DOCNUM = iprot.readString();
        struct.setDOCNUMIsSet(true);
      }
      if (incoming.get(3)) {
        struct.SPOLIS = iprot.readString();
        struct.setSPOLISIsSet(true);
      }
      if (incoming.get(4)) {
        struct.SMO_OGRN = iprot.readString();
        struct.setSMO_OGRNIsSet(true);
      }
      if (incoming.get(5)) {
        struct.SMO_OK = iprot.readString();
        struct.setSMO_OKIsSet(true);
      }
      if (incoming.get(6)) {
        struct.SMO_NAM = iprot.readString();
        struct.setSMO_NAMIsSet(true);
      }
      if (incoming.get(7)) {
        struct.VNOV_D = iprot.readI32();
        struct.setVNOV_DIsSet(true);
      }
      if (incoming.get(8)) {
        struct.patientId = iprot.readI32();
        struct.setPatientIdIsSet(true);
      }
    }
  }

}

