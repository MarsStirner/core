/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tariff.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Tariff implements org.apache.thrift.TBase<Tariff, Tariff._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tariff");

  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField C_TAR_FIELD_DESC = new org.apache.thrift.protocol.TField("c_tar", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUMM_TAR_FIELD_DESC = new org.apache.thrift.protocol.TField("summ_tar", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_B_FIELD_DESC = new org.apache.thrift.protocol.TField("date_b", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DATE_E_FIELD_DESC = new org.apache.thrift.protocol.TField("date_e", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TariffStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TariffTupleSchemeFactory());
  }

  public int number; // required
  public String c_tar; // required
  public double summ_tar; // required
  public long date_b; // required
  public long date_e; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMBER((short)1, "number"),
    C_TAR((short)2, "c_tar"),
    SUMM_TAR((short)3, "summ_tar"),
    DATE_B((short)4, "date_b"),
    DATE_E((short)5, "date_e");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMBER
          return NUMBER;
        case 2: // C_TAR
          return C_TAR;
        case 3: // SUMM_TAR
          return SUMM_TAR;
        case 4: // DATE_B
          return DATE_B;
        case 5: // DATE_E
          return DATE_E;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER_ISSET_ID = 0;
  private static final int __SUMM_TAR_ISSET_ID = 1;
  private static final int __DATE_B_ISSET_ID = 2;
  private static final int __DATE_E_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.C_TAR, new org.apache.thrift.meta_data.FieldMetaData("c_tar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUMM_TAR, new org.apache.thrift.meta_data.FieldMetaData("summ_tar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATE_B, new org.apache.thrift.meta_data.FieldMetaData("date_b", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.DATE_E, new org.apache.thrift.meta_data.FieldMetaData("date_e", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tariff.class, metaDataMap);
  }

  public Tariff() {
  }

  public Tariff(
    int number,
    String c_tar,
    double summ_tar,
    long date_b,
    long date_e)
  {
    this();
    this.number = number;
    setNumberIsSet(true);
    this.c_tar = c_tar;
    this.summ_tar = summ_tar;
    setSumm_tarIsSet(true);
    this.date_b = date_b;
    setDate_bIsSet(true);
    this.date_e = date_e;
    setDate_eIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tariff(Tariff other) {
    __isset_bitfield = other.__isset_bitfield;
    this.number = other.number;
    if (other.isSetC_tar()) {
      this.c_tar = other.c_tar;
    }
    this.summ_tar = other.summ_tar;
    this.date_b = other.date_b;
    this.date_e = other.date_e;
  }

  public Tariff deepCopy() {
    return new Tariff(this);
  }

  @Override
  public void clear() {
    setNumberIsSet(false);
    this.number = 0;
    this.c_tar = null;
    setSumm_tarIsSet(false);
    this.summ_tar = 0.0;
    setDate_bIsSet(false);
    this.date_b = 0;
    setDate_eIsSet(false);
    this.date_e = 0;
  }

  public int getNumber() {
    return this.number;
  }

  public Tariff setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
    return this;
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public String getC_tar() {
    return this.c_tar;
  }

  public Tariff setC_tar(String c_tar) {
    this.c_tar = c_tar;
    return this;
  }

  public void unsetC_tar() {
    this.c_tar = null;
  }

  /** Returns true if field c_tar is set (has been assigned a value) and false otherwise */
  public boolean isSetC_tar() {
    return this.c_tar != null;
  }

  public void setC_tarIsSet(boolean value) {
    if (!value) {
      this.c_tar = null;
    }
  }

  public double getSumm_tar() {
    return this.summ_tar;
  }

  public Tariff setSumm_tar(double summ_tar) {
    this.summ_tar = summ_tar;
    setSumm_tarIsSet(true);
    return this;
  }

  public void unsetSumm_tar() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUMM_TAR_ISSET_ID);
  }

  /** Returns true if field summ_tar is set (has been assigned a value) and false otherwise */
  public boolean isSetSumm_tar() {
    return EncodingUtils.testBit(__isset_bitfield, __SUMM_TAR_ISSET_ID);
  }

  public void setSumm_tarIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUMM_TAR_ISSET_ID, value);
  }

  public long getDate_b() {
    return this.date_b;
  }

  public Tariff setDate_b(long date_b) {
    this.date_b = date_b;
    setDate_bIsSet(true);
    return this;
  }

  public void unsetDate_b() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_B_ISSET_ID);
  }

  /** Returns true if field date_b is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_b() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_B_ISSET_ID);
  }

  public void setDate_bIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_B_ISSET_ID, value);
  }

  public long getDate_e() {
    return this.date_e;
  }

  public Tariff setDate_e(long date_e) {
    this.date_e = date_e;
    setDate_eIsSet(true);
    return this;
  }

  public void unsetDate_e() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_E_ISSET_ID);
  }

  /** Returns true if field date_e is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_e() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_E_ISSET_ID);
  }

  public void setDate_eIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_E_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case C_TAR:
      if (value == null) {
        unsetC_tar();
      } else {
        setC_tar((String)value);
      }
      break;

    case SUMM_TAR:
      if (value == null) {
        unsetSumm_tar();
      } else {
        setSumm_tar((Double)value);
      }
      break;

    case DATE_B:
      if (value == null) {
        unsetDate_b();
      } else {
        setDate_b((Long)value);
      }
      break;

    case DATE_E:
      if (value == null) {
        unsetDate_e();
      } else {
        setDate_e((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER:
      return Integer.valueOf(getNumber());

    case C_TAR:
      return getC_tar();

    case SUMM_TAR:
      return Double.valueOf(getSumm_tar());

    case DATE_B:
      return Long.valueOf(getDate_b());

    case DATE_E:
      return Long.valueOf(getDate_e());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUMBER:
      return isSetNumber();
    case C_TAR:
      return isSetC_tar();
    case SUMM_TAR:
      return isSetSumm_tar();
    case DATE_B:
      return isSetDate_b();
    case DATE_E:
      return isSetDate_e();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tariff)
      return this.equals((Tariff)that);
    return false;
  }

  public boolean equals(Tariff that) {
    if (that == null)
      return false;

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_c_tar = true && this.isSetC_tar();
    boolean that_present_c_tar = true && that.isSetC_tar();
    if (this_present_c_tar || that_present_c_tar) {
      if (!(this_present_c_tar && that_present_c_tar))
        return false;
      if (!this.c_tar.equals(that.c_tar))
        return false;
    }

    boolean this_present_summ_tar = true;
    boolean that_present_summ_tar = true;
    if (this_present_summ_tar || that_present_summ_tar) {
      if (!(this_present_summ_tar && that_present_summ_tar))
        return false;
      if (this.summ_tar != that.summ_tar)
        return false;
    }

    boolean this_present_date_b = true;
    boolean that_present_date_b = true;
    if (this_present_date_b || that_present_date_b) {
      if (!(this_present_date_b && that_present_date_b))
        return false;
      if (this.date_b != that.date_b)
        return false;
    }

    boolean this_present_date_e = true;
    boolean that_present_date_e = true;
    if (this_present_date_e || that_present_date_e) {
      if (!(this_present_date_e && that_present_date_e))
        return false;
      if (this.date_e != that.date_e)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Tariff other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Tariff typedOther = (Tariff)other;

    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetC_tar()).compareTo(typedOther.isSetC_tar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC_tar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_tar, typedOther.c_tar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSumm_tar()).compareTo(typedOther.isSetSumm_tar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSumm_tar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summ_tar, typedOther.summ_tar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_b()).compareTo(typedOther.isSetDate_b());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_b()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_b, typedOther.date_b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_e()).compareTo(typedOther.isSetDate_e());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_e()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_e, typedOther.date_e);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tariff(");
    boolean first = true;

    sb.append("number:");
    sb.append(this.number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("c_tar:");
    if (this.c_tar == null) {
      sb.append("null");
    } else {
      sb.append(this.c_tar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("summ_tar:");
    sb.append(this.summ_tar);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_b:");
    sb.append(this.date_b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_e:");
    sb.append(this.date_e);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'number' because it's a primitive and you chose the non-beans generator.
    if (c_tar == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'c_tar' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'summ_tar' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'date_b' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'date_e' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TariffStandardSchemeFactory implements SchemeFactory {
    public TariffStandardScheme getScheme() {
      return new TariffStandardScheme();
    }
  }

  private static class TariffStandardScheme extends StandardScheme<Tariff> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tariff struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // C_TAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.c_tar = iprot.readString();
              struct.setC_tarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUMM_TAR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.summ_tar = iprot.readDouble();
              struct.setSumm_tarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_B
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date_b = iprot.readI64();
              struct.setDate_bIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATE_E
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date_e = iprot.readI64();
              struct.setDate_eIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'number' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSumm_tar()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'summ_tar' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDate_b()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'date_b' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDate_e()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'date_e' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tariff struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeI32(struct.number);
      oprot.writeFieldEnd();
      if (struct.c_tar != null) {
        oprot.writeFieldBegin(C_TAR_FIELD_DESC);
        oprot.writeString(struct.c_tar);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUMM_TAR_FIELD_DESC);
      oprot.writeDouble(struct.summ_tar);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATE_B_FIELD_DESC);
      oprot.writeI64(struct.date_b);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATE_E_FIELD_DESC);
      oprot.writeI64(struct.date_e);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TariffTupleSchemeFactory implements SchemeFactory {
    public TariffTupleScheme getScheme() {
      return new TariffTupleScheme();
    }
  }

  private static class TariffTupleScheme extends TupleScheme<Tariff> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tariff struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.number);
      oprot.writeString(struct.c_tar);
      oprot.writeDouble(struct.summ_tar);
      oprot.writeI64(struct.date_b);
      oprot.writeI64(struct.date_e);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tariff struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.number = iprot.readI32();
      struct.setNumberIsSet(true);
      struct.c_tar = iprot.readString();
      struct.setC_tarIsSet(true);
      struct.summ_tar = iprot.readDouble();
      struct.setSumm_tarIsSet(true);
      struct.date_b = iprot.readI64();
      struct.setDate_bIsSet(true);
      struct.date_e = iprot.readI64();
      struct.setDate_eIsSet(true);
    }
  }

}

