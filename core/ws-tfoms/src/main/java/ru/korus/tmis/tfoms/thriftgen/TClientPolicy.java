/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TClientPolicy implements org.apache.thrift.TBase<TClientPolicy, TClientPolicy._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TClientPolicy");

  private static final org.apache.thrift.protocol.TField SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("serial", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField POLICY_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("policyTypeCode", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField BEG_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField INSURER_INFIS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("insurerInfisCode", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TClientPolicyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TClientPolicyTupleSchemeFactory());
  }

  public String serial; // required
  public String number; // required
  public short policyTypeCode; // required
  public long begDate; // optional
  public long endDate; // optional
  public String insurerInfisCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERIAL((short)1, "serial"),
    NUMBER((short)2, "number"),
    POLICY_TYPE_CODE((short)3, "policyTypeCode"),
    BEG_DATE((short)4, "begDate"),
    END_DATE((short)5, "endDate"),
    INSURER_INFIS_CODE((short)6, "insurerInfisCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERIAL
          return SERIAL;
        case 2: // NUMBER
          return NUMBER;
        case 3: // POLICY_TYPE_CODE
          return POLICY_TYPE_CODE;
        case 4: // BEG_DATE
          return BEG_DATE;
        case 5: // END_DATE
          return END_DATE;
        case 6: // INSURER_INFIS_CODE
          return INSURER_INFIS_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POLICYTYPECODE_ISSET_ID = 0;
  private static final int __BEGDATE_ISSET_ID = 1;
  private static final int __ENDDATE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BEG_DATE,_Fields.END_DATE,_Fields.INSURER_INFIS_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERIAL, new org.apache.thrift.meta_data.FieldMetaData("serial", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLICY_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("policyTypeCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.BEG_DATE, new org.apache.thrift.meta_data.FieldMetaData("begDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.INSURER_INFIS_CODE, new org.apache.thrift.meta_data.FieldMetaData("insurerInfisCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TClientPolicy.class, metaDataMap);
  }

  public TClientPolicy() {
  }

  public TClientPolicy(
    String serial,
    String number,
    short policyTypeCode)
  {
    this();
    this.serial = serial;
    this.number = number;
    this.policyTypeCode = policyTypeCode;
    setPolicyTypeCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TClientPolicy(TClientPolicy other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSerial()) {
      this.serial = other.serial;
    }
    if (other.isSetNumber()) {
      this.number = other.number;
    }
    this.policyTypeCode = other.policyTypeCode;
    this.begDate = other.begDate;
    this.endDate = other.endDate;
    if (other.isSetInsurerInfisCode()) {
      this.insurerInfisCode = other.insurerInfisCode;
    }
  }

  public TClientPolicy deepCopy() {
    return new TClientPolicy(this);
  }

  @Override
  public void clear() {
    this.serial = null;
    this.number = null;
    setPolicyTypeCodeIsSet(false);
    this.policyTypeCode = 0;
    setBegDateIsSet(false);
    this.begDate = 0;
    setEndDateIsSet(false);
    this.endDate = 0;
    this.insurerInfisCode = null;
  }

  public String getSerial() {
    return this.serial;
  }

  public TClientPolicy setSerial(String serial) {
    this.serial = serial;
    return this;
  }

  public void unsetSerial() {
    this.serial = null;
  }

  /** Returns true if field serial is set (has been assigned a value) and false otherwise */
  public boolean isSetSerial() {
    return this.serial != null;
  }

  public void setSerialIsSet(boolean value) {
    if (!value) {
      this.serial = null;
    }
  }

  public String getNumber() {
    return this.number;
  }

  public TClientPolicy setNumber(String number) {
    this.number = number;
    return this;
  }

  public void unsetNumber() {
    this.number = null;
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return this.number != null;
  }

  public void setNumberIsSet(boolean value) {
    if (!value) {
      this.number = null;
    }
  }

  public short getPolicyTypeCode() {
    return this.policyTypeCode;
  }

  public TClientPolicy setPolicyTypeCode(short policyTypeCode) {
    this.policyTypeCode = policyTypeCode;
    setPolicyTypeCodeIsSet(true);
    return this;
  }

  public void unsetPolicyTypeCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POLICYTYPECODE_ISSET_ID);
  }

  /** Returns true if field policyTypeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicyTypeCode() {
    return EncodingUtils.testBit(__isset_bitfield, __POLICYTYPECODE_ISSET_ID);
  }

  public void setPolicyTypeCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POLICYTYPECODE_ISSET_ID, value);
  }

  public long getBegDate() {
    return this.begDate;
  }

  public TClientPolicy setBegDate(long begDate) {
    this.begDate = begDate;
    setBegDateIsSet(true);
    return this;
  }

  public void unsetBegDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGDATE_ISSET_ID);
  }

  /** Returns true if field begDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBegDate() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGDATE_ISSET_ID);
  }

  public void setBegDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGDATE_ISSET_ID, value);
  }

  public long getEndDate() {
    return this.endDate;
  }

  public TClientPolicy setEndDate(long endDate) {
    this.endDate = endDate;
    setEndDateIsSet(true);
    return this;
  }

  public void unsetEndDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  public void setEndDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
  }

  public String getInsurerInfisCode() {
    return this.insurerInfisCode;
  }

  public TClientPolicy setInsurerInfisCode(String insurerInfisCode) {
    this.insurerInfisCode = insurerInfisCode;
    return this;
  }

  public void unsetInsurerInfisCode() {
    this.insurerInfisCode = null;
  }

  /** Returns true if field insurerInfisCode is set (has been assigned a value) and false otherwise */
  public boolean isSetInsurerInfisCode() {
    return this.insurerInfisCode != null;
  }

  public void setInsurerInfisCodeIsSet(boolean value) {
    if (!value) {
      this.insurerInfisCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERIAL:
      if (value == null) {
        unsetSerial();
      } else {
        setSerial((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((String)value);
      }
      break;

    case POLICY_TYPE_CODE:
      if (value == null) {
        unsetPolicyTypeCode();
      } else {
        setPolicyTypeCode((Short)value);
      }
      break;

    case BEG_DATE:
      if (value == null) {
        unsetBegDate();
      } else {
        setBegDate((Long)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((Long)value);
      }
      break;

    case INSURER_INFIS_CODE:
      if (value == null) {
        unsetInsurerInfisCode();
      } else {
        setInsurerInfisCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERIAL:
      return getSerial();

    case NUMBER:
      return getNumber();

    case POLICY_TYPE_CODE:
      return Short.valueOf(getPolicyTypeCode());

    case BEG_DATE:
      return Long.valueOf(getBegDate());

    case END_DATE:
      return Long.valueOf(getEndDate());

    case INSURER_INFIS_CODE:
      return getInsurerInfisCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERIAL:
      return isSetSerial();
    case NUMBER:
      return isSetNumber();
    case POLICY_TYPE_CODE:
      return isSetPolicyTypeCode();
    case BEG_DATE:
      return isSetBegDate();
    case END_DATE:
      return isSetEndDate();
    case INSURER_INFIS_CODE:
      return isSetInsurerInfisCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TClientPolicy)
      return this.equals((TClientPolicy)that);
    return false;
  }

  public boolean equals(TClientPolicy that) {
    if (that == null)
      return false;

    boolean this_present_serial = true && this.isSetSerial();
    boolean that_present_serial = true && that.isSetSerial();
    if (this_present_serial || that_present_serial) {
      if (!(this_present_serial && that_present_serial))
        return false;
      if (!this.serial.equals(that.serial))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (!this.number.equals(that.number))
        return false;
    }

    boolean this_present_policyTypeCode = true;
    boolean that_present_policyTypeCode = true;
    if (this_present_policyTypeCode || that_present_policyTypeCode) {
      if (!(this_present_policyTypeCode && that_present_policyTypeCode))
        return false;
      if (this.policyTypeCode != that.policyTypeCode)
        return false;
    }

    boolean this_present_begDate = true && this.isSetBegDate();
    boolean that_present_begDate = true && that.isSetBegDate();
    if (this_present_begDate || that_present_begDate) {
      if (!(this_present_begDate && that_present_begDate))
        return false;
      if (this.begDate != that.begDate)
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (this.endDate != that.endDate)
        return false;
    }

    boolean this_present_insurerInfisCode = true && this.isSetInsurerInfisCode();
    boolean that_present_insurerInfisCode = true && that.isSetInsurerInfisCode();
    if (this_present_insurerInfisCode || that_present_insurerInfisCode) {
      if (!(this_present_insurerInfisCode && that_present_insurerInfisCode))
        return false;
      if (!this.insurerInfisCode.equals(that.insurerInfisCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TClientPolicy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TClientPolicy typedOther = (TClientPolicy)other;

    lastComparison = Boolean.valueOf(isSetSerial()).compareTo(typedOther.isSetSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serial, typedOther.serial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicyTypeCode()).compareTo(typedOther.isSetPolicyTypeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicyTypeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policyTypeCode, typedOther.policyTypeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBegDate()).compareTo(typedOther.isSetBegDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBegDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begDate, typedOther.begDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsurerInfisCode()).compareTo(typedOther.isSetInsurerInfisCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsurerInfisCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insurerInfisCode, typedOther.insurerInfisCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TClientPolicy(");
    boolean first = true;

    sb.append("serial:");
    if (this.serial == null) {
      sb.append("null");
    } else {
      sb.append(this.serial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    if (this.number == null) {
      sb.append("null");
    } else {
      sb.append(this.number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("policyTypeCode:");
    sb.append(this.policyTypeCode);
    first = false;
    if (isSetBegDate()) {
      if (!first) sb.append(", ");
      sb.append("begDate:");
      sb.append(this.begDate);
      first = false;
    }
    if (isSetEndDate()) {
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
    }
    if (isSetInsurerInfisCode()) {
      if (!first) sb.append(", ");
      sb.append("insurerInfisCode:");
      if (this.insurerInfisCode == null) {
        sb.append("null");
      } else {
        sb.append(this.insurerInfisCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serial == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serial' was not present! Struct: " + toString());
    }
    if (number == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'number' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'policyTypeCode' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TClientPolicyStandardSchemeFactory implements SchemeFactory {
    public TClientPolicyStandardScheme getScheme() {
      return new TClientPolicyStandardScheme();
    }
  }

  private static class TClientPolicyStandardScheme extends StandardScheme<TClientPolicy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TClientPolicy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serial = iprot.readString();
              struct.setSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.number = iprot.readString();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POLICY_TYPE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.policyTypeCode = iprot.readI16();
              struct.setPolicyTypeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BEG_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.begDate = iprot.readI64();
              struct.setBegDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endDate = iprot.readI64();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INSURER_INFIS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insurerInfisCode = iprot.readString();
              struct.setInsurerInfisCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPolicyTypeCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'policyTypeCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TClientPolicy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serial != null) {
        oprot.writeFieldBegin(SERIAL_FIELD_DESC);
        oprot.writeString(struct.serial);
        oprot.writeFieldEnd();
      }
      if (struct.number != null) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeString(struct.number);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POLICY_TYPE_CODE_FIELD_DESC);
      oprot.writeI16(struct.policyTypeCode);
      oprot.writeFieldEnd();
      if (struct.isSetBegDate()) {
        oprot.writeFieldBegin(BEG_DATE_FIELD_DESC);
        oprot.writeI64(struct.begDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndDate()) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.insurerInfisCode != null) {
        if (struct.isSetInsurerInfisCode()) {
          oprot.writeFieldBegin(INSURER_INFIS_CODE_FIELD_DESC);
          oprot.writeString(struct.insurerInfisCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TClientPolicyTupleSchemeFactory implements SchemeFactory {
    public TClientPolicyTupleScheme getScheme() {
      return new TClientPolicyTupleScheme();
    }
  }

  private static class TClientPolicyTupleScheme extends TupleScheme<TClientPolicy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TClientPolicy struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.serial);
      oprot.writeString(struct.number);
      oprot.writeI16(struct.policyTypeCode);
      BitSet optionals = new BitSet();
      if (struct.isSetBegDate()) {
        optionals.set(0);
      }
      if (struct.isSetEndDate()) {
        optionals.set(1);
      }
      if (struct.isSetInsurerInfisCode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBegDate()) {
        oprot.writeI64(struct.begDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeI64(struct.endDate);
      }
      if (struct.isSetInsurerInfisCode()) {
        oprot.writeString(struct.insurerInfisCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TClientPolicy struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.serial = iprot.readString();
      struct.setSerialIsSet(true);
      struct.number = iprot.readString();
      struct.setNumberIsSet(true);
      struct.policyTypeCode = iprot.readI16();
      struct.setPolicyTypeCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.begDate = iprot.readI64();
        struct.setBegDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endDate = iprot.readI64();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.insurerInfisCode = iprot.readString();
        struct.setInsurerInfisCodeIsSet(true);
      }
    }
  }

}

