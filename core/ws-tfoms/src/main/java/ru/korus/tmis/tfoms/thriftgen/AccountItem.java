/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccountItem implements org.apache.thrift.TBase<AccountItem, AccountItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccountItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceDate", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PATR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("patrName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField BIRTH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("birthDate", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField UNIT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("unitName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REFUSE_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseTypeName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REFUSE_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseTypeCode", org.apache.thrift.protocol.TType.I16, (short)14);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DO_NOT_UPLOAD_ANYMORE_FIELD_DESC = new org.apache.thrift.protocol.TField("doNotUploadAnymore", org.apache.thrift.protocol.TType.BOOL, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccountItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccountItemTupleSchemeFactory());
  }

  public int id; // required
  public long serviceDate; // required
  public String lastName; // required
  public String firstName; // required
  public String patrName; // required
  public short sex; // required
  public long birthDate; // required
  public double price; // required
  public double amount; // required
  public String unitName; // required
  public long date; // optional
  public String fileName; // required
  public String refuseTypeName; // optional
  public short refuseTypeCode; // optional
  public String note; // optional
  public boolean doNotUploadAnymore; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SERVICE_DATE((short)2, "serviceDate"),
    LAST_NAME((short)3, "lastName"),
    FIRST_NAME((short)4, "firstName"),
    PATR_NAME((short)5, "patrName"),
    SEX((short)6, "sex"),
    BIRTH_DATE((short)7, "birthDate"),
    PRICE((short)8, "price"),
    AMOUNT((short)9, "amount"),
    UNIT_NAME((short)10, "unitName"),
    DATE((short)11, "date"),
    FILE_NAME((short)12, "fileName"),
    REFUSE_TYPE_NAME((short)13, "refuseTypeName"),
    REFUSE_TYPE_CODE((short)14, "refuseTypeCode"),
    NOTE((short)15, "note"),
    DO_NOT_UPLOAD_ANYMORE((short)16, "doNotUploadAnymore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SERVICE_DATE
          return SERVICE_DATE;
        case 3: // LAST_NAME
          return LAST_NAME;
        case 4: // FIRST_NAME
          return FIRST_NAME;
        case 5: // PATR_NAME
          return PATR_NAME;
        case 6: // SEX
          return SEX;
        case 7: // BIRTH_DATE
          return BIRTH_DATE;
        case 8: // PRICE
          return PRICE;
        case 9: // AMOUNT
          return AMOUNT;
        case 10: // UNIT_NAME
          return UNIT_NAME;
        case 11: // DATE
          return DATE;
        case 12: // FILE_NAME
          return FILE_NAME;
        case 13: // REFUSE_TYPE_NAME
          return REFUSE_TYPE_NAME;
        case 14: // REFUSE_TYPE_CODE
          return REFUSE_TYPE_CODE;
        case 15: // NOTE
          return NOTE;
        case 16: // DO_NOT_UPLOAD_ANYMORE
          return DO_NOT_UPLOAD_ANYMORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SERVICEDATE_ISSET_ID = 1;
  private static final int __SEX_ISSET_ID = 2;
  private static final int __BIRTHDATE_ISSET_ID = 3;
  private static final int __PRICE_ISSET_ID = 4;
  private static final int __AMOUNT_ISSET_ID = 5;
  private static final int __DATE_ISSET_ID = 6;
  private static final int __REFUSETYPECODE_ISSET_ID = 7;
  private static final int __DONOTUPLOADANYMORE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DATE,_Fields.REFUSE_TYPE_NAME,_Fields.REFUSE_TYPE_CODE,_Fields.NOTE,_Fields.DO_NOT_UPLOAD_ANYMORE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SERVICE_DATE, new org.apache.thrift.meta_data.FieldMetaData("serviceDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATR_NAME, new org.apache.thrift.meta_data.FieldMetaData("patrName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.BIRTH_DATE, new org.apache.thrift.meta_data.FieldMetaData("birthDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UNIT_NAME, new org.apache.thrift.meta_data.FieldMetaData("unitName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUSE_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("refuseTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUSE_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("refuseTypeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DO_NOT_UPLOAD_ANYMORE, new org.apache.thrift.meta_data.FieldMetaData("doNotUploadAnymore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccountItem.class, metaDataMap);
  }

  public AccountItem() {
  }

  public AccountItem(
    int id,
    long serviceDate,
    String lastName,
    String firstName,
    String patrName,
    short sex,
    long birthDate,
    double price,
    double amount,
    String unitName,
    String fileName)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.serviceDate = serviceDate;
    setServiceDateIsSet(true);
    this.lastName = lastName;
    this.firstName = firstName;
    this.patrName = patrName;
    this.sex = sex;
    setSexIsSet(true);
    this.birthDate = birthDate;
    setBirthDateIsSet(true);
    this.price = price;
    setPriceIsSet(true);
    this.amount = amount;
    setAmountIsSet(true);
    this.unitName = unitName;
    this.fileName = fileName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccountItem(AccountItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.serviceDate = other.serviceDate;
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetPatrName()) {
      this.patrName = other.patrName;
    }
    this.sex = other.sex;
    this.birthDate = other.birthDate;
    this.price = other.price;
    this.amount = other.amount;
    if (other.isSetUnitName()) {
      this.unitName = other.unitName;
    }
    this.date = other.date;
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetRefuseTypeName()) {
      this.refuseTypeName = other.refuseTypeName;
    }
    this.refuseTypeCode = other.refuseTypeCode;
    if (other.isSetNote()) {
      this.note = other.note;
    }
    this.doNotUploadAnymore = other.doNotUploadAnymore;
  }

  public AccountItem deepCopy() {
    return new AccountItem(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setServiceDateIsSet(false);
    this.serviceDate = 0;
    this.lastName = null;
    this.firstName = null;
    this.patrName = null;
    setSexIsSet(false);
    this.sex = 0;
    setBirthDateIsSet(false);
    this.birthDate = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    setAmountIsSet(false);
    this.amount = 0.0;
    this.unitName = null;
    setDateIsSet(false);
    this.date = 0;
    this.fileName = null;
    this.refuseTypeName = null;
    setRefuseTypeCodeIsSet(false);
    this.refuseTypeCode = 0;
    this.note = null;
    setDoNotUploadAnymoreIsSet(false);
    this.doNotUploadAnymore = false;
  }

  public int getId() {
    return this.id;
  }

  public AccountItem setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getServiceDate() {
    return this.serviceDate;
  }

  public AccountItem setServiceDate(long serviceDate) {
    this.serviceDate = serviceDate;
    setServiceDateIsSet(true);
    return this;
  }

  public void unsetServiceDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICEDATE_ISSET_ID);
  }

  /** Returns true if field serviceDate is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceDate() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVICEDATE_ISSET_ID);
  }

  public void setServiceDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICEDATE_ISSET_ID, value);
  }

  public String getLastName() {
    return this.lastName;
  }

  public AccountItem setLastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public String getFirstName() {
    return this.firstName;
  }

  public AccountItem setFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getPatrName() {
    return this.patrName;
  }

  public AccountItem setPatrName(String patrName) {
    this.patrName = patrName;
    return this;
  }

  public void unsetPatrName() {
    this.patrName = null;
  }

  /** Returns true if field patrName is set (has been assigned a value) and false otherwise */
  public boolean isSetPatrName() {
    return this.patrName != null;
  }

  public void setPatrNameIsSet(boolean value) {
    if (!value) {
      this.patrName = null;
    }
  }

  public short getSex() {
    return this.sex;
  }

  public AccountItem setSex(short sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public long getBirthDate() {
    return this.birthDate;
  }

  public AccountItem setBirthDate(long birthDate) {
    this.birthDate = birthDate;
    setBirthDateIsSet(true);
    return this;
  }

  public void unsetBirthDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDATE_ISSET_ID);
  }

  /** Returns true if field birthDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthDate() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDATE_ISSET_ID);
  }

  public void setBirthDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDATE_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public AccountItem setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public AccountItem setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public String getUnitName() {
    return this.unitName;
  }

  public AccountItem setUnitName(String unitName) {
    this.unitName = unitName;
    return this;
  }

  public void unsetUnitName() {
    this.unitName = null;
  }

  /** Returns true if field unitName is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitName() {
    return this.unitName != null;
  }

  public void setUnitNameIsSet(boolean value) {
    if (!value) {
      this.unitName = null;
    }
  }

  public long getDate() {
    return this.date;
  }

  public AccountItem setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  public String getFileName() {
    return this.fileName;
  }

  public AccountItem setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public String getRefuseTypeName() {
    return this.refuseTypeName;
  }

  public AccountItem setRefuseTypeName(String refuseTypeName) {
    this.refuseTypeName = refuseTypeName;
    return this;
  }

  public void unsetRefuseTypeName() {
    this.refuseTypeName = null;
  }

  /** Returns true if field refuseTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseTypeName() {
    return this.refuseTypeName != null;
  }

  public void setRefuseTypeNameIsSet(boolean value) {
    if (!value) {
      this.refuseTypeName = null;
    }
  }

  public short getRefuseTypeCode() {
    return this.refuseTypeCode;
  }

  public AccountItem setRefuseTypeCode(short refuseTypeCode) {
    this.refuseTypeCode = refuseTypeCode;
    setRefuseTypeCodeIsSet(true);
    return this;
  }

  public void unsetRefuseTypeCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUSETYPECODE_ISSET_ID);
  }

  /** Returns true if field refuseTypeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseTypeCode() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUSETYPECODE_ISSET_ID);
  }

  public void setRefuseTypeCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUSETYPECODE_ISSET_ID, value);
  }

  public String getNote() {
    return this.note;
  }

  public AccountItem setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public boolean isDoNotUploadAnymore() {
    return this.doNotUploadAnymore;
  }

  public AccountItem setDoNotUploadAnymore(boolean doNotUploadAnymore) {
    this.doNotUploadAnymore = doNotUploadAnymore;
    setDoNotUploadAnymoreIsSet(true);
    return this;
  }

  public void unsetDoNotUploadAnymore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DONOTUPLOADANYMORE_ISSET_ID);
  }

  /** Returns true if field doNotUploadAnymore is set (has been assigned a value) and false otherwise */
  public boolean isSetDoNotUploadAnymore() {
    return EncodingUtils.testBit(__isset_bitfield, __DONOTUPLOADANYMORE_ISSET_ID);
  }

  public void setDoNotUploadAnymoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DONOTUPLOADANYMORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case SERVICE_DATE:
      if (value == null) {
        unsetServiceDate();
      } else {
        setServiceDate((Long)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((String)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case PATR_NAME:
      if (value == null) {
        unsetPatrName();
      } else {
        setPatrName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Short)value);
      }
      break;

    case BIRTH_DATE:
      if (value == null) {
        unsetBirthDate();
      } else {
        setBirthDate((Long)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case UNIT_NAME:
      if (value == null) {
        unsetUnitName();
      } else {
        setUnitName((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case REFUSE_TYPE_NAME:
      if (value == null) {
        unsetRefuseTypeName();
      } else {
        setRefuseTypeName((String)value);
      }
      break;

    case REFUSE_TYPE_CODE:
      if (value == null) {
        unsetRefuseTypeCode();
      } else {
        setRefuseTypeCode((Short)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    case DO_NOT_UPLOAD_ANYMORE:
      if (value == null) {
        unsetDoNotUploadAnymore();
      } else {
        setDoNotUploadAnymore((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case SERVICE_DATE:
      return Long.valueOf(getServiceDate());

    case LAST_NAME:
      return getLastName();

    case FIRST_NAME:
      return getFirstName();

    case PATR_NAME:
      return getPatrName();

    case SEX:
      return Short.valueOf(getSex());

    case BIRTH_DATE:
      return Long.valueOf(getBirthDate());

    case PRICE:
      return Double.valueOf(getPrice());

    case AMOUNT:
      return Double.valueOf(getAmount());

    case UNIT_NAME:
      return getUnitName();

    case DATE:
      return Long.valueOf(getDate());

    case FILE_NAME:
      return getFileName();

    case REFUSE_TYPE_NAME:
      return getRefuseTypeName();

    case REFUSE_TYPE_CODE:
      return Short.valueOf(getRefuseTypeCode());

    case NOTE:
      return getNote();

    case DO_NOT_UPLOAD_ANYMORE:
      return Boolean.valueOf(isDoNotUploadAnymore());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SERVICE_DATE:
      return isSetServiceDate();
    case LAST_NAME:
      return isSetLastName();
    case FIRST_NAME:
      return isSetFirstName();
    case PATR_NAME:
      return isSetPatrName();
    case SEX:
      return isSetSex();
    case BIRTH_DATE:
      return isSetBirthDate();
    case PRICE:
      return isSetPrice();
    case AMOUNT:
      return isSetAmount();
    case UNIT_NAME:
      return isSetUnitName();
    case DATE:
      return isSetDate();
    case FILE_NAME:
      return isSetFileName();
    case REFUSE_TYPE_NAME:
      return isSetRefuseTypeName();
    case REFUSE_TYPE_CODE:
      return isSetRefuseTypeCode();
    case NOTE:
      return isSetNote();
    case DO_NOT_UPLOAD_ANYMORE:
      return isSetDoNotUploadAnymore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccountItem)
      return this.equals((AccountItem)that);
    return false;
  }

  public boolean equals(AccountItem that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_serviceDate = true;
    boolean that_present_serviceDate = true;
    if (this_present_serviceDate || that_present_serviceDate) {
      if (!(this_present_serviceDate && that_present_serviceDate))
        return false;
      if (this.serviceDate != that.serviceDate)
        return false;
    }

    boolean this_present_lastName = true && this.isSetLastName();
    boolean that_present_lastName = true && that.isSetLastName();
    if (this_present_lastName || that_present_lastName) {
      if (!(this_present_lastName && that_present_lastName))
        return false;
      if (!this.lastName.equals(that.lastName))
        return false;
    }

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_patrName = true && this.isSetPatrName();
    boolean that_present_patrName = true && that.isSetPatrName();
    if (this_present_patrName || that_present_patrName) {
      if (!(this_present_patrName && that_present_patrName))
        return false;
      if (!this.patrName.equals(that.patrName))
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_birthDate = true;
    boolean that_present_birthDate = true;
    if (this_present_birthDate || that_present_birthDate) {
      if (!(this_present_birthDate && that_present_birthDate))
        return false;
      if (this.birthDate != that.birthDate)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_unitName = true && this.isSetUnitName();
    boolean that_present_unitName = true && that.isSetUnitName();
    if (this_present_unitName || that_present_unitName) {
      if (!(this_present_unitName && that_present_unitName))
        return false;
      if (!this.unitName.equals(that.unitName))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_refuseTypeName = true && this.isSetRefuseTypeName();
    boolean that_present_refuseTypeName = true && that.isSetRefuseTypeName();
    if (this_present_refuseTypeName || that_present_refuseTypeName) {
      if (!(this_present_refuseTypeName && that_present_refuseTypeName))
        return false;
      if (!this.refuseTypeName.equals(that.refuseTypeName))
        return false;
    }

    boolean this_present_refuseTypeCode = true && this.isSetRefuseTypeCode();
    boolean that_present_refuseTypeCode = true && that.isSetRefuseTypeCode();
    if (this_present_refuseTypeCode || that_present_refuseTypeCode) {
      if (!(this_present_refuseTypeCode && that_present_refuseTypeCode))
        return false;
      if (this.refuseTypeCode != that.refuseTypeCode)
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    boolean this_present_doNotUploadAnymore = true && this.isSetDoNotUploadAnymore();
    boolean that_present_doNotUploadAnymore = true && that.isSetDoNotUploadAnymore();
    if (this_present_doNotUploadAnymore || that_present_doNotUploadAnymore) {
      if (!(this_present_doNotUploadAnymore && that_present_doNotUploadAnymore))
        return false;
      if (this.doNotUploadAnymore != that.doNotUploadAnymore)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AccountItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AccountItem typedOther = (AccountItem)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceDate()).compareTo(typedOther.isSetServiceDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceDate, typedOther.serviceDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastName()).compareTo(typedOther.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, typedOther.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(typedOther.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, typedOther.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatrName()).compareTo(typedOther.isSetPatrName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatrName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patrName, typedOther.patrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthDate()).compareTo(typedOther.isSetBirthDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthDate, typedOther.birthDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitName()).compareTo(typedOther.isSetUnitName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitName, typedOther.unitName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(typedOther.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, typedOther.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseTypeName()).compareTo(typedOther.isSetRefuseTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseTypeName, typedOther.refuseTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseTypeCode()).compareTo(typedOther.isSetRefuseTypeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseTypeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseTypeCode, typedOther.refuseTypeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(typedOther.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, typedOther.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoNotUploadAnymore()).compareTo(typedOther.isSetDoNotUploadAnymore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoNotUploadAnymore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doNotUploadAnymore, typedOther.doNotUploadAnymore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccountItem(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceDate:");
    sb.append(this.serviceDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastName:");
    if (this.lastName == null) {
      sb.append("null");
    } else {
      sb.append(this.lastName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("patrName:");
    if (this.patrName == null) {
      sb.append("null");
    } else {
      sb.append(this.patrName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthDate:");
    sb.append(this.birthDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitName:");
    if (this.unitName == null) {
      sb.append("null");
    } else {
      sb.append(this.unitName);
    }
    first = false;
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (isSetRefuseTypeName()) {
      if (!first) sb.append(", ");
      sb.append("refuseTypeName:");
      if (this.refuseTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.refuseTypeName);
      }
      first = false;
    }
    if (isSetRefuseTypeCode()) {
      if (!first) sb.append(", ");
      sb.append("refuseTypeCode:");
      sb.append(this.refuseTypeCode);
      first = false;
    }
    if (isSetNote()) {
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
    }
    if (isSetDoNotUploadAnymore()) {
      if (!first) sb.append(", ");
      sb.append("doNotUploadAnymore:");
      sb.append(this.doNotUploadAnymore);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'serviceDate' because it's a primitive and you chose the non-beans generator.
    if (lastName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastName' was not present! Struct: " + toString());
    }
    if (firstName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'firstName' was not present! Struct: " + toString());
    }
    if (patrName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'patrName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sex' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'birthDate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'price' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'amount' because it's a primitive and you chose the non-beans generator.
    if (unitName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unitName' was not present! Struct: " + toString());
    }
    if (fileName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountItemStandardSchemeFactory implements SchemeFactory {
    public AccountItemStandardScheme getScheme() {
      return new AccountItemStandardScheme();
    }
  }

  private static class AccountItemStandardScheme extends StandardScheme<AccountItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AccountItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serviceDate = iprot.readI64();
              struct.setServiceDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastName = iprot.readString();
              struct.setLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PATR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.patrName = iprot.readString();
              struct.setPatrNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sex = iprot.readI16();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BIRTH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.birthDate = iprot.readI64();
              struct.setBirthDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UNIT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitName = iprot.readString();
              struct.setUnitNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REFUSE_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseTypeName = iprot.readString();
              struct.setRefuseTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REFUSE_TYPE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.refuseTypeCode = iprot.readI16();
              struct.setRefuseTypeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DO_NOT_UPLOAD_ANYMORE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.doNotUploadAnymore = iprot.readBool();
              struct.setDoNotUploadAnymoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetServiceDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceDate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sex' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBirthDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'birthDate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'price' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'amount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AccountItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVICE_DATE_FIELD_DESC);
      oprot.writeI64(struct.serviceDate);
      oprot.writeFieldEnd();
      if (struct.lastName != null) {
        oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.lastName);
        oprot.writeFieldEnd();
      }
      if (struct.firstName != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.firstName);
        oprot.writeFieldEnd();
      }
      if (struct.patrName != null) {
        oprot.writeFieldBegin(PATR_NAME_FIELD_DESC);
        oprot.writeString(struct.patrName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI16(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIRTH_DATE_FIELD_DESC);
      oprot.writeI64(struct.birthDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.amount);
      oprot.writeFieldEnd();
      if (struct.unitName != null) {
        oprot.writeFieldBegin(UNIT_NAME_FIELD_DESC);
        oprot.writeString(struct.unitName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDate()) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI64(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.refuseTypeName != null) {
        if (struct.isSetRefuseTypeName()) {
          oprot.writeFieldBegin(REFUSE_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.refuseTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRefuseTypeCode()) {
        oprot.writeFieldBegin(REFUSE_TYPE_CODE_FIELD_DESC);
        oprot.writeI16(struct.refuseTypeCode);
        oprot.writeFieldEnd();
      }
      if (struct.note != null) {
        if (struct.isSetNote()) {
          oprot.writeFieldBegin(NOTE_FIELD_DESC);
          oprot.writeString(struct.note);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDoNotUploadAnymore()) {
        oprot.writeFieldBegin(DO_NOT_UPLOAD_ANYMORE_FIELD_DESC);
        oprot.writeBool(struct.doNotUploadAnymore);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountItemTupleSchemeFactory implements SchemeFactory {
    public AccountItemTupleScheme getScheme() {
      return new AccountItemTupleScheme();
    }
  }

  private static class AccountItemTupleScheme extends TupleScheme<AccountItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccountItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeI64(struct.serviceDate);
      oprot.writeString(struct.lastName);
      oprot.writeString(struct.firstName);
      oprot.writeString(struct.patrName);
      oprot.writeI16(struct.sex);
      oprot.writeI64(struct.birthDate);
      oprot.writeDouble(struct.price);
      oprot.writeDouble(struct.amount);
      oprot.writeString(struct.unitName);
      oprot.writeString(struct.fileName);
      BitSet optionals = new BitSet();
      if (struct.isSetDate()) {
        optionals.set(0);
      }
      if (struct.isSetRefuseTypeName()) {
        optionals.set(1);
      }
      if (struct.isSetRefuseTypeCode()) {
        optionals.set(2);
      }
      if (struct.isSetNote()) {
        optionals.set(3);
      }
      if (struct.isSetDoNotUploadAnymore()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetRefuseTypeName()) {
        oprot.writeString(struct.refuseTypeName);
      }
      if (struct.isSetRefuseTypeCode()) {
        oprot.writeI16(struct.refuseTypeCode);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
      if (struct.isSetDoNotUploadAnymore()) {
        oprot.writeBool(struct.doNotUploadAnymore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccountItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.serviceDate = iprot.readI64();
      struct.setServiceDateIsSet(true);
      struct.lastName = iprot.readString();
      struct.setLastNameIsSet(true);
      struct.firstName = iprot.readString();
      struct.setFirstNameIsSet(true);
      struct.patrName = iprot.readString();
      struct.setPatrNameIsSet(true);
      struct.sex = iprot.readI16();
      struct.setSexIsSet(true);
      struct.birthDate = iprot.readI64();
      struct.setBirthDateIsSet(true);
      struct.price = iprot.readDouble();
      struct.setPriceIsSet(true);
      struct.amount = iprot.readDouble();
      struct.setAmountIsSet(true);
      struct.unitName = iprot.readString();
      struct.setUnitNameIsSet(true);
      struct.fileName = iprot.readString();
      struct.setFileNameIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.refuseTypeName = iprot.readString();
        struct.setRefuseTypeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refuseTypeCode = iprot.readI16();
        struct.setRefuseTypeCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
      if (incoming.get(4)) {
        struct.doNotUploadAnymore = iprot.readBool();
        struct.setDoNotUploadAnymoreIsSet(true);
      }
    }
  }

}

