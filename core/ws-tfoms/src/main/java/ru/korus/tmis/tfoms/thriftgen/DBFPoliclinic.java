/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DBFPoliclinic implements org.apache.thrift.TBase<DBFPoliclinic, DBFPoliclinic._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DBFPoliclinic");

  private static final org.apache.thrift.protocol.TField DAT__VV_FIELD_DESC = new org.apache.thrift.protocol.TField("DAT_VV", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DAT__PR_FIELD_DESC = new org.apache.thrift.protocol.TField("DAT_PR", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SER__POL_FIELD_DESC = new org.apache.thrift.protocol.TField("SER_POL", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NOM__POL_FIELD_DESC = new org.apache.thrift.protocol.TField("NOM_POL", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SNILS_FIELD_DESC = new org.apache.thrift.protocol.TField("SNILS", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FAMIL_FIELD_DESC = new org.apache.thrift.protocol.TField("FAMIL", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IMYA_FIELD_DESC = new org.apache.thrift.protocol.TField("IMYA", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OT_FIELD_DESC = new org.apache.thrift.protocol.TField("OT", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField KOD__F_FIELD_DESC = new org.apache.thrift.protocol.TField("KOD_F", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField POL_FIELD_DESC = new org.apache.thrift.protocol.TField("POL", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField D__R_FIELD_DESC = new org.apache.thrift.protocol.TField("D_R", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField RAION_FIELD_DESC = new org.apache.thrift.protocol.TField("RAION", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField KOD__T_FIELD_DESC = new org.apache.thrift.protocol.TField("KOD_T", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField NAS__P_FIELD_DESC = new org.apache.thrift.protocol.TField("NAS_P", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField UL_FIELD_DESC = new org.apache.thrift.protocol.TField("UL", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DOM_FIELD_DESC = new org.apache.thrift.protocol.TField("DOM", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField KV_FIELD_DESC = new org.apache.thrift.protocol.TField("KV", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField KATEGOR_FIELD_DESC = new org.apache.thrift.protocol.TField("KATEGOR", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField MES__R_FIELD_DESC = new org.apache.thrift.protocol.TField("MES_R", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField KOD__PR_FIELD_DESC = new org.apache.thrift.protocol.TField("KOD_PR", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField OTD_FIELD_DESC = new org.apache.thrift.protocol.TField("OTD", org.apache.thrift.protocol.TType.I16, (short)21);
  private static final org.apache.thrift.protocol.TField N__KART_FIELD_DESC = new org.apache.thrift.protocol.TField("N_KART", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField KC_FIELD_DESC = new org.apache.thrift.protocol.TField("KC", org.apache.thrift.protocol.TType.I16, (short)23);
  private static final org.apache.thrift.protocol.TField DIA__O_FIELD_DESC = new org.apache.thrift.protocol.TField("DIA_O", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField DOP__D_FIELD_DESC = new org.apache.thrift.protocol.TField("DOP_D", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField DIA__S_FIELD_DESC = new org.apache.thrift.protocol.TField("DIA_S", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField DOP__S_FIELD_DESC = new org.apache.thrift.protocol.TField("DOP_S", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField DIA__S1_FIELD_DESC = new org.apache.thrift.protocol.TField("DIA_S1", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField DOP__S1_FIELD_DESC = new org.apache.thrift.protocol.TField("DOP_S1", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField OSL_FIELD_DESC = new org.apache.thrift.protocol.TField("OSL", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField DOP__OSL_FIELD_DESC = new org.apache.thrift.protocol.TField("DOP_OSL", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField KSG__MS_FIELD_DESC = new org.apache.thrift.protocol.TField("KSG_MS", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField DL__LEC_FIELD_DESC = new org.apache.thrift.protocol.TField("DL_LEC", org.apache.thrift.protocol.TType.I16, (short)33);
  private static final org.apache.thrift.protocol.TField KOL__POS_FIELD_DESC = new org.apache.thrift.protocol.TField("KOL_POS", org.apache.thrift.protocol.TType.I16, (short)34);
  private static final org.apache.thrift.protocol.TField POS__D_FIELD_DESC = new org.apache.thrift.protocol.TField("POS_D", org.apache.thrift.protocol.TType.I16, (short)35);
  private static final org.apache.thrift.protocol.TField SL_FIELD_DESC = new org.apache.thrift.protocol.TField("SL", org.apache.thrift.protocol.TType.I16, (short)36);
  private static final org.apache.thrift.protocol.TField ISH__LEC_FIELD_DESC = new org.apache.thrift.protocol.TField("ISH_LEC", org.apache.thrift.protocol.TType.I16, (short)37);
  private static final org.apache.thrift.protocol.TField PR__NZ_FIELD_DESC = new org.apache.thrift.protocol.TField("PR_NZ", org.apache.thrift.protocol.TType.I16, (short)38);
  private static final org.apache.thrift.protocol.TField STOIM_FIELD_DESC = new org.apache.thrift.protocol.TField("STOIM", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField KOD__VR_FIELD_DESC = new org.apache.thrift.protocol.TField("KOD_VR", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField S__VR_FIELD_DESC = new org.apache.thrift.protocol.TField("S_VR", org.apache.thrift.protocol.TType.I16, (short)41);
  private static final org.apache.thrift.protocol.TField NOM__SL_FIELD_DESC = new org.apache.thrift.protocol.TField("NOM_SL", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField KOD__O_FIELD_DESC = new org.apache.thrift.protocol.TField("KOD_O", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField N__OPER_FIELD_DESC = new org.apache.thrift.protocol.TField("N_OPER", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField KOL__USL_FIELD_DESC = new org.apache.thrift.protocol.TField("KOL_USL", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField KOD__TSK_FIELD_DESC = new org.apache.thrift.protocol.TField("KOD_TSK", org.apache.thrift.protocol.TType.I16, (short)46);
  private static final org.apache.thrift.protocol.TField NAMCMO_FIELD_DESC = new org.apache.thrift.protocol.TField("NAMCMO", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField KOD__DOK_FIELD_DESC = new org.apache.thrift.protocol.TField("KOD_DOK", org.apache.thrift.protocol.TType.I16, (short)48);
  private static final org.apache.thrift.protocol.TField SER__DOK_FIELD_DESC = new org.apache.thrift.protocol.TField("SER_DOK", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField NOM__DOK_FIELD_DESC = new org.apache.thrift.protocol.TField("NOM_DOK", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField VMP_FIELD_DESC = new org.apache.thrift.protocol.TField("VMP", org.apache.thrift.protocol.TType.I16, (short)51);
  private static final org.apache.thrift.protocol.TField DAT__BLVN_FIELD_DESC = new org.apache.thrift.protocol.TField("DAT_BLVN", org.apache.thrift.protocol.TType.I64, (short)52);
  private static final org.apache.thrift.protocol.TField DAT__ELVN_FIELD_DESC = new org.apache.thrift.protocol.TField("DAT_ELVN", org.apache.thrift.protocol.TType.I64, (short)53);
  private static final org.apache.thrift.protocol.TField DAMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("DAMAGE", org.apache.thrift.protocol.TType.BOOL, (short)54);
  private static final org.apache.thrift.protocol.TField DATA__NS_FIELD_DESC = new org.apache.thrift.protocol.TField("DATA_NS", org.apache.thrift.protocol.TType.I64, (short)55);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DBFPoliclinicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DBFPoliclinicTupleSchemeFactory());
  }

  public long DAT_VV; // required
  public long DAT_PR; // required
  public String SER_POL; // required
  public String NOM_POL; // required
  public String SNILS; // required
  public String FAMIL; // required
  public String IMYA; // required
  public String OT; // required
  public String KOD_F; // required
  public String POL; // required
  public long D_R; // required
  public short RAION; // required
  public short KOD_T; // required
  public String NAS_P; // required
  public String UL; // required
  public String DOM; // required
  public String KV; // required
  public int KATEGOR; // required
  public String MES_R; // required
  public String KOD_PR; // required
  public short OTD; // required
  public String N_KART; // required
  public short KC; // required
  public String DIA_O; // required
  public String DOP_D; // required
  public String DIA_S; // required
  public String DOP_S; // required
  public String DIA_S1; // required
  public String DOP_S1; // required
  public String OSL; // required
  public String DOP_OSL; // required
  public String KSG_MS; // required
  public short DL_LEC; // required
  public short KOL_POS; // required
  public short POS_D; // required
  public short SL; // required
  public short ISH_LEC; // required
  public short PR_NZ; // required
  public double STOIM; // required
  public String KOD_VR; // required
  public short S_VR; // required
  public String NOM_SL; // required
  public String KOD_O; // required
  public String N_OPER; // required
  public int KOL_USL; // required
  public short KOD_TSK; // required
  public String NAMCMO; // required
  public short KOD_DOK; // required
  public String SER_DOK; // required
  public String NOM_DOK; // required
  public short VMP; // required
  public long DAT_BLVN; // required
  public long DAT_ELVN; // required
  public boolean DAMAGE; // required
  public long DATA_NS; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DAT__VV((short)1, "DAT_VV"),
    DAT__PR((short)2, "DAT_PR"),
    SER__POL((short)3, "SER_POL"),
    NOM__POL((short)4, "NOM_POL"),
    SNILS((short)5, "SNILS"),
    FAMIL((short)6, "FAMIL"),
    IMYA((short)7, "IMYA"),
    OT((short)8, "OT"),
    KOD__F((short)9, "KOD_F"),
    POL((short)10, "POL"),
    D__R((short)11, "D_R"),
    RAION((short)12, "RAION"),
    KOD__T((short)13, "KOD_T"),
    NAS__P((short)14, "NAS_P"),
    UL((short)15, "UL"),
    DOM((short)16, "DOM"),
    KV((short)17, "KV"),
    KATEGOR((short)18, "KATEGOR"),
    MES__R((short)19, "MES_R"),
    KOD__PR((short)20, "KOD_PR"),
    OTD((short)21, "OTD"),
    N__KART((short)22, "N_KART"),
    KC((short)23, "KC"),
    DIA__O((short)24, "DIA_O"),
    DOP__D((short)25, "DOP_D"),
    DIA__S((short)26, "DIA_S"),
    DOP__S((short)27, "DOP_S"),
    DIA__S1((short)28, "DIA_S1"),
    DOP__S1((short)29, "DOP_S1"),
    OSL((short)30, "OSL"),
    DOP__OSL((short)31, "DOP_OSL"),
    KSG__MS((short)32, "KSG_MS"),
    DL__LEC((short)33, "DL_LEC"),
    KOL__POS((short)34, "KOL_POS"),
    POS__D((short)35, "POS_D"),
    SL((short)36, "SL"),
    ISH__LEC((short)37, "ISH_LEC"),
    PR__NZ((short)38, "PR_NZ"),
    STOIM((short)39, "STOIM"),
    KOD__VR((short)40, "KOD_VR"),
    S__VR((short)41, "S_VR"),
    NOM__SL((short)42, "NOM_SL"),
    KOD__O((short)43, "KOD_O"),
    N__OPER((short)44, "N_OPER"),
    KOL__USL((short)45, "KOL_USL"),
    KOD__TSK((short)46, "KOD_TSK"),
    NAMCMO((short)47, "NAMCMO"),
    KOD__DOK((short)48, "KOD_DOK"),
    SER__DOK((short)49, "SER_DOK"),
    NOM__DOK((short)50, "NOM_DOK"),
    VMP((short)51, "VMP"),
    DAT__BLVN((short)52, "DAT_BLVN"),
    DAT__ELVN((short)53, "DAT_ELVN"),
    DAMAGE((short)54, "DAMAGE"),
    DATA__NS((short)55, "DATA_NS");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DAT__VV
          return DAT__VV;
        case 2: // DAT__PR
          return DAT__PR;
        case 3: // SER__POL
          return SER__POL;
        case 4: // NOM__POL
          return NOM__POL;
        case 5: // SNILS
          return SNILS;
        case 6: // FAMIL
          return FAMIL;
        case 7: // IMYA
          return IMYA;
        case 8: // OT
          return OT;
        case 9: // KOD__F
          return KOD__F;
        case 10: // POL
          return POL;
        case 11: // D__R
          return D__R;
        case 12: // RAION
          return RAION;
        case 13: // KOD__T
          return KOD__T;
        case 14: // NAS__P
          return NAS__P;
        case 15: // UL
          return UL;
        case 16: // DOM
          return DOM;
        case 17: // KV
          return KV;
        case 18: // KATEGOR
          return KATEGOR;
        case 19: // MES__R
          return MES__R;
        case 20: // KOD__PR
          return KOD__PR;
        case 21: // OTD
          return OTD;
        case 22: // N__KART
          return N__KART;
        case 23: // KC
          return KC;
        case 24: // DIA__O
          return DIA__O;
        case 25: // DOP__D
          return DOP__D;
        case 26: // DIA__S
          return DIA__S;
        case 27: // DOP__S
          return DOP__S;
        case 28: // DIA__S1
          return DIA__S1;
        case 29: // DOP__S1
          return DOP__S1;
        case 30: // OSL
          return OSL;
        case 31: // DOP__OSL
          return DOP__OSL;
        case 32: // KSG__MS
          return KSG__MS;
        case 33: // DL__LEC
          return DL__LEC;
        case 34: // KOL__POS
          return KOL__POS;
        case 35: // POS__D
          return POS__D;
        case 36: // SL
          return SL;
        case 37: // ISH__LEC
          return ISH__LEC;
        case 38: // PR__NZ
          return PR__NZ;
        case 39: // STOIM
          return STOIM;
        case 40: // KOD__VR
          return KOD__VR;
        case 41: // S__VR
          return S__VR;
        case 42: // NOM__SL
          return NOM__SL;
        case 43: // KOD__O
          return KOD__O;
        case 44: // N__OPER
          return N__OPER;
        case 45: // KOL__USL
          return KOL__USL;
        case 46: // KOD__TSK
          return KOD__TSK;
        case 47: // NAMCMO
          return NAMCMO;
        case 48: // KOD__DOK
          return KOD__DOK;
        case 49: // SER__DOK
          return SER__DOK;
        case 50: // NOM__DOK
          return NOM__DOK;
        case 51: // VMP
          return VMP;
        case 52: // DAT__BLVN
          return DAT__BLVN;
        case 53: // DAT__ELVN
          return DAT__ELVN;
        case 54: // DAMAGE
          return DAMAGE;
        case 55: // DATA__NS
          return DATA__NS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DAT_VV_ISSET_ID = 0;
  private static final int __DAT_PR_ISSET_ID = 1;
  private static final int __D_R_ISSET_ID = 2;
  private static final int __RAION_ISSET_ID = 3;
  private static final int __KOD_T_ISSET_ID = 4;
  private static final int __KATEGOR_ISSET_ID = 5;
  private static final int __OTD_ISSET_ID = 6;
  private static final int __KC_ISSET_ID = 7;
  private static final int __DL_LEC_ISSET_ID = 8;
  private static final int __KOL_POS_ISSET_ID = 9;
  private static final int __POS_D_ISSET_ID = 10;
  private static final int __SL_ISSET_ID = 11;
  private static final int __ISH_LEC_ISSET_ID = 12;
  private static final int __PR_NZ_ISSET_ID = 13;
  private static final int __STOIM_ISSET_ID = 14;
  private static final int __S_VR_ISSET_ID = 15;
  private static final int __KOL_USL_ISSET_ID = 16;
  private static final int __KOD_TSK_ISSET_ID = 17;
  private static final int __KOD_DOK_ISSET_ID = 18;
  private static final int __VMP_ISSET_ID = 19;
  private static final int __DAT_BLVN_ISSET_ID = 20;
  private static final int __DAT_ELVN_ISSET_ID = 21;
  private static final int __DAMAGE_ISSET_ID = 22;
  private static final int __DATA_NS_ISSET_ID = 23;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DAT__VV, new org.apache.thrift.meta_data.FieldMetaData("DAT_VV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.DAT__PR, new org.apache.thrift.meta_data.FieldMetaData("DAT_PR", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.SER__POL, new org.apache.thrift.meta_data.FieldMetaData("SER_POL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOM__POL, new org.apache.thrift.meta_data.FieldMetaData("NOM_POL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNILS, new org.apache.thrift.meta_data.FieldMetaData("SNILS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAMIL, new org.apache.thrift.meta_data.FieldMetaData("FAMIL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMYA, new org.apache.thrift.meta_data.FieldMetaData("IMYA", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OT, new org.apache.thrift.meta_data.FieldMetaData("OT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KOD__F, new org.apache.thrift.meta_data.FieldMetaData("KOD_F", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POL, new org.apache.thrift.meta_data.FieldMetaData("POL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D__R, new org.apache.thrift.meta_data.FieldMetaData("D_R", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.RAION, new org.apache.thrift.meta_data.FieldMetaData("RAION", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.KOD__T, new org.apache.thrift.meta_data.FieldMetaData("KOD_T", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.NAS__P, new org.apache.thrift.meta_data.FieldMetaData("NAS_P", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UL, new org.apache.thrift.meta_data.FieldMetaData("UL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOM, new org.apache.thrift.meta_data.FieldMetaData("DOM", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KV, new org.apache.thrift.meta_data.FieldMetaData("KV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KATEGOR, new org.apache.thrift.meta_data.FieldMetaData("KATEGOR", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.MES__R, new org.apache.thrift.meta_data.FieldMetaData("MES_R", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KOD__PR, new org.apache.thrift.meta_data.FieldMetaData("KOD_PR", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTD, new org.apache.thrift.meta_data.FieldMetaData("OTD", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.N__KART, new org.apache.thrift.meta_data.FieldMetaData("N_KART", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KC, new org.apache.thrift.meta_data.FieldMetaData("KC", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.DIA__O, new org.apache.thrift.meta_data.FieldMetaData("DIA_O", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOP__D, new org.apache.thrift.meta_data.FieldMetaData("DOP_D", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIA__S, new org.apache.thrift.meta_data.FieldMetaData("DIA_S", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOP__S, new org.apache.thrift.meta_data.FieldMetaData("DOP_S", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIA__S1, new org.apache.thrift.meta_data.FieldMetaData("DIA_S1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOP__S1, new org.apache.thrift.meta_data.FieldMetaData("DOP_S1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OSL, new org.apache.thrift.meta_data.FieldMetaData("OSL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOP__OSL, new org.apache.thrift.meta_data.FieldMetaData("DOP_OSL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KSG__MS, new org.apache.thrift.meta_data.FieldMetaData("KSG_MS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DL__LEC, new org.apache.thrift.meta_data.FieldMetaData("DL_LEC", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.KOL__POS, new org.apache.thrift.meta_data.FieldMetaData("KOL_POS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.POS__D, new org.apache.thrift.meta_data.FieldMetaData("POS_D", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.SL, new org.apache.thrift.meta_data.FieldMetaData("SL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.ISH__LEC, new org.apache.thrift.meta_data.FieldMetaData("ISH_LEC", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.PR__NZ, new org.apache.thrift.meta_data.FieldMetaData("PR_NZ", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.STOIM, new org.apache.thrift.meta_data.FieldMetaData("STOIM", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.KOD__VR, new org.apache.thrift.meta_data.FieldMetaData("KOD_VR", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S__VR, new org.apache.thrift.meta_data.FieldMetaData("S_VR", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.NOM__SL, new org.apache.thrift.meta_data.FieldMetaData("NOM_SL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KOD__O, new org.apache.thrift.meta_data.FieldMetaData("KOD_O", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.N__OPER, new org.apache.thrift.meta_data.FieldMetaData("N_OPER", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KOL__USL, new org.apache.thrift.meta_data.FieldMetaData("KOL_USL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.KOD__TSK, new org.apache.thrift.meta_data.FieldMetaData("KOD_TSK", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.NAMCMO, new org.apache.thrift.meta_data.FieldMetaData("NAMCMO", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KOD__DOK, new org.apache.thrift.meta_data.FieldMetaData("KOD_DOK", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.SER__DOK, new org.apache.thrift.meta_data.FieldMetaData("SER_DOK", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOM__DOK, new org.apache.thrift.meta_data.FieldMetaData("NOM_DOK", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VMP, new org.apache.thrift.meta_data.FieldMetaData("VMP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.DAT__BLVN, new org.apache.thrift.meta_data.FieldMetaData("DAT_BLVN", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.DAT__ELVN, new org.apache.thrift.meta_data.FieldMetaData("DAT_ELVN", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.DAMAGE, new org.apache.thrift.meta_data.FieldMetaData("DAMAGE", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATA__NS, new org.apache.thrift.meta_data.FieldMetaData("DATA_NS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DBFPoliclinic.class, metaDataMap);
  }

  public DBFPoliclinic() {
    this.DAT_VV = 0L;

    this.DAT_PR = 0L;

    this.SER_POL = "";

    this.NOM_POL = "";

    this.SNILS = "";

    this.FAMIL = "";

    this.IMYA = "";

    this.OT = "";

    this.KOD_F = "";

    this.POL = "Н";

    this.D_R = 0L;

    this.RAION = (short)0;

    this.KOD_T = (short)0;

    this.NAS_P = "";

    this.UL = "";

    this.DOM = "";

    this.KV = "";

    this.KATEGOR = 1;

    this.MES_R = "Неработающий";

    this.KOD_PR = "Не заполняется";

    this.OTD = (short)0;

    this.N_KART = "";

    this.KC = (short)0;

    this.DIA_O = "";

    this.DOP_D = "";

    this.DIA_S = "";

    this.DOP_S = "";

    this.DIA_S1 = "";

    this.DOP_S1 = "";

    this.OSL = "";

    this.DOP_OSL = "";

    this.KSG_MS = "Не заполняется";

    this.DL_LEC = (short)0;

    this.KOL_POS = (short)0;

    this.POS_D = (short)0;

    this.SL = (short)0;

    this.ISH_LEC = (short)0;

    this.PR_NZ = (short)0;

    this.STOIM = 0;

    this.KOD_VR = "";

    this.S_VR = (short)0;

    this.NOM_SL = "Не заполняется";

    this.KOD_O = "Не заполняется";

    this.N_OPER = "Не заполняется";

    this.KOL_USL = 0;

    this.KOD_TSK = (short)0;

    this.NAMCMO = "";

    this.KOD_DOK = (short)0;

    this.SER_DOK = "";

    this.NOM_DOK = "";

    this.VMP = (short)0;

    this.DAT_BLVN = 0L;

    this.DAT_ELVN = 0L;

    this.DAMAGE = false;

    this.DATA_NS = 0L;

  }

  public DBFPoliclinic(
    long DAT_VV,
    long DAT_PR,
    String SER_POL,
    String NOM_POL,
    String SNILS,
    String FAMIL,
    String IMYA,
    String OT,
    String KOD_F,
    String POL,
    long D_R,
    short RAION,
    short KOD_T,
    String NAS_P,
    String UL,
    String DOM,
    String KV,
    int KATEGOR,
    String MES_R,
    String KOD_PR,
    short OTD,
    String N_KART,
    short KC,
    String DIA_O,
    String DOP_D,
    String DIA_S,
    String DOP_S,
    String DIA_S1,
    String DOP_S1,
    String OSL,
    String DOP_OSL,
    String KSG_MS,
    short DL_LEC,
    short KOL_POS,
    short POS_D,
    short SL,
    short ISH_LEC,
    short PR_NZ,
    double STOIM,
    String KOD_VR,
    short S_VR,
    String NOM_SL,
    String KOD_O,
    String N_OPER,
    int KOL_USL,
    short KOD_TSK,
    String NAMCMO,
    short KOD_DOK,
    String SER_DOK,
    String NOM_DOK,
    short VMP,
    long DAT_BLVN,
    long DAT_ELVN,
    boolean DAMAGE,
    long DATA_NS)
  {
    this();
    this.DAT_VV = DAT_VV;
    setDAT_VVIsSet(true);
    this.DAT_PR = DAT_PR;
    setDAT_PRIsSet(true);
    this.SER_POL = SER_POL;
    this.NOM_POL = NOM_POL;
    this.SNILS = SNILS;
    this.FAMIL = FAMIL;
    this.IMYA = IMYA;
    this.OT = OT;
    this.KOD_F = KOD_F;
    this.POL = POL;
    this.D_R = D_R;
    setD_RIsSet(true);
    this.RAION = RAION;
    setRAIONIsSet(true);
    this.KOD_T = KOD_T;
    setKOD_TIsSet(true);
    this.NAS_P = NAS_P;
    this.UL = UL;
    this.DOM = DOM;
    this.KV = KV;
    this.KATEGOR = KATEGOR;
    setKATEGORIsSet(true);
    this.MES_R = MES_R;
    this.KOD_PR = KOD_PR;
    this.OTD = OTD;
    setOTDIsSet(true);
    this.N_KART = N_KART;
    this.KC = KC;
    setKCIsSet(true);
    this.DIA_O = DIA_O;
    this.DOP_D = DOP_D;
    this.DIA_S = DIA_S;
    this.DOP_S = DOP_S;
    this.DIA_S1 = DIA_S1;
    this.DOP_S1 = DOP_S1;
    this.OSL = OSL;
    this.DOP_OSL = DOP_OSL;
    this.KSG_MS = KSG_MS;
    this.DL_LEC = DL_LEC;
    setDL_LECIsSet(true);
    this.KOL_POS = KOL_POS;
    setKOL_POSIsSet(true);
    this.POS_D = POS_D;
    setPOS_DIsSet(true);
    this.SL = SL;
    setSLIsSet(true);
    this.ISH_LEC = ISH_LEC;
    setISH_LECIsSet(true);
    this.PR_NZ = PR_NZ;
    setPR_NZIsSet(true);
    this.STOIM = STOIM;
    setSTOIMIsSet(true);
    this.KOD_VR = KOD_VR;
    this.S_VR = S_VR;
    setS_VRIsSet(true);
    this.NOM_SL = NOM_SL;
    this.KOD_O = KOD_O;
    this.N_OPER = N_OPER;
    this.KOL_USL = KOL_USL;
    setKOL_USLIsSet(true);
    this.KOD_TSK = KOD_TSK;
    setKOD_TSKIsSet(true);
    this.NAMCMO = NAMCMO;
    this.KOD_DOK = KOD_DOK;
    setKOD_DOKIsSet(true);
    this.SER_DOK = SER_DOK;
    this.NOM_DOK = NOM_DOK;
    this.VMP = VMP;
    setVMPIsSet(true);
    this.DAT_BLVN = DAT_BLVN;
    setDAT_BLVNIsSet(true);
    this.DAT_ELVN = DAT_ELVN;
    setDAT_ELVNIsSet(true);
    this.DAMAGE = DAMAGE;
    setDAMAGEIsSet(true);
    this.DATA_NS = DATA_NS;
    setDATA_NSIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DBFPoliclinic(DBFPoliclinic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.DAT_VV = other.DAT_VV;
    this.DAT_PR = other.DAT_PR;
    if (other.isSetSER_POL()) {
      this.SER_POL = other.SER_POL;
    }
    if (other.isSetNOM_POL()) {
      this.NOM_POL = other.NOM_POL;
    }
    if (other.isSetSNILS()) {
      this.SNILS = other.SNILS;
    }
    if (other.isSetFAMIL()) {
      this.FAMIL = other.FAMIL;
    }
    if (other.isSetIMYA()) {
      this.IMYA = other.IMYA;
    }
    if (other.isSetOT()) {
      this.OT = other.OT;
    }
    if (other.isSetKOD_F()) {
      this.KOD_F = other.KOD_F;
    }
    if (other.isSetPOL()) {
      this.POL = other.POL;
    }
    this.D_R = other.D_R;
    this.RAION = other.RAION;
    this.KOD_T = other.KOD_T;
    if (other.isSetNAS_P()) {
      this.NAS_P = other.NAS_P;
    }
    if (other.isSetUL()) {
      this.UL = other.UL;
    }
    if (other.isSetDOM()) {
      this.DOM = other.DOM;
    }
    if (other.isSetKV()) {
      this.KV = other.KV;
    }
    this.KATEGOR = other.KATEGOR;
    if (other.isSetMES_R()) {
      this.MES_R = other.MES_R;
    }
    if (other.isSetKOD_PR()) {
      this.KOD_PR = other.KOD_PR;
    }
    this.OTD = other.OTD;
    if (other.isSetN_KART()) {
      this.N_KART = other.N_KART;
    }
    this.KC = other.KC;
    if (other.isSetDIA_O()) {
      this.DIA_O = other.DIA_O;
    }
    if (other.isSetDOP_D()) {
      this.DOP_D = other.DOP_D;
    }
    if (other.isSetDIA_S()) {
      this.DIA_S = other.DIA_S;
    }
    if (other.isSetDOP_S()) {
      this.DOP_S = other.DOP_S;
    }
    if (other.isSetDIA_S1()) {
      this.DIA_S1 = other.DIA_S1;
    }
    if (other.isSetDOP_S1()) {
      this.DOP_S1 = other.DOP_S1;
    }
    if (other.isSetOSL()) {
      this.OSL = other.OSL;
    }
    if (other.isSetDOP_OSL()) {
      this.DOP_OSL = other.DOP_OSL;
    }
    if (other.isSetKSG_MS()) {
      this.KSG_MS = other.KSG_MS;
    }
    this.DL_LEC = other.DL_LEC;
    this.KOL_POS = other.KOL_POS;
    this.POS_D = other.POS_D;
    this.SL = other.SL;
    this.ISH_LEC = other.ISH_LEC;
    this.PR_NZ = other.PR_NZ;
    this.STOIM = other.STOIM;
    if (other.isSetKOD_VR()) {
      this.KOD_VR = other.KOD_VR;
    }
    this.S_VR = other.S_VR;
    if (other.isSetNOM_SL()) {
      this.NOM_SL = other.NOM_SL;
    }
    if (other.isSetKOD_O()) {
      this.KOD_O = other.KOD_O;
    }
    if (other.isSetN_OPER()) {
      this.N_OPER = other.N_OPER;
    }
    this.KOL_USL = other.KOL_USL;
    this.KOD_TSK = other.KOD_TSK;
    if (other.isSetNAMCMO()) {
      this.NAMCMO = other.NAMCMO;
    }
    this.KOD_DOK = other.KOD_DOK;
    if (other.isSetSER_DOK()) {
      this.SER_DOK = other.SER_DOK;
    }
    if (other.isSetNOM_DOK()) {
      this.NOM_DOK = other.NOM_DOK;
    }
    this.VMP = other.VMP;
    this.DAT_BLVN = other.DAT_BLVN;
    this.DAT_ELVN = other.DAT_ELVN;
    this.DAMAGE = other.DAMAGE;
    this.DATA_NS = other.DATA_NS;
  }

  public DBFPoliclinic deepCopy() {
    return new DBFPoliclinic(this);
  }

  @Override
  public void clear() {
    this.DAT_VV = 0L;

    this.DAT_PR = 0L;

    this.SER_POL = "";

    this.NOM_POL = "";

    this.SNILS = "";

    this.FAMIL = "";

    this.IMYA = "";

    this.OT = "";

    this.KOD_F = "";

    this.POL = "Н";

    this.D_R = 0L;

    this.RAION = (short)0;

    this.KOD_T = (short)0;

    this.NAS_P = "";

    this.UL = "";

    this.DOM = "";

    this.KV = "";

    this.KATEGOR = 1;

    this.MES_R = "Неработающий";

    this.KOD_PR = "Не заполняется";

    this.OTD = (short)0;

    this.N_KART = "";

    this.KC = (short)0;

    this.DIA_O = "";

    this.DOP_D = "";

    this.DIA_S = "";

    this.DOP_S = "";

    this.DIA_S1 = "";

    this.DOP_S1 = "";

    this.OSL = "";

    this.DOP_OSL = "";

    this.KSG_MS = "Не заполняется";

    this.DL_LEC = (short)0;

    this.KOL_POS = (short)0;

    this.POS_D = (short)0;

    this.SL = (short)0;

    this.ISH_LEC = (short)0;

    this.PR_NZ = (short)0;

    this.STOIM = 0;

    this.KOD_VR = "";

    this.S_VR = (short)0;

    this.NOM_SL = "Не заполняется";

    this.KOD_O = "Не заполняется";

    this.N_OPER = "Не заполняется";

    this.KOL_USL = 0;

    this.KOD_TSK = (short)0;

    this.NAMCMO = "";

    this.KOD_DOK = (short)0;

    this.SER_DOK = "";

    this.NOM_DOK = "";

    this.VMP = (short)0;

    this.DAT_BLVN = 0L;

    this.DAT_ELVN = 0L;

    this.DAMAGE = false;

    this.DATA_NS = 0L;

  }

  public long getDAT_VV() {
    return this.DAT_VV;
  }

  public DBFPoliclinic setDAT_VV(long DAT_VV) {
    this.DAT_VV = DAT_VV;
    setDAT_VVIsSet(true);
    return this;
  }

  public void unsetDAT_VV() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAT_VV_ISSET_ID);
  }

  /** Returns true if field DAT_VV is set (has been assigned a value) and false otherwise */
  public boolean isSetDAT_VV() {
    return EncodingUtils.testBit(__isset_bitfield, __DAT_VV_ISSET_ID);
  }

  public void setDAT_VVIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAT_VV_ISSET_ID, value);
  }

  public long getDAT_PR() {
    return this.DAT_PR;
  }

  public DBFPoliclinic setDAT_PR(long DAT_PR) {
    this.DAT_PR = DAT_PR;
    setDAT_PRIsSet(true);
    return this;
  }

  public void unsetDAT_PR() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAT_PR_ISSET_ID);
  }

  /** Returns true if field DAT_PR is set (has been assigned a value) and false otherwise */
  public boolean isSetDAT_PR() {
    return EncodingUtils.testBit(__isset_bitfield, __DAT_PR_ISSET_ID);
  }

  public void setDAT_PRIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAT_PR_ISSET_ID, value);
  }

  public String getSER_POL() {
    return this.SER_POL;
  }

  public DBFPoliclinic setSER_POL(String SER_POL) {
    this.SER_POL = SER_POL;
    return this;
  }

  public void unsetSER_POL() {
    this.SER_POL = null;
  }

  /** Returns true if field SER_POL is set (has been assigned a value) and false otherwise */
  public boolean isSetSER_POL() {
    return this.SER_POL != null;
  }

  public void setSER_POLIsSet(boolean value) {
    if (!value) {
      this.SER_POL = null;
    }
  }

  public String getNOM_POL() {
    return this.NOM_POL;
  }

  public DBFPoliclinic setNOM_POL(String NOM_POL) {
    this.NOM_POL = NOM_POL;
    return this;
  }

  public void unsetNOM_POL() {
    this.NOM_POL = null;
  }

  /** Returns true if field NOM_POL is set (has been assigned a value) and false otherwise */
  public boolean isSetNOM_POL() {
    return this.NOM_POL != null;
  }

  public void setNOM_POLIsSet(boolean value) {
    if (!value) {
      this.NOM_POL = null;
    }
  }

  public String getSNILS() {
    return this.SNILS;
  }

  public DBFPoliclinic setSNILS(String SNILS) {
    this.SNILS = SNILS;
    return this;
  }

  public void unsetSNILS() {
    this.SNILS = null;
  }

  /** Returns true if field SNILS is set (has been assigned a value) and false otherwise */
  public boolean isSetSNILS() {
    return this.SNILS != null;
  }

  public void setSNILSIsSet(boolean value) {
    if (!value) {
      this.SNILS = null;
    }
  }

  public String getFAMIL() {
    return this.FAMIL;
  }

  public DBFPoliclinic setFAMIL(String FAMIL) {
    this.FAMIL = FAMIL;
    return this;
  }

  public void unsetFAMIL() {
    this.FAMIL = null;
  }

  /** Returns true if field FAMIL is set (has been assigned a value) and false otherwise */
  public boolean isSetFAMIL() {
    return this.FAMIL != null;
  }

  public void setFAMILIsSet(boolean value) {
    if (!value) {
      this.FAMIL = null;
    }
  }

  public String getIMYA() {
    return this.IMYA;
  }

  public DBFPoliclinic setIMYA(String IMYA) {
    this.IMYA = IMYA;
    return this;
  }

  public void unsetIMYA() {
    this.IMYA = null;
  }

  /** Returns true if field IMYA is set (has been assigned a value) and false otherwise */
  public boolean isSetIMYA() {
    return this.IMYA != null;
  }

  public void setIMYAIsSet(boolean value) {
    if (!value) {
      this.IMYA = null;
    }
  }

  public String getOT() {
    return this.OT;
  }

  public DBFPoliclinic setOT(String OT) {
    this.OT = OT;
    return this;
  }

  public void unsetOT() {
    this.OT = null;
  }

  /** Returns true if field OT is set (has been assigned a value) and false otherwise */
  public boolean isSetOT() {
    return this.OT != null;
  }

  public void setOTIsSet(boolean value) {
    if (!value) {
      this.OT = null;
    }
  }

  public String getKOD_F() {
    return this.KOD_F;
  }

  public DBFPoliclinic setKOD_F(String KOD_F) {
    this.KOD_F = KOD_F;
    return this;
  }

  public void unsetKOD_F() {
    this.KOD_F = null;
  }

  /** Returns true if field KOD_F is set (has been assigned a value) and false otherwise */
  public boolean isSetKOD_F() {
    return this.KOD_F != null;
  }

  public void setKOD_FIsSet(boolean value) {
    if (!value) {
      this.KOD_F = null;
    }
  }

  public String getPOL() {
    return this.POL;
  }

  public DBFPoliclinic setPOL(String POL) {
    this.POL = POL;
    return this;
  }

  public void unsetPOL() {
    this.POL = null;
  }

  /** Returns true if field POL is set (has been assigned a value) and false otherwise */
  public boolean isSetPOL() {
    return this.POL != null;
  }

  public void setPOLIsSet(boolean value) {
    if (!value) {
      this.POL = null;
    }
  }

  public long getD_R() {
    return this.D_R;
  }

  public DBFPoliclinic setD_R(long D_R) {
    this.D_R = D_R;
    setD_RIsSet(true);
    return this;
  }

  public void unsetD_R() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_R_ISSET_ID);
  }

  /** Returns true if field D_R is set (has been assigned a value) and false otherwise */
  public boolean isSetD_R() {
    return EncodingUtils.testBit(__isset_bitfield, __D_R_ISSET_ID);
  }

  public void setD_RIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_R_ISSET_ID, value);
  }

  public short getRAION() {
    return this.RAION;
  }

  public DBFPoliclinic setRAION(short RAION) {
    this.RAION = RAION;
    setRAIONIsSet(true);
    return this;
  }

  public void unsetRAION() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAION_ISSET_ID);
  }

  /** Returns true if field RAION is set (has been assigned a value) and false otherwise */
  public boolean isSetRAION() {
    return EncodingUtils.testBit(__isset_bitfield, __RAION_ISSET_ID);
  }

  public void setRAIONIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAION_ISSET_ID, value);
  }

  public short getKOD_T() {
    return this.KOD_T;
  }

  public DBFPoliclinic setKOD_T(short KOD_T) {
    this.KOD_T = KOD_T;
    setKOD_TIsSet(true);
    return this;
  }

  public void unsetKOD_T() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KOD_T_ISSET_ID);
  }

  /** Returns true if field KOD_T is set (has been assigned a value) and false otherwise */
  public boolean isSetKOD_T() {
    return EncodingUtils.testBit(__isset_bitfield, __KOD_T_ISSET_ID);
  }

  public void setKOD_TIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KOD_T_ISSET_ID, value);
  }

  public String getNAS_P() {
    return this.NAS_P;
  }

  public DBFPoliclinic setNAS_P(String NAS_P) {
    this.NAS_P = NAS_P;
    return this;
  }

  public void unsetNAS_P() {
    this.NAS_P = null;
  }

  /** Returns true if field NAS_P is set (has been assigned a value) and false otherwise */
  public boolean isSetNAS_P() {
    return this.NAS_P != null;
  }

  public void setNAS_PIsSet(boolean value) {
    if (!value) {
      this.NAS_P = null;
    }
  }

  public String getUL() {
    return this.UL;
  }

  public DBFPoliclinic setUL(String UL) {
    this.UL = UL;
    return this;
  }

  public void unsetUL() {
    this.UL = null;
  }

  /** Returns true if field UL is set (has been assigned a value) and false otherwise */
  public boolean isSetUL() {
    return this.UL != null;
  }

  public void setULIsSet(boolean value) {
    if (!value) {
      this.UL = null;
    }
  }

  public String getDOM() {
    return this.DOM;
  }

  public DBFPoliclinic setDOM(String DOM) {
    this.DOM = DOM;
    return this;
  }

  public void unsetDOM() {
    this.DOM = null;
  }

  /** Returns true if field DOM is set (has been assigned a value) and false otherwise */
  public boolean isSetDOM() {
    return this.DOM != null;
  }

  public void setDOMIsSet(boolean value) {
    if (!value) {
      this.DOM = null;
    }
  }

  public String getKV() {
    return this.KV;
  }

  public DBFPoliclinic setKV(String KV) {
    this.KV = KV;
    return this;
  }

  public void unsetKV() {
    this.KV = null;
  }

  /** Returns true if field KV is set (has been assigned a value) and false otherwise */
  public boolean isSetKV() {
    return this.KV != null;
  }

  public void setKVIsSet(boolean value) {
    if (!value) {
      this.KV = null;
    }
  }

  public int getKATEGOR() {
    return this.KATEGOR;
  }

  public DBFPoliclinic setKATEGOR(int KATEGOR) {
    this.KATEGOR = KATEGOR;
    setKATEGORIsSet(true);
    return this;
  }

  public void unsetKATEGOR() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KATEGOR_ISSET_ID);
  }

  /** Returns true if field KATEGOR is set (has been assigned a value) and false otherwise */
  public boolean isSetKATEGOR() {
    return EncodingUtils.testBit(__isset_bitfield, __KATEGOR_ISSET_ID);
  }

  public void setKATEGORIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KATEGOR_ISSET_ID, value);
  }

  public String getMES_R() {
    return this.MES_R;
  }

  public DBFPoliclinic setMES_R(String MES_R) {
    this.MES_R = MES_R;
    return this;
  }

  public void unsetMES_R() {
    this.MES_R = null;
  }

  /** Returns true if field MES_R is set (has been assigned a value) and false otherwise */
  public boolean isSetMES_R() {
    return this.MES_R != null;
  }

  public void setMES_RIsSet(boolean value) {
    if (!value) {
      this.MES_R = null;
    }
  }

  public String getKOD_PR() {
    return this.KOD_PR;
  }

  public DBFPoliclinic setKOD_PR(String KOD_PR) {
    this.KOD_PR = KOD_PR;
    return this;
  }

  public void unsetKOD_PR() {
    this.KOD_PR = null;
  }

  /** Returns true if field KOD_PR is set (has been assigned a value) and false otherwise */
  public boolean isSetKOD_PR() {
    return this.KOD_PR != null;
  }

  public void setKOD_PRIsSet(boolean value) {
    if (!value) {
      this.KOD_PR = null;
    }
  }

  public short getOTD() {
    return this.OTD;
  }

  public DBFPoliclinic setOTD(short OTD) {
    this.OTD = OTD;
    setOTDIsSet(true);
    return this;
  }

  public void unsetOTD() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTD_ISSET_ID);
  }

  /** Returns true if field OTD is set (has been assigned a value) and false otherwise */
  public boolean isSetOTD() {
    return EncodingUtils.testBit(__isset_bitfield, __OTD_ISSET_ID);
  }

  public void setOTDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTD_ISSET_ID, value);
  }

  public String getN_KART() {
    return this.N_KART;
  }

  public DBFPoliclinic setN_KART(String N_KART) {
    this.N_KART = N_KART;
    return this;
  }

  public void unsetN_KART() {
    this.N_KART = null;
  }

  /** Returns true if field N_KART is set (has been assigned a value) and false otherwise */
  public boolean isSetN_KART() {
    return this.N_KART != null;
  }

  public void setN_KARTIsSet(boolean value) {
    if (!value) {
      this.N_KART = null;
    }
  }

  public short getKC() {
    return this.KC;
  }

  public DBFPoliclinic setKC(short KC) {
    this.KC = KC;
    setKCIsSet(true);
    return this;
  }

  public void unsetKC() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KC_ISSET_ID);
  }

  /** Returns true if field KC is set (has been assigned a value) and false otherwise */
  public boolean isSetKC() {
    return EncodingUtils.testBit(__isset_bitfield, __KC_ISSET_ID);
  }

  public void setKCIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KC_ISSET_ID, value);
  }

  public String getDIA_O() {
    return this.DIA_O;
  }

  public DBFPoliclinic setDIA_O(String DIA_O) {
    this.DIA_O = DIA_O;
    return this;
  }

  public void unsetDIA_O() {
    this.DIA_O = null;
  }

  /** Returns true if field DIA_O is set (has been assigned a value) and false otherwise */
  public boolean isSetDIA_O() {
    return this.DIA_O != null;
  }

  public void setDIA_OIsSet(boolean value) {
    if (!value) {
      this.DIA_O = null;
    }
  }

  public String getDOP_D() {
    return this.DOP_D;
  }

  public DBFPoliclinic setDOP_D(String DOP_D) {
    this.DOP_D = DOP_D;
    return this;
  }

  public void unsetDOP_D() {
    this.DOP_D = null;
  }

  /** Returns true if field DOP_D is set (has been assigned a value) and false otherwise */
  public boolean isSetDOP_D() {
    return this.DOP_D != null;
  }

  public void setDOP_DIsSet(boolean value) {
    if (!value) {
      this.DOP_D = null;
    }
  }

  public String getDIA_S() {
    return this.DIA_S;
  }

  public DBFPoliclinic setDIA_S(String DIA_S) {
    this.DIA_S = DIA_S;
    return this;
  }

  public void unsetDIA_S() {
    this.DIA_S = null;
  }

  /** Returns true if field DIA_S is set (has been assigned a value) and false otherwise */
  public boolean isSetDIA_S() {
    return this.DIA_S != null;
  }

  public void setDIA_SIsSet(boolean value) {
    if (!value) {
      this.DIA_S = null;
    }
  }

  public String getDOP_S() {
    return this.DOP_S;
  }

  public DBFPoliclinic setDOP_S(String DOP_S) {
    this.DOP_S = DOP_S;
    return this;
  }

  public void unsetDOP_S() {
    this.DOP_S = null;
  }

  /** Returns true if field DOP_S is set (has been assigned a value) and false otherwise */
  public boolean isSetDOP_S() {
    return this.DOP_S != null;
  }

  public void setDOP_SIsSet(boolean value) {
    if (!value) {
      this.DOP_S = null;
    }
  }

  public String getDIA_S1() {
    return this.DIA_S1;
  }

  public DBFPoliclinic setDIA_S1(String DIA_S1) {
    this.DIA_S1 = DIA_S1;
    return this;
  }

  public void unsetDIA_S1() {
    this.DIA_S1 = null;
  }

  /** Returns true if field DIA_S1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDIA_S1() {
    return this.DIA_S1 != null;
  }

  public void setDIA_S1IsSet(boolean value) {
    if (!value) {
      this.DIA_S1 = null;
    }
  }

  public String getDOP_S1() {
    return this.DOP_S1;
  }

  public DBFPoliclinic setDOP_S1(String DOP_S1) {
    this.DOP_S1 = DOP_S1;
    return this;
  }

  public void unsetDOP_S1() {
    this.DOP_S1 = null;
  }

  /** Returns true if field DOP_S1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDOP_S1() {
    return this.DOP_S1 != null;
  }

  public void setDOP_S1IsSet(boolean value) {
    if (!value) {
      this.DOP_S1 = null;
    }
  }

  public String getOSL() {
    return this.OSL;
  }

  public DBFPoliclinic setOSL(String OSL) {
    this.OSL = OSL;
    return this;
  }

  public void unsetOSL() {
    this.OSL = null;
  }

  /** Returns true if field OSL is set (has been assigned a value) and false otherwise */
  public boolean isSetOSL() {
    return this.OSL != null;
  }

  public void setOSLIsSet(boolean value) {
    if (!value) {
      this.OSL = null;
    }
  }

  public String getDOP_OSL() {
    return this.DOP_OSL;
  }

  public DBFPoliclinic setDOP_OSL(String DOP_OSL) {
    this.DOP_OSL = DOP_OSL;
    return this;
  }

  public void unsetDOP_OSL() {
    this.DOP_OSL = null;
  }

  /** Returns true if field DOP_OSL is set (has been assigned a value) and false otherwise */
  public boolean isSetDOP_OSL() {
    return this.DOP_OSL != null;
  }

  public void setDOP_OSLIsSet(boolean value) {
    if (!value) {
      this.DOP_OSL = null;
    }
  }

  public String getKSG_MS() {
    return this.KSG_MS;
  }

  public DBFPoliclinic setKSG_MS(String KSG_MS) {
    this.KSG_MS = KSG_MS;
    return this;
  }

  public void unsetKSG_MS() {
    this.KSG_MS = null;
  }

  /** Returns true if field KSG_MS is set (has been assigned a value) and false otherwise */
  public boolean isSetKSG_MS() {
    return this.KSG_MS != null;
  }

  public void setKSG_MSIsSet(boolean value) {
    if (!value) {
      this.KSG_MS = null;
    }
  }

  public short getDL_LEC() {
    return this.DL_LEC;
  }

  public DBFPoliclinic setDL_LEC(short DL_LEC) {
    this.DL_LEC = DL_LEC;
    setDL_LECIsSet(true);
    return this;
  }

  public void unsetDL_LEC() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DL_LEC_ISSET_ID);
  }

  /** Returns true if field DL_LEC is set (has been assigned a value) and false otherwise */
  public boolean isSetDL_LEC() {
    return EncodingUtils.testBit(__isset_bitfield, __DL_LEC_ISSET_ID);
  }

  public void setDL_LECIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DL_LEC_ISSET_ID, value);
  }

  public short getKOL_POS() {
    return this.KOL_POS;
  }

  public DBFPoliclinic setKOL_POS(short KOL_POS) {
    this.KOL_POS = KOL_POS;
    setKOL_POSIsSet(true);
    return this;
  }

  public void unsetKOL_POS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KOL_POS_ISSET_ID);
  }

  /** Returns true if field KOL_POS is set (has been assigned a value) and false otherwise */
  public boolean isSetKOL_POS() {
    return EncodingUtils.testBit(__isset_bitfield, __KOL_POS_ISSET_ID);
  }

  public void setKOL_POSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KOL_POS_ISSET_ID, value);
  }

  public short getPOS_D() {
    return this.POS_D;
  }

  public DBFPoliclinic setPOS_D(short POS_D) {
    this.POS_D = POS_D;
    setPOS_DIsSet(true);
    return this;
  }

  public void unsetPOS_D() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POS_D_ISSET_ID);
  }

  /** Returns true if field POS_D is set (has been assigned a value) and false otherwise */
  public boolean isSetPOS_D() {
    return EncodingUtils.testBit(__isset_bitfield, __POS_D_ISSET_ID);
  }

  public void setPOS_DIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POS_D_ISSET_ID, value);
  }

  public short getSL() {
    return this.SL;
  }

  public DBFPoliclinic setSL(short SL) {
    this.SL = SL;
    setSLIsSet(true);
    return this;
  }

  public void unsetSL() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SL_ISSET_ID);
  }

  /** Returns true if field SL is set (has been assigned a value) and false otherwise */
  public boolean isSetSL() {
    return EncodingUtils.testBit(__isset_bitfield, __SL_ISSET_ID);
  }

  public void setSLIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SL_ISSET_ID, value);
  }

  public short getISH_LEC() {
    return this.ISH_LEC;
  }

  public DBFPoliclinic setISH_LEC(short ISH_LEC) {
    this.ISH_LEC = ISH_LEC;
    setISH_LECIsSet(true);
    return this;
  }

  public void unsetISH_LEC() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISH_LEC_ISSET_ID);
  }

  /** Returns true if field ISH_LEC is set (has been assigned a value) and false otherwise */
  public boolean isSetISH_LEC() {
    return EncodingUtils.testBit(__isset_bitfield, __ISH_LEC_ISSET_ID);
  }

  public void setISH_LECIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISH_LEC_ISSET_ID, value);
  }

  public short getPR_NZ() {
    return this.PR_NZ;
  }

  public DBFPoliclinic setPR_NZ(short PR_NZ) {
    this.PR_NZ = PR_NZ;
    setPR_NZIsSet(true);
    return this;
  }

  public void unsetPR_NZ() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PR_NZ_ISSET_ID);
  }

  /** Returns true if field PR_NZ is set (has been assigned a value) and false otherwise */
  public boolean isSetPR_NZ() {
    return EncodingUtils.testBit(__isset_bitfield, __PR_NZ_ISSET_ID);
  }

  public void setPR_NZIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PR_NZ_ISSET_ID, value);
  }

  public double getSTOIM() {
    return this.STOIM;
  }

  public DBFPoliclinic setSTOIM(double STOIM) {
    this.STOIM = STOIM;
    setSTOIMIsSet(true);
    return this;
  }

  public void unsetSTOIM() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOIM_ISSET_ID);
  }

  /** Returns true if field STOIM is set (has been assigned a value) and false otherwise */
  public boolean isSetSTOIM() {
    return EncodingUtils.testBit(__isset_bitfield, __STOIM_ISSET_ID);
  }

  public void setSTOIMIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOIM_ISSET_ID, value);
  }

  public String getKOD_VR() {
    return this.KOD_VR;
  }

  public DBFPoliclinic setKOD_VR(String KOD_VR) {
    this.KOD_VR = KOD_VR;
    return this;
  }

  public void unsetKOD_VR() {
    this.KOD_VR = null;
  }

  /** Returns true if field KOD_VR is set (has been assigned a value) and false otherwise */
  public boolean isSetKOD_VR() {
    return this.KOD_VR != null;
  }

  public void setKOD_VRIsSet(boolean value) {
    if (!value) {
      this.KOD_VR = null;
    }
  }

  public short getS_VR() {
    return this.S_VR;
  }

  public DBFPoliclinic setS_VR(short S_VR) {
    this.S_VR = S_VR;
    setS_VRIsSet(true);
    return this;
  }

  public void unsetS_VR() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __S_VR_ISSET_ID);
  }

  /** Returns true if field S_VR is set (has been assigned a value) and false otherwise */
  public boolean isSetS_VR() {
    return EncodingUtils.testBit(__isset_bitfield, __S_VR_ISSET_ID);
  }

  public void setS_VRIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __S_VR_ISSET_ID, value);
  }

  public String getNOM_SL() {
    return this.NOM_SL;
  }

  public DBFPoliclinic setNOM_SL(String NOM_SL) {
    this.NOM_SL = NOM_SL;
    return this;
  }

  public void unsetNOM_SL() {
    this.NOM_SL = null;
  }

  /** Returns true if field NOM_SL is set (has been assigned a value) and false otherwise */
  public boolean isSetNOM_SL() {
    return this.NOM_SL != null;
  }

  public void setNOM_SLIsSet(boolean value) {
    if (!value) {
      this.NOM_SL = null;
    }
  }

  public String getKOD_O() {
    return this.KOD_O;
  }

  public DBFPoliclinic setKOD_O(String KOD_O) {
    this.KOD_O = KOD_O;
    return this;
  }

  public void unsetKOD_O() {
    this.KOD_O = null;
  }

  /** Returns true if field KOD_O is set (has been assigned a value) and false otherwise */
  public boolean isSetKOD_O() {
    return this.KOD_O != null;
  }

  public void setKOD_OIsSet(boolean value) {
    if (!value) {
      this.KOD_O = null;
    }
  }

  public String getN_OPER() {
    return this.N_OPER;
  }

  public DBFPoliclinic setN_OPER(String N_OPER) {
    this.N_OPER = N_OPER;
    return this;
  }

  public void unsetN_OPER() {
    this.N_OPER = null;
  }

  /** Returns true if field N_OPER is set (has been assigned a value) and false otherwise */
  public boolean isSetN_OPER() {
    return this.N_OPER != null;
  }

  public void setN_OPERIsSet(boolean value) {
    if (!value) {
      this.N_OPER = null;
    }
  }

  public int getKOL_USL() {
    return this.KOL_USL;
  }

  public DBFPoliclinic setKOL_USL(int KOL_USL) {
    this.KOL_USL = KOL_USL;
    setKOL_USLIsSet(true);
    return this;
  }

  public void unsetKOL_USL() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KOL_USL_ISSET_ID);
  }

  /** Returns true if field KOL_USL is set (has been assigned a value) and false otherwise */
  public boolean isSetKOL_USL() {
    return EncodingUtils.testBit(__isset_bitfield, __KOL_USL_ISSET_ID);
  }

  public void setKOL_USLIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KOL_USL_ISSET_ID, value);
  }

  public short getKOD_TSK() {
    return this.KOD_TSK;
  }

  public DBFPoliclinic setKOD_TSK(short KOD_TSK) {
    this.KOD_TSK = KOD_TSK;
    setKOD_TSKIsSet(true);
    return this;
  }

  public void unsetKOD_TSK() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KOD_TSK_ISSET_ID);
  }

  /** Returns true if field KOD_TSK is set (has been assigned a value) and false otherwise */
  public boolean isSetKOD_TSK() {
    return EncodingUtils.testBit(__isset_bitfield, __KOD_TSK_ISSET_ID);
  }

  public void setKOD_TSKIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KOD_TSK_ISSET_ID, value);
  }

  public String getNAMCMO() {
    return this.NAMCMO;
  }

  public DBFPoliclinic setNAMCMO(String NAMCMO) {
    this.NAMCMO = NAMCMO;
    return this;
  }

  public void unsetNAMCMO() {
    this.NAMCMO = null;
  }

  /** Returns true if field NAMCMO is set (has been assigned a value) and false otherwise */
  public boolean isSetNAMCMO() {
    return this.NAMCMO != null;
  }

  public void setNAMCMOIsSet(boolean value) {
    if (!value) {
      this.NAMCMO = null;
    }
  }

  public short getKOD_DOK() {
    return this.KOD_DOK;
  }

  public DBFPoliclinic setKOD_DOK(short KOD_DOK) {
    this.KOD_DOK = KOD_DOK;
    setKOD_DOKIsSet(true);
    return this;
  }

  public void unsetKOD_DOK() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KOD_DOK_ISSET_ID);
  }

  /** Returns true if field KOD_DOK is set (has been assigned a value) and false otherwise */
  public boolean isSetKOD_DOK() {
    return EncodingUtils.testBit(__isset_bitfield, __KOD_DOK_ISSET_ID);
  }

  public void setKOD_DOKIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KOD_DOK_ISSET_ID, value);
  }

  public String getSER_DOK() {
    return this.SER_DOK;
  }

  public DBFPoliclinic setSER_DOK(String SER_DOK) {
    this.SER_DOK = SER_DOK;
    return this;
  }

  public void unsetSER_DOK() {
    this.SER_DOK = null;
  }

  /** Returns true if field SER_DOK is set (has been assigned a value) and false otherwise */
  public boolean isSetSER_DOK() {
    return this.SER_DOK != null;
  }

  public void setSER_DOKIsSet(boolean value) {
    if (!value) {
      this.SER_DOK = null;
    }
  }

  public String getNOM_DOK() {
    return this.NOM_DOK;
  }

  public DBFPoliclinic setNOM_DOK(String NOM_DOK) {
    this.NOM_DOK = NOM_DOK;
    return this;
  }

  public void unsetNOM_DOK() {
    this.NOM_DOK = null;
  }

  /** Returns true if field NOM_DOK is set (has been assigned a value) and false otherwise */
  public boolean isSetNOM_DOK() {
    return this.NOM_DOK != null;
  }

  public void setNOM_DOKIsSet(boolean value) {
    if (!value) {
      this.NOM_DOK = null;
    }
  }

  public short getVMP() {
    return this.VMP;
  }

  public DBFPoliclinic setVMP(short VMP) {
    this.VMP = VMP;
    setVMPIsSet(true);
    return this;
  }

  public void unsetVMP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VMP_ISSET_ID);
  }

  /** Returns true if field VMP is set (has been assigned a value) and false otherwise */
  public boolean isSetVMP() {
    return EncodingUtils.testBit(__isset_bitfield, __VMP_ISSET_ID);
  }

  public void setVMPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VMP_ISSET_ID, value);
  }

  public long getDAT_BLVN() {
    return this.DAT_BLVN;
  }

  public DBFPoliclinic setDAT_BLVN(long DAT_BLVN) {
    this.DAT_BLVN = DAT_BLVN;
    setDAT_BLVNIsSet(true);
    return this;
  }

  public void unsetDAT_BLVN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAT_BLVN_ISSET_ID);
  }

  /** Returns true if field DAT_BLVN is set (has been assigned a value) and false otherwise */
  public boolean isSetDAT_BLVN() {
    return EncodingUtils.testBit(__isset_bitfield, __DAT_BLVN_ISSET_ID);
  }

  public void setDAT_BLVNIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAT_BLVN_ISSET_ID, value);
  }

  public long getDAT_ELVN() {
    return this.DAT_ELVN;
  }

  public DBFPoliclinic setDAT_ELVN(long DAT_ELVN) {
    this.DAT_ELVN = DAT_ELVN;
    setDAT_ELVNIsSet(true);
    return this;
  }

  public void unsetDAT_ELVN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAT_ELVN_ISSET_ID);
  }

  /** Returns true if field DAT_ELVN is set (has been assigned a value) and false otherwise */
  public boolean isSetDAT_ELVN() {
    return EncodingUtils.testBit(__isset_bitfield, __DAT_ELVN_ISSET_ID);
  }

  public void setDAT_ELVNIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAT_ELVN_ISSET_ID, value);
  }

  public boolean isDAMAGE() {
    return this.DAMAGE;
  }

  public DBFPoliclinic setDAMAGE(boolean DAMAGE) {
    this.DAMAGE = DAMAGE;
    setDAMAGEIsSet(true);
    return this;
  }

  public void unsetDAMAGE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAMAGE_ISSET_ID);
  }

  /** Returns true if field DAMAGE is set (has been assigned a value) and false otherwise */
  public boolean isSetDAMAGE() {
    return EncodingUtils.testBit(__isset_bitfield, __DAMAGE_ISSET_ID);
  }

  public void setDAMAGEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAMAGE_ISSET_ID, value);
  }

  public long getDATA_NS() {
    return this.DATA_NS;
  }

  public DBFPoliclinic setDATA_NS(long DATA_NS) {
    this.DATA_NS = DATA_NS;
    setDATA_NSIsSet(true);
    return this;
  }

  public void unsetDATA_NS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATA_NS_ISSET_ID);
  }

  /** Returns true if field DATA_NS is set (has been assigned a value) and false otherwise */
  public boolean isSetDATA_NS() {
    return EncodingUtils.testBit(__isset_bitfield, __DATA_NS_ISSET_ID);
  }

  public void setDATA_NSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATA_NS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DAT__VV:
      if (value == null) {
        unsetDAT_VV();
      } else {
        setDAT_VV((Long)value);
      }
      break;

    case DAT__PR:
      if (value == null) {
        unsetDAT_PR();
      } else {
        setDAT_PR((Long)value);
      }
      break;

    case SER__POL:
      if (value == null) {
        unsetSER_POL();
      } else {
        setSER_POL((String)value);
      }
      break;

    case NOM__POL:
      if (value == null) {
        unsetNOM_POL();
      } else {
        setNOM_POL((String)value);
      }
      break;

    case SNILS:
      if (value == null) {
        unsetSNILS();
      } else {
        setSNILS((String)value);
      }
      break;

    case FAMIL:
      if (value == null) {
        unsetFAMIL();
      } else {
        setFAMIL((String)value);
      }
      break;

    case IMYA:
      if (value == null) {
        unsetIMYA();
      } else {
        setIMYA((String)value);
      }
      break;

    case OT:
      if (value == null) {
        unsetOT();
      } else {
        setOT((String)value);
      }
      break;

    case KOD__F:
      if (value == null) {
        unsetKOD_F();
      } else {
        setKOD_F((String)value);
      }
      break;

    case POL:
      if (value == null) {
        unsetPOL();
      } else {
        setPOL((String)value);
      }
      break;

    case D__R:
      if (value == null) {
        unsetD_R();
      } else {
        setD_R((Long)value);
      }
      break;

    case RAION:
      if (value == null) {
        unsetRAION();
      } else {
        setRAION((Short)value);
      }
      break;

    case KOD__T:
      if (value == null) {
        unsetKOD_T();
      } else {
        setKOD_T((Short)value);
      }
      break;

    case NAS__P:
      if (value == null) {
        unsetNAS_P();
      } else {
        setNAS_P((String)value);
      }
      break;

    case UL:
      if (value == null) {
        unsetUL();
      } else {
        setUL((String)value);
      }
      break;

    case DOM:
      if (value == null) {
        unsetDOM();
      } else {
        setDOM((String)value);
      }
      break;

    case KV:
      if (value == null) {
        unsetKV();
      } else {
        setKV((String)value);
      }
      break;

    case KATEGOR:
      if (value == null) {
        unsetKATEGOR();
      } else {
        setKATEGOR((Integer)value);
      }
      break;

    case MES__R:
      if (value == null) {
        unsetMES_R();
      } else {
        setMES_R((String)value);
      }
      break;

    case KOD__PR:
      if (value == null) {
        unsetKOD_PR();
      } else {
        setKOD_PR((String)value);
      }
      break;

    case OTD:
      if (value == null) {
        unsetOTD();
      } else {
        setOTD((Short)value);
      }
      break;

    case N__KART:
      if (value == null) {
        unsetN_KART();
      } else {
        setN_KART((String)value);
      }
      break;

    case KC:
      if (value == null) {
        unsetKC();
      } else {
        setKC((Short)value);
      }
      break;

    case DIA__O:
      if (value == null) {
        unsetDIA_O();
      } else {
        setDIA_O((String)value);
      }
      break;

    case DOP__D:
      if (value == null) {
        unsetDOP_D();
      } else {
        setDOP_D((String)value);
      }
      break;

    case DIA__S:
      if (value == null) {
        unsetDIA_S();
      } else {
        setDIA_S((String)value);
      }
      break;

    case DOP__S:
      if (value == null) {
        unsetDOP_S();
      } else {
        setDOP_S((String)value);
      }
      break;

    case DIA__S1:
      if (value == null) {
        unsetDIA_S1();
      } else {
        setDIA_S1((String)value);
      }
      break;

    case DOP__S1:
      if (value == null) {
        unsetDOP_S1();
      } else {
        setDOP_S1((String)value);
      }
      break;

    case OSL:
      if (value == null) {
        unsetOSL();
      } else {
        setOSL((String)value);
      }
      break;

    case DOP__OSL:
      if (value == null) {
        unsetDOP_OSL();
      } else {
        setDOP_OSL((String)value);
      }
      break;

    case KSG__MS:
      if (value == null) {
        unsetKSG_MS();
      } else {
        setKSG_MS((String)value);
      }
      break;

    case DL__LEC:
      if (value == null) {
        unsetDL_LEC();
      } else {
        setDL_LEC((Short)value);
      }
      break;

    case KOL__POS:
      if (value == null) {
        unsetKOL_POS();
      } else {
        setKOL_POS((Short)value);
      }
      break;

    case POS__D:
      if (value == null) {
        unsetPOS_D();
      } else {
        setPOS_D((Short)value);
      }
      break;

    case SL:
      if (value == null) {
        unsetSL();
      } else {
        setSL((Short)value);
      }
      break;

    case ISH__LEC:
      if (value == null) {
        unsetISH_LEC();
      } else {
        setISH_LEC((Short)value);
      }
      break;

    case PR__NZ:
      if (value == null) {
        unsetPR_NZ();
      } else {
        setPR_NZ((Short)value);
      }
      break;

    case STOIM:
      if (value == null) {
        unsetSTOIM();
      } else {
        setSTOIM((Double)value);
      }
      break;

    case KOD__VR:
      if (value == null) {
        unsetKOD_VR();
      } else {
        setKOD_VR((String)value);
      }
      break;

    case S__VR:
      if (value == null) {
        unsetS_VR();
      } else {
        setS_VR((Short)value);
      }
      break;

    case NOM__SL:
      if (value == null) {
        unsetNOM_SL();
      } else {
        setNOM_SL((String)value);
      }
      break;

    case KOD__O:
      if (value == null) {
        unsetKOD_O();
      } else {
        setKOD_O((String)value);
      }
      break;

    case N__OPER:
      if (value == null) {
        unsetN_OPER();
      } else {
        setN_OPER((String)value);
      }
      break;

    case KOL__USL:
      if (value == null) {
        unsetKOL_USL();
      } else {
        setKOL_USL((Integer)value);
      }
      break;

    case KOD__TSK:
      if (value == null) {
        unsetKOD_TSK();
      } else {
        setKOD_TSK((Short)value);
      }
      break;

    case NAMCMO:
      if (value == null) {
        unsetNAMCMO();
      } else {
        setNAMCMO((String)value);
      }
      break;

    case KOD__DOK:
      if (value == null) {
        unsetKOD_DOK();
      } else {
        setKOD_DOK((Short)value);
      }
      break;

    case SER__DOK:
      if (value == null) {
        unsetSER_DOK();
      } else {
        setSER_DOK((String)value);
      }
      break;

    case NOM__DOK:
      if (value == null) {
        unsetNOM_DOK();
      } else {
        setNOM_DOK((String)value);
      }
      break;

    case VMP:
      if (value == null) {
        unsetVMP();
      } else {
        setVMP((Short)value);
      }
      break;

    case DAT__BLVN:
      if (value == null) {
        unsetDAT_BLVN();
      } else {
        setDAT_BLVN((Long)value);
      }
      break;

    case DAT__ELVN:
      if (value == null) {
        unsetDAT_ELVN();
      } else {
        setDAT_ELVN((Long)value);
      }
      break;

    case DAMAGE:
      if (value == null) {
        unsetDAMAGE();
      } else {
        setDAMAGE((Boolean)value);
      }
      break;

    case DATA__NS:
      if (value == null) {
        unsetDATA_NS();
      } else {
        setDATA_NS((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DAT__VV:
      return Long.valueOf(getDAT_VV());

    case DAT__PR:
      return Long.valueOf(getDAT_PR());

    case SER__POL:
      return getSER_POL();

    case NOM__POL:
      return getNOM_POL();

    case SNILS:
      return getSNILS();

    case FAMIL:
      return getFAMIL();

    case IMYA:
      return getIMYA();

    case OT:
      return getOT();

    case KOD__F:
      return getKOD_F();

    case POL:
      return getPOL();

    case D__R:
      return Long.valueOf(getD_R());

    case RAION:
      return Short.valueOf(getRAION());

    case KOD__T:
      return Short.valueOf(getKOD_T());

    case NAS__P:
      return getNAS_P();

    case UL:
      return getUL();

    case DOM:
      return getDOM();

    case KV:
      return getKV();

    case KATEGOR:
      return Integer.valueOf(getKATEGOR());

    case MES__R:
      return getMES_R();

    case KOD__PR:
      return getKOD_PR();

    case OTD:
      return Short.valueOf(getOTD());

    case N__KART:
      return getN_KART();

    case KC:
      return Short.valueOf(getKC());

    case DIA__O:
      return getDIA_O();

    case DOP__D:
      return getDOP_D();

    case DIA__S:
      return getDIA_S();

    case DOP__S:
      return getDOP_S();

    case DIA__S1:
      return getDIA_S1();

    case DOP__S1:
      return getDOP_S1();

    case OSL:
      return getOSL();

    case DOP__OSL:
      return getDOP_OSL();

    case KSG__MS:
      return getKSG_MS();

    case DL__LEC:
      return Short.valueOf(getDL_LEC());

    case KOL__POS:
      return Short.valueOf(getKOL_POS());

    case POS__D:
      return Short.valueOf(getPOS_D());

    case SL:
      return Short.valueOf(getSL());

    case ISH__LEC:
      return Short.valueOf(getISH_LEC());

    case PR__NZ:
      return Short.valueOf(getPR_NZ());

    case STOIM:
      return Double.valueOf(getSTOIM());

    case KOD__VR:
      return getKOD_VR();

    case S__VR:
      return Short.valueOf(getS_VR());

    case NOM__SL:
      return getNOM_SL();

    case KOD__O:
      return getKOD_O();

    case N__OPER:
      return getN_OPER();

    case KOL__USL:
      return Integer.valueOf(getKOL_USL());

    case KOD__TSK:
      return Short.valueOf(getKOD_TSK());

    case NAMCMO:
      return getNAMCMO();

    case KOD__DOK:
      return Short.valueOf(getKOD_DOK());

    case SER__DOK:
      return getSER_DOK();

    case NOM__DOK:
      return getNOM_DOK();

    case VMP:
      return Short.valueOf(getVMP());

    case DAT__BLVN:
      return Long.valueOf(getDAT_BLVN());

    case DAT__ELVN:
      return Long.valueOf(getDAT_ELVN());

    case DAMAGE:
      return Boolean.valueOf(isDAMAGE());

    case DATA__NS:
      return Long.valueOf(getDATA_NS());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DAT__VV:
      return isSetDAT_VV();
    case DAT__PR:
      return isSetDAT_PR();
    case SER__POL:
      return isSetSER_POL();
    case NOM__POL:
      return isSetNOM_POL();
    case SNILS:
      return isSetSNILS();
    case FAMIL:
      return isSetFAMIL();
    case IMYA:
      return isSetIMYA();
    case OT:
      return isSetOT();
    case KOD__F:
      return isSetKOD_F();
    case POL:
      return isSetPOL();
    case D__R:
      return isSetD_R();
    case RAION:
      return isSetRAION();
    case KOD__T:
      return isSetKOD_T();
    case NAS__P:
      return isSetNAS_P();
    case UL:
      return isSetUL();
    case DOM:
      return isSetDOM();
    case KV:
      return isSetKV();
    case KATEGOR:
      return isSetKATEGOR();
    case MES__R:
      return isSetMES_R();
    case KOD__PR:
      return isSetKOD_PR();
    case OTD:
      return isSetOTD();
    case N__KART:
      return isSetN_KART();
    case KC:
      return isSetKC();
    case DIA__O:
      return isSetDIA_O();
    case DOP__D:
      return isSetDOP_D();
    case DIA__S:
      return isSetDIA_S();
    case DOP__S:
      return isSetDOP_S();
    case DIA__S1:
      return isSetDIA_S1();
    case DOP__S1:
      return isSetDOP_S1();
    case OSL:
      return isSetOSL();
    case DOP__OSL:
      return isSetDOP_OSL();
    case KSG__MS:
      return isSetKSG_MS();
    case DL__LEC:
      return isSetDL_LEC();
    case KOL__POS:
      return isSetKOL_POS();
    case POS__D:
      return isSetPOS_D();
    case SL:
      return isSetSL();
    case ISH__LEC:
      return isSetISH_LEC();
    case PR__NZ:
      return isSetPR_NZ();
    case STOIM:
      return isSetSTOIM();
    case KOD__VR:
      return isSetKOD_VR();
    case S__VR:
      return isSetS_VR();
    case NOM__SL:
      return isSetNOM_SL();
    case KOD__O:
      return isSetKOD_O();
    case N__OPER:
      return isSetN_OPER();
    case KOL__USL:
      return isSetKOL_USL();
    case KOD__TSK:
      return isSetKOD_TSK();
    case NAMCMO:
      return isSetNAMCMO();
    case KOD__DOK:
      return isSetKOD_DOK();
    case SER__DOK:
      return isSetSER_DOK();
    case NOM__DOK:
      return isSetNOM_DOK();
    case VMP:
      return isSetVMP();
    case DAT__BLVN:
      return isSetDAT_BLVN();
    case DAT__ELVN:
      return isSetDAT_ELVN();
    case DAMAGE:
      return isSetDAMAGE();
    case DATA__NS:
      return isSetDATA_NS();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DBFPoliclinic)
      return this.equals((DBFPoliclinic)that);
    return false;
  }

  public boolean equals(DBFPoliclinic that) {
    if (that == null)
      return false;

    boolean this_present_DAT_VV = true;
    boolean that_present_DAT_VV = true;
    if (this_present_DAT_VV || that_present_DAT_VV) {
      if (!(this_present_DAT_VV && that_present_DAT_VV))
        return false;
      if (this.DAT_VV != that.DAT_VV)
        return false;
    }

    boolean this_present_DAT_PR = true;
    boolean that_present_DAT_PR = true;
    if (this_present_DAT_PR || that_present_DAT_PR) {
      if (!(this_present_DAT_PR && that_present_DAT_PR))
        return false;
      if (this.DAT_PR != that.DAT_PR)
        return false;
    }

    boolean this_present_SER_POL = true && this.isSetSER_POL();
    boolean that_present_SER_POL = true && that.isSetSER_POL();
    if (this_present_SER_POL || that_present_SER_POL) {
      if (!(this_present_SER_POL && that_present_SER_POL))
        return false;
      if (!this.SER_POL.equals(that.SER_POL))
        return false;
    }

    boolean this_present_NOM_POL = true && this.isSetNOM_POL();
    boolean that_present_NOM_POL = true && that.isSetNOM_POL();
    if (this_present_NOM_POL || that_present_NOM_POL) {
      if (!(this_present_NOM_POL && that_present_NOM_POL))
        return false;
      if (!this.NOM_POL.equals(that.NOM_POL))
        return false;
    }

    boolean this_present_SNILS = true && this.isSetSNILS();
    boolean that_present_SNILS = true && that.isSetSNILS();
    if (this_present_SNILS || that_present_SNILS) {
      if (!(this_present_SNILS && that_present_SNILS))
        return false;
      if (!this.SNILS.equals(that.SNILS))
        return false;
    }

    boolean this_present_FAMIL = true && this.isSetFAMIL();
    boolean that_present_FAMIL = true && that.isSetFAMIL();
    if (this_present_FAMIL || that_present_FAMIL) {
      if (!(this_present_FAMIL && that_present_FAMIL))
        return false;
      if (!this.FAMIL.equals(that.FAMIL))
        return false;
    }

    boolean this_present_IMYA = true && this.isSetIMYA();
    boolean that_present_IMYA = true && that.isSetIMYA();
    if (this_present_IMYA || that_present_IMYA) {
      if (!(this_present_IMYA && that_present_IMYA))
        return false;
      if (!this.IMYA.equals(that.IMYA))
        return false;
    }

    boolean this_present_OT = true && this.isSetOT();
    boolean that_present_OT = true && that.isSetOT();
    if (this_present_OT || that_present_OT) {
      if (!(this_present_OT && that_present_OT))
        return false;
      if (!this.OT.equals(that.OT))
        return false;
    }

    boolean this_present_KOD_F = true && this.isSetKOD_F();
    boolean that_present_KOD_F = true && that.isSetKOD_F();
    if (this_present_KOD_F || that_present_KOD_F) {
      if (!(this_present_KOD_F && that_present_KOD_F))
        return false;
      if (!this.KOD_F.equals(that.KOD_F))
        return false;
    }

    boolean this_present_POL = true && this.isSetPOL();
    boolean that_present_POL = true && that.isSetPOL();
    if (this_present_POL || that_present_POL) {
      if (!(this_present_POL && that_present_POL))
        return false;
      if (!this.POL.equals(that.POL))
        return false;
    }

    boolean this_present_D_R = true;
    boolean that_present_D_R = true;
    if (this_present_D_R || that_present_D_R) {
      if (!(this_present_D_R && that_present_D_R))
        return false;
      if (this.D_R != that.D_R)
        return false;
    }

    boolean this_present_RAION = true;
    boolean that_present_RAION = true;
    if (this_present_RAION || that_present_RAION) {
      if (!(this_present_RAION && that_present_RAION))
        return false;
      if (this.RAION != that.RAION)
        return false;
    }

    boolean this_present_KOD_T = true;
    boolean that_present_KOD_T = true;
    if (this_present_KOD_T || that_present_KOD_T) {
      if (!(this_present_KOD_T && that_present_KOD_T))
        return false;
      if (this.KOD_T != that.KOD_T)
        return false;
    }

    boolean this_present_NAS_P = true && this.isSetNAS_P();
    boolean that_present_NAS_P = true && that.isSetNAS_P();
    if (this_present_NAS_P || that_present_NAS_P) {
      if (!(this_present_NAS_P && that_present_NAS_P))
        return false;
      if (!this.NAS_P.equals(that.NAS_P))
        return false;
    }

    boolean this_present_UL = true && this.isSetUL();
    boolean that_present_UL = true && that.isSetUL();
    if (this_present_UL || that_present_UL) {
      if (!(this_present_UL && that_present_UL))
        return false;
      if (!this.UL.equals(that.UL))
        return false;
    }

    boolean this_present_DOM = true && this.isSetDOM();
    boolean that_present_DOM = true && that.isSetDOM();
    if (this_present_DOM || that_present_DOM) {
      if (!(this_present_DOM && that_present_DOM))
        return false;
      if (!this.DOM.equals(that.DOM))
        return false;
    }

    boolean this_present_KV = true && this.isSetKV();
    boolean that_present_KV = true && that.isSetKV();
    if (this_present_KV || that_present_KV) {
      if (!(this_present_KV && that_present_KV))
        return false;
      if (!this.KV.equals(that.KV))
        return false;
    }

    boolean this_present_KATEGOR = true;
    boolean that_present_KATEGOR = true;
    if (this_present_KATEGOR || that_present_KATEGOR) {
      if (!(this_present_KATEGOR && that_present_KATEGOR))
        return false;
      if (this.KATEGOR != that.KATEGOR)
        return false;
    }

    boolean this_present_MES_R = true && this.isSetMES_R();
    boolean that_present_MES_R = true && that.isSetMES_R();
    if (this_present_MES_R || that_present_MES_R) {
      if (!(this_present_MES_R && that_present_MES_R))
        return false;
      if (!this.MES_R.equals(that.MES_R))
        return false;
    }

    boolean this_present_KOD_PR = true && this.isSetKOD_PR();
    boolean that_present_KOD_PR = true && that.isSetKOD_PR();
    if (this_present_KOD_PR || that_present_KOD_PR) {
      if (!(this_present_KOD_PR && that_present_KOD_PR))
        return false;
      if (!this.KOD_PR.equals(that.KOD_PR))
        return false;
    }

    boolean this_present_OTD = true;
    boolean that_present_OTD = true;
    if (this_present_OTD || that_present_OTD) {
      if (!(this_present_OTD && that_present_OTD))
        return false;
      if (this.OTD != that.OTD)
        return false;
    }

    boolean this_present_N_KART = true && this.isSetN_KART();
    boolean that_present_N_KART = true && that.isSetN_KART();
    if (this_present_N_KART || that_present_N_KART) {
      if (!(this_present_N_KART && that_present_N_KART))
        return false;
      if (!this.N_KART.equals(that.N_KART))
        return false;
    }

    boolean this_present_KC = true;
    boolean that_present_KC = true;
    if (this_present_KC || that_present_KC) {
      if (!(this_present_KC && that_present_KC))
        return false;
      if (this.KC != that.KC)
        return false;
    }

    boolean this_present_DIA_O = true && this.isSetDIA_O();
    boolean that_present_DIA_O = true && that.isSetDIA_O();
    if (this_present_DIA_O || that_present_DIA_O) {
      if (!(this_present_DIA_O && that_present_DIA_O))
        return false;
      if (!this.DIA_O.equals(that.DIA_O))
        return false;
    }

    boolean this_present_DOP_D = true && this.isSetDOP_D();
    boolean that_present_DOP_D = true && that.isSetDOP_D();
    if (this_present_DOP_D || that_present_DOP_D) {
      if (!(this_present_DOP_D && that_present_DOP_D))
        return false;
      if (!this.DOP_D.equals(that.DOP_D))
        return false;
    }

    boolean this_present_DIA_S = true && this.isSetDIA_S();
    boolean that_present_DIA_S = true && that.isSetDIA_S();
    if (this_present_DIA_S || that_present_DIA_S) {
      if (!(this_present_DIA_S && that_present_DIA_S))
        return false;
      if (!this.DIA_S.equals(that.DIA_S))
        return false;
    }

    boolean this_present_DOP_S = true && this.isSetDOP_S();
    boolean that_present_DOP_S = true && that.isSetDOP_S();
    if (this_present_DOP_S || that_present_DOP_S) {
      if (!(this_present_DOP_S && that_present_DOP_S))
        return false;
      if (!this.DOP_S.equals(that.DOP_S))
        return false;
    }

    boolean this_present_DIA_S1 = true && this.isSetDIA_S1();
    boolean that_present_DIA_S1 = true && that.isSetDIA_S1();
    if (this_present_DIA_S1 || that_present_DIA_S1) {
      if (!(this_present_DIA_S1 && that_present_DIA_S1))
        return false;
      if (!this.DIA_S1.equals(that.DIA_S1))
        return false;
    }

    boolean this_present_DOP_S1 = true && this.isSetDOP_S1();
    boolean that_present_DOP_S1 = true && that.isSetDOP_S1();
    if (this_present_DOP_S1 || that_present_DOP_S1) {
      if (!(this_present_DOP_S1 && that_present_DOP_S1))
        return false;
      if (!this.DOP_S1.equals(that.DOP_S1))
        return false;
    }

    boolean this_present_OSL = true && this.isSetOSL();
    boolean that_present_OSL = true && that.isSetOSL();
    if (this_present_OSL || that_present_OSL) {
      if (!(this_present_OSL && that_present_OSL))
        return false;
      if (!this.OSL.equals(that.OSL))
        return false;
    }

    boolean this_present_DOP_OSL = true && this.isSetDOP_OSL();
    boolean that_present_DOP_OSL = true && that.isSetDOP_OSL();
    if (this_present_DOP_OSL || that_present_DOP_OSL) {
      if (!(this_present_DOP_OSL && that_present_DOP_OSL))
        return false;
      if (!this.DOP_OSL.equals(that.DOP_OSL))
        return false;
    }

    boolean this_present_KSG_MS = true && this.isSetKSG_MS();
    boolean that_present_KSG_MS = true && that.isSetKSG_MS();
    if (this_present_KSG_MS || that_present_KSG_MS) {
      if (!(this_present_KSG_MS && that_present_KSG_MS))
        return false;
      if (!this.KSG_MS.equals(that.KSG_MS))
        return false;
    }

    boolean this_present_DL_LEC = true;
    boolean that_present_DL_LEC = true;
    if (this_present_DL_LEC || that_present_DL_LEC) {
      if (!(this_present_DL_LEC && that_present_DL_LEC))
        return false;
      if (this.DL_LEC != that.DL_LEC)
        return false;
    }

    boolean this_present_KOL_POS = true;
    boolean that_present_KOL_POS = true;
    if (this_present_KOL_POS || that_present_KOL_POS) {
      if (!(this_present_KOL_POS && that_present_KOL_POS))
        return false;
      if (this.KOL_POS != that.KOL_POS)
        return false;
    }

    boolean this_present_POS_D = true;
    boolean that_present_POS_D = true;
    if (this_present_POS_D || that_present_POS_D) {
      if (!(this_present_POS_D && that_present_POS_D))
        return false;
      if (this.POS_D != that.POS_D)
        return false;
    }

    boolean this_present_SL = true;
    boolean that_present_SL = true;
    if (this_present_SL || that_present_SL) {
      if (!(this_present_SL && that_present_SL))
        return false;
      if (this.SL != that.SL)
        return false;
    }

    boolean this_present_ISH_LEC = true;
    boolean that_present_ISH_LEC = true;
    if (this_present_ISH_LEC || that_present_ISH_LEC) {
      if (!(this_present_ISH_LEC && that_present_ISH_LEC))
        return false;
      if (this.ISH_LEC != that.ISH_LEC)
        return false;
    }

    boolean this_present_PR_NZ = true;
    boolean that_present_PR_NZ = true;
    if (this_present_PR_NZ || that_present_PR_NZ) {
      if (!(this_present_PR_NZ && that_present_PR_NZ))
        return false;
      if (this.PR_NZ != that.PR_NZ)
        return false;
    }

    boolean this_present_STOIM = true;
    boolean that_present_STOIM = true;
    if (this_present_STOIM || that_present_STOIM) {
      if (!(this_present_STOIM && that_present_STOIM))
        return false;
      if (this.STOIM != that.STOIM)
        return false;
    }

    boolean this_present_KOD_VR = true && this.isSetKOD_VR();
    boolean that_present_KOD_VR = true && that.isSetKOD_VR();
    if (this_present_KOD_VR || that_present_KOD_VR) {
      if (!(this_present_KOD_VR && that_present_KOD_VR))
        return false;
      if (!this.KOD_VR.equals(that.KOD_VR))
        return false;
    }

    boolean this_present_S_VR = true;
    boolean that_present_S_VR = true;
    if (this_present_S_VR || that_present_S_VR) {
      if (!(this_present_S_VR && that_present_S_VR))
        return false;
      if (this.S_VR != that.S_VR)
        return false;
    }

    boolean this_present_NOM_SL = true && this.isSetNOM_SL();
    boolean that_present_NOM_SL = true && that.isSetNOM_SL();
    if (this_present_NOM_SL || that_present_NOM_SL) {
      if (!(this_present_NOM_SL && that_present_NOM_SL))
        return false;
      if (!this.NOM_SL.equals(that.NOM_SL))
        return false;
    }

    boolean this_present_KOD_O = true && this.isSetKOD_O();
    boolean that_present_KOD_O = true && that.isSetKOD_O();
    if (this_present_KOD_O || that_present_KOD_O) {
      if (!(this_present_KOD_O && that_present_KOD_O))
        return false;
      if (!this.KOD_O.equals(that.KOD_O))
        return false;
    }

    boolean this_present_N_OPER = true && this.isSetN_OPER();
    boolean that_present_N_OPER = true && that.isSetN_OPER();
    if (this_present_N_OPER || that_present_N_OPER) {
      if (!(this_present_N_OPER && that_present_N_OPER))
        return false;
      if (!this.N_OPER.equals(that.N_OPER))
        return false;
    }

    boolean this_present_KOL_USL = true;
    boolean that_present_KOL_USL = true;
    if (this_present_KOL_USL || that_present_KOL_USL) {
      if (!(this_present_KOL_USL && that_present_KOL_USL))
        return false;
      if (this.KOL_USL != that.KOL_USL)
        return false;
    }

    boolean this_present_KOD_TSK = true;
    boolean that_present_KOD_TSK = true;
    if (this_present_KOD_TSK || that_present_KOD_TSK) {
      if (!(this_present_KOD_TSK && that_present_KOD_TSK))
        return false;
      if (this.KOD_TSK != that.KOD_TSK)
        return false;
    }

    boolean this_present_NAMCMO = true && this.isSetNAMCMO();
    boolean that_present_NAMCMO = true && that.isSetNAMCMO();
    if (this_present_NAMCMO || that_present_NAMCMO) {
      if (!(this_present_NAMCMO && that_present_NAMCMO))
        return false;
      if (!this.NAMCMO.equals(that.NAMCMO))
        return false;
    }

    boolean this_present_KOD_DOK = true;
    boolean that_present_KOD_DOK = true;
    if (this_present_KOD_DOK || that_present_KOD_DOK) {
      if (!(this_present_KOD_DOK && that_present_KOD_DOK))
        return false;
      if (this.KOD_DOK != that.KOD_DOK)
        return false;
    }

    boolean this_present_SER_DOK = true && this.isSetSER_DOK();
    boolean that_present_SER_DOK = true && that.isSetSER_DOK();
    if (this_present_SER_DOK || that_present_SER_DOK) {
      if (!(this_present_SER_DOK && that_present_SER_DOK))
        return false;
      if (!this.SER_DOK.equals(that.SER_DOK))
        return false;
    }

    boolean this_present_NOM_DOK = true && this.isSetNOM_DOK();
    boolean that_present_NOM_DOK = true && that.isSetNOM_DOK();
    if (this_present_NOM_DOK || that_present_NOM_DOK) {
      if (!(this_present_NOM_DOK && that_present_NOM_DOK))
        return false;
      if (!this.NOM_DOK.equals(that.NOM_DOK))
        return false;
    }

    boolean this_present_VMP = true;
    boolean that_present_VMP = true;
    if (this_present_VMP || that_present_VMP) {
      if (!(this_present_VMP && that_present_VMP))
        return false;
      if (this.VMP != that.VMP)
        return false;
    }

    boolean this_present_DAT_BLVN = true;
    boolean that_present_DAT_BLVN = true;
    if (this_present_DAT_BLVN || that_present_DAT_BLVN) {
      if (!(this_present_DAT_BLVN && that_present_DAT_BLVN))
        return false;
      if (this.DAT_BLVN != that.DAT_BLVN)
        return false;
    }

    boolean this_present_DAT_ELVN = true;
    boolean that_present_DAT_ELVN = true;
    if (this_present_DAT_ELVN || that_present_DAT_ELVN) {
      if (!(this_present_DAT_ELVN && that_present_DAT_ELVN))
        return false;
      if (this.DAT_ELVN != that.DAT_ELVN)
        return false;
    }

    boolean this_present_DAMAGE = true;
    boolean that_present_DAMAGE = true;
    if (this_present_DAMAGE || that_present_DAMAGE) {
      if (!(this_present_DAMAGE && that_present_DAMAGE))
        return false;
      if (this.DAMAGE != that.DAMAGE)
        return false;
    }

    boolean this_present_DATA_NS = true;
    boolean that_present_DATA_NS = true;
    if (this_present_DATA_NS || that_present_DATA_NS) {
      if (!(this_present_DATA_NS && that_present_DATA_NS))
        return false;
      if (this.DATA_NS != that.DATA_NS)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DBFPoliclinic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DBFPoliclinic typedOther = (DBFPoliclinic)other;

    lastComparison = Boolean.valueOf(isSetDAT_VV()).compareTo(typedOther.isSetDAT_VV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDAT_VV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DAT_VV, typedOther.DAT_VV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDAT_PR()).compareTo(typedOther.isSetDAT_PR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDAT_PR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DAT_PR, typedOther.DAT_PR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSER_POL()).compareTo(typedOther.isSetSER_POL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSER_POL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SER_POL, typedOther.SER_POL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNOM_POL()).compareTo(typedOther.isSetNOM_POL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNOM_POL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NOM_POL, typedOther.NOM_POL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSNILS()).compareTo(typedOther.isSetSNILS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSNILS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SNILS, typedOther.SNILS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFAMIL()).compareTo(typedOther.isSetFAMIL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFAMIL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FAMIL, typedOther.FAMIL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIMYA()).compareTo(typedOther.isSetIMYA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIMYA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IMYA, typedOther.IMYA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOT()).compareTo(typedOther.isSetOT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OT, typedOther.OT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKOD_F()).compareTo(typedOther.isSetKOD_F());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKOD_F()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KOD_F, typedOther.KOD_F);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOL()).compareTo(typedOther.isSetPOL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POL, typedOther.POL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_R()).compareTo(typedOther.isSetD_R());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_R()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.D_R, typedOther.D_R);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRAION()).compareTo(typedOther.isSetRAION());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRAION()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RAION, typedOther.RAION);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKOD_T()).compareTo(typedOther.isSetKOD_T());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKOD_T()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KOD_T, typedOther.KOD_T);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNAS_P()).compareTo(typedOther.isSetNAS_P());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNAS_P()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NAS_P, typedOther.NAS_P);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUL()).compareTo(typedOther.isSetUL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UL, typedOther.UL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOM()).compareTo(typedOther.isSetDOM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOM, typedOther.DOM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKV()).compareTo(typedOther.isSetKV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KV, typedOther.KV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKATEGOR()).compareTo(typedOther.isSetKATEGOR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKATEGOR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KATEGOR, typedOther.KATEGOR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMES_R()).compareTo(typedOther.isSetMES_R());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMES_R()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MES_R, typedOther.MES_R);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKOD_PR()).compareTo(typedOther.isSetKOD_PR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKOD_PR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KOD_PR, typedOther.KOD_PR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOTD()).compareTo(typedOther.isSetOTD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOTD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OTD, typedOther.OTD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_KART()).compareTo(typedOther.isSetN_KART());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_KART()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.N_KART, typedOther.N_KART);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKC()).compareTo(typedOther.isSetKC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KC, typedOther.KC);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDIA_O()).compareTo(typedOther.isSetDIA_O());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDIA_O()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DIA_O, typedOther.DIA_O);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOP_D()).compareTo(typedOther.isSetDOP_D());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOP_D()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOP_D, typedOther.DOP_D);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDIA_S()).compareTo(typedOther.isSetDIA_S());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDIA_S()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DIA_S, typedOther.DIA_S);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOP_S()).compareTo(typedOther.isSetDOP_S());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOP_S()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOP_S, typedOther.DOP_S);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDIA_S1()).compareTo(typedOther.isSetDIA_S1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDIA_S1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DIA_S1, typedOther.DIA_S1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOP_S1()).compareTo(typedOther.isSetDOP_S1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOP_S1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOP_S1, typedOther.DOP_S1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOSL()).compareTo(typedOther.isSetOSL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOSL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OSL, typedOther.OSL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOP_OSL()).compareTo(typedOther.isSetDOP_OSL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOP_OSL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOP_OSL, typedOther.DOP_OSL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKSG_MS()).compareTo(typedOther.isSetKSG_MS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKSG_MS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KSG_MS, typedOther.KSG_MS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDL_LEC()).compareTo(typedOther.isSetDL_LEC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDL_LEC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DL_LEC, typedOther.DL_LEC);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKOL_POS()).compareTo(typedOther.isSetKOL_POS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKOL_POS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KOL_POS, typedOther.KOL_POS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOS_D()).compareTo(typedOther.isSetPOS_D());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOS_D()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POS_D, typedOther.POS_D);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSL()).compareTo(typedOther.isSetSL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SL, typedOther.SL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetISH_LEC()).compareTo(typedOther.isSetISH_LEC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetISH_LEC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ISH_LEC, typedOther.ISH_LEC);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPR_NZ()).compareTo(typedOther.isSetPR_NZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPR_NZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PR_NZ, typedOther.PR_NZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSTOIM()).compareTo(typedOther.isSetSTOIM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSTOIM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.STOIM, typedOther.STOIM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKOD_VR()).compareTo(typedOther.isSetKOD_VR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKOD_VR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KOD_VR, typedOther.KOD_VR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_VR()).compareTo(typedOther.isSetS_VR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_VR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.S_VR, typedOther.S_VR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNOM_SL()).compareTo(typedOther.isSetNOM_SL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNOM_SL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NOM_SL, typedOther.NOM_SL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKOD_O()).compareTo(typedOther.isSetKOD_O());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKOD_O()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KOD_O, typedOther.KOD_O);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_OPER()).compareTo(typedOther.isSetN_OPER());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_OPER()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.N_OPER, typedOther.N_OPER);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKOL_USL()).compareTo(typedOther.isSetKOL_USL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKOL_USL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KOL_USL, typedOther.KOL_USL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKOD_TSK()).compareTo(typedOther.isSetKOD_TSK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKOD_TSK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KOD_TSK, typedOther.KOD_TSK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNAMCMO()).compareTo(typedOther.isSetNAMCMO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNAMCMO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NAMCMO, typedOther.NAMCMO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKOD_DOK()).compareTo(typedOther.isSetKOD_DOK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKOD_DOK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KOD_DOK, typedOther.KOD_DOK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSER_DOK()).compareTo(typedOther.isSetSER_DOK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSER_DOK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SER_DOK, typedOther.SER_DOK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNOM_DOK()).compareTo(typedOther.isSetNOM_DOK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNOM_DOK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NOM_DOK, typedOther.NOM_DOK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVMP()).compareTo(typedOther.isSetVMP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVMP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VMP, typedOther.VMP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDAT_BLVN()).compareTo(typedOther.isSetDAT_BLVN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDAT_BLVN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DAT_BLVN, typedOther.DAT_BLVN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDAT_ELVN()).compareTo(typedOther.isSetDAT_ELVN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDAT_ELVN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DAT_ELVN, typedOther.DAT_ELVN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDAMAGE()).compareTo(typedOther.isSetDAMAGE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDAMAGE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DAMAGE, typedOther.DAMAGE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDATA_NS()).compareTo(typedOther.isSetDATA_NS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDATA_NS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DATA_NS, typedOther.DATA_NS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DBFPoliclinic(");
    boolean first = true;

    sb.append("DAT_VV:");
    sb.append(this.DAT_VV);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DAT_PR:");
    sb.append(this.DAT_PR);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SER_POL:");
    if (this.SER_POL == null) {
      sb.append("null");
    } else {
      sb.append(this.SER_POL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NOM_POL:");
    if (this.NOM_POL == null) {
      sb.append("null");
    } else {
      sb.append(this.NOM_POL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SNILS:");
    if (this.SNILS == null) {
      sb.append("null");
    } else {
      sb.append(this.SNILS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FAMIL:");
    if (this.FAMIL == null) {
      sb.append("null");
    } else {
      sb.append(this.FAMIL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IMYA:");
    if (this.IMYA == null) {
      sb.append("null");
    } else {
      sb.append(this.IMYA);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OT:");
    if (this.OT == null) {
      sb.append("null");
    } else {
      sb.append(this.OT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KOD_F:");
    if (this.KOD_F == null) {
      sb.append("null");
    } else {
      sb.append(this.KOD_F);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("POL:");
    if (this.POL == null) {
      sb.append("null");
    } else {
      sb.append(this.POL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("D_R:");
    sb.append(this.D_R);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RAION:");
    sb.append(this.RAION);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KOD_T:");
    sb.append(this.KOD_T);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NAS_P:");
    if (this.NAS_P == null) {
      sb.append("null");
    } else {
      sb.append(this.NAS_P);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UL:");
    if (this.UL == null) {
      sb.append("null");
    } else {
      sb.append(this.UL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DOM:");
    if (this.DOM == null) {
      sb.append("null");
    } else {
      sb.append(this.DOM);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KV:");
    if (this.KV == null) {
      sb.append("null");
    } else {
      sb.append(this.KV);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KATEGOR:");
    sb.append(this.KATEGOR);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MES_R:");
    if (this.MES_R == null) {
      sb.append("null");
    } else {
      sb.append(this.MES_R);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KOD_PR:");
    if (this.KOD_PR == null) {
      sb.append("null");
    } else {
      sb.append(this.KOD_PR);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OTD:");
    sb.append(this.OTD);
    first = false;
    if (!first) sb.append(", ");
    sb.append("N_KART:");
    if (this.N_KART == null) {
      sb.append("null");
    } else {
      sb.append(this.N_KART);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KC:");
    sb.append(this.KC);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DIA_O:");
    if (this.DIA_O == null) {
      sb.append("null");
    } else {
      sb.append(this.DIA_O);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DOP_D:");
    if (this.DOP_D == null) {
      sb.append("null");
    } else {
      sb.append(this.DOP_D);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DIA_S:");
    if (this.DIA_S == null) {
      sb.append("null");
    } else {
      sb.append(this.DIA_S);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DOP_S:");
    if (this.DOP_S == null) {
      sb.append("null");
    } else {
      sb.append(this.DOP_S);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DIA_S1:");
    if (this.DIA_S1 == null) {
      sb.append("null");
    } else {
      sb.append(this.DIA_S1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DOP_S1:");
    if (this.DOP_S1 == null) {
      sb.append("null");
    } else {
      sb.append(this.DOP_S1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OSL:");
    if (this.OSL == null) {
      sb.append("null");
    } else {
      sb.append(this.OSL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DOP_OSL:");
    if (this.DOP_OSL == null) {
      sb.append("null");
    } else {
      sb.append(this.DOP_OSL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KSG_MS:");
    if (this.KSG_MS == null) {
      sb.append("null");
    } else {
      sb.append(this.KSG_MS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DL_LEC:");
    sb.append(this.DL_LEC);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KOL_POS:");
    sb.append(this.KOL_POS);
    first = false;
    if (!first) sb.append(", ");
    sb.append("POS_D:");
    sb.append(this.POS_D);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SL:");
    sb.append(this.SL);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ISH_LEC:");
    sb.append(this.ISH_LEC);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PR_NZ:");
    sb.append(this.PR_NZ);
    first = false;
    if (!first) sb.append(", ");
    sb.append("STOIM:");
    sb.append(this.STOIM);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KOD_VR:");
    if (this.KOD_VR == null) {
      sb.append("null");
    } else {
      sb.append(this.KOD_VR);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("S_VR:");
    sb.append(this.S_VR);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NOM_SL:");
    if (this.NOM_SL == null) {
      sb.append("null");
    } else {
      sb.append(this.NOM_SL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KOD_O:");
    if (this.KOD_O == null) {
      sb.append("null");
    } else {
      sb.append(this.KOD_O);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("N_OPER:");
    if (this.N_OPER == null) {
      sb.append("null");
    } else {
      sb.append(this.N_OPER);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KOL_USL:");
    sb.append(this.KOL_USL);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KOD_TSK:");
    sb.append(this.KOD_TSK);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NAMCMO:");
    if (this.NAMCMO == null) {
      sb.append("null");
    } else {
      sb.append(this.NAMCMO);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KOD_DOK:");
    sb.append(this.KOD_DOK);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SER_DOK:");
    if (this.SER_DOK == null) {
      sb.append("null");
    } else {
      sb.append(this.SER_DOK);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NOM_DOK:");
    if (this.NOM_DOK == null) {
      sb.append("null");
    } else {
      sb.append(this.NOM_DOK);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("VMP:");
    sb.append(this.VMP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DAT_BLVN:");
    sb.append(this.DAT_BLVN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DAT_ELVN:");
    sb.append(this.DAT_ELVN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DAMAGE:");
    sb.append(this.DAMAGE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DATA_NS:");
    sb.append(this.DATA_NS);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'DAT_VV' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'DAT_PR' because it's a primitive and you chose the non-beans generator.
    if (SER_POL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SER_POL' was not present! Struct: " + toString());
    }
    if (NOM_POL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NOM_POL' was not present! Struct: " + toString());
    }
    if (SNILS == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SNILS' was not present! Struct: " + toString());
    }
    if (FAMIL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'FAMIL' was not present! Struct: " + toString());
    }
    if (IMYA == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'IMYA' was not present! Struct: " + toString());
    }
    if (OT == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'OT' was not present! Struct: " + toString());
    }
    if (KOD_F == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'KOD_F' was not present! Struct: " + toString());
    }
    if (POL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'POL' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'D_R' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'RAION' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'KOD_T' because it's a primitive and you chose the non-beans generator.
    if (NAS_P == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NAS_P' was not present! Struct: " + toString());
    }
    if (UL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'UL' was not present! Struct: " + toString());
    }
    if (DOM == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DOM' was not present! Struct: " + toString());
    }
    if (KV == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'KV' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'KATEGOR' because it's a primitive and you chose the non-beans generator.
    if (MES_R == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'MES_R' was not present! Struct: " + toString());
    }
    if (KOD_PR == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'KOD_PR' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'OTD' because it's a primitive and you chose the non-beans generator.
    if (N_KART == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'N_KART' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'KC' because it's a primitive and you chose the non-beans generator.
    if (DIA_O == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DIA_O' was not present! Struct: " + toString());
    }
    if (DOP_D == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DOP_D' was not present! Struct: " + toString());
    }
    if (DIA_S == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DIA_S' was not present! Struct: " + toString());
    }
    if (DOP_S == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DOP_S' was not present! Struct: " + toString());
    }
    if (DIA_S1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DIA_S1' was not present! Struct: " + toString());
    }
    if (DOP_S1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DOP_S1' was not present! Struct: " + toString());
    }
    if (OSL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'OSL' was not present! Struct: " + toString());
    }
    if (DOP_OSL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DOP_OSL' was not present! Struct: " + toString());
    }
    if (KSG_MS == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'KSG_MS' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'DL_LEC' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'KOL_POS' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'POS_D' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'SL' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ISH_LEC' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'PR_NZ' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'STOIM' because it's a primitive and you chose the non-beans generator.
    if (KOD_VR == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'KOD_VR' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'S_VR' because it's a primitive and you chose the non-beans generator.
    if (NOM_SL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NOM_SL' was not present! Struct: " + toString());
    }
    if (KOD_O == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'KOD_O' was not present! Struct: " + toString());
    }
    if (N_OPER == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'N_OPER' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'KOL_USL' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'KOD_TSK' because it's a primitive and you chose the non-beans generator.
    if (NAMCMO == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NAMCMO' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'KOD_DOK' because it's a primitive and you chose the non-beans generator.
    if (SER_DOK == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SER_DOK' was not present! Struct: " + toString());
    }
    if (NOM_DOK == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NOM_DOK' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'VMP' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'DAT_BLVN' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'DAT_ELVN' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'DAMAGE' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'DATA_NS' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DBFPoliclinicStandardSchemeFactory implements SchemeFactory {
    public DBFPoliclinicStandardScheme getScheme() {
      return new DBFPoliclinicStandardScheme();
    }
  }

  private static class DBFPoliclinicStandardScheme extends StandardScheme<DBFPoliclinic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DBFPoliclinic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DAT__VV
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DAT_VV = iprot.readI64();
              struct.setDAT_VVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DAT__PR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DAT_PR = iprot.readI64();
              struct.setDAT_PRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SER__POL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SER_POL = iprot.readString();
              struct.setSER_POLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOM__POL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NOM_POL = iprot.readString();
              struct.setNOM_POLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SNILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SNILS = iprot.readString();
              struct.setSNILSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FAMIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FAMIL = iprot.readString();
              struct.setFAMILIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMYA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.IMYA = iprot.readString();
              struct.setIMYAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OT = iprot.readString();
              struct.setOTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KOD__F
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KOD_F = iprot.readString();
              struct.setKOD_FIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.POL = iprot.readString();
              struct.setPOLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // D__R
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.D_R = iprot.readI64();
              struct.setD_RIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RAION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.RAION = iprot.readI16();
              struct.setRAIONIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // KOD__T
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.KOD_T = iprot.readI16();
              struct.setKOD_TIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NAS__P
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NAS_P = iprot.readString();
              struct.setNAS_PIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.UL = iprot.readString();
              struct.setULIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOM = iprot.readString();
              struct.setDOMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // KV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KV = iprot.readString();
              struct.setKVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // KATEGOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.KATEGOR = iprot.readI32();
              struct.setKATEGORIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MES__R
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MES_R = iprot.readString();
              struct.setMES_RIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // KOD__PR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KOD_PR = iprot.readString();
              struct.setKOD_PRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OTD
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.OTD = iprot.readI16();
              struct.setOTDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // N__KART
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.N_KART = iprot.readString();
              struct.setN_KARTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // KC
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.KC = iprot.readI16();
              struct.setKCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DIA__O
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DIA_O = iprot.readString();
              struct.setDIA_OIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DOP__D
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOP_D = iprot.readString();
              struct.setDOP_DIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DIA__S
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DIA_S = iprot.readString();
              struct.setDIA_SIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DOP__S
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOP_S = iprot.readString();
              struct.setDOP_SIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DIA__S1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DIA_S1 = iprot.readString();
              struct.setDIA_S1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // DOP__S1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOP_S1 = iprot.readString();
              struct.setDOP_S1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // OSL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OSL = iprot.readString();
              struct.setOSLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DOP__OSL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOP_OSL = iprot.readString();
              struct.setDOP_OSLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // KSG__MS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KSG_MS = iprot.readString();
              struct.setKSG_MSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // DL__LEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.DL_LEC = iprot.readI16();
              struct.setDL_LECIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // KOL__POS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.KOL_POS = iprot.readI16();
              struct.setKOL_POSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // POS__D
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.POS_D = iprot.readI16();
              struct.setPOS_DIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // SL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.SL = iprot.readI16();
              struct.setSLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // ISH__LEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ISH_LEC = iprot.readI16();
              struct.setISH_LECIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // PR__NZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.PR_NZ = iprot.readI16();
              struct.setPR_NZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // STOIM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.STOIM = iprot.readDouble();
              struct.setSTOIMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // KOD__VR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KOD_VR = iprot.readString();
              struct.setKOD_VRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // S__VR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.S_VR = iprot.readI16();
              struct.setS_VRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // NOM__SL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NOM_SL = iprot.readString();
              struct.setNOM_SLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // KOD__O
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KOD_O = iprot.readString();
              struct.setKOD_OIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // N__OPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.N_OPER = iprot.readString();
              struct.setN_OPERIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // KOL__USL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.KOL_USL = iprot.readI32();
              struct.setKOL_USLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // KOD__TSK
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.KOD_TSK = iprot.readI16();
              struct.setKOD_TSKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // NAMCMO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NAMCMO = iprot.readString();
              struct.setNAMCMOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // KOD__DOK
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.KOD_DOK = iprot.readI16();
              struct.setKOD_DOKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // SER__DOK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SER_DOK = iprot.readString();
              struct.setSER_DOKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // NOM__DOK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NOM_DOK = iprot.readString();
              struct.setNOM_DOKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // VMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.VMP = iprot.readI16();
              struct.setVMPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // DAT__BLVN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DAT_BLVN = iprot.readI64();
              struct.setDAT_BLVNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // DAT__ELVN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DAT_ELVN = iprot.readI64();
              struct.setDAT_ELVNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // DAMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.DAMAGE = iprot.readBool();
              struct.setDAMAGEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // DATA__NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DATA_NS = iprot.readI64();
              struct.setDATA_NSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDAT_VV()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DAT_VV' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDAT_PR()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DAT_PR' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetD_R()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'D_R' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRAION()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'RAION' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKOD_T()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'KOD_T' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKATEGOR()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'KATEGOR' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOTD()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'OTD' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKC()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'KC' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDL_LEC()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DL_LEC' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKOL_POS()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'KOL_POS' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPOS_D()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'POS_D' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSL()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SL' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetISH_LEC()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ISH_LEC' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPR_NZ()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'PR_NZ' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSTOIM()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'STOIM' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetS_VR()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'S_VR' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKOL_USL()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'KOL_USL' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKOD_TSK()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'KOD_TSK' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKOD_DOK()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'KOD_DOK' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVMP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'VMP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDAT_BLVN()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DAT_BLVN' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDAT_ELVN()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DAT_ELVN' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDAMAGE()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DAMAGE' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDATA_NS()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DATA_NS' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DBFPoliclinic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DAT__VV_FIELD_DESC);
      oprot.writeI64(struct.DAT_VV);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAT__PR_FIELD_DESC);
      oprot.writeI64(struct.DAT_PR);
      oprot.writeFieldEnd();
      if (struct.SER_POL != null) {
        oprot.writeFieldBegin(SER__POL_FIELD_DESC);
        oprot.writeString(struct.SER_POL);
        oprot.writeFieldEnd();
      }
      if (struct.NOM_POL != null) {
        oprot.writeFieldBegin(NOM__POL_FIELD_DESC);
        oprot.writeString(struct.NOM_POL);
        oprot.writeFieldEnd();
      }
      if (struct.SNILS != null) {
        oprot.writeFieldBegin(SNILS_FIELD_DESC);
        oprot.writeString(struct.SNILS);
        oprot.writeFieldEnd();
      }
      if (struct.FAMIL != null) {
        oprot.writeFieldBegin(FAMIL_FIELD_DESC);
        oprot.writeString(struct.FAMIL);
        oprot.writeFieldEnd();
      }
      if (struct.IMYA != null) {
        oprot.writeFieldBegin(IMYA_FIELD_DESC);
        oprot.writeString(struct.IMYA);
        oprot.writeFieldEnd();
      }
      if (struct.OT != null) {
        oprot.writeFieldBegin(OT_FIELD_DESC);
        oprot.writeString(struct.OT);
        oprot.writeFieldEnd();
      }
      if (struct.KOD_F != null) {
        oprot.writeFieldBegin(KOD__F_FIELD_DESC);
        oprot.writeString(struct.KOD_F);
        oprot.writeFieldEnd();
      }
      if (struct.POL != null) {
        oprot.writeFieldBegin(POL_FIELD_DESC);
        oprot.writeString(struct.POL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(D__R_FIELD_DESC);
      oprot.writeI64(struct.D_R);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAION_FIELD_DESC);
      oprot.writeI16(struct.RAION);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KOD__T_FIELD_DESC);
      oprot.writeI16(struct.KOD_T);
      oprot.writeFieldEnd();
      if (struct.NAS_P != null) {
        oprot.writeFieldBegin(NAS__P_FIELD_DESC);
        oprot.writeString(struct.NAS_P);
        oprot.writeFieldEnd();
      }
      if (struct.UL != null) {
        oprot.writeFieldBegin(UL_FIELD_DESC);
        oprot.writeString(struct.UL);
        oprot.writeFieldEnd();
      }
      if (struct.DOM != null) {
        oprot.writeFieldBegin(DOM_FIELD_DESC);
        oprot.writeString(struct.DOM);
        oprot.writeFieldEnd();
      }
      if (struct.KV != null) {
        oprot.writeFieldBegin(KV_FIELD_DESC);
        oprot.writeString(struct.KV);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KATEGOR_FIELD_DESC);
      oprot.writeI32(struct.KATEGOR);
      oprot.writeFieldEnd();
      if (struct.MES_R != null) {
        oprot.writeFieldBegin(MES__R_FIELD_DESC);
        oprot.writeString(struct.MES_R);
        oprot.writeFieldEnd();
      }
      if (struct.KOD_PR != null) {
        oprot.writeFieldBegin(KOD__PR_FIELD_DESC);
        oprot.writeString(struct.KOD_PR);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OTD_FIELD_DESC);
      oprot.writeI16(struct.OTD);
      oprot.writeFieldEnd();
      if (struct.N_KART != null) {
        oprot.writeFieldBegin(N__KART_FIELD_DESC);
        oprot.writeString(struct.N_KART);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KC_FIELD_DESC);
      oprot.writeI16(struct.KC);
      oprot.writeFieldEnd();
      if (struct.DIA_O != null) {
        oprot.writeFieldBegin(DIA__O_FIELD_DESC);
        oprot.writeString(struct.DIA_O);
        oprot.writeFieldEnd();
      }
      if (struct.DOP_D != null) {
        oprot.writeFieldBegin(DOP__D_FIELD_DESC);
        oprot.writeString(struct.DOP_D);
        oprot.writeFieldEnd();
      }
      if (struct.DIA_S != null) {
        oprot.writeFieldBegin(DIA__S_FIELD_DESC);
        oprot.writeString(struct.DIA_S);
        oprot.writeFieldEnd();
      }
      if (struct.DOP_S != null) {
        oprot.writeFieldBegin(DOP__S_FIELD_DESC);
        oprot.writeString(struct.DOP_S);
        oprot.writeFieldEnd();
      }
      if (struct.DIA_S1 != null) {
        oprot.writeFieldBegin(DIA__S1_FIELD_DESC);
        oprot.writeString(struct.DIA_S1);
        oprot.writeFieldEnd();
      }
      if (struct.DOP_S1 != null) {
        oprot.writeFieldBegin(DOP__S1_FIELD_DESC);
        oprot.writeString(struct.DOP_S1);
        oprot.writeFieldEnd();
      }
      if (struct.OSL != null) {
        oprot.writeFieldBegin(OSL_FIELD_DESC);
        oprot.writeString(struct.OSL);
        oprot.writeFieldEnd();
      }
      if (struct.DOP_OSL != null) {
        oprot.writeFieldBegin(DOP__OSL_FIELD_DESC);
        oprot.writeString(struct.DOP_OSL);
        oprot.writeFieldEnd();
      }
      if (struct.KSG_MS != null) {
        oprot.writeFieldBegin(KSG__MS_FIELD_DESC);
        oprot.writeString(struct.KSG_MS);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DL__LEC_FIELD_DESC);
      oprot.writeI16(struct.DL_LEC);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KOL__POS_FIELD_DESC);
      oprot.writeI16(struct.KOL_POS);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS__D_FIELD_DESC);
      oprot.writeI16(struct.POS_D);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SL_FIELD_DESC);
      oprot.writeI16(struct.SL);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISH__LEC_FIELD_DESC);
      oprot.writeI16(struct.ISH_LEC);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PR__NZ_FIELD_DESC);
      oprot.writeI16(struct.PR_NZ);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOIM_FIELD_DESC);
      oprot.writeDouble(struct.STOIM);
      oprot.writeFieldEnd();
      if (struct.KOD_VR != null) {
        oprot.writeFieldBegin(KOD__VR_FIELD_DESC);
        oprot.writeString(struct.KOD_VR);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(S__VR_FIELD_DESC);
      oprot.writeI16(struct.S_VR);
      oprot.writeFieldEnd();
      if (struct.NOM_SL != null) {
        oprot.writeFieldBegin(NOM__SL_FIELD_DESC);
        oprot.writeString(struct.NOM_SL);
        oprot.writeFieldEnd();
      }
      if (struct.KOD_O != null) {
        oprot.writeFieldBegin(KOD__O_FIELD_DESC);
        oprot.writeString(struct.KOD_O);
        oprot.writeFieldEnd();
      }
      if (struct.N_OPER != null) {
        oprot.writeFieldBegin(N__OPER_FIELD_DESC);
        oprot.writeString(struct.N_OPER);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KOL__USL_FIELD_DESC);
      oprot.writeI32(struct.KOL_USL);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KOD__TSK_FIELD_DESC);
      oprot.writeI16(struct.KOD_TSK);
      oprot.writeFieldEnd();
      if (struct.NAMCMO != null) {
        oprot.writeFieldBegin(NAMCMO_FIELD_DESC);
        oprot.writeString(struct.NAMCMO);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KOD__DOK_FIELD_DESC);
      oprot.writeI16(struct.KOD_DOK);
      oprot.writeFieldEnd();
      if (struct.SER_DOK != null) {
        oprot.writeFieldBegin(SER__DOK_FIELD_DESC);
        oprot.writeString(struct.SER_DOK);
        oprot.writeFieldEnd();
      }
      if (struct.NOM_DOK != null) {
        oprot.writeFieldBegin(NOM__DOK_FIELD_DESC);
        oprot.writeString(struct.NOM_DOK);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VMP_FIELD_DESC);
      oprot.writeI16(struct.VMP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAT__BLVN_FIELD_DESC);
      oprot.writeI64(struct.DAT_BLVN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAT__ELVN_FIELD_DESC);
      oprot.writeI64(struct.DAT_ELVN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAMAGE_FIELD_DESC);
      oprot.writeBool(struct.DAMAGE);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA__NS_FIELD_DESC);
      oprot.writeI64(struct.DATA_NS);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DBFPoliclinicTupleSchemeFactory implements SchemeFactory {
    public DBFPoliclinicTupleScheme getScheme() {
      return new DBFPoliclinicTupleScheme();
    }
  }

  private static class DBFPoliclinicTupleScheme extends TupleScheme<DBFPoliclinic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DBFPoliclinic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.DAT_VV);
      oprot.writeI64(struct.DAT_PR);
      oprot.writeString(struct.SER_POL);
      oprot.writeString(struct.NOM_POL);
      oprot.writeString(struct.SNILS);
      oprot.writeString(struct.FAMIL);
      oprot.writeString(struct.IMYA);
      oprot.writeString(struct.OT);
      oprot.writeString(struct.KOD_F);
      oprot.writeString(struct.POL);
      oprot.writeI64(struct.D_R);
      oprot.writeI16(struct.RAION);
      oprot.writeI16(struct.KOD_T);
      oprot.writeString(struct.NAS_P);
      oprot.writeString(struct.UL);
      oprot.writeString(struct.DOM);
      oprot.writeString(struct.KV);
      oprot.writeI32(struct.KATEGOR);
      oprot.writeString(struct.MES_R);
      oprot.writeString(struct.KOD_PR);
      oprot.writeI16(struct.OTD);
      oprot.writeString(struct.N_KART);
      oprot.writeI16(struct.KC);
      oprot.writeString(struct.DIA_O);
      oprot.writeString(struct.DOP_D);
      oprot.writeString(struct.DIA_S);
      oprot.writeString(struct.DOP_S);
      oprot.writeString(struct.DIA_S1);
      oprot.writeString(struct.DOP_S1);
      oprot.writeString(struct.OSL);
      oprot.writeString(struct.DOP_OSL);
      oprot.writeString(struct.KSG_MS);
      oprot.writeI16(struct.DL_LEC);
      oprot.writeI16(struct.KOL_POS);
      oprot.writeI16(struct.POS_D);
      oprot.writeI16(struct.SL);
      oprot.writeI16(struct.ISH_LEC);
      oprot.writeI16(struct.PR_NZ);
      oprot.writeDouble(struct.STOIM);
      oprot.writeString(struct.KOD_VR);
      oprot.writeI16(struct.S_VR);
      oprot.writeString(struct.NOM_SL);
      oprot.writeString(struct.KOD_O);
      oprot.writeString(struct.N_OPER);
      oprot.writeI32(struct.KOL_USL);
      oprot.writeI16(struct.KOD_TSK);
      oprot.writeString(struct.NAMCMO);
      oprot.writeI16(struct.KOD_DOK);
      oprot.writeString(struct.SER_DOK);
      oprot.writeString(struct.NOM_DOK);
      oprot.writeI16(struct.VMP);
      oprot.writeI64(struct.DAT_BLVN);
      oprot.writeI64(struct.DAT_ELVN);
      oprot.writeBool(struct.DAMAGE);
      oprot.writeI64(struct.DATA_NS);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DBFPoliclinic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.DAT_VV = iprot.readI64();
      struct.setDAT_VVIsSet(true);
      struct.DAT_PR = iprot.readI64();
      struct.setDAT_PRIsSet(true);
      struct.SER_POL = iprot.readString();
      struct.setSER_POLIsSet(true);
      struct.NOM_POL = iprot.readString();
      struct.setNOM_POLIsSet(true);
      struct.SNILS = iprot.readString();
      struct.setSNILSIsSet(true);
      struct.FAMIL = iprot.readString();
      struct.setFAMILIsSet(true);
      struct.IMYA = iprot.readString();
      struct.setIMYAIsSet(true);
      struct.OT = iprot.readString();
      struct.setOTIsSet(true);
      struct.KOD_F = iprot.readString();
      struct.setKOD_FIsSet(true);
      struct.POL = iprot.readString();
      struct.setPOLIsSet(true);
      struct.D_R = iprot.readI64();
      struct.setD_RIsSet(true);
      struct.RAION = iprot.readI16();
      struct.setRAIONIsSet(true);
      struct.KOD_T = iprot.readI16();
      struct.setKOD_TIsSet(true);
      struct.NAS_P = iprot.readString();
      struct.setNAS_PIsSet(true);
      struct.UL = iprot.readString();
      struct.setULIsSet(true);
      struct.DOM = iprot.readString();
      struct.setDOMIsSet(true);
      struct.KV = iprot.readString();
      struct.setKVIsSet(true);
      struct.KATEGOR = iprot.readI32();
      struct.setKATEGORIsSet(true);
      struct.MES_R = iprot.readString();
      struct.setMES_RIsSet(true);
      struct.KOD_PR = iprot.readString();
      struct.setKOD_PRIsSet(true);
      struct.OTD = iprot.readI16();
      struct.setOTDIsSet(true);
      struct.N_KART = iprot.readString();
      struct.setN_KARTIsSet(true);
      struct.KC = iprot.readI16();
      struct.setKCIsSet(true);
      struct.DIA_O = iprot.readString();
      struct.setDIA_OIsSet(true);
      struct.DOP_D = iprot.readString();
      struct.setDOP_DIsSet(true);
      struct.DIA_S = iprot.readString();
      struct.setDIA_SIsSet(true);
      struct.DOP_S = iprot.readString();
      struct.setDOP_SIsSet(true);
      struct.DIA_S1 = iprot.readString();
      struct.setDIA_S1IsSet(true);
      struct.DOP_S1 = iprot.readString();
      struct.setDOP_S1IsSet(true);
      struct.OSL = iprot.readString();
      struct.setOSLIsSet(true);
      struct.DOP_OSL = iprot.readString();
      struct.setDOP_OSLIsSet(true);
      struct.KSG_MS = iprot.readString();
      struct.setKSG_MSIsSet(true);
      struct.DL_LEC = iprot.readI16();
      struct.setDL_LECIsSet(true);
      struct.KOL_POS = iprot.readI16();
      struct.setKOL_POSIsSet(true);
      struct.POS_D = iprot.readI16();
      struct.setPOS_DIsSet(true);
      struct.SL = iprot.readI16();
      struct.setSLIsSet(true);
      struct.ISH_LEC = iprot.readI16();
      struct.setISH_LECIsSet(true);
      struct.PR_NZ = iprot.readI16();
      struct.setPR_NZIsSet(true);
      struct.STOIM = iprot.readDouble();
      struct.setSTOIMIsSet(true);
      struct.KOD_VR = iprot.readString();
      struct.setKOD_VRIsSet(true);
      struct.S_VR = iprot.readI16();
      struct.setS_VRIsSet(true);
      struct.NOM_SL = iprot.readString();
      struct.setNOM_SLIsSet(true);
      struct.KOD_O = iprot.readString();
      struct.setKOD_OIsSet(true);
      struct.N_OPER = iprot.readString();
      struct.setN_OPERIsSet(true);
      struct.KOL_USL = iprot.readI32();
      struct.setKOL_USLIsSet(true);
      struct.KOD_TSK = iprot.readI16();
      struct.setKOD_TSKIsSet(true);
      struct.NAMCMO = iprot.readString();
      struct.setNAMCMOIsSet(true);
      struct.KOD_DOK = iprot.readI16();
      struct.setKOD_DOKIsSet(true);
      struct.SER_DOK = iprot.readString();
      struct.setSER_DOKIsSet(true);
      struct.NOM_DOK = iprot.readString();
      struct.setNOM_DOKIsSet(true);
      struct.VMP = iprot.readI16();
      struct.setVMPIsSet(true);
      struct.DAT_BLVN = iprot.readI64();
      struct.setDAT_BLVNIsSet(true);
      struct.DAT_ELVN = iprot.readI64();
      struct.setDAT_ELVNIsSet(true);
      struct.DAMAGE = iprot.readBool();
      struct.setDAMAGEIsSet(true);
      struct.DATA_NS = iprot.readI64();
      struct.setDATA_NSIsSet(true);
    }
  }

}

