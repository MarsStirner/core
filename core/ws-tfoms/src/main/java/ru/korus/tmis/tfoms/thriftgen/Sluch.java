/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * * Sluch
 * * Структура с данными о случае оказания мед помощи
 * * *******
 * * @param IDCASE    Идентификатор выставленной позиции счета
 * * @param USL_OK
 * * @param VIDPOM
 * * @param NPR_MO
 * * @param EXTR
 * * @param FOR_POM
 *        Данные о форме оказания помощи  (Event.order -> rbAppointmentOrder.id -> rbAppointmentOrder.TFOMScode_account)
 *                        Возможные значения:
 *                        1-плановая;
 *                        2-экстренная;
 *                        3-неотложная.
 * * @param LPU
 * * @param LPU_1
 * * @param PODR
 * * @param PROFIL
 * * @param DET
 * * @param NHISTORY
 * * @param DATE_1
 * * @param DATE_2
 * * @param DS0
 * * @param DS1
 * * @param DS2
 * * @param CODE_MES1
 * * @param CODE_MES2
 * * @param RSLT
 * * @param ISHOD
 * * @param PRVS
 * * @param IDDOKT
 * * @param OS_SLUCH
 * * @param IDSP
 * * @param
 * * *******
 */
public class Sluch implements org.apache.thrift.TBase<Sluch, Sluch._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sluch");

  private static final org.apache.thrift.protocol.TField IDCASE_FIELD_DESC = new org.apache.thrift.protocol.TField("IDCASE", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USL__OK_FIELD_DESC = new org.apache.thrift.protocol.TField("USL_OK", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField VIDPOM_FIELD_DESC = new org.apache.thrift.protocol.TField("VIDPOM", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField NPR__MO_FIELD_DESC = new org.apache.thrift.protocol.TField("NPR_MO", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXTR_FIELD_DESC = new org.apache.thrift.protocol.TField("EXTR", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField FOR__POM_FIELD_DESC = new org.apache.thrift.protocol.TField("FOR_POM", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField LPU_FIELD_DESC = new org.apache.thrift.protocol.TField("LPU", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LPU_1_FIELD_DESC = new org.apache.thrift.protocol.TField("LPU_1", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PODR_FIELD_DESC = new org.apache.thrift.protocol.TField("PODR", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROFIL_FIELD_DESC = new org.apache.thrift.protocol.TField("PROFIL", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField DET_FIELD_DESC = new org.apache.thrift.protocol.TField("DET", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField NHISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("NHISTORY", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DATE_1_FIELD_DESC = new org.apache.thrift.protocol.TField("DATE_1", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField DATE_2_FIELD_DESC = new org.apache.thrift.protocol.TField("DATE_2", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField DS0_FIELD_DESC = new org.apache.thrift.protocol.TField("DS0", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DS1_FIELD_DESC = new org.apache.thrift.protocol.TField("DS1", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DS2_FIELD_DESC = new org.apache.thrift.protocol.TField("DS2", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CODE__MES1_FIELD_DESC = new org.apache.thrift.protocol.TField("CODE_MES1", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CODE__MES2_FIELD_DESC = new org.apache.thrift.protocol.TField("CODE_MES2", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField RSLT_FIELD_DESC = new org.apache.thrift.protocol.TField("RSLT", org.apache.thrift.protocol.TType.I16, (short)20);
  private static final org.apache.thrift.protocol.TField ISHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("ISHOD", org.apache.thrift.protocol.TType.I16, (short)21);
  private static final org.apache.thrift.protocol.TField PRVS_FIELD_DESC = new org.apache.thrift.protocol.TField("PRVS", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField IDDOKT_FIELD_DESC = new org.apache.thrift.protocol.TField("IDDOKT", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField OS__SLUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("OS_SLUCH", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField IDSP_FIELD_DESC = new org.apache.thrift.protocol.TField("IDSP", org.apache.thrift.protocol.TType.I16, (short)25);
  private static final org.apache.thrift.protocol.TField PATIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("patient", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField ED__COL_FIELD_DESC = new org.apache.thrift.protocol.TField("ED_COL", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField SUMV_FIELD_DESC = new org.apache.thrift.protocol.TField("SUMV", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField USL_FIELD_DESC = new org.apache.thrift.protocol.TField("USL", org.apache.thrift.protocol.TType.LIST, (short)32);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SluchStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SluchTupleSchemeFactory());
  }

  public int IDCASE; // required
  public short USL_OK; // required
  public short VIDPOM; // required
  public String NPR_MO; // optional
  public short EXTR; // optional
  public short FOR_POM; // required
  public String LPU; // required
  public String LPU_1; // optional
  public String PODR; // optional
  public short PROFIL; // required
  public boolean DET; // optional
  public String NHISTORY; // required
  public long DATE_1; // required
  public long DATE_2; // required
  public String DS0; // optional
  public String DS1; // optional
  public String DS2; // optional
  public String CODE_MES1; // optional
  public String CODE_MES2; // optional
  public short RSLT; // required
  public short ISHOD; // required
  public int PRVS; // required
  public String IDDOKT; // required
  public List<Integer> OS_SLUCH; // optional
  public short IDSP; // required
  public Patient patient; // required
  public double ED_COL; // required
  public double SUMV; // required
  public List<Usl> USL; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDCASE((short)1, "IDCASE"),
    USL__OK((short)2, "USL_OK"),
    VIDPOM((short)3, "VIDPOM"),
    NPR__MO((short)4, "NPR_MO"),
    EXTR((short)5, "EXTR"),
    FOR__POM((short)6, "FOR_POM"),
    LPU((short)7, "LPU"),
    LPU_1((short)8, "LPU_1"),
    PODR((short)9, "PODR"),
    PROFIL((short)10, "PROFIL"),
    DET((short)11, "DET"),
    NHISTORY((short)12, "NHISTORY"),
    DATE_1((short)13, "DATE_1"),
    DATE_2((short)14, "DATE_2"),
    DS0((short)15, "DS0"),
    DS1((short)16, "DS1"),
    DS2((short)17, "DS2"),
    CODE__MES1((short)18, "CODE_MES1"),
    CODE__MES2((short)19, "CODE_MES2"),
    RSLT((short)20, "RSLT"),
    ISHOD((short)21, "ISHOD"),
    PRVS((short)22, "PRVS"),
    IDDOKT((short)23, "IDDOKT"),
    OS__SLUCH((short)24, "OS_SLUCH"),
    IDSP((short)25, "IDSP"),
    PATIENT((short)26, "patient"),
    ED__COL((short)30, "ED_COL"),
    SUMV((short)31, "SUMV"),
    USL((short)32, "USL");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDCASE
          return IDCASE;
        case 2: // USL__OK
          return USL__OK;
        case 3: // VIDPOM
          return VIDPOM;
        case 4: // NPR__MO
          return NPR__MO;
        case 5: // EXTR
          return EXTR;
        case 6: // FOR__POM
          return FOR__POM;
        case 7: // LPU
          return LPU;
        case 8: // LPU_1
          return LPU_1;
        case 9: // PODR
          return PODR;
        case 10: // PROFIL
          return PROFIL;
        case 11: // DET
          return DET;
        case 12: // NHISTORY
          return NHISTORY;
        case 13: // DATE_1
          return DATE_1;
        case 14: // DATE_2
          return DATE_2;
        case 15: // DS0
          return DS0;
        case 16: // DS1
          return DS1;
        case 17: // DS2
          return DS2;
        case 18: // CODE__MES1
          return CODE__MES1;
        case 19: // CODE__MES2
          return CODE__MES2;
        case 20: // RSLT
          return RSLT;
        case 21: // ISHOD
          return ISHOD;
        case 22: // PRVS
          return PRVS;
        case 23: // IDDOKT
          return IDDOKT;
        case 24: // OS__SLUCH
          return OS__SLUCH;
        case 25: // IDSP
          return IDSP;
        case 26: // PATIENT
          return PATIENT;
        case 30: // ED__COL
          return ED__COL;
        case 31: // SUMV
          return SUMV;
        case 32: // USL
          return USL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDCASE_ISSET_ID = 0;
  private static final int __USL_OK_ISSET_ID = 1;
  private static final int __VIDPOM_ISSET_ID = 2;
  private static final int __EXTR_ISSET_ID = 3;
  private static final int __FOR_POM_ISSET_ID = 4;
  private static final int __PROFIL_ISSET_ID = 5;
  private static final int __DET_ISSET_ID = 6;
  private static final int __DATE_1_ISSET_ID = 7;
  private static final int __DATE_2_ISSET_ID = 8;
  private static final int __RSLT_ISSET_ID = 9;
  private static final int __ISHOD_ISSET_ID = 10;
  private static final int __PRVS_ISSET_ID = 11;
  private static final int __IDSP_ISSET_ID = 12;
  private static final int __ED_COL_ISSET_ID = 13;
  private static final int __SUMV_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NPR__MO,_Fields.EXTR,_Fields.LPU_1,_Fields.PODR,_Fields.DET,_Fields.DS0,_Fields.DS1,_Fields.DS2,_Fields.CODE__MES1,_Fields.CODE__MES2,_Fields.OS__SLUCH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDCASE, new org.apache.thrift.meta_data.FieldMetaData("IDCASE", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.USL__OK, new org.apache.thrift.meta_data.FieldMetaData("USL_OK", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.VIDPOM, new org.apache.thrift.meta_data.FieldMetaData("VIDPOM", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.NPR__MO, new org.apache.thrift.meta_data.FieldMetaData("NPR_MO", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTR, new org.apache.thrift.meta_data.FieldMetaData("EXTR", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.FOR__POM, new org.apache.thrift.meta_data.FieldMetaData("FOR_POM", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.LPU, new org.apache.thrift.meta_data.FieldMetaData("LPU", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LPU_1, new org.apache.thrift.meta_data.FieldMetaData("LPU_1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PODR, new org.apache.thrift.meta_data.FieldMetaData("PODR", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFIL, new org.apache.thrift.meta_data.FieldMetaData("PROFIL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.DET, new org.apache.thrift.meta_data.FieldMetaData("DET", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NHISTORY, new org.apache.thrift.meta_data.FieldMetaData("NHISTORY", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_1, new org.apache.thrift.meta_data.FieldMetaData("DATE_1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.DATE_2, new org.apache.thrift.meta_data.FieldMetaData("DATE_2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.DS0, new org.apache.thrift.meta_data.FieldMetaData("DS0", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DS1, new org.apache.thrift.meta_data.FieldMetaData("DS1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DS2, new org.apache.thrift.meta_data.FieldMetaData("DS2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE__MES1, new org.apache.thrift.meta_data.FieldMetaData("CODE_MES1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE__MES2, new org.apache.thrift.meta_data.FieldMetaData("CODE_MES2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RSLT, new org.apache.thrift.meta_data.FieldMetaData("RSLT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.ISHOD, new org.apache.thrift.meta_data.FieldMetaData("ISHOD", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.PRVS, new org.apache.thrift.meta_data.FieldMetaData("PRVS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IDDOKT, new org.apache.thrift.meta_data.FieldMetaData("IDDOKT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS__SLUCH, new org.apache.thrift.meta_data.FieldMetaData("OS_SLUCH", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "int"))));
    tmpMap.put(_Fields.IDSP, new org.apache.thrift.meta_data.FieldMetaData("IDSP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.PATIENT, new org.apache.thrift.meta_data.FieldMetaData("patient", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Patient.class)));
    tmpMap.put(_Fields.ED__COL, new org.apache.thrift.meta_data.FieldMetaData("ED_COL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUMV, new org.apache.thrift.meta_data.FieldMetaData("SUMV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USL, new org.apache.thrift.meta_data.FieldMetaData("USL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Usl.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sluch.class, metaDataMap);
  }

  public Sluch() {
    this.PRVS = -1;

    this.IDDOKT = "";

  }

  public Sluch(
    int IDCASE,
    short USL_OK,
    short VIDPOM,
    short FOR_POM,
    String LPU,
    short PROFIL,
    String NHISTORY,
    long DATE_1,
    long DATE_2,
    short RSLT,
    short ISHOD,
    int PRVS,
    String IDDOKT,
    short IDSP,
    Patient patient,
    double ED_COL,
    double SUMV,
    List<Usl> USL)
  {
    this();
    this.IDCASE = IDCASE;
    setIDCASEIsSet(true);
    this.USL_OK = USL_OK;
    setUSL_OKIsSet(true);
    this.VIDPOM = VIDPOM;
    setVIDPOMIsSet(true);
    this.FOR_POM = FOR_POM;
    setFOR_POMIsSet(true);
    this.LPU = LPU;
    this.PROFIL = PROFIL;
    setPROFILIsSet(true);
    this.NHISTORY = NHISTORY;
    this.DATE_1 = DATE_1;
    setDATE_1IsSet(true);
    this.DATE_2 = DATE_2;
    setDATE_2IsSet(true);
    this.RSLT = RSLT;
    setRSLTIsSet(true);
    this.ISHOD = ISHOD;
    setISHODIsSet(true);
    this.PRVS = PRVS;
    setPRVSIsSet(true);
    this.IDDOKT = IDDOKT;
    this.IDSP = IDSP;
    setIDSPIsSet(true);
    this.patient = patient;
    this.ED_COL = ED_COL;
    setED_COLIsSet(true);
    this.SUMV = SUMV;
    setSUMVIsSet(true);
    this.USL = USL;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sluch(Sluch other) {
    __isset_bitfield = other.__isset_bitfield;
    this.IDCASE = other.IDCASE;
    this.USL_OK = other.USL_OK;
    this.VIDPOM = other.VIDPOM;
    if (other.isSetNPR_MO()) {
      this.NPR_MO = other.NPR_MO;
    }
    this.EXTR = other.EXTR;
    this.FOR_POM = other.FOR_POM;
    if (other.isSetLPU()) {
      this.LPU = other.LPU;
    }
    if (other.isSetLPU_1()) {
      this.LPU_1 = other.LPU_1;
    }
    if (other.isSetPODR()) {
      this.PODR = other.PODR;
    }
    this.PROFIL = other.PROFIL;
    this.DET = other.DET;
    if (other.isSetNHISTORY()) {
      this.NHISTORY = other.NHISTORY;
    }
    this.DATE_1 = other.DATE_1;
    this.DATE_2 = other.DATE_2;
    if (other.isSetDS0()) {
      this.DS0 = other.DS0;
    }
    if (other.isSetDS1()) {
      this.DS1 = other.DS1;
    }
    if (other.isSetDS2()) {
      this.DS2 = other.DS2;
    }
    if (other.isSetCODE_MES1()) {
      this.CODE_MES1 = other.CODE_MES1;
    }
    if (other.isSetCODE_MES2()) {
      this.CODE_MES2 = other.CODE_MES2;
    }
    this.RSLT = other.RSLT;
    this.ISHOD = other.ISHOD;
    this.PRVS = other.PRVS;
    if (other.isSetIDDOKT()) {
      this.IDDOKT = other.IDDOKT;
    }
    if (other.isSetOS_SLUCH()) {
      List<Integer> __this__OS_SLUCH = new ArrayList<Integer>();
      for (Integer other_element : other.OS_SLUCH) {
        __this__OS_SLUCH.add(other_element);
      }
      this.OS_SLUCH = __this__OS_SLUCH;
    }
    this.IDSP = other.IDSP;
    if (other.isSetPatient()) {
      this.patient = new Patient(other.patient);
    }
    this.ED_COL = other.ED_COL;
    this.SUMV = other.SUMV;
    if (other.isSetUSL()) {
      List<Usl> __this__USL = new ArrayList<Usl>();
      for (Usl other_element : other.USL) {
        __this__USL.add(new Usl(other_element));
      }
      this.USL = __this__USL;
    }
  }

  public Sluch deepCopy() {
    return new Sluch(this);
  }

  @Override
  public void clear() {
    setIDCASEIsSet(false);
    this.IDCASE = 0;
    setUSL_OKIsSet(false);
    this.USL_OK = 0;
    setVIDPOMIsSet(false);
    this.VIDPOM = 0;
    this.NPR_MO = null;
    setEXTRIsSet(false);
    this.EXTR = 0;
    setFOR_POMIsSet(false);
    this.FOR_POM = 0;
    this.LPU = null;
    this.LPU_1 = null;
    this.PODR = null;
    setPROFILIsSet(false);
    this.PROFIL = 0;
    setDETIsSet(false);
    this.DET = false;
    this.NHISTORY = null;
    setDATE_1IsSet(false);
    this.DATE_1 = 0;
    setDATE_2IsSet(false);
    this.DATE_2 = 0;
    this.DS0 = null;
    this.DS1 = null;
    this.DS2 = null;
    this.CODE_MES1 = null;
    this.CODE_MES2 = null;
    setRSLTIsSet(false);
    this.RSLT = 0;
    setISHODIsSet(false);
    this.ISHOD = 0;
    this.PRVS = -1;

    this.IDDOKT = "";

    this.OS_SLUCH = null;
    setIDSPIsSet(false);
    this.IDSP = 0;
    this.patient = null;
    setED_COLIsSet(false);
    this.ED_COL = 0.0;
    setSUMVIsSet(false);
    this.SUMV = 0.0;
    this.USL = null;
  }

  public int getIDCASE() {
    return this.IDCASE;
  }

  public Sluch setIDCASE(int IDCASE) {
    this.IDCASE = IDCASE;
    setIDCASEIsSet(true);
    return this;
  }

  public void unsetIDCASE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDCASE_ISSET_ID);
  }

  /** Returns true if field IDCASE is set (has been assigned a value) and false otherwise */
  public boolean isSetIDCASE() {
    return EncodingUtils.testBit(__isset_bitfield, __IDCASE_ISSET_ID);
  }

  public void setIDCASEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDCASE_ISSET_ID, value);
  }

  public short getUSL_OK() {
    return this.USL_OK;
  }

  public Sluch setUSL_OK(short USL_OK) {
    this.USL_OK = USL_OK;
    setUSL_OKIsSet(true);
    return this;
  }

  public void unsetUSL_OK() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USL_OK_ISSET_ID);
  }

  /** Returns true if field USL_OK is set (has been assigned a value) and false otherwise */
  public boolean isSetUSL_OK() {
    return EncodingUtils.testBit(__isset_bitfield, __USL_OK_ISSET_ID);
  }

  public void setUSL_OKIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USL_OK_ISSET_ID, value);
  }

  public short getVIDPOM() {
    return this.VIDPOM;
  }

  public Sluch setVIDPOM(short VIDPOM) {
    this.VIDPOM = VIDPOM;
    setVIDPOMIsSet(true);
    return this;
  }

  public void unsetVIDPOM() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIDPOM_ISSET_ID);
  }

  /** Returns true if field VIDPOM is set (has been assigned a value) and false otherwise */
  public boolean isSetVIDPOM() {
    return EncodingUtils.testBit(__isset_bitfield, __VIDPOM_ISSET_ID);
  }

  public void setVIDPOMIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIDPOM_ISSET_ID, value);
  }

  public String getNPR_MO() {
    return this.NPR_MO;
  }

  public Sluch setNPR_MO(String NPR_MO) {
    this.NPR_MO = NPR_MO;
    return this;
  }

  public void unsetNPR_MO() {
    this.NPR_MO = null;
  }

  /** Returns true if field NPR_MO is set (has been assigned a value) and false otherwise */
  public boolean isSetNPR_MO() {
    return this.NPR_MO != null;
  }

  public void setNPR_MOIsSet(boolean value) {
    if (!value) {
      this.NPR_MO = null;
    }
  }

  public short getEXTR() {
    return this.EXTR;
  }

  public Sluch setEXTR(short EXTR) {
    this.EXTR = EXTR;
    setEXTRIsSet(true);
    return this;
  }

  public void unsetEXTR() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTR_ISSET_ID);
  }

  /** Returns true if field EXTR is set (has been assigned a value) and false otherwise */
  public boolean isSetEXTR() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTR_ISSET_ID);
  }

  public void setEXTRIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTR_ISSET_ID, value);
  }

  public short getFOR_POM() {
    return this.FOR_POM;
  }

  public Sluch setFOR_POM(short FOR_POM) {
    this.FOR_POM = FOR_POM;
    setFOR_POMIsSet(true);
    return this;
  }

  public void unsetFOR_POM() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOR_POM_ISSET_ID);
  }

  /** Returns true if field FOR_POM is set (has been assigned a value) and false otherwise */
  public boolean isSetFOR_POM() {
    return EncodingUtils.testBit(__isset_bitfield, __FOR_POM_ISSET_ID);
  }

  public void setFOR_POMIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOR_POM_ISSET_ID, value);
  }

  public String getLPU() {
    return this.LPU;
  }

  public Sluch setLPU(String LPU) {
    this.LPU = LPU;
    return this;
  }

  public void unsetLPU() {
    this.LPU = null;
  }

  /** Returns true if field LPU is set (has been assigned a value) and false otherwise */
  public boolean isSetLPU() {
    return this.LPU != null;
  }

  public void setLPUIsSet(boolean value) {
    if (!value) {
      this.LPU = null;
    }
  }

  public String getLPU_1() {
    return this.LPU_1;
  }

  public Sluch setLPU_1(String LPU_1) {
    this.LPU_1 = LPU_1;
    return this;
  }

  public void unsetLPU_1() {
    this.LPU_1 = null;
  }

  /** Returns true if field LPU_1 is set (has been assigned a value) and false otherwise */
  public boolean isSetLPU_1() {
    return this.LPU_1 != null;
  }

  public void setLPU_1IsSet(boolean value) {
    if (!value) {
      this.LPU_1 = null;
    }
  }

  public String getPODR() {
    return this.PODR;
  }

  public Sluch setPODR(String PODR) {
    this.PODR = PODR;
    return this;
  }

  public void unsetPODR() {
    this.PODR = null;
  }

  /** Returns true if field PODR is set (has been assigned a value) and false otherwise */
  public boolean isSetPODR() {
    return this.PODR != null;
  }

  public void setPODRIsSet(boolean value) {
    if (!value) {
      this.PODR = null;
    }
  }

  public short getPROFIL() {
    return this.PROFIL;
  }

  public Sluch setPROFIL(short PROFIL) {
    this.PROFIL = PROFIL;
    setPROFILIsSet(true);
    return this;
  }

  public void unsetPROFIL() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFIL_ISSET_ID);
  }

  /** Returns true if field PROFIL is set (has been assigned a value) and false otherwise */
  public boolean isSetPROFIL() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFIL_ISSET_ID);
  }

  public void setPROFILIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFIL_ISSET_ID, value);
  }

  public boolean isDET() {
    return this.DET;
  }

  public Sluch setDET(boolean DET) {
    this.DET = DET;
    setDETIsSet(true);
    return this;
  }

  public void unsetDET() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DET_ISSET_ID);
  }

  /** Returns true if field DET is set (has been assigned a value) and false otherwise */
  public boolean isSetDET() {
    return EncodingUtils.testBit(__isset_bitfield, __DET_ISSET_ID);
  }

  public void setDETIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DET_ISSET_ID, value);
  }

  public String getNHISTORY() {
    return this.NHISTORY;
  }

  public Sluch setNHISTORY(String NHISTORY) {
    this.NHISTORY = NHISTORY;
    return this;
  }

  public void unsetNHISTORY() {
    this.NHISTORY = null;
  }

  /** Returns true if field NHISTORY is set (has been assigned a value) and false otherwise */
  public boolean isSetNHISTORY() {
    return this.NHISTORY != null;
  }

  public void setNHISTORYIsSet(boolean value) {
    if (!value) {
      this.NHISTORY = null;
    }
  }

  public long getDATE_1() {
    return this.DATE_1;
  }

  public Sluch setDATE_1(long DATE_1) {
    this.DATE_1 = DATE_1;
    setDATE_1IsSet(true);
    return this;
  }

  public void unsetDATE_1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_1_ISSET_ID);
  }

  /** Returns true if field DATE_1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDATE_1() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_1_ISSET_ID);
  }

  public void setDATE_1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_1_ISSET_ID, value);
  }

  public long getDATE_2() {
    return this.DATE_2;
  }

  public Sluch setDATE_2(long DATE_2) {
    this.DATE_2 = DATE_2;
    setDATE_2IsSet(true);
    return this;
  }

  public void unsetDATE_2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_2_ISSET_ID);
  }

  /** Returns true if field DATE_2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDATE_2() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_2_ISSET_ID);
  }

  public void setDATE_2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_2_ISSET_ID, value);
  }

  public String getDS0() {
    return this.DS0;
  }

  public Sluch setDS0(String DS0) {
    this.DS0 = DS0;
    return this;
  }

  public void unsetDS0() {
    this.DS0 = null;
  }

  /** Returns true if field DS0 is set (has been assigned a value) and false otherwise */
  public boolean isSetDS0() {
    return this.DS0 != null;
  }

  public void setDS0IsSet(boolean value) {
    if (!value) {
      this.DS0 = null;
    }
  }

  public String getDS1() {
    return this.DS1;
  }

  public Sluch setDS1(String DS1) {
    this.DS1 = DS1;
    return this;
  }

  public void unsetDS1() {
    this.DS1 = null;
  }

  /** Returns true if field DS1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDS1() {
    return this.DS1 != null;
  }

  public void setDS1IsSet(boolean value) {
    if (!value) {
      this.DS1 = null;
    }
  }

  public String getDS2() {
    return this.DS2;
  }

  public Sluch setDS2(String DS2) {
    this.DS2 = DS2;
    return this;
  }

  public void unsetDS2() {
    this.DS2 = null;
  }

  /** Returns true if field DS2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDS2() {
    return this.DS2 != null;
  }

  public void setDS2IsSet(boolean value) {
    if (!value) {
      this.DS2 = null;
    }
  }

  public String getCODE_MES1() {
    return this.CODE_MES1;
  }

  public Sluch setCODE_MES1(String CODE_MES1) {
    this.CODE_MES1 = CODE_MES1;
    return this;
  }

  public void unsetCODE_MES1() {
    this.CODE_MES1 = null;
  }

  /** Returns true if field CODE_MES1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCODE_MES1() {
    return this.CODE_MES1 != null;
  }

  public void setCODE_MES1IsSet(boolean value) {
    if (!value) {
      this.CODE_MES1 = null;
    }
  }

  public String getCODE_MES2() {
    return this.CODE_MES2;
  }

  public Sluch setCODE_MES2(String CODE_MES2) {
    this.CODE_MES2 = CODE_MES2;
    return this;
  }

  public void unsetCODE_MES2() {
    this.CODE_MES2 = null;
  }

  /** Returns true if field CODE_MES2 is set (has been assigned a value) and false otherwise */
  public boolean isSetCODE_MES2() {
    return this.CODE_MES2 != null;
  }

  public void setCODE_MES2IsSet(boolean value) {
    if (!value) {
      this.CODE_MES2 = null;
    }
  }

  public short getRSLT() {
    return this.RSLT;
  }

  public Sluch setRSLT(short RSLT) {
    this.RSLT = RSLT;
    setRSLTIsSet(true);
    return this;
  }

  public void unsetRSLT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RSLT_ISSET_ID);
  }

  /** Returns true if field RSLT is set (has been assigned a value) and false otherwise */
  public boolean isSetRSLT() {
    return EncodingUtils.testBit(__isset_bitfield, __RSLT_ISSET_ID);
  }

  public void setRSLTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RSLT_ISSET_ID, value);
  }

  public short getISHOD() {
    return this.ISHOD;
  }

  public Sluch setISHOD(short ISHOD) {
    this.ISHOD = ISHOD;
    setISHODIsSet(true);
    return this;
  }

  public void unsetISHOD() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHOD_ISSET_ID);
  }

  /** Returns true if field ISHOD is set (has been assigned a value) and false otherwise */
  public boolean isSetISHOD() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHOD_ISSET_ID);
  }

  public void setISHODIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHOD_ISSET_ID, value);
  }

  public int getPRVS() {
    return this.PRVS;
  }

  public Sluch setPRVS(int PRVS) {
    this.PRVS = PRVS;
    setPRVSIsSet(true);
    return this;
  }

  public void unsetPRVS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRVS_ISSET_ID);
  }

  /** Returns true if field PRVS is set (has been assigned a value) and false otherwise */
  public boolean isSetPRVS() {
    return EncodingUtils.testBit(__isset_bitfield, __PRVS_ISSET_ID);
  }

  public void setPRVSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRVS_ISSET_ID, value);
  }

  public String getIDDOKT() {
    return this.IDDOKT;
  }

  public Sluch setIDDOKT(String IDDOKT) {
    this.IDDOKT = IDDOKT;
    return this;
  }

  public void unsetIDDOKT() {
    this.IDDOKT = null;
  }

  /** Returns true if field IDDOKT is set (has been assigned a value) and false otherwise */
  public boolean isSetIDDOKT() {
    return this.IDDOKT != null;
  }

  public void setIDDOKTIsSet(boolean value) {
    if (!value) {
      this.IDDOKT = null;
    }
  }

  public int getOS_SLUCHSize() {
    return (this.OS_SLUCH == null) ? 0 : this.OS_SLUCH.size();
  }

  public java.util.Iterator<Integer> getOS_SLUCHIterator() {
    return (this.OS_SLUCH == null) ? null : this.OS_SLUCH.iterator();
  }

  public void addToOS_SLUCH(int elem) {
    if (this.OS_SLUCH == null) {
      this.OS_SLUCH = new ArrayList<Integer>();
    }
    this.OS_SLUCH.add(elem);
  }

  public List<Integer> getOS_SLUCH() {
    return this.OS_SLUCH;
  }

  public Sluch setOS_SLUCH(List<Integer> OS_SLUCH) {
    this.OS_SLUCH = OS_SLUCH;
    return this;
  }

  public void unsetOS_SLUCH() {
    this.OS_SLUCH = null;
  }

  /** Returns true if field OS_SLUCH is set (has been assigned a value) and false otherwise */
  public boolean isSetOS_SLUCH() {
    return this.OS_SLUCH != null;
  }

  public void setOS_SLUCHIsSet(boolean value) {
    if (!value) {
      this.OS_SLUCH = null;
    }
  }

  public short getIDSP() {
    return this.IDSP;
  }

  public Sluch setIDSP(short IDSP) {
    this.IDSP = IDSP;
    setIDSPIsSet(true);
    return this;
  }

  public void unsetIDSP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDSP_ISSET_ID);
  }

  /** Returns true if field IDSP is set (has been assigned a value) and false otherwise */
  public boolean isSetIDSP() {
    return EncodingUtils.testBit(__isset_bitfield, __IDSP_ISSET_ID);
  }

  public void setIDSPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDSP_ISSET_ID, value);
  }

  public Patient getPatient() {
    return this.patient;
  }

  public Sluch setPatient(Patient patient) {
    this.patient = patient;
    return this;
  }

  public void unsetPatient() {
    this.patient = null;
  }

  /** Returns true if field patient is set (has been assigned a value) and false otherwise */
  public boolean isSetPatient() {
    return this.patient != null;
  }

  public void setPatientIsSet(boolean value) {
    if (!value) {
      this.patient = null;
    }
  }

  public double getED_COL() {
    return this.ED_COL;
  }

  public Sluch setED_COL(double ED_COL) {
    this.ED_COL = ED_COL;
    setED_COLIsSet(true);
    return this;
  }

  public void unsetED_COL() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ED_COL_ISSET_ID);
  }

  /** Returns true if field ED_COL is set (has been assigned a value) and false otherwise */
  public boolean isSetED_COL() {
    return EncodingUtils.testBit(__isset_bitfield, __ED_COL_ISSET_ID);
  }

  public void setED_COLIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ED_COL_ISSET_ID, value);
  }

  public double getSUMV() {
    return this.SUMV;
  }

  public Sluch setSUMV(double SUMV) {
    this.SUMV = SUMV;
    setSUMVIsSet(true);
    return this;
  }

  public void unsetSUMV() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUMV_ISSET_ID);
  }

  /** Returns true if field SUMV is set (has been assigned a value) and false otherwise */
  public boolean isSetSUMV() {
    return EncodingUtils.testBit(__isset_bitfield, __SUMV_ISSET_ID);
  }

  public void setSUMVIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUMV_ISSET_ID, value);
  }

  public int getUSLSize() {
    return (this.USL == null) ? 0 : this.USL.size();
  }

  public java.util.Iterator<Usl> getUSLIterator() {
    return (this.USL == null) ? null : this.USL.iterator();
  }

  public void addToUSL(Usl elem) {
    if (this.USL == null) {
      this.USL = new ArrayList<Usl>();
    }
    this.USL.add(elem);
  }

  public List<Usl> getUSL() {
    return this.USL;
  }

  public Sluch setUSL(List<Usl> USL) {
    this.USL = USL;
    return this;
  }

  public void unsetUSL() {
    this.USL = null;
  }

  /** Returns true if field USL is set (has been assigned a value) and false otherwise */
  public boolean isSetUSL() {
    return this.USL != null;
  }

  public void setUSLIsSet(boolean value) {
    if (!value) {
      this.USL = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDCASE:
      if (value == null) {
        unsetIDCASE();
      } else {
        setIDCASE((Integer)value);
      }
      break;

    case USL__OK:
      if (value == null) {
        unsetUSL_OK();
      } else {
        setUSL_OK((Short)value);
      }
      break;

    case VIDPOM:
      if (value == null) {
        unsetVIDPOM();
      } else {
        setVIDPOM((Short)value);
      }
      break;

    case NPR__MO:
      if (value == null) {
        unsetNPR_MO();
      } else {
        setNPR_MO((String)value);
      }
      break;

    case EXTR:
      if (value == null) {
        unsetEXTR();
      } else {
        setEXTR((Short)value);
      }
      break;

    case FOR__POM:
      if (value == null) {
        unsetFOR_POM();
      } else {
        setFOR_POM((Short)value);
      }
      break;

    case LPU:
      if (value == null) {
        unsetLPU();
      } else {
        setLPU((String)value);
      }
      break;

    case LPU_1:
      if (value == null) {
        unsetLPU_1();
      } else {
        setLPU_1((String)value);
      }
      break;

    case PODR:
      if (value == null) {
        unsetPODR();
      } else {
        setPODR((String)value);
      }
      break;

    case PROFIL:
      if (value == null) {
        unsetPROFIL();
      } else {
        setPROFIL((Short)value);
      }
      break;

    case DET:
      if (value == null) {
        unsetDET();
      } else {
        setDET((Boolean)value);
      }
      break;

    case NHISTORY:
      if (value == null) {
        unsetNHISTORY();
      } else {
        setNHISTORY((String)value);
      }
      break;

    case DATE_1:
      if (value == null) {
        unsetDATE_1();
      } else {
        setDATE_1((Long)value);
      }
      break;

    case DATE_2:
      if (value == null) {
        unsetDATE_2();
      } else {
        setDATE_2((Long)value);
      }
      break;

    case DS0:
      if (value == null) {
        unsetDS0();
      } else {
        setDS0((String)value);
      }
      break;

    case DS1:
      if (value == null) {
        unsetDS1();
      } else {
        setDS1((String)value);
      }
      break;

    case DS2:
      if (value == null) {
        unsetDS2();
      } else {
        setDS2((String)value);
      }
      break;

    case CODE__MES1:
      if (value == null) {
        unsetCODE_MES1();
      } else {
        setCODE_MES1((String)value);
      }
      break;

    case CODE__MES2:
      if (value == null) {
        unsetCODE_MES2();
      } else {
        setCODE_MES2((String)value);
      }
      break;

    case RSLT:
      if (value == null) {
        unsetRSLT();
      } else {
        setRSLT((Short)value);
      }
      break;

    case ISHOD:
      if (value == null) {
        unsetISHOD();
      } else {
        setISHOD((Short)value);
      }
      break;

    case PRVS:
      if (value == null) {
        unsetPRVS();
      } else {
        setPRVS((Integer)value);
      }
      break;

    case IDDOKT:
      if (value == null) {
        unsetIDDOKT();
      } else {
        setIDDOKT((String)value);
      }
      break;

    case OS__SLUCH:
      if (value == null) {
        unsetOS_SLUCH();
      } else {
        setOS_SLUCH((List<Integer>)value);
      }
      break;

    case IDSP:
      if (value == null) {
        unsetIDSP();
      } else {
        setIDSP((Short)value);
      }
      break;

    case PATIENT:
      if (value == null) {
        unsetPatient();
      } else {
        setPatient((Patient)value);
      }
      break;

    case ED__COL:
      if (value == null) {
        unsetED_COL();
      } else {
        setED_COL((Double)value);
      }
      break;

    case SUMV:
      if (value == null) {
        unsetSUMV();
      } else {
        setSUMV((Double)value);
      }
      break;

    case USL:
      if (value == null) {
        unsetUSL();
      } else {
        setUSL((List<Usl>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDCASE:
      return Integer.valueOf(getIDCASE());

    case USL__OK:
      return Short.valueOf(getUSL_OK());

    case VIDPOM:
      return Short.valueOf(getVIDPOM());

    case NPR__MO:
      return getNPR_MO();

    case EXTR:
      return Short.valueOf(getEXTR());

    case FOR__POM:
      return Short.valueOf(getFOR_POM());

    case LPU:
      return getLPU();

    case LPU_1:
      return getLPU_1();

    case PODR:
      return getPODR();

    case PROFIL:
      return Short.valueOf(getPROFIL());

    case DET:
      return Boolean.valueOf(isDET());

    case NHISTORY:
      return getNHISTORY();

    case DATE_1:
      return Long.valueOf(getDATE_1());

    case DATE_2:
      return Long.valueOf(getDATE_2());

    case DS0:
      return getDS0();

    case DS1:
      return getDS1();

    case DS2:
      return getDS2();

    case CODE__MES1:
      return getCODE_MES1();

    case CODE__MES2:
      return getCODE_MES2();

    case RSLT:
      return Short.valueOf(getRSLT());

    case ISHOD:
      return Short.valueOf(getISHOD());

    case PRVS:
      return Integer.valueOf(getPRVS());

    case IDDOKT:
      return getIDDOKT();

    case OS__SLUCH:
      return getOS_SLUCH();

    case IDSP:
      return Short.valueOf(getIDSP());

    case PATIENT:
      return getPatient();

    case ED__COL:
      return Double.valueOf(getED_COL());

    case SUMV:
      return Double.valueOf(getSUMV());

    case USL:
      return getUSL();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDCASE:
      return isSetIDCASE();
    case USL__OK:
      return isSetUSL_OK();
    case VIDPOM:
      return isSetVIDPOM();
    case NPR__MO:
      return isSetNPR_MO();
    case EXTR:
      return isSetEXTR();
    case FOR__POM:
      return isSetFOR_POM();
    case LPU:
      return isSetLPU();
    case LPU_1:
      return isSetLPU_1();
    case PODR:
      return isSetPODR();
    case PROFIL:
      return isSetPROFIL();
    case DET:
      return isSetDET();
    case NHISTORY:
      return isSetNHISTORY();
    case DATE_1:
      return isSetDATE_1();
    case DATE_2:
      return isSetDATE_2();
    case DS0:
      return isSetDS0();
    case DS1:
      return isSetDS1();
    case DS2:
      return isSetDS2();
    case CODE__MES1:
      return isSetCODE_MES1();
    case CODE__MES2:
      return isSetCODE_MES2();
    case RSLT:
      return isSetRSLT();
    case ISHOD:
      return isSetISHOD();
    case PRVS:
      return isSetPRVS();
    case IDDOKT:
      return isSetIDDOKT();
    case OS__SLUCH:
      return isSetOS_SLUCH();
    case IDSP:
      return isSetIDSP();
    case PATIENT:
      return isSetPatient();
    case ED__COL:
      return isSetED_COL();
    case SUMV:
      return isSetSUMV();
    case USL:
      return isSetUSL();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Sluch)
      return this.equals((Sluch)that);
    return false;
  }

  public boolean equals(Sluch that) {
    if (that == null)
      return false;

    boolean this_present_IDCASE = true;
    boolean that_present_IDCASE = true;
    if (this_present_IDCASE || that_present_IDCASE) {
      if (!(this_present_IDCASE && that_present_IDCASE))
        return false;
      if (this.IDCASE != that.IDCASE)
        return false;
    }

    boolean this_present_USL_OK = true;
    boolean that_present_USL_OK = true;
    if (this_present_USL_OK || that_present_USL_OK) {
      if (!(this_present_USL_OK && that_present_USL_OK))
        return false;
      if (this.USL_OK != that.USL_OK)
        return false;
    }

    boolean this_present_VIDPOM = true;
    boolean that_present_VIDPOM = true;
    if (this_present_VIDPOM || that_present_VIDPOM) {
      if (!(this_present_VIDPOM && that_present_VIDPOM))
        return false;
      if (this.VIDPOM != that.VIDPOM)
        return false;
    }

    boolean this_present_NPR_MO = true && this.isSetNPR_MO();
    boolean that_present_NPR_MO = true && that.isSetNPR_MO();
    if (this_present_NPR_MO || that_present_NPR_MO) {
      if (!(this_present_NPR_MO && that_present_NPR_MO))
        return false;
      if (!this.NPR_MO.equals(that.NPR_MO))
        return false;
    }

    boolean this_present_EXTR = true && this.isSetEXTR();
    boolean that_present_EXTR = true && that.isSetEXTR();
    if (this_present_EXTR || that_present_EXTR) {
      if (!(this_present_EXTR && that_present_EXTR))
        return false;
      if (this.EXTR != that.EXTR)
        return false;
    }

    boolean this_present_FOR_POM = true;
    boolean that_present_FOR_POM = true;
    if (this_present_FOR_POM || that_present_FOR_POM) {
      if (!(this_present_FOR_POM && that_present_FOR_POM))
        return false;
      if (this.FOR_POM != that.FOR_POM)
        return false;
    }

    boolean this_present_LPU = true && this.isSetLPU();
    boolean that_present_LPU = true && that.isSetLPU();
    if (this_present_LPU || that_present_LPU) {
      if (!(this_present_LPU && that_present_LPU))
        return false;
      if (!this.LPU.equals(that.LPU))
        return false;
    }

    boolean this_present_LPU_1 = true && this.isSetLPU_1();
    boolean that_present_LPU_1 = true && that.isSetLPU_1();
    if (this_present_LPU_1 || that_present_LPU_1) {
      if (!(this_present_LPU_1 && that_present_LPU_1))
        return false;
      if (!this.LPU_1.equals(that.LPU_1))
        return false;
    }

    boolean this_present_PODR = true && this.isSetPODR();
    boolean that_present_PODR = true && that.isSetPODR();
    if (this_present_PODR || that_present_PODR) {
      if (!(this_present_PODR && that_present_PODR))
        return false;
      if (!this.PODR.equals(that.PODR))
        return false;
    }

    boolean this_present_PROFIL = true;
    boolean that_present_PROFIL = true;
    if (this_present_PROFIL || that_present_PROFIL) {
      if (!(this_present_PROFIL && that_present_PROFIL))
        return false;
      if (this.PROFIL != that.PROFIL)
        return false;
    }

    boolean this_present_DET = true && this.isSetDET();
    boolean that_present_DET = true && that.isSetDET();
    if (this_present_DET || that_present_DET) {
      if (!(this_present_DET && that_present_DET))
        return false;
      if (this.DET != that.DET)
        return false;
    }

    boolean this_present_NHISTORY = true && this.isSetNHISTORY();
    boolean that_present_NHISTORY = true && that.isSetNHISTORY();
    if (this_present_NHISTORY || that_present_NHISTORY) {
      if (!(this_present_NHISTORY && that_present_NHISTORY))
        return false;
      if (!this.NHISTORY.equals(that.NHISTORY))
        return false;
    }

    boolean this_present_DATE_1 = true;
    boolean that_present_DATE_1 = true;
    if (this_present_DATE_1 || that_present_DATE_1) {
      if (!(this_present_DATE_1 && that_present_DATE_1))
        return false;
      if (this.DATE_1 != that.DATE_1)
        return false;
    }

    boolean this_present_DATE_2 = true;
    boolean that_present_DATE_2 = true;
    if (this_present_DATE_2 || that_present_DATE_2) {
      if (!(this_present_DATE_2 && that_present_DATE_2))
        return false;
      if (this.DATE_2 != that.DATE_2)
        return false;
    }

    boolean this_present_DS0 = true && this.isSetDS0();
    boolean that_present_DS0 = true && that.isSetDS0();
    if (this_present_DS0 || that_present_DS0) {
      if (!(this_present_DS0 && that_present_DS0))
        return false;
      if (!this.DS0.equals(that.DS0))
        return false;
    }

    boolean this_present_DS1 = true && this.isSetDS1();
    boolean that_present_DS1 = true && that.isSetDS1();
    if (this_present_DS1 || that_present_DS1) {
      if (!(this_present_DS1 && that_present_DS1))
        return false;
      if (!this.DS1.equals(that.DS1))
        return false;
    }

    boolean this_present_DS2 = true && this.isSetDS2();
    boolean that_present_DS2 = true && that.isSetDS2();
    if (this_present_DS2 || that_present_DS2) {
      if (!(this_present_DS2 && that_present_DS2))
        return false;
      if (!this.DS2.equals(that.DS2))
        return false;
    }

    boolean this_present_CODE_MES1 = true && this.isSetCODE_MES1();
    boolean that_present_CODE_MES1 = true && that.isSetCODE_MES1();
    if (this_present_CODE_MES1 || that_present_CODE_MES1) {
      if (!(this_present_CODE_MES1 && that_present_CODE_MES1))
        return false;
      if (!this.CODE_MES1.equals(that.CODE_MES1))
        return false;
    }

    boolean this_present_CODE_MES2 = true && this.isSetCODE_MES2();
    boolean that_present_CODE_MES2 = true && that.isSetCODE_MES2();
    if (this_present_CODE_MES2 || that_present_CODE_MES2) {
      if (!(this_present_CODE_MES2 && that_present_CODE_MES2))
        return false;
      if (!this.CODE_MES2.equals(that.CODE_MES2))
        return false;
    }

    boolean this_present_RSLT = true;
    boolean that_present_RSLT = true;
    if (this_present_RSLT || that_present_RSLT) {
      if (!(this_present_RSLT && that_present_RSLT))
        return false;
      if (this.RSLT != that.RSLT)
        return false;
    }

    boolean this_present_ISHOD = true;
    boolean that_present_ISHOD = true;
    if (this_present_ISHOD || that_present_ISHOD) {
      if (!(this_present_ISHOD && that_present_ISHOD))
        return false;
      if (this.ISHOD != that.ISHOD)
        return false;
    }

    boolean this_present_PRVS = true;
    boolean that_present_PRVS = true;
    if (this_present_PRVS || that_present_PRVS) {
      if (!(this_present_PRVS && that_present_PRVS))
        return false;
      if (this.PRVS != that.PRVS)
        return false;
    }

    boolean this_present_IDDOKT = true && this.isSetIDDOKT();
    boolean that_present_IDDOKT = true && that.isSetIDDOKT();
    if (this_present_IDDOKT || that_present_IDDOKT) {
      if (!(this_present_IDDOKT && that_present_IDDOKT))
        return false;
      if (!this.IDDOKT.equals(that.IDDOKT))
        return false;
    }

    boolean this_present_OS_SLUCH = true && this.isSetOS_SLUCH();
    boolean that_present_OS_SLUCH = true && that.isSetOS_SLUCH();
    if (this_present_OS_SLUCH || that_present_OS_SLUCH) {
      if (!(this_present_OS_SLUCH && that_present_OS_SLUCH))
        return false;
      if (!this.OS_SLUCH.equals(that.OS_SLUCH))
        return false;
    }

    boolean this_present_IDSP = true;
    boolean that_present_IDSP = true;
    if (this_present_IDSP || that_present_IDSP) {
      if (!(this_present_IDSP && that_present_IDSP))
        return false;
      if (this.IDSP != that.IDSP)
        return false;
    }

    boolean this_present_patient = true && this.isSetPatient();
    boolean that_present_patient = true && that.isSetPatient();
    if (this_present_patient || that_present_patient) {
      if (!(this_present_patient && that_present_patient))
        return false;
      if (!this.patient.equals(that.patient))
        return false;
    }

    boolean this_present_ED_COL = true;
    boolean that_present_ED_COL = true;
    if (this_present_ED_COL || that_present_ED_COL) {
      if (!(this_present_ED_COL && that_present_ED_COL))
        return false;
      if (this.ED_COL != that.ED_COL)
        return false;
    }

    boolean this_present_SUMV = true;
    boolean that_present_SUMV = true;
    if (this_present_SUMV || that_present_SUMV) {
      if (!(this_present_SUMV && that_present_SUMV))
        return false;
      if (this.SUMV != that.SUMV)
        return false;
    }

    boolean this_present_USL = true && this.isSetUSL();
    boolean that_present_USL = true && that.isSetUSL();
    if (this_present_USL || that_present_USL) {
      if (!(this_present_USL && that_present_USL))
        return false;
      if (!this.USL.equals(that.USL))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Sluch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Sluch typedOther = (Sluch)other;

    lastComparison = Boolean.valueOf(isSetIDCASE()).compareTo(typedOther.isSetIDCASE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDCASE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDCASE, typedOther.IDCASE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUSL_OK()).compareTo(typedOther.isSetUSL_OK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUSL_OK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.USL_OK, typedOther.USL_OK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVIDPOM()).compareTo(typedOther.isSetVIDPOM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVIDPOM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VIDPOM, typedOther.VIDPOM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNPR_MO()).compareTo(typedOther.isSetNPR_MO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNPR_MO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NPR_MO, typedOther.NPR_MO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEXTR()).compareTo(typedOther.isSetEXTR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEXTR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EXTR, typedOther.EXTR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFOR_POM()).compareTo(typedOther.isSetFOR_POM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFOR_POM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FOR_POM, typedOther.FOR_POM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLPU()).compareTo(typedOther.isSetLPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LPU, typedOther.LPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLPU_1()).compareTo(typedOther.isSetLPU_1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLPU_1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LPU_1, typedOther.LPU_1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPODR()).compareTo(typedOther.isSetPODR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPODR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PODR, typedOther.PODR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPROFIL()).compareTo(typedOther.isSetPROFIL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPROFIL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PROFIL, typedOther.PROFIL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDET()).compareTo(typedOther.isSetDET());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDET()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DET, typedOther.DET);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNHISTORY()).compareTo(typedOther.isSetNHISTORY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNHISTORY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NHISTORY, typedOther.NHISTORY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDATE_1()).compareTo(typedOther.isSetDATE_1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDATE_1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DATE_1, typedOther.DATE_1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDATE_2()).compareTo(typedOther.isSetDATE_2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDATE_2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DATE_2, typedOther.DATE_2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDS0()).compareTo(typedOther.isSetDS0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDS0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DS0, typedOther.DS0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDS1()).compareTo(typedOther.isSetDS1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDS1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DS1, typedOther.DS1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDS2()).compareTo(typedOther.isSetDS2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDS2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DS2, typedOther.DS2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCODE_MES1()).compareTo(typedOther.isSetCODE_MES1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCODE_MES1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CODE_MES1, typedOther.CODE_MES1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCODE_MES2()).compareTo(typedOther.isSetCODE_MES2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCODE_MES2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CODE_MES2, typedOther.CODE_MES2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRSLT()).compareTo(typedOther.isSetRSLT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRSLT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RSLT, typedOther.RSLT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetISHOD()).compareTo(typedOther.isSetISHOD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetISHOD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ISHOD, typedOther.ISHOD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPRVS()).compareTo(typedOther.isSetPRVS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRVS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRVS, typedOther.PRVS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDDOKT()).compareTo(typedOther.isSetIDDOKT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDDOKT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDDOKT, typedOther.IDDOKT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOS_SLUCH()).compareTo(typedOther.isSetOS_SLUCH());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOS_SLUCH()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OS_SLUCH, typedOther.OS_SLUCH);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDSP()).compareTo(typedOther.isSetIDSP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDSP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDSP, typedOther.IDSP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatient()).compareTo(typedOther.isSetPatient());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatient()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patient, typedOther.patient);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetED_COL()).compareTo(typedOther.isSetED_COL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetED_COL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ED_COL, typedOther.ED_COL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSUMV()).compareTo(typedOther.isSetSUMV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSUMV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SUMV, typedOther.SUMV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUSL()).compareTo(typedOther.isSetUSL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUSL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.USL, typedOther.USL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Sluch(");
    boolean first = true;

    sb.append("IDCASE:");
    sb.append(this.IDCASE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("USL_OK:");
    sb.append(this.USL_OK);
    first = false;
    if (!first) sb.append(", ");
    sb.append("VIDPOM:");
    sb.append(this.VIDPOM);
    first = false;
    if (isSetNPR_MO()) {
      if (!first) sb.append(", ");
      sb.append("NPR_MO:");
      if (this.NPR_MO == null) {
        sb.append("null");
      } else {
        sb.append(this.NPR_MO);
      }
      first = false;
    }
    if (isSetEXTR()) {
      if (!first) sb.append(", ");
      sb.append("EXTR:");
      sb.append(this.EXTR);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("FOR_POM:");
    sb.append(this.FOR_POM);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LPU:");
    if (this.LPU == null) {
      sb.append("null");
    } else {
      sb.append(this.LPU);
    }
    first = false;
    if (isSetLPU_1()) {
      if (!first) sb.append(", ");
      sb.append("LPU_1:");
      if (this.LPU_1 == null) {
        sb.append("null");
      } else {
        sb.append(this.LPU_1);
      }
      first = false;
    }
    if (isSetPODR()) {
      if (!first) sb.append(", ");
      sb.append("PODR:");
      if (this.PODR == null) {
        sb.append("null");
      } else {
        sb.append(this.PODR);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("PROFIL:");
    sb.append(this.PROFIL);
    first = false;
    if (isSetDET()) {
      if (!first) sb.append(", ");
      sb.append("DET:");
      sb.append(this.DET);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("NHISTORY:");
    if (this.NHISTORY == null) {
      sb.append("null");
    } else {
      sb.append(this.NHISTORY);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DATE_1:");
    sb.append(this.DATE_1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DATE_2:");
    sb.append(this.DATE_2);
    first = false;
    if (isSetDS0()) {
      if (!first) sb.append(", ");
      sb.append("DS0:");
      if (this.DS0 == null) {
        sb.append("null");
      } else {
        sb.append(this.DS0);
      }
      first = false;
    }
    if (isSetDS1()) {
      if (!first) sb.append(", ");
      sb.append("DS1:");
      if (this.DS1 == null) {
        sb.append("null");
      } else {
        sb.append(this.DS1);
      }
      first = false;
    }
    if (isSetDS2()) {
      if (!first) sb.append(", ");
      sb.append("DS2:");
      if (this.DS2 == null) {
        sb.append("null");
      } else {
        sb.append(this.DS2);
      }
      first = false;
    }
    if (isSetCODE_MES1()) {
      if (!first) sb.append(", ");
      sb.append("CODE_MES1:");
      if (this.CODE_MES1 == null) {
        sb.append("null");
      } else {
        sb.append(this.CODE_MES1);
      }
      first = false;
    }
    if (isSetCODE_MES2()) {
      if (!first) sb.append(", ");
      sb.append("CODE_MES2:");
      if (this.CODE_MES2 == null) {
        sb.append("null");
      } else {
        sb.append(this.CODE_MES2);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("RSLT:");
    sb.append(this.RSLT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ISHOD:");
    sb.append(this.ISHOD);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PRVS:");
    sb.append(this.PRVS);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IDDOKT:");
    if (this.IDDOKT == null) {
      sb.append("null");
    } else {
      sb.append(this.IDDOKT);
    }
    first = false;
    if (isSetOS_SLUCH()) {
      if (!first) sb.append(", ");
      sb.append("OS_SLUCH:");
      if (this.OS_SLUCH == null) {
        sb.append("null");
      } else {
        sb.append(this.OS_SLUCH);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("IDSP:");
    sb.append(this.IDSP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("patient:");
    if (this.patient == null) {
      sb.append("null");
    } else {
      sb.append(this.patient);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ED_COL:");
    sb.append(this.ED_COL);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SUMV:");
    sb.append(this.SUMV);
    first = false;
    if (!first) sb.append(", ");
    sb.append("USL:");
    if (this.USL == null) {
      sb.append("null");
    } else {
      sb.append(this.USL);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'IDCASE' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'USL_OK' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'VIDPOM' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'FOR_POM' because it's a primitive and you chose the non-beans generator.
    if (LPU == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'LPU' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'PROFIL' because it's a primitive and you chose the non-beans generator.
    if (NHISTORY == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NHISTORY' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'DATE_1' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'DATE_2' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'RSLT' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ISHOD' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'PRVS' because it's a primitive and you chose the non-beans generator.
    if (IDDOKT == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'IDDOKT' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'IDSP' because it's a primitive and you chose the non-beans generator.
    if (patient == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'patient' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ED_COL' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'SUMV' because it's a primitive and you chose the non-beans generator.
    if (USL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'USL' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (patient != null) {
      patient.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SluchStandardSchemeFactory implements SchemeFactory {
    public SluchStandardScheme getScheme() {
      return new SluchStandardScheme();
    }
  }

  private static class SluchStandardScheme extends StandardScheme<Sluch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Sluch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDCASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IDCASE = iprot.readI32();
              struct.setIDCASEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USL__OK
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.USL_OK = iprot.readI16();
              struct.setUSL_OKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VIDPOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.VIDPOM = iprot.readI16();
              struct.setVIDPOMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NPR__MO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NPR_MO = iprot.readString();
              struct.setNPR_MOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.EXTR = iprot.readI16();
              struct.setEXTRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FOR__POM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.FOR_POM = iprot.readI16();
              struct.setFOR_POMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LPU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LPU = iprot.readString();
              struct.setLPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LPU_1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LPU_1 = iprot.readString();
              struct.setLPU_1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PODR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PODR = iprot.readString();
              struct.setPODRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROFIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.PROFIL = iprot.readI16();
              struct.setPROFILIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.DET = iprot.readBool();
              struct.setDETIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NHISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NHISTORY = iprot.readString();
              struct.setNHISTORYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATE_1
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DATE_1 = iprot.readI64();
              struct.setDATE_1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DATE_2
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DATE_2 = iprot.readI64();
              struct.setDATE_2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DS0
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DS0 = iprot.readString();
              struct.setDS0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DS1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DS1 = iprot.readString();
              struct.setDS1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DS2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DS2 = iprot.readString();
              struct.setDS2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CODE__MES1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CODE_MES1 = iprot.readString();
              struct.setCODE_MES1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CODE__MES2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CODE_MES2 = iprot.readString();
              struct.setCODE_MES2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RSLT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.RSLT = iprot.readI16();
              struct.setRSLTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ISHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ISHOD = iprot.readI16();
              struct.setISHODIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRVS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PRVS = iprot.readI32();
              struct.setPRVSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IDDOKT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.IDDOKT = iprot.readString();
              struct.setIDDOKTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // OS__SLUCH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.OS_SLUCH = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2; // required
                  _elem2 = iprot.readI32();
                  struct.OS_SLUCH.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setOS_SLUCHIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IDSP
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.IDSP = iprot.readI16();
              struct.setIDSPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PATIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.patient = new Patient();
              struct.patient.read(iprot);
              struct.setPatientIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ED__COL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ED_COL = iprot.readDouble();
              struct.setED_COLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // SUMV
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SUMV = iprot.readDouble();
              struct.setSUMVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // USL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.USL = new ArrayList<Usl>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  Usl _elem5; // required
                  _elem5 = new Usl();
                  _elem5.read(iprot);
                  struct.USL.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setUSLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIDCASE()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'IDCASE' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUSL_OK()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'USL_OK' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVIDPOM()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'VIDPOM' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFOR_POM()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'FOR_POM' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPROFIL()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'PROFIL' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDATE_1()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DATE_1' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDATE_2()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DATE_2' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRSLT()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'RSLT' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetISHOD()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ISHOD' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPRVS()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'PRVS' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIDSP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'IDSP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetED_COL()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ED_COL' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSUMV()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SUMV' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Sluch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IDCASE_FIELD_DESC);
      oprot.writeI32(struct.IDCASE);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USL__OK_FIELD_DESC);
      oprot.writeI16(struct.USL_OK);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIDPOM_FIELD_DESC);
      oprot.writeI16(struct.VIDPOM);
      oprot.writeFieldEnd();
      if (struct.NPR_MO != null) {
        if (struct.isSetNPR_MO()) {
          oprot.writeFieldBegin(NPR__MO_FIELD_DESC);
          oprot.writeString(struct.NPR_MO);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEXTR()) {
        oprot.writeFieldBegin(EXTR_FIELD_DESC);
        oprot.writeI16(struct.EXTR);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FOR__POM_FIELD_DESC);
      oprot.writeI16(struct.FOR_POM);
      oprot.writeFieldEnd();
      if (struct.LPU != null) {
        oprot.writeFieldBegin(LPU_FIELD_DESC);
        oprot.writeString(struct.LPU);
        oprot.writeFieldEnd();
      }
      if (struct.LPU_1 != null) {
        if (struct.isSetLPU_1()) {
          oprot.writeFieldBegin(LPU_1_FIELD_DESC);
          oprot.writeString(struct.LPU_1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.PODR != null) {
        if (struct.isSetPODR()) {
          oprot.writeFieldBegin(PODR_FIELD_DESC);
          oprot.writeString(struct.PODR);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(PROFIL_FIELD_DESC);
      oprot.writeI16(struct.PROFIL);
      oprot.writeFieldEnd();
      if (struct.isSetDET()) {
        oprot.writeFieldBegin(DET_FIELD_DESC);
        oprot.writeBool(struct.DET);
        oprot.writeFieldEnd();
      }
      if (struct.NHISTORY != null) {
        oprot.writeFieldBegin(NHISTORY_FIELD_DESC);
        oprot.writeString(struct.NHISTORY);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_1_FIELD_DESC);
      oprot.writeI64(struct.DATE_1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATE_2_FIELD_DESC);
      oprot.writeI64(struct.DATE_2);
      oprot.writeFieldEnd();
      if (struct.DS0 != null) {
        if (struct.isSetDS0()) {
          oprot.writeFieldBegin(DS0_FIELD_DESC);
          oprot.writeString(struct.DS0);
          oprot.writeFieldEnd();
        }
      }
      if (struct.DS1 != null) {
        if (struct.isSetDS1()) {
          oprot.writeFieldBegin(DS1_FIELD_DESC);
          oprot.writeString(struct.DS1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.DS2 != null) {
        if (struct.isSetDS2()) {
          oprot.writeFieldBegin(DS2_FIELD_DESC);
          oprot.writeString(struct.DS2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.CODE_MES1 != null) {
        if (struct.isSetCODE_MES1()) {
          oprot.writeFieldBegin(CODE__MES1_FIELD_DESC);
          oprot.writeString(struct.CODE_MES1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.CODE_MES2 != null) {
        if (struct.isSetCODE_MES2()) {
          oprot.writeFieldBegin(CODE__MES2_FIELD_DESC);
          oprot.writeString(struct.CODE_MES2);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(RSLT_FIELD_DESC);
      oprot.writeI16(struct.RSLT);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISHOD_FIELD_DESC);
      oprot.writeI16(struct.ISHOD);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRVS_FIELD_DESC);
      oprot.writeI32(struct.PRVS);
      oprot.writeFieldEnd();
      if (struct.IDDOKT != null) {
        oprot.writeFieldBegin(IDDOKT_FIELD_DESC);
        oprot.writeString(struct.IDDOKT);
        oprot.writeFieldEnd();
      }
      if (struct.OS_SLUCH != null) {
        if (struct.isSetOS_SLUCH()) {
          oprot.writeFieldBegin(OS__SLUCH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.OS_SLUCH.size()));
            for (int _iter6 : struct.OS_SLUCH)
            {
              oprot.writeI32(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IDSP_FIELD_DESC);
      oprot.writeI16(struct.IDSP);
      oprot.writeFieldEnd();
      if (struct.patient != null) {
        oprot.writeFieldBegin(PATIENT_FIELD_DESC);
        struct.patient.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ED__COL_FIELD_DESC);
      oprot.writeDouble(struct.ED_COL);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUMV_FIELD_DESC);
      oprot.writeDouble(struct.SUMV);
      oprot.writeFieldEnd();
      if (struct.USL != null) {
        oprot.writeFieldBegin(USL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.USL.size()));
          for (Usl _iter7 : struct.USL)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SluchTupleSchemeFactory implements SchemeFactory {
    public SluchTupleScheme getScheme() {
      return new SluchTupleScheme();
    }
  }

  private static class SluchTupleScheme extends TupleScheme<Sluch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Sluch struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.IDCASE);
      oprot.writeI16(struct.USL_OK);
      oprot.writeI16(struct.VIDPOM);
      oprot.writeI16(struct.FOR_POM);
      oprot.writeString(struct.LPU);
      oprot.writeI16(struct.PROFIL);
      oprot.writeString(struct.NHISTORY);
      oprot.writeI64(struct.DATE_1);
      oprot.writeI64(struct.DATE_2);
      oprot.writeI16(struct.RSLT);
      oprot.writeI16(struct.ISHOD);
      oprot.writeI32(struct.PRVS);
      oprot.writeString(struct.IDDOKT);
      oprot.writeI16(struct.IDSP);
      struct.patient.write(oprot);
      oprot.writeDouble(struct.ED_COL);
      oprot.writeDouble(struct.SUMV);
      {
        oprot.writeI32(struct.USL.size());
        for (Usl _iter8 : struct.USL)
        {
          _iter8.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetNPR_MO()) {
        optionals.set(0);
      }
      if (struct.isSetEXTR()) {
        optionals.set(1);
      }
      if (struct.isSetLPU_1()) {
        optionals.set(2);
      }
      if (struct.isSetPODR()) {
        optionals.set(3);
      }
      if (struct.isSetDET()) {
        optionals.set(4);
      }
      if (struct.isSetDS0()) {
        optionals.set(5);
      }
      if (struct.isSetDS1()) {
        optionals.set(6);
      }
      if (struct.isSetDS2()) {
        optionals.set(7);
      }
      if (struct.isSetCODE_MES1()) {
        optionals.set(8);
      }
      if (struct.isSetCODE_MES2()) {
        optionals.set(9);
      }
      if (struct.isSetOS_SLUCH()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetNPR_MO()) {
        oprot.writeString(struct.NPR_MO);
      }
      if (struct.isSetEXTR()) {
        oprot.writeI16(struct.EXTR);
      }
      if (struct.isSetLPU_1()) {
        oprot.writeString(struct.LPU_1);
      }
      if (struct.isSetPODR()) {
        oprot.writeString(struct.PODR);
      }
      if (struct.isSetDET()) {
        oprot.writeBool(struct.DET);
      }
      if (struct.isSetDS0()) {
        oprot.writeString(struct.DS0);
      }
      if (struct.isSetDS1()) {
        oprot.writeString(struct.DS1);
      }
      if (struct.isSetDS2()) {
        oprot.writeString(struct.DS2);
      }
      if (struct.isSetCODE_MES1()) {
        oprot.writeString(struct.CODE_MES1);
      }
      if (struct.isSetCODE_MES2()) {
        oprot.writeString(struct.CODE_MES2);
      }
      if (struct.isSetOS_SLUCH()) {
        {
          oprot.writeI32(struct.OS_SLUCH.size());
          for (int _iter9 : struct.OS_SLUCH)
          {
            oprot.writeI32(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Sluch struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.IDCASE = iprot.readI32();
      struct.setIDCASEIsSet(true);
      struct.USL_OK = iprot.readI16();
      struct.setUSL_OKIsSet(true);
      struct.VIDPOM = iprot.readI16();
      struct.setVIDPOMIsSet(true);
      struct.FOR_POM = iprot.readI16();
      struct.setFOR_POMIsSet(true);
      struct.LPU = iprot.readString();
      struct.setLPUIsSet(true);
      struct.PROFIL = iprot.readI16();
      struct.setPROFILIsSet(true);
      struct.NHISTORY = iprot.readString();
      struct.setNHISTORYIsSet(true);
      struct.DATE_1 = iprot.readI64();
      struct.setDATE_1IsSet(true);
      struct.DATE_2 = iprot.readI64();
      struct.setDATE_2IsSet(true);
      struct.RSLT = iprot.readI16();
      struct.setRSLTIsSet(true);
      struct.ISHOD = iprot.readI16();
      struct.setISHODIsSet(true);
      struct.PRVS = iprot.readI32();
      struct.setPRVSIsSet(true);
      struct.IDDOKT = iprot.readString();
      struct.setIDDOKTIsSet(true);
      struct.IDSP = iprot.readI16();
      struct.setIDSPIsSet(true);
      struct.patient = new Patient();
      struct.patient.read(iprot);
      struct.setPatientIsSet(true);
      struct.ED_COL = iprot.readDouble();
      struct.setED_COLIsSet(true);
      struct.SUMV = iprot.readDouble();
      struct.setSUMVIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.USL = new ArrayList<Usl>(_list10.size);
        for (int _i11 = 0; _i11 < _list10.size; ++_i11)
        {
          Usl _elem12; // required
          _elem12 = new Usl();
          _elem12.read(iprot);
          struct.USL.add(_elem12);
        }
      }
      struct.setUSLIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.NPR_MO = iprot.readString();
        struct.setNPR_MOIsSet(true);
      }
      if (incoming.get(1)) {
        struct.EXTR = iprot.readI16();
        struct.setEXTRIsSet(true);
      }
      if (incoming.get(2)) {
        struct.LPU_1 = iprot.readString();
        struct.setLPU_1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.PODR = iprot.readString();
        struct.setPODRIsSet(true);
      }
      if (incoming.get(4)) {
        struct.DET = iprot.readBool();
        struct.setDETIsSet(true);
      }
      if (incoming.get(5)) {
        struct.DS0 = iprot.readString();
        struct.setDS0IsSet(true);
      }
      if (incoming.get(6)) {
        struct.DS1 = iprot.readString();
        struct.setDS1IsSet(true);
      }
      if (incoming.get(7)) {
        struct.DS2 = iprot.readString();
        struct.setDS2IsSet(true);
      }
      if (incoming.get(8)) {
        struct.CODE_MES1 = iprot.readString();
        struct.setCODE_MES1IsSet(true);
      }
      if (incoming.get(9)) {
        struct.CODE_MES2 = iprot.readString();
        struct.setCODE_MES2IsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.OS_SLUCH = new ArrayList<Integer>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            int _elem15; // required
            _elem15 = iprot.readI32();
            struct.OS_SLUCH.add(_elem15);
          }
        }
        struct.setOS_SLUCHIsSet(true);
      }
    }
  }

}

