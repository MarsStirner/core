/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tariff.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TARIFFService {

  public interface Iface {

    public List<Result> updateTariffs(List<Tariff> tariffs, int contract_id) throws InvalidArgumentException, SQLException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void updateTariffs(List<Tariff> tariffs, int contract_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateTariffs_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Result> updateTariffs(List<Tariff> tariffs, int contract_id) throws InvalidArgumentException, SQLException, org.apache.thrift.TException
    {
      send_updateTariffs(tariffs, contract_id);
      return recv_updateTariffs();
    }

    public void send_updateTariffs(List<Tariff> tariffs, int contract_id) throws org.apache.thrift.TException
    {
      updateTariffs_args args = new updateTariffs_args();
      args.setTariffs(tariffs);
      args.setContract_id(contract_id);
      sendBase("updateTariffs", args);
    }

    public List<Result> recv_updateTariffs() throws InvalidArgumentException, SQLException, org.apache.thrift.TException
    {
      updateTariffs_result result = new updateTariffs_result();
      receiveBase(result, "updateTariffs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.argExc != null) {
        throw result.argExc;
      }
      if (result.sqlExc != null) {
        throw result.sqlExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTariffs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void updateTariffs(List<Tariff> tariffs, int contract_id, org.apache.thrift.async.AsyncMethodCallback<updateTariffs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTariffs_call method_call = new updateTariffs_call(tariffs, contract_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTariffs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Tariff> tariffs;
      private int contract_id;
      public updateTariffs_call(List<Tariff> tariffs, int contract_id, org.apache.thrift.async.AsyncMethodCallback<updateTariffs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tariffs = tariffs;
        this.contract_id = contract_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTariffs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTariffs_args args = new updateTariffs_args();
        args.setTariffs(tariffs);
        args.setContract_id(contract_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Result> getResult() throws InvalidArgumentException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTariffs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("updateTariffs", new updateTariffs());
      return processMap;
    }

    public static class updateTariffs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTariffs_args> {
      public updateTariffs() {
        super("updateTariffs");
      }

      public updateTariffs_args getEmptyArgsInstance() {
        return new updateTariffs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTariffs_result getResult(I iface, updateTariffs_args args) throws org.apache.thrift.TException {
        updateTariffs_result result = new updateTariffs_result();
        try {
          result.success = iface.updateTariffs(args.tariffs, args.contract_id);
        } catch (InvalidArgumentException argExc) {
          result.argExc = argExc;
        } catch (SQLException sqlExc) {
          result.sqlExc = sqlExc;
        }
        return result;
      }
    }

  }

  public static class updateTariffs_args implements org.apache.thrift.TBase<updateTariffs_args, updateTariffs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTariffs_args");

    private static final org.apache.thrift.protocol.TField TARIFFS_FIELD_DESC = new org.apache.thrift.protocol.TField("tariffs", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contract_id", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTariffs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTariffs_argsTupleSchemeFactory());
    }

    public List<Tariff> tariffs; // required
    public int contract_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TARIFFS((short)1, "tariffs"),
      CONTRACT_ID((short)2, "contract_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TARIFFS
            return TARIFFS;
          case 2: // CONTRACT_ID
            return CONTRACT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONTRACT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TARIFFS, new org.apache.thrift.meta_data.FieldMetaData("tariffs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tariff.class))));
      tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contract_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTariffs_args.class, metaDataMap);
    }

    public updateTariffs_args() {
    }

    public updateTariffs_args(
      List<Tariff> tariffs,
      int contract_id)
    {
      this();
      this.tariffs = tariffs;
      this.contract_id = contract_id;
      setContract_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTariffs_args(updateTariffs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTariffs()) {
        List<Tariff> __this__tariffs = new ArrayList<Tariff>();
        for (Tariff other_element : other.tariffs) {
          __this__tariffs.add(new Tariff(other_element));
        }
        this.tariffs = __this__tariffs;
      }
      this.contract_id = other.contract_id;
    }

    public updateTariffs_args deepCopy() {
      return new updateTariffs_args(this);
    }

    @Override
    public void clear() {
      this.tariffs = null;
      setContract_idIsSet(false);
      this.contract_id = 0;
    }

    public int getTariffsSize() {
      return (this.tariffs == null) ? 0 : this.tariffs.size();
    }

    public java.util.Iterator<Tariff> getTariffsIterator() {
      return (this.tariffs == null) ? null : this.tariffs.iterator();
    }

    public void addToTariffs(Tariff elem) {
      if (this.tariffs == null) {
        this.tariffs = new ArrayList<Tariff>();
      }
      this.tariffs.add(elem);
    }

    public List<Tariff> getTariffs() {
      return this.tariffs;
    }

    public updateTariffs_args setTariffs(List<Tariff> tariffs) {
      this.tariffs = tariffs;
      return this;
    }

    public void unsetTariffs() {
      this.tariffs = null;
    }

    /** Returns true if field tariffs is set (has been assigned a value) and false otherwise */
    public boolean isSetTariffs() {
      return this.tariffs != null;
    }

    public void setTariffsIsSet(boolean value) {
      if (!value) {
        this.tariffs = null;
      }
    }

    public int getContract_id() {
      return this.contract_id;
    }

    public updateTariffs_args setContract_id(int contract_id) {
      this.contract_id = contract_id;
      setContract_idIsSet(true);
      return this;
    }

    public void unsetContract_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACT_ID_ISSET_ID);
    }

    /** Returns true if field contract_id is set (has been assigned a value) and false otherwise */
    public boolean isSetContract_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CONTRACT_ID_ISSET_ID);
    }

    public void setContract_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACT_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TARIFFS:
        if (value == null) {
          unsetTariffs();
        } else {
          setTariffs((List<Tariff>)value);
        }
        break;

      case CONTRACT_ID:
        if (value == null) {
          unsetContract_id();
        } else {
          setContract_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TARIFFS:
        return getTariffs();

      case CONTRACT_ID:
        return Integer.valueOf(getContract_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TARIFFS:
        return isSetTariffs();
      case CONTRACT_ID:
        return isSetContract_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTariffs_args)
        return this.equals((updateTariffs_args)that);
      return false;
    }

    public boolean equals(updateTariffs_args that) {
      if (that == null)
        return false;

      boolean this_present_tariffs = true && this.isSetTariffs();
      boolean that_present_tariffs = true && that.isSetTariffs();
      if (this_present_tariffs || that_present_tariffs) {
        if (!(this_present_tariffs && that_present_tariffs))
          return false;
        if (!this.tariffs.equals(that.tariffs))
          return false;
      }

      boolean this_present_contract_id = true;
      boolean that_present_contract_id = true;
      if (this_present_contract_id || that_present_contract_id) {
        if (!(this_present_contract_id && that_present_contract_id))
          return false;
        if (this.contract_id != that.contract_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTariffs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTariffs_args typedOther = (updateTariffs_args)other;

      lastComparison = Boolean.valueOf(isSetTariffs()).compareTo(typedOther.isSetTariffs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTariffs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tariffs, typedOther.tariffs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContract_id()).compareTo(typedOther.isSetContract_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContract_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contract_id, typedOther.contract_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTariffs_args(");
      boolean first = true;

      sb.append("tariffs:");
      if (this.tariffs == null) {
        sb.append("null");
      } else {
        sb.append(this.tariffs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contract_id:");
      sb.append(this.contract_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTariffs_argsStandardSchemeFactory implements SchemeFactory {
      public updateTariffs_argsStandardScheme getScheme() {
        return new updateTariffs_argsStandardScheme();
      }
    }

    private static class updateTariffs_argsStandardScheme extends StandardScheme<updateTariffs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTariffs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TARIFFS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.tariffs = new ArrayList<Tariff>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Tariff _elem2; // required
                    _elem2 = new Tariff();
                    _elem2.read(iprot);
                    struct.tariffs.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setTariffsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRACT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.contract_id = iprot.readI32();
                struct.setContract_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTariffs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tariffs != null) {
          oprot.writeFieldBegin(TARIFFS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tariffs.size()));
            for (Tariff _iter3 : struct.tariffs)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.contract_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTariffs_argsTupleSchemeFactory implements SchemeFactory {
      public updateTariffs_argsTupleScheme getScheme() {
        return new updateTariffs_argsTupleScheme();
      }
    }

    private static class updateTariffs_argsTupleScheme extends TupleScheme<updateTariffs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTariffs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTariffs()) {
          optionals.set(0);
        }
        if (struct.isSetContract_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTariffs()) {
          {
            oprot.writeI32(struct.tariffs.size());
            for (Tariff _iter4 : struct.tariffs)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetContract_id()) {
          oprot.writeI32(struct.contract_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTariffs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.tariffs = new ArrayList<Tariff>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Tariff _elem7; // required
              _elem7 = new Tariff();
              _elem7.read(iprot);
              struct.tariffs.add(_elem7);
            }
          }
          struct.setTariffsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contract_id = iprot.readI32();
          struct.setContract_idIsSet(true);
        }
      }
    }

  }

  public static class updateTariffs_result implements org.apache.thrift.TBase<updateTariffs_result, updateTariffs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTariffs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("argExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SQL_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlExc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTariffs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTariffs_resultTupleSchemeFactory());
    }

    public List<Result> success; // required
    public InvalidArgumentException argExc; // required
    public SQLException sqlExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG_EXC((short)1, "argExc"),
      SQL_EXC((short)2, "sqlExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG_EXC
            return ARG_EXC;
          case 2: // SQL_EXC
            return SQL_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class))));
      tmpMap.put(_Fields.ARG_EXC, new org.apache.thrift.meta_data.FieldMetaData("argExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SQL_EXC, new org.apache.thrift.meta_data.FieldMetaData("sqlExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTariffs_result.class, metaDataMap);
    }

    public updateTariffs_result() {
    }

    public updateTariffs_result(
      List<Result> success,
      InvalidArgumentException argExc,
      SQLException sqlExc)
    {
      this();
      this.success = success;
      this.argExc = argExc;
      this.sqlExc = sqlExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTariffs_result(updateTariffs_result other) {
      if (other.isSetSuccess()) {
        List<Result> __this__success = new ArrayList<Result>();
        for (Result other_element : other.success) {
          __this__success.add(new Result(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetArgExc()) {
        this.argExc = new InvalidArgumentException(other.argExc);
      }
      if (other.isSetSqlExc()) {
        this.sqlExc = new SQLException(other.sqlExc);
      }
    }

    public updateTariffs_result deepCopy() {
      return new updateTariffs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.argExc = null;
      this.sqlExc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Result> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Result elem) {
      if (this.success == null) {
        this.success = new ArrayList<Result>();
      }
      this.success.add(elem);
    }

    public List<Result> getSuccess() {
      return this.success;
    }

    public updateTariffs_result setSuccess(List<Result> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidArgumentException getArgExc() {
      return this.argExc;
    }

    public updateTariffs_result setArgExc(InvalidArgumentException argExc) {
      this.argExc = argExc;
      return this;
    }

    public void unsetArgExc() {
      this.argExc = null;
    }

    /** Returns true if field argExc is set (has been assigned a value) and false otherwise */
    public boolean isSetArgExc() {
      return this.argExc != null;
    }

    public void setArgExcIsSet(boolean value) {
      if (!value) {
        this.argExc = null;
      }
    }

    public SQLException getSqlExc() {
      return this.sqlExc;
    }

    public updateTariffs_result setSqlExc(SQLException sqlExc) {
      this.sqlExc = sqlExc;
      return this;
    }

    public void unsetSqlExc() {
      this.sqlExc = null;
    }

    /** Returns true if field sqlExc is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlExc() {
      return this.sqlExc != null;
    }

    public void setSqlExcIsSet(boolean value) {
      if (!value) {
        this.sqlExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Result>)value);
        }
        break;

      case ARG_EXC:
        if (value == null) {
          unsetArgExc();
        } else {
          setArgExc((InvalidArgumentException)value);
        }
        break;

      case SQL_EXC:
        if (value == null) {
          unsetSqlExc();
        } else {
          setSqlExc((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ARG_EXC:
        return getArgExc();

      case SQL_EXC:
        return getSqlExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG_EXC:
        return isSetArgExc();
      case SQL_EXC:
        return isSetSqlExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTariffs_result)
        return this.equals((updateTariffs_result)that);
      return false;
    }

    public boolean equals(updateTariffs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_argExc = true && this.isSetArgExc();
      boolean that_present_argExc = true && that.isSetArgExc();
      if (this_present_argExc || that_present_argExc) {
        if (!(this_present_argExc && that_present_argExc))
          return false;
        if (!this.argExc.equals(that.argExc))
          return false;
      }

      boolean this_present_sqlExc = true && this.isSetSqlExc();
      boolean that_present_sqlExc = true && that.isSetSqlExc();
      if (this_present_sqlExc || that_present_sqlExc) {
        if (!(this_present_sqlExc && that_present_sqlExc))
          return false;
        if (!this.sqlExc.equals(that.sqlExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTariffs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTariffs_result typedOther = (updateTariffs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgExc()).compareTo(typedOther.isSetArgExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argExc, typedOther.argExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSqlExc()).compareTo(typedOther.isSetSqlExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlExc, typedOther.sqlExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTariffs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("argExc:");
      if (this.argExc == null) {
        sb.append("null");
      } else {
        sb.append(this.argExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sqlExc:");
      if (this.sqlExc == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTariffs_resultStandardSchemeFactory implements SchemeFactory {
      public updateTariffs_resultStandardScheme getScheme() {
        return new updateTariffs_resultStandardScheme();
      }
    }

    private static class updateTariffs_resultStandardScheme extends StandardScheme<updateTariffs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTariffs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Result>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Result _elem10; // required
                    _elem10 = new Result();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.argExc = new InvalidArgumentException();
                struct.argExc.read(iprot);
                struct.setArgExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SQL_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlExc = new SQLException();
                struct.sqlExc.read(iprot);
                struct.setSqlExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTariffs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Result _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.argExc != null) {
          oprot.writeFieldBegin(ARG_EXC_FIELD_DESC);
          struct.argExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sqlExc != null) {
          oprot.writeFieldBegin(SQL_EXC_FIELD_DESC);
          struct.sqlExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTariffs_resultTupleSchemeFactory implements SchemeFactory {
      public updateTariffs_resultTupleScheme getScheme() {
        return new updateTariffs_resultTupleScheme();
      }
    }

    private static class updateTariffs_resultTupleScheme extends TupleScheme<updateTariffs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTariffs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArgExc()) {
          optionals.set(1);
        }
        if (struct.isSetSqlExc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Result _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetArgExc()) {
          struct.argExc.write(oprot);
        }
        if (struct.isSetSqlExc()) {
          struct.sqlExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTariffs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Result>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Result _elem15; // required
              _elem15 = new Result();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.argExc = new InvalidArgumentException();
          struct.argExc.read(iprot);
          struct.setArgExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sqlExc = new SQLException();
          struct.sqlExc.read(iprot);
          struct.setSqlExcIsSet(true);
        }
      }
    }

  }

}
