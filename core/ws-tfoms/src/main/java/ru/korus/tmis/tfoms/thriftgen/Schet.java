/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Schet implements org.apache.thrift.TBase<Schet, Schet._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Schet");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("CODE", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField CODE__MO_FIELD_DESC = new org.apache.thrift.protocol.TField("CODE_MO", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("YEAR", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("MONTH", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField NSCHET_FIELD_DESC = new org.apache.thrift.protocol.TField("NSCHET", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DSCHET_FIELD_DESC = new org.apache.thrift.protocol.TField("DSCHET", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PLAT_FIELD_DESC = new org.apache.thrift.protocol.TField("PLAT", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SUMMAV_FIELD_DESC = new org.apache.thrift.protocol.TField("SUMMAV", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField COMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("COMENTS", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SUMMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("SUMMAP", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SANK__MEK_FIELD_DESC = new org.apache.thrift.protocol.TField("SANK_MEK", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField SANK__MEE_FIELD_DESC = new org.apache.thrift.protocol.TField("SANK_MEE", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField SANK__EKMP_FIELD_DESC = new org.apache.thrift.protocol.TField("SANK_EKMP", org.apache.thrift.protocol.TType.DOUBLE, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SchetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SchetTupleSchemeFactory());
  }

  public short CODE; // required
  public String CODE_MO; // required
  public short YEAR; // required
  public short MONTH; // required
  public String NSCHET; // required
  public long DSCHET; // required
  public String PLAT; // optional
  public double SUMMAV; // required
  public String COMENTS; // optional
  public double SUMMAP; // optional
  public double SANK_MEK; // optional
  public double SANK_MEE; // optional
  public double SANK_EKMP; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "CODE"),
    CODE__MO((short)2, "CODE_MO"),
    YEAR((short)3, "YEAR"),
    MONTH((short)4, "MONTH"),
    NSCHET((short)5, "NSCHET"),
    DSCHET((short)6, "DSCHET"),
    PLAT((short)7, "PLAT"),
    SUMMAV((short)8, "SUMMAV"),
    COMENTS((short)9, "COMENTS"),
    SUMMAP((short)10, "SUMMAP"),
    SANK__MEK((short)11, "SANK_MEK"),
    SANK__MEE((short)12, "SANK_MEE"),
    SANK__EKMP((short)13, "SANK_EKMP");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // CODE__MO
          return CODE__MO;
        case 3: // YEAR
          return YEAR;
        case 4: // MONTH
          return MONTH;
        case 5: // NSCHET
          return NSCHET;
        case 6: // DSCHET
          return DSCHET;
        case 7: // PLAT
          return PLAT;
        case 8: // SUMMAV
          return SUMMAV;
        case 9: // COMENTS
          return COMENTS;
        case 10: // SUMMAP
          return SUMMAP;
        case 11: // SANK__MEK
          return SANK__MEK;
        case 12: // SANK__MEE
          return SANK__MEE;
        case 13: // SANK__EKMP
          return SANK__EKMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CODE_ISSET_ID = 0;
  private static final int __YEAR_ISSET_ID = 1;
  private static final int __MONTH_ISSET_ID = 2;
  private static final int __DSCHET_ISSET_ID = 3;
  private static final int __SUMMAV_ISSET_ID = 4;
  private static final int __SUMMAP_ISSET_ID = 5;
  private static final int __SANK_MEK_ISSET_ID = 6;
  private static final int __SANK_MEE_ISSET_ID = 7;
  private static final int __SANK_EKMP_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PLAT,_Fields.COMENTS,_Fields.SUMMAP,_Fields.SANK__MEK,_Fields.SANK__MEE,_Fields.SANK__EKMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("CODE", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.CODE__MO, new org.apache.thrift.meta_data.FieldMetaData("CODE_MO", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("YEAR", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("MONTH", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.NSCHET, new org.apache.thrift.meta_data.FieldMetaData("NSCHET", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DSCHET, new org.apache.thrift.meta_data.FieldMetaData("DSCHET", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.PLAT, new org.apache.thrift.meta_data.FieldMetaData("PLAT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUMMAV, new org.apache.thrift.meta_data.FieldMetaData("SUMMAV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMENTS, new org.apache.thrift.meta_data.FieldMetaData("COMENTS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUMMAP, new org.apache.thrift.meta_data.FieldMetaData("SUMMAP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SANK__MEK, new org.apache.thrift.meta_data.FieldMetaData("SANK_MEK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SANK__MEE, new org.apache.thrift.meta_data.FieldMetaData("SANK_MEE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SANK__EKMP, new org.apache.thrift.meta_data.FieldMetaData("SANK_EKMP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Schet.class, metaDataMap);
  }

  public Schet() {
  }

  public Schet(
    short CODE,
    String CODE_MO,
    short YEAR,
    short MONTH,
    String NSCHET,
    long DSCHET,
    double SUMMAV)
  {
    this();
    this.CODE = CODE;
    setCODEIsSet(true);
    this.CODE_MO = CODE_MO;
    this.YEAR = YEAR;
    setYEARIsSet(true);
    this.MONTH = MONTH;
    setMONTHIsSet(true);
    this.NSCHET = NSCHET;
    this.DSCHET = DSCHET;
    setDSCHETIsSet(true);
    this.SUMMAV = SUMMAV;
    setSUMMAVIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Schet(Schet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.CODE = other.CODE;
    if (other.isSetCODE_MO()) {
      this.CODE_MO = other.CODE_MO;
    }
    this.YEAR = other.YEAR;
    this.MONTH = other.MONTH;
    if (other.isSetNSCHET()) {
      this.NSCHET = other.NSCHET;
    }
    this.DSCHET = other.DSCHET;
    if (other.isSetPLAT()) {
      this.PLAT = other.PLAT;
    }
    this.SUMMAV = other.SUMMAV;
    if (other.isSetCOMENTS()) {
      this.COMENTS = other.COMENTS;
    }
    this.SUMMAP = other.SUMMAP;
    this.SANK_MEK = other.SANK_MEK;
    this.SANK_MEE = other.SANK_MEE;
    this.SANK_EKMP = other.SANK_EKMP;
  }

  public Schet deepCopy() {
    return new Schet(this);
  }

  @Override
  public void clear() {
    setCODEIsSet(false);
    this.CODE = 0;
    this.CODE_MO = null;
    setYEARIsSet(false);
    this.YEAR = 0;
    setMONTHIsSet(false);
    this.MONTH = 0;
    this.NSCHET = null;
    setDSCHETIsSet(false);
    this.DSCHET = 0;
    this.PLAT = null;
    setSUMMAVIsSet(false);
    this.SUMMAV = 0.0;
    this.COMENTS = null;
    setSUMMAPIsSet(false);
    this.SUMMAP = 0.0;
    setSANK_MEKIsSet(false);
    this.SANK_MEK = 0.0;
    setSANK_MEEIsSet(false);
    this.SANK_MEE = 0.0;
    setSANK_EKMPIsSet(false);
    this.SANK_EKMP = 0.0;
  }

  public short getCODE() {
    return this.CODE;
  }

  public Schet setCODE(short CODE) {
    this.CODE = CODE;
    setCODEIsSet(true);
    return this;
  }

  public void unsetCODE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  /** Returns true if field CODE is set (has been assigned a value) and false otherwise */
  public boolean isSetCODE() {
    return EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  public void setCODEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
  }

  public String getCODE_MO() {
    return this.CODE_MO;
  }

  public Schet setCODE_MO(String CODE_MO) {
    this.CODE_MO = CODE_MO;
    return this;
  }

  public void unsetCODE_MO() {
    this.CODE_MO = null;
  }

  /** Returns true if field CODE_MO is set (has been assigned a value) and false otherwise */
  public boolean isSetCODE_MO() {
    return this.CODE_MO != null;
  }

  public void setCODE_MOIsSet(boolean value) {
    if (!value) {
      this.CODE_MO = null;
    }
  }

  public short getYEAR() {
    return this.YEAR;
  }

  public Schet setYEAR(short YEAR) {
    this.YEAR = YEAR;
    setYEARIsSet(true);
    return this;
  }

  public void unsetYEAR() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field YEAR is set (has been assigned a value) and false otherwise */
  public boolean isSetYEAR() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void setYEARIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  public short getMONTH() {
    return this.MONTH;
  }

  public Schet setMONTH(short MONTH) {
    this.MONTH = MONTH;
    setMONTHIsSet(true);
    return this;
  }

  public void unsetMONTH() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  /** Returns true if field MONTH is set (has been assigned a value) and false otherwise */
  public boolean isSetMONTH() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  public void setMONTHIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH_ISSET_ID, value);
  }

  public String getNSCHET() {
    return this.NSCHET;
  }

  public Schet setNSCHET(String NSCHET) {
    this.NSCHET = NSCHET;
    return this;
  }

  public void unsetNSCHET() {
    this.NSCHET = null;
  }

  /** Returns true if field NSCHET is set (has been assigned a value) and false otherwise */
  public boolean isSetNSCHET() {
    return this.NSCHET != null;
  }

  public void setNSCHETIsSet(boolean value) {
    if (!value) {
      this.NSCHET = null;
    }
  }

  public long getDSCHET() {
    return this.DSCHET;
  }

  public Schet setDSCHET(long DSCHET) {
    this.DSCHET = DSCHET;
    setDSCHETIsSet(true);
    return this;
  }

  public void unsetDSCHET() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSCHET_ISSET_ID);
  }

  /** Returns true if field DSCHET is set (has been assigned a value) and false otherwise */
  public boolean isSetDSCHET() {
    return EncodingUtils.testBit(__isset_bitfield, __DSCHET_ISSET_ID);
  }

  public void setDSCHETIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSCHET_ISSET_ID, value);
  }

  public String getPLAT() {
    return this.PLAT;
  }

  public Schet setPLAT(String PLAT) {
    this.PLAT = PLAT;
    return this;
  }

  public void unsetPLAT() {
    this.PLAT = null;
  }

  /** Returns true if field PLAT is set (has been assigned a value) and false otherwise */
  public boolean isSetPLAT() {
    return this.PLAT != null;
  }

  public void setPLATIsSet(boolean value) {
    if (!value) {
      this.PLAT = null;
    }
  }

  public double getSUMMAV() {
    return this.SUMMAV;
  }

  public Schet setSUMMAV(double SUMMAV) {
    this.SUMMAV = SUMMAV;
    setSUMMAVIsSet(true);
    return this;
  }

  public void unsetSUMMAV() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUMMAV_ISSET_ID);
  }

  /** Returns true if field SUMMAV is set (has been assigned a value) and false otherwise */
  public boolean isSetSUMMAV() {
    return EncodingUtils.testBit(__isset_bitfield, __SUMMAV_ISSET_ID);
  }

  public void setSUMMAVIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUMMAV_ISSET_ID, value);
  }

  public String getCOMENTS() {
    return this.COMENTS;
  }

  public Schet setCOMENTS(String COMENTS) {
    this.COMENTS = COMENTS;
    return this;
  }

  public void unsetCOMENTS() {
    this.COMENTS = null;
  }

  /** Returns true if field COMENTS is set (has been assigned a value) and false otherwise */
  public boolean isSetCOMENTS() {
    return this.COMENTS != null;
  }

  public void setCOMENTSIsSet(boolean value) {
    if (!value) {
      this.COMENTS = null;
    }
  }

  public double getSUMMAP() {
    return this.SUMMAP;
  }

  public Schet setSUMMAP(double SUMMAP) {
    this.SUMMAP = SUMMAP;
    setSUMMAPIsSet(true);
    return this;
  }

  public void unsetSUMMAP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUMMAP_ISSET_ID);
  }

  /** Returns true if field SUMMAP is set (has been assigned a value) and false otherwise */
  public boolean isSetSUMMAP() {
    return EncodingUtils.testBit(__isset_bitfield, __SUMMAP_ISSET_ID);
  }

  public void setSUMMAPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUMMAP_ISSET_ID, value);
  }

  public double getSANK_MEK() {
    return this.SANK_MEK;
  }

  public Schet setSANK_MEK(double SANK_MEK) {
    this.SANK_MEK = SANK_MEK;
    setSANK_MEKIsSet(true);
    return this;
  }

  public void unsetSANK_MEK() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SANK_MEK_ISSET_ID);
  }

  /** Returns true if field SANK_MEK is set (has been assigned a value) and false otherwise */
  public boolean isSetSANK_MEK() {
    return EncodingUtils.testBit(__isset_bitfield, __SANK_MEK_ISSET_ID);
  }

  public void setSANK_MEKIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SANK_MEK_ISSET_ID, value);
  }

  public double getSANK_MEE() {
    return this.SANK_MEE;
  }

  public Schet setSANK_MEE(double SANK_MEE) {
    this.SANK_MEE = SANK_MEE;
    setSANK_MEEIsSet(true);
    return this;
  }

  public void unsetSANK_MEE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SANK_MEE_ISSET_ID);
  }

  /** Returns true if field SANK_MEE is set (has been assigned a value) and false otherwise */
  public boolean isSetSANK_MEE() {
    return EncodingUtils.testBit(__isset_bitfield, __SANK_MEE_ISSET_ID);
  }

  public void setSANK_MEEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SANK_MEE_ISSET_ID, value);
  }

  public double getSANK_EKMP() {
    return this.SANK_EKMP;
  }

  public Schet setSANK_EKMP(double SANK_EKMP) {
    this.SANK_EKMP = SANK_EKMP;
    setSANK_EKMPIsSet(true);
    return this;
  }

  public void unsetSANK_EKMP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SANK_EKMP_ISSET_ID);
  }

  /** Returns true if field SANK_EKMP is set (has been assigned a value) and false otherwise */
  public boolean isSetSANK_EKMP() {
    return EncodingUtils.testBit(__isset_bitfield, __SANK_EKMP_ISSET_ID);
  }

  public void setSANK_EKMPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SANK_EKMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCODE();
      } else {
        setCODE((Short)value);
      }
      break;

    case CODE__MO:
      if (value == null) {
        unsetCODE_MO();
      } else {
        setCODE_MO((String)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYEAR();
      } else {
        setYEAR((Short)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMONTH();
      } else {
        setMONTH((Short)value);
      }
      break;

    case NSCHET:
      if (value == null) {
        unsetNSCHET();
      } else {
        setNSCHET((String)value);
      }
      break;

    case DSCHET:
      if (value == null) {
        unsetDSCHET();
      } else {
        setDSCHET((Long)value);
      }
      break;

    case PLAT:
      if (value == null) {
        unsetPLAT();
      } else {
        setPLAT((String)value);
      }
      break;

    case SUMMAV:
      if (value == null) {
        unsetSUMMAV();
      } else {
        setSUMMAV((Double)value);
      }
      break;

    case COMENTS:
      if (value == null) {
        unsetCOMENTS();
      } else {
        setCOMENTS((String)value);
      }
      break;

    case SUMMAP:
      if (value == null) {
        unsetSUMMAP();
      } else {
        setSUMMAP((Double)value);
      }
      break;

    case SANK__MEK:
      if (value == null) {
        unsetSANK_MEK();
      } else {
        setSANK_MEK((Double)value);
      }
      break;

    case SANK__MEE:
      if (value == null) {
        unsetSANK_MEE();
      } else {
        setSANK_MEE((Double)value);
      }
      break;

    case SANK__EKMP:
      if (value == null) {
        unsetSANK_EKMP();
      } else {
        setSANK_EKMP((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return Short.valueOf(getCODE());

    case CODE__MO:
      return getCODE_MO();

    case YEAR:
      return Short.valueOf(getYEAR());

    case MONTH:
      return Short.valueOf(getMONTH());

    case NSCHET:
      return getNSCHET();

    case DSCHET:
      return Long.valueOf(getDSCHET());

    case PLAT:
      return getPLAT();

    case SUMMAV:
      return Double.valueOf(getSUMMAV());

    case COMENTS:
      return getCOMENTS();

    case SUMMAP:
      return Double.valueOf(getSUMMAP());

    case SANK__MEK:
      return Double.valueOf(getSANK_MEK());

    case SANK__MEE:
      return Double.valueOf(getSANK_MEE());

    case SANK__EKMP:
      return Double.valueOf(getSANK_EKMP());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCODE();
    case CODE__MO:
      return isSetCODE_MO();
    case YEAR:
      return isSetYEAR();
    case MONTH:
      return isSetMONTH();
    case NSCHET:
      return isSetNSCHET();
    case DSCHET:
      return isSetDSCHET();
    case PLAT:
      return isSetPLAT();
    case SUMMAV:
      return isSetSUMMAV();
    case COMENTS:
      return isSetCOMENTS();
    case SUMMAP:
      return isSetSUMMAP();
    case SANK__MEK:
      return isSetSANK_MEK();
    case SANK__MEE:
      return isSetSANK_MEE();
    case SANK__EKMP:
      return isSetSANK_EKMP();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Schet)
      return this.equals((Schet)that);
    return false;
  }

  public boolean equals(Schet that) {
    if (that == null)
      return false;

    boolean this_present_CODE = true;
    boolean that_present_CODE = true;
    if (this_present_CODE || that_present_CODE) {
      if (!(this_present_CODE && that_present_CODE))
        return false;
      if (this.CODE != that.CODE)
        return false;
    }

    boolean this_present_CODE_MO = true && this.isSetCODE_MO();
    boolean that_present_CODE_MO = true && that.isSetCODE_MO();
    if (this_present_CODE_MO || that_present_CODE_MO) {
      if (!(this_present_CODE_MO && that_present_CODE_MO))
        return false;
      if (!this.CODE_MO.equals(that.CODE_MO))
        return false;
    }

    boolean this_present_YEAR = true;
    boolean that_present_YEAR = true;
    if (this_present_YEAR || that_present_YEAR) {
      if (!(this_present_YEAR && that_present_YEAR))
        return false;
      if (this.YEAR != that.YEAR)
        return false;
    }

    boolean this_present_MONTH = true;
    boolean that_present_MONTH = true;
    if (this_present_MONTH || that_present_MONTH) {
      if (!(this_present_MONTH && that_present_MONTH))
        return false;
      if (this.MONTH != that.MONTH)
        return false;
    }

    boolean this_present_NSCHET = true && this.isSetNSCHET();
    boolean that_present_NSCHET = true && that.isSetNSCHET();
    if (this_present_NSCHET || that_present_NSCHET) {
      if (!(this_present_NSCHET && that_present_NSCHET))
        return false;
      if (!this.NSCHET.equals(that.NSCHET))
        return false;
    }

    boolean this_present_DSCHET = true;
    boolean that_present_DSCHET = true;
    if (this_present_DSCHET || that_present_DSCHET) {
      if (!(this_present_DSCHET && that_present_DSCHET))
        return false;
      if (this.DSCHET != that.DSCHET)
        return false;
    }

    boolean this_present_PLAT = true && this.isSetPLAT();
    boolean that_present_PLAT = true && that.isSetPLAT();
    if (this_present_PLAT || that_present_PLAT) {
      if (!(this_present_PLAT && that_present_PLAT))
        return false;
      if (!this.PLAT.equals(that.PLAT))
        return false;
    }

    boolean this_present_SUMMAV = true;
    boolean that_present_SUMMAV = true;
    if (this_present_SUMMAV || that_present_SUMMAV) {
      if (!(this_present_SUMMAV && that_present_SUMMAV))
        return false;
      if (this.SUMMAV != that.SUMMAV)
        return false;
    }

    boolean this_present_COMENTS = true && this.isSetCOMENTS();
    boolean that_present_COMENTS = true && that.isSetCOMENTS();
    if (this_present_COMENTS || that_present_COMENTS) {
      if (!(this_present_COMENTS && that_present_COMENTS))
        return false;
      if (!this.COMENTS.equals(that.COMENTS))
        return false;
    }

    boolean this_present_SUMMAP = true && this.isSetSUMMAP();
    boolean that_present_SUMMAP = true && that.isSetSUMMAP();
    if (this_present_SUMMAP || that_present_SUMMAP) {
      if (!(this_present_SUMMAP && that_present_SUMMAP))
        return false;
      if (this.SUMMAP != that.SUMMAP)
        return false;
    }

    boolean this_present_SANK_MEK = true && this.isSetSANK_MEK();
    boolean that_present_SANK_MEK = true && that.isSetSANK_MEK();
    if (this_present_SANK_MEK || that_present_SANK_MEK) {
      if (!(this_present_SANK_MEK && that_present_SANK_MEK))
        return false;
      if (this.SANK_MEK != that.SANK_MEK)
        return false;
    }

    boolean this_present_SANK_MEE = true && this.isSetSANK_MEE();
    boolean that_present_SANK_MEE = true && that.isSetSANK_MEE();
    if (this_present_SANK_MEE || that_present_SANK_MEE) {
      if (!(this_present_SANK_MEE && that_present_SANK_MEE))
        return false;
      if (this.SANK_MEE != that.SANK_MEE)
        return false;
    }

    boolean this_present_SANK_EKMP = true && this.isSetSANK_EKMP();
    boolean that_present_SANK_EKMP = true && that.isSetSANK_EKMP();
    if (this_present_SANK_EKMP || that_present_SANK_EKMP) {
      if (!(this_present_SANK_EKMP && that_present_SANK_EKMP))
        return false;
      if (this.SANK_EKMP != that.SANK_EKMP)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Schet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Schet typedOther = (Schet)other;

    lastComparison = Boolean.valueOf(isSetCODE()).compareTo(typedOther.isSetCODE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCODE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CODE, typedOther.CODE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCODE_MO()).compareTo(typedOther.isSetCODE_MO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCODE_MO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CODE_MO, typedOther.CODE_MO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYEAR()).compareTo(typedOther.isSetYEAR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYEAR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.YEAR, typedOther.YEAR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMONTH()).compareTo(typedOther.isSetMONTH());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMONTH()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MONTH, typedOther.MONTH);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNSCHET()).compareTo(typedOther.isSetNSCHET());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNSCHET()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NSCHET, typedOther.NSCHET);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDSCHET()).compareTo(typedOther.isSetDSCHET());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDSCHET()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DSCHET, typedOther.DSCHET);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPLAT()).compareTo(typedOther.isSetPLAT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPLAT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PLAT, typedOther.PLAT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSUMMAV()).compareTo(typedOther.isSetSUMMAV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSUMMAV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SUMMAV, typedOther.SUMMAV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCOMENTS()).compareTo(typedOther.isSetCOMENTS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCOMENTS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.COMENTS, typedOther.COMENTS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSUMMAP()).compareTo(typedOther.isSetSUMMAP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSUMMAP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SUMMAP, typedOther.SUMMAP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSANK_MEK()).compareTo(typedOther.isSetSANK_MEK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSANK_MEK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SANK_MEK, typedOther.SANK_MEK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSANK_MEE()).compareTo(typedOther.isSetSANK_MEE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSANK_MEE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SANK_MEE, typedOther.SANK_MEE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSANK_EKMP()).compareTo(typedOther.isSetSANK_EKMP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSANK_EKMP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SANK_EKMP, typedOther.SANK_EKMP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Schet(");
    boolean first = true;

    sb.append("CODE:");
    sb.append(this.CODE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CODE_MO:");
    if (this.CODE_MO == null) {
      sb.append("null");
    } else {
      sb.append(this.CODE_MO);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("YEAR:");
    sb.append(this.YEAR);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MONTH:");
    sb.append(this.MONTH);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NSCHET:");
    if (this.NSCHET == null) {
      sb.append("null");
    } else {
      sb.append(this.NSCHET);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DSCHET:");
    sb.append(this.DSCHET);
    first = false;
    if (isSetPLAT()) {
      if (!first) sb.append(", ");
      sb.append("PLAT:");
      if (this.PLAT == null) {
        sb.append("null");
      } else {
        sb.append(this.PLAT);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("SUMMAV:");
    sb.append(this.SUMMAV);
    first = false;
    if (isSetCOMENTS()) {
      if (!first) sb.append(", ");
      sb.append("COMENTS:");
      if (this.COMENTS == null) {
        sb.append("null");
      } else {
        sb.append(this.COMENTS);
      }
      first = false;
    }
    if (isSetSUMMAP()) {
      if (!first) sb.append(", ");
      sb.append("SUMMAP:");
      sb.append(this.SUMMAP);
      first = false;
    }
    if (isSetSANK_MEK()) {
      if (!first) sb.append(", ");
      sb.append("SANK_MEK:");
      sb.append(this.SANK_MEK);
      first = false;
    }
    if (isSetSANK_MEE()) {
      if (!first) sb.append(", ");
      sb.append("SANK_MEE:");
      sb.append(this.SANK_MEE);
      first = false;
    }
    if (isSetSANK_EKMP()) {
      if (!first) sb.append(", ");
      sb.append("SANK_EKMP:");
      sb.append(this.SANK_EKMP);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'CODE' because it's a primitive and you chose the non-beans generator.
    if (CODE_MO == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'CODE_MO' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'YEAR' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'MONTH' because it's a primitive and you chose the non-beans generator.
    if (NSCHET == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NSCHET' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'DSCHET' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'SUMMAV' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SchetStandardSchemeFactory implements SchemeFactory {
    public SchetStandardScheme getScheme() {
      return new SchetStandardScheme();
    }
  }

  private static class SchetStandardScheme extends StandardScheme<Schet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Schet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.CODE = iprot.readI16();
              struct.setCODEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE__MO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CODE_MO = iprot.readString();
              struct.setCODE_MOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.YEAR = iprot.readI16();
              struct.setYEARIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.MONTH = iprot.readI16();
              struct.setMONTHIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NSCHET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NSCHET = iprot.readString();
              struct.setNSCHETIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DSCHET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DSCHET = iprot.readI64();
              struct.setDSCHETIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PLAT = iprot.readString();
              struct.setPLATIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUMMAV
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SUMMAV = iprot.readDouble();
              struct.setSUMMAVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.COMENTS = iprot.readString();
              struct.setCOMENTSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUMMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SUMMAP = iprot.readDouble();
              struct.setSUMMAPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SANK__MEK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SANK_MEK = iprot.readDouble();
              struct.setSANK_MEKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SANK__MEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SANK_MEE = iprot.readDouble();
              struct.setSANK_MEEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SANK__EKMP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SANK_EKMP = iprot.readDouble();
              struct.setSANK_EKMPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCODE()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'CODE' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetYEAR()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'YEAR' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMONTH()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'MONTH' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDSCHET()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DSCHET' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSUMMAV()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SUMMAV' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Schet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI16(struct.CODE);
      oprot.writeFieldEnd();
      if (struct.CODE_MO != null) {
        oprot.writeFieldBegin(CODE__MO_FIELD_DESC);
        oprot.writeString(struct.CODE_MO);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI16(struct.YEAR);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_FIELD_DESC);
      oprot.writeI16(struct.MONTH);
      oprot.writeFieldEnd();
      if (struct.NSCHET != null) {
        oprot.writeFieldBegin(NSCHET_FIELD_DESC);
        oprot.writeString(struct.NSCHET);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DSCHET_FIELD_DESC);
      oprot.writeI64(struct.DSCHET);
      oprot.writeFieldEnd();
      if (struct.PLAT != null) {
        if (struct.isSetPLAT()) {
          oprot.writeFieldBegin(PLAT_FIELD_DESC);
          oprot.writeString(struct.PLAT);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SUMMAV_FIELD_DESC);
      oprot.writeDouble(struct.SUMMAV);
      oprot.writeFieldEnd();
      if (struct.COMENTS != null) {
        if (struct.isSetCOMENTS()) {
          oprot.writeFieldBegin(COMENTS_FIELD_DESC);
          oprot.writeString(struct.COMENTS);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSUMMAP()) {
        oprot.writeFieldBegin(SUMMAP_FIELD_DESC);
        oprot.writeDouble(struct.SUMMAP);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSANK_MEK()) {
        oprot.writeFieldBegin(SANK__MEK_FIELD_DESC);
        oprot.writeDouble(struct.SANK_MEK);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSANK_MEE()) {
        oprot.writeFieldBegin(SANK__MEE_FIELD_DESC);
        oprot.writeDouble(struct.SANK_MEE);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSANK_EKMP()) {
        oprot.writeFieldBegin(SANK__EKMP_FIELD_DESC);
        oprot.writeDouble(struct.SANK_EKMP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SchetTupleSchemeFactory implements SchemeFactory {
    public SchetTupleScheme getScheme() {
      return new SchetTupleScheme();
    }
  }

  private static class SchetTupleScheme extends TupleScheme<Schet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Schet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.CODE);
      oprot.writeString(struct.CODE_MO);
      oprot.writeI16(struct.YEAR);
      oprot.writeI16(struct.MONTH);
      oprot.writeString(struct.NSCHET);
      oprot.writeI64(struct.DSCHET);
      oprot.writeDouble(struct.SUMMAV);
      BitSet optionals = new BitSet();
      if (struct.isSetPLAT()) {
        optionals.set(0);
      }
      if (struct.isSetCOMENTS()) {
        optionals.set(1);
      }
      if (struct.isSetSUMMAP()) {
        optionals.set(2);
      }
      if (struct.isSetSANK_MEK()) {
        optionals.set(3);
      }
      if (struct.isSetSANK_MEE()) {
        optionals.set(4);
      }
      if (struct.isSetSANK_EKMP()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPLAT()) {
        oprot.writeString(struct.PLAT);
      }
      if (struct.isSetCOMENTS()) {
        oprot.writeString(struct.COMENTS);
      }
      if (struct.isSetSUMMAP()) {
        oprot.writeDouble(struct.SUMMAP);
      }
      if (struct.isSetSANK_MEK()) {
        oprot.writeDouble(struct.SANK_MEK);
      }
      if (struct.isSetSANK_MEE()) {
        oprot.writeDouble(struct.SANK_MEE);
      }
      if (struct.isSetSANK_EKMP()) {
        oprot.writeDouble(struct.SANK_EKMP);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Schet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.CODE = iprot.readI16();
      struct.setCODEIsSet(true);
      struct.CODE_MO = iprot.readString();
      struct.setCODE_MOIsSet(true);
      struct.YEAR = iprot.readI16();
      struct.setYEARIsSet(true);
      struct.MONTH = iprot.readI16();
      struct.setMONTHIsSet(true);
      struct.NSCHET = iprot.readString();
      struct.setNSCHETIsSet(true);
      struct.DSCHET = iprot.readI64();
      struct.setDSCHETIsSet(true);
      struct.SUMMAV = iprot.readDouble();
      struct.setSUMMAVIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.PLAT = iprot.readString();
        struct.setPLATIsSet(true);
      }
      if (incoming.get(1)) {
        struct.COMENTS = iprot.readString();
        struct.setCOMENTSIsSet(true);
      }
      if (incoming.get(2)) {
        struct.SUMMAP = iprot.readDouble();
        struct.setSUMMAPIsSet(true);
      }
      if (incoming.get(3)) {
        struct.SANK_MEK = iprot.readDouble();
        struct.setSANK_MEKIsSet(true);
      }
      if (incoming.get(4)) {
        struct.SANK_MEE = iprot.readDouble();
        struct.setSANK_MEEIsSet(true);
      }
      if (incoming.get(5)) {
        struct.SANK_EKMP = iprot.readDouble();
        struct.setSANK_EKMPIsSet(true);
      }
    }
  }

}

