/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Account implements org.apache.thrift.TBase<Account, Account._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Account");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BEG_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField UET_FIELD_DESC = new org.apache.thrift.protocol.TField("uet", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sum", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField EXPOSE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exposeDate", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField PAYED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("payedAmount", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PAYED_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("payedSum", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField REFUSED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refusedAmount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REFUSED_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("refusedSum", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccountTupleSchemeFactory());
  }

  public int id; // required
  public String number; // required
  public long date; // required
  public long begDate; // required
  public long endDate; // required
  public int amount; // required
  public double uet; // required
  public double sum; // required
  public long exposeDate; // optional
  public int payedAmount; // required
  public double payedSum; // required
  public int refusedAmount; // required
  public double refusedSum; // required
  public int contractId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NUMBER((short)2, "number"),
    DATE((short)3, "date"),
    BEG_DATE((short)4, "begDate"),
    END_DATE((short)5, "endDate"),
    AMOUNT((short)6, "amount"),
    UET((short)7, "uet"),
    SUM((short)8, "sum"),
    EXPOSE_DATE((short)9, "exposeDate"),
    PAYED_AMOUNT((short)10, "payedAmount"),
    PAYED_SUM((short)11, "payedSum"),
    REFUSED_AMOUNT((short)12, "refusedAmount"),
    REFUSED_SUM((short)13, "refusedSum"),
    CONTRACT_ID((short)14, "contractId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NUMBER
          return NUMBER;
        case 3: // DATE
          return DATE;
        case 4: // BEG_DATE
          return BEG_DATE;
        case 5: // END_DATE
          return END_DATE;
        case 6: // AMOUNT
          return AMOUNT;
        case 7: // UET
          return UET;
        case 8: // SUM
          return SUM;
        case 9: // EXPOSE_DATE
          return EXPOSE_DATE;
        case 10: // PAYED_AMOUNT
          return PAYED_AMOUNT;
        case 11: // PAYED_SUM
          return PAYED_SUM;
        case 12: // REFUSED_AMOUNT
          return REFUSED_AMOUNT;
        case 13: // REFUSED_SUM
          return REFUSED_SUM;
        case 14: // CONTRACT_ID
          return CONTRACT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DATE_ISSET_ID = 1;
  private static final int __BEGDATE_ISSET_ID = 2;
  private static final int __ENDDATE_ISSET_ID = 3;
  private static final int __AMOUNT_ISSET_ID = 4;
  private static final int __UET_ISSET_ID = 5;
  private static final int __SUM_ISSET_ID = 6;
  private static final int __EXPOSEDATE_ISSET_ID = 7;
  private static final int __PAYEDAMOUNT_ISSET_ID = 8;
  private static final int __PAYEDSUM_ISSET_ID = 9;
  private static final int __REFUSEDAMOUNT_ISSET_ID = 10;
  private static final int __REFUSEDSUM_ISSET_ID = 11;
  private static final int __CONTRACTID_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXPOSE_DATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.BEG_DATE, new org.apache.thrift.meta_data.FieldMetaData("begDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.UET, new org.apache.thrift.meta_data.FieldMetaData("uet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUM, new org.apache.thrift.meta_data.FieldMetaData("sum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXPOSE_DATE, new org.apache.thrift.meta_data.FieldMetaData("exposeDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.PAYED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("payedAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PAYED_SUM, new org.apache.thrift.meta_data.FieldMetaData("payedSum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUSED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refusedAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.REFUSED_SUM, new org.apache.thrift.meta_data.FieldMetaData("refusedSum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Account.class, metaDataMap);
  }

  public Account() {
  }

  public Account(
    int id,
    String number,
    long date,
    long begDate,
    long endDate,
    int amount,
    double uet,
    double sum,
    int payedAmount,
    double payedSum,
    int refusedAmount,
    double refusedSum,
    int contractId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.number = number;
    this.date = date;
    setDateIsSet(true);
    this.begDate = begDate;
    setBegDateIsSet(true);
    this.endDate = endDate;
    setEndDateIsSet(true);
    this.amount = amount;
    setAmountIsSet(true);
    this.uet = uet;
    setUetIsSet(true);
    this.sum = sum;
    setSumIsSet(true);
    this.payedAmount = payedAmount;
    setPayedAmountIsSet(true);
    this.payedSum = payedSum;
    setPayedSumIsSet(true);
    this.refusedAmount = refusedAmount;
    setRefusedAmountIsSet(true);
    this.refusedSum = refusedSum;
    setRefusedSumIsSet(true);
    this.contractId = contractId;
    setContractIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Account(Account other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetNumber()) {
      this.number = other.number;
    }
    this.date = other.date;
    this.begDate = other.begDate;
    this.endDate = other.endDate;
    this.amount = other.amount;
    this.uet = other.uet;
    this.sum = other.sum;
    this.exposeDate = other.exposeDate;
    this.payedAmount = other.payedAmount;
    this.payedSum = other.payedSum;
    this.refusedAmount = other.refusedAmount;
    this.refusedSum = other.refusedSum;
    this.contractId = other.contractId;
  }

  public Account deepCopy() {
    return new Account(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.number = null;
    setDateIsSet(false);
    this.date = 0;
    setBegDateIsSet(false);
    this.begDate = 0;
    setEndDateIsSet(false);
    this.endDate = 0;
    setAmountIsSet(false);
    this.amount = 0;
    setUetIsSet(false);
    this.uet = 0.0;
    setSumIsSet(false);
    this.sum = 0.0;
    setExposeDateIsSet(false);
    this.exposeDate = 0;
    setPayedAmountIsSet(false);
    this.payedAmount = 0;
    setPayedSumIsSet(false);
    this.payedSum = 0.0;
    setRefusedAmountIsSet(false);
    this.refusedAmount = 0;
    setRefusedSumIsSet(false);
    this.refusedSum = 0.0;
    setContractIdIsSet(false);
    this.contractId = 0;
  }

  public int getId() {
    return this.id;
  }

  public Account setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getNumber() {
    return this.number;
  }

  public Account setNumber(String number) {
    this.number = number;
    return this;
  }

  public void unsetNumber() {
    this.number = null;
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return this.number != null;
  }

  public void setNumberIsSet(boolean value) {
    if (!value) {
      this.number = null;
    }
  }

  public long getDate() {
    return this.date;
  }

  public Account setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  public long getBegDate() {
    return this.begDate;
  }

  public Account setBegDate(long begDate) {
    this.begDate = begDate;
    setBegDateIsSet(true);
    return this;
  }

  public void unsetBegDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGDATE_ISSET_ID);
  }

  /** Returns true if field begDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBegDate() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGDATE_ISSET_ID);
  }

  public void setBegDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGDATE_ISSET_ID, value);
  }

  public long getEndDate() {
    return this.endDate;
  }

  public Account setEndDate(long endDate) {
    this.endDate = endDate;
    setEndDateIsSet(true);
    return this;
  }

  public void unsetEndDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  public void setEndDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
  }

  public int getAmount() {
    return this.amount;
  }

  public Account setAmount(int amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public double getUet() {
    return this.uet;
  }

  public Account setUet(double uet) {
    this.uet = uet;
    setUetIsSet(true);
    return this;
  }

  public void unsetUet() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UET_ISSET_ID);
  }

  /** Returns true if field uet is set (has been assigned a value) and false otherwise */
  public boolean isSetUet() {
    return EncodingUtils.testBit(__isset_bitfield, __UET_ISSET_ID);
  }

  public void setUetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UET_ISSET_ID, value);
  }

  public double getSum() {
    return this.sum;
  }

  public Account setSum(double sum) {
    this.sum = sum;
    setSumIsSet(true);
    return this;
  }

  public void unsetSum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUM_ISSET_ID);
  }

  /** Returns true if field sum is set (has been assigned a value) and false otherwise */
  public boolean isSetSum() {
    return EncodingUtils.testBit(__isset_bitfield, __SUM_ISSET_ID);
  }

  public void setSumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUM_ISSET_ID, value);
  }

  public long getExposeDate() {
    return this.exposeDate;
  }

  public Account setExposeDate(long exposeDate) {
    this.exposeDate = exposeDate;
    setExposeDateIsSet(true);
    return this;
  }

  public void unsetExposeDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPOSEDATE_ISSET_ID);
  }

  /** Returns true if field exposeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExposeDate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPOSEDATE_ISSET_ID);
  }

  public void setExposeDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPOSEDATE_ISSET_ID, value);
  }

  public int getPayedAmount() {
    return this.payedAmount;
  }

  public Account setPayedAmount(int payedAmount) {
    this.payedAmount = payedAmount;
    setPayedAmountIsSet(true);
    return this;
  }

  public void unsetPayedAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYEDAMOUNT_ISSET_ID);
  }

  /** Returns true if field payedAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetPayedAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYEDAMOUNT_ISSET_ID);
  }

  public void setPayedAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYEDAMOUNT_ISSET_ID, value);
  }

  public double getPayedSum() {
    return this.payedSum;
  }

  public Account setPayedSum(double payedSum) {
    this.payedSum = payedSum;
    setPayedSumIsSet(true);
    return this;
  }

  public void unsetPayedSum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYEDSUM_ISSET_ID);
  }

  /** Returns true if field payedSum is set (has been assigned a value) and false otherwise */
  public boolean isSetPayedSum() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYEDSUM_ISSET_ID);
  }

  public void setPayedSumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYEDSUM_ISSET_ID, value);
  }

  public int getRefusedAmount() {
    return this.refusedAmount;
  }

  public Account setRefusedAmount(int refusedAmount) {
    this.refusedAmount = refusedAmount;
    setRefusedAmountIsSet(true);
    return this;
  }

  public void unsetRefusedAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUSEDAMOUNT_ISSET_ID);
  }

  /** Returns true if field refusedAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefusedAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUSEDAMOUNT_ISSET_ID);
  }

  public void setRefusedAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUSEDAMOUNT_ISSET_ID, value);
  }

  public double getRefusedSum() {
    return this.refusedSum;
  }

  public Account setRefusedSum(double refusedSum) {
    this.refusedSum = refusedSum;
    setRefusedSumIsSet(true);
    return this;
  }

  public void unsetRefusedSum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUSEDSUM_ISSET_ID);
  }

  /** Returns true if field refusedSum is set (has been assigned a value) and false otherwise */
  public boolean isSetRefusedSum() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUSEDSUM_ISSET_ID);
  }

  public void setRefusedSumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUSEDSUM_ISSET_ID, value);
  }

  public int getContractId() {
    return this.contractId;
  }

  public Account setContractId(int contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case BEG_DATE:
      if (value == null) {
        unsetBegDate();
      } else {
        setBegDate((Long)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((Long)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Integer)value);
      }
      break;

    case UET:
      if (value == null) {
        unsetUet();
      } else {
        setUet((Double)value);
      }
      break;

    case SUM:
      if (value == null) {
        unsetSum();
      } else {
        setSum((Double)value);
      }
      break;

    case EXPOSE_DATE:
      if (value == null) {
        unsetExposeDate();
      } else {
        setExposeDate((Long)value);
      }
      break;

    case PAYED_AMOUNT:
      if (value == null) {
        unsetPayedAmount();
      } else {
        setPayedAmount((Integer)value);
      }
      break;

    case PAYED_SUM:
      if (value == null) {
        unsetPayedSum();
      } else {
        setPayedSum((Double)value);
      }
      break;

    case REFUSED_AMOUNT:
      if (value == null) {
        unsetRefusedAmount();
      } else {
        setRefusedAmount((Integer)value);
      }
      break;

    case REFUSED_SUM:
      if (value == null) {
        unsetRefusedSum();
      } else {
        setRefusedSum((Double)value);
      }
      break;

    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NUMBER:
      return getNumber();

    case DATE:
      return Long.valueOf(getDate());

    case BEG_DATE:
      return Long.valueOf(getBegDate());

    case END_DATE:
      return Long.valueOf(getEndDate());

    case AMOUNT:
      return Integer.valueOf(getAmount());

    case UET:
      return Double.valueOf(getUet());

    case SUM:
      return Double.valueOf(getSum());

    case EXPOSE_DATE:
      return Long.valueOf(getExposeDate());

    case PAYED_AMOUNT:
      return Integer.valueOf(getPayedAmount());

    case PAYED_SUM:
      return Double.valueOf(getPayedSum());

    case REFUSED_AMOUNT:
      return Integer.valueOf(getRefusedAmount());

    case REFUSED_SUM:
      return Double.valueOf(getRefusedSum());

    case CONTRACT_ID:
      return Integer.valueOf(getContractId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NUMBER:
      return isSetNumber();
    case DATE:
      return isSetDate();
    case BEG_DATE:
      return isSetBegDate();
    case END_DATE:
      return isSetEndDate();
    case AMOUNT:
      return isSetAmount();
    case UET:
      return isSetUet();
    case SUM:
      return isSetSum();
    case EXPOSE_DATE:
      return isSetExposeDate();
    case PAYED_AMOUNT:
      return isSetPayedAmount();
    case PAYED_SUM:
      return isSetPayedSum();
    case REFUSED_AMOUNT:
      return isSetRefusedAmount();
    case REFUSED_SUM:
      return isSetRefusedSum();
    case CONTRACT_ID:
      return isSetContractId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Account)
      return this.equals((Account)that);
    return false;
  }

  public boolean equals(Account that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (!this.number.equals(that.number))
        return false;
    }

    boolean this_present_date = true;
    boolean that_present_date = true;
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_begDate = true;
    boolean that_present_begDate = true;
    if (this_present_begDate || that_present_begDate) {
      if (!(this_present_begDate && that_present_begDate))
        return false;
      if (this.begDate != that.begDate)
        return false;
    }

    boolean this_present_endDate = true;
    boolean that_present_endDate = true;
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (this.endDate != that.endDate)
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_uet = true;
    boolean that_present_uet = true;
    if (this_present_uet || that_present_uet) {
      if (!(this_present_uet && that_present_uet))
        return false;
      if (this.uet != that.uet)
        return false;
    }

    boolean this_present_sum = true;
    boolean that_present_sum = true;
    if (this_present_sum || that_present_sum) {
      if (!(this_present_sum && that_present_sum))
        return false;
      if (this.sum != that.sum)
        return false;
    }

    boolean this_present_exposeDate = true && this.isSetExposeDate();
    boolean that_present_exposeDate = true && that.isSetExposeDate();
    if (this_present_exposeDate || that_present_exposeDate) {
      if (!(this_present_exposeDate && that_present_exposeDate))
        return false;
      if (this.exposeDate != that.exposeDate)
        return false;
    }

    boolean this_present_payedAmount = true;
    boolean that_present_payedAmount = true;
    if (this_present_payedAmount || that_present_payedAmount) {
      if (!(this_present_payedAmount && that_present_payedAmount))
        return false;
      if (this.payedAmount != that.payedAmount)
        return false;
    }

    boolean this_present_payedSum = true;
    boolean that_present_payedSum = true;
    if (this_present_payedSum || that_present_payedSum) {
      if (!(this_present_payedSum && that_present_payedSum))
        return false;
      if (this.payedSum != that.payedSum)
        return false;
    }

    boolean this_present_refusedAmount = true;
    boolean that_present_refusedAmount = true;
    if (this_present_refusedAmount || that_present_refusedAmount) {
      if (!(this_present_refusedAmount && that_present_refusedAmount))
        return false;
      if (this.refusedAmount != that.refusedAmount)
        return false;
    }

    boolean this_present_refusedSum = true;
    boolean that_present_refusedSum = true;
    if (this_present_refusedSum || that_present_refusedSum) {
      if (!(this_present_refusedSum && that_present_refusedSum))
        return false;
      if (this.refusedSum != that.refusedSum)
        return false;
    }

    boolean this_present_contractId = true;
    boolean that_present_contractId = true;
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Account other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Account typedOther = (Account)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBegDate()).compareTo(typedOther.isSetBegDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBegDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begDate, typedOther.begDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUet()).compareTo(typedOther.isSetUet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uet, typedOther.uet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSum()).compareTo(typedOther.isSetSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sum, typedOther.sum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExposeDate()).compareTo(typedOther.isSetExposeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExposeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exposeDate, typedOther.exposeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayedAmount()).compareTo(typedOther.isSetPayedAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayedAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payedAmount, typedOther.payedAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayedSum()).compareTo(typedOther.isSetPayedSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayedSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payedSum, typedOther.payedSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefusedAmount()).compareTo(typedOther.isSetRefusedAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefusedAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refusedAmount, typedOther.refusedAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefusedSum()).compareTo(typedOther.isSetRefusedSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefusedSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refusedSum, typedOther.refusedSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(typedOther.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, typedOther.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Account(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    if (this.number == null) {
      sb.append("null");
    } else {
      sb.append(this.number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    sb.append(this.date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("begDate:");
    sb.append(this.begDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    sb.append(this.endDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uet:");
    sb.append(this.uet);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sum:");
    sb.append(this.sum);
    first = false;
    if (isSetExposeDate()) {
      if (!first) sb.append(", ");
      sb.append("exposeDate:");
      sb.append(this.exposeDate);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("payedAmount:");
    sb.append(this.payedAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payedSum:");
    sb.append(this.payedSum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refusedAmount:");
    sb.append(this.refusedAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refusedSum:");
    sb.append(this.refusedSum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractId:");
    sb.append(this.contractId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (number == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'number' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'date' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'begDate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endDate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'amount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'uet' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'payedAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'payedSum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'refusedAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'refusedSum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'contractId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountStandardSchemeFactory implements SchemeFactory {
    public AccountStandardScheme getScheme() {
      return new AccountStandardScheme();
    }
  }

  private static class AccountStandardScheme extends StandardScheme<Account> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Account struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.number = iprot.readString();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BEG_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.begDate = iprot.readI64();
              struct.setBegDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endDate = iprot.readI64();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.amount = iprot.readI32();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UET
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.uet = iprot.readDouble();
              struct.setUetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sum = iprot.readDouble();
              struct.setSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXPOSE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exposeDate = iprot.readI64();
              struct.setExposeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAYED_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payedAmount = iprot.readI32();
              struct.setPayedAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAYED_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.payedSum = iprot.readDouble();
              struct.setPayedSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REFUSED_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refusedAmount = iprot.readI32();
              struct.setRefusedAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REFUSED_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refusedSum = iprot.readDouble();
              struct.setRefusedSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractId = iprot.readI32();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'date' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBegDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'begDate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endDate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'amount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUet()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uet' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPayedAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'payedAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPayedSum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'payedSum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRefusedAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'refusedAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRefusedSum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'refusedSum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetContractId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'contractId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Account struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.number != null) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeString(struct.number);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeI64(struct.date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEG_DATE_FIELD_DESC);
      oprot.writeI64(struct.begDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_DATE_FIELD_DESC);
      oprot.writeI64(struct.endDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UET_FIELD_DESC);
      oprot.writeDouble(struct.uet);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUM_FIELD_DESC);
      oprot.writeDouble(struct.sum);
      oprot.writeFieldEnd();
      if (struct.isSetExposeDate()) {
        oprot.writeFieldBegin(EXPOSE_DATE_FIELD_DESC);
        oprot.writeI64(struct.exposeDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYED_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.payedAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYED_SUM_FIELD_DESC);
      oprot.writeDouble(struct.payedSum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUSED_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.refusedAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUSED_SUM_FIELD_DESC);
      oprot.writeDouble(struct.refusedSum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
      oprot.writeI32(struct.contractId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountTupleSchemeFactory implements SchemeFactory {
    public AccountTupleScheme getScheme() {
      return new AccountTupleScheme();
    }
  }

  private static class AccountTupleScheme extends TupleScheme<Account> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Account struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.number);
      oprot.writeI64(struct.date);
      oprot.writeI64(struct.begDate);
      oprot.writeI64(struct.endDate);
      oprot.writeI32(struct.amount);
      oprot.writeDouble(struct.uet);
      oprot.writeDouble(struct.sum);
      oprot.writeI32(struct.payedAmount);
      oprot.writeDouble(struct.payedSum);
      oprot.writeI32(struct.refusedAmount);
      oprot.writeDouble(struct.refusedSum);
      oprot.writeI32(struct.contractId);
      BitSet optionals = new BitSet();
      if (struct.isSetExposeDate()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetExposeDate()) {
        oprot.writeI64(struct.exposeDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Account struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.number = iprot.readString();
      struct.setNumberIsSet(true);
      struct.date = iprot.readI64();
      struct.setDateIsSet(true);
      struct.begDate = iprot.readI64();
      struct.setBegDateIsSet(true);
      struct.endDate = iprot.readI64();
      struct.setEndDateIsSet(true);
      struct.amount = iprot.readI32();
      struct.setAmountIsSet(true);
      struct.uet = iprot.readDouble();
      struct.setUetIsSet(true);
      struct.sum = iprot.readDouble();
      struct.setSumIsSet(true);
      struct.payedAmount = iprot.readI32();
      struct.setPayedAmountIsSet(true);
      struct.payedSum = iprot.readDouble();
      struct.setPayedSumIsSet(true);
      struct.refusedAmount = iprot.readI32();
      struct.setRefusedAmountIsSet(true);
      struct.refusedSum = iprot.readDouble();
      struct.setRefusedSumIsSet(true);
      struct.contractId = iprot.readI32();
      struct.setContractIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.exposeDate = iprot.readI64();
        struct.setExposeDateIsSet(true);
      }
    }
  }

}

