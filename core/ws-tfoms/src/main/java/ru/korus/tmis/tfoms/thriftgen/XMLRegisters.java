/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class XMLRegisters implements org.apache.thrift.TBase<XMLRegisters, XMLRegisters._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("XMLRegisters");

  private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField REGISTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("registry", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PATIENT_REGISTRY_FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("patientRegistryFILENAME", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SERVICE_REGISTRY_FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceRegistryFILENAME", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SCHET_FIELD_DESC = new org.apache.thrift.protocol.TField("schet", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PR__NOV_FIELD_DESC = new org.apache.thrift.protocol.TField("PR_NOV", org.apache.thrift.protocol.TType.I16, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new XMLRegistersStandardSchemeFactory());
    schemes.put(TupleScheme.class, new XMLRegistersTupleSchemeFactory());
  }

  public Account account; // required
  public Map<Person,List<Sluch>> registry; // required
  public long data; // required
  public String patientRegistryFILENAME; // required
  public String serviceRegistryFILENAME; // required
  public Schet schet; // required
  public short PR_NOV; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT((short)1, "account"),
    REGISTRY((short)2, "registry"),
    DATA((short)3, "data"),
    PATIENT_REGISTRY_FILENAME((short)4, "patientRegistryFILENAME"),
    SERVICE_REGISTRY_FILENAME((short)5, "serviceRegistryFILENAME"),
    SCHET((short)6, "schet"),
    PR__NOV((short)7, "PR_NOV");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT
          return ACCOUNT;
        case 2: // REGISTRY
          return REGISTRY;
        case 3: // DATA
          return DATA;
        case 4: // PATIENT_REGISTRY_FILENAME
          return PATIENT_REGISTRY_FILENAME;
        case 5: // SERVICE_REGISTRY_FILENAME
          return SERVICE_REGISTRY_FILENAME;
        case 6: // SCHET
          return SCHET;
        case 7: // PR__NOV
          return PR__NOV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATA_ISSET_ID = 0;
  private static final int __PR_NOV_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Account.class)));
    tmpMap.put(_Fields.REGISTRY, new org.apache.thrift.meta_data.FieldMetaData("registry", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Person.class), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sluch.class)))));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.PATIENT_REGISTRY_FILENAME, new org.apache.thrift.meta_data.FieldMetaData("patientRegistryFILENAME", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_REGISTRY_FILENAME, new org.apache.thrift.meta_data.FieldMetaData("serviceRegistryFILENAME", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHET, new org.apache.thrift.meta_data.FieldMetaData("schet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Schet.class)));
    tmpMap.put(_Fields.PR__NOV, new org.apache.thrift.meta_data.FieldMetaData("PR_NOV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(XMLRegisters.class, metaDataMap);
  }

  public XMLRegisters() {
  }

  public XMLRegisters(
    Account account,
    Map<Person,List<Sluch>> registry,
    long data,
    String patientRegistryFILENAME,
    String serviceRegistryFILENAME,
    Schet schet,
    short PR_NOV)
  {
    this();
    this.account = account;
    this.registry = registry;
    this.data = data;
    setDataIsSet(true);
    this.patientRegistryFILENAME = patientRegistryFILENAME;
    this.serviceRegistryFILENAME = serviceRegistryFILENAME;
    this.schet = schet;
    this.PR_NOV = PR_NOV;
    setPR_NOVIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public XMLRegisters(XMLRegisters other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAccount()) {
      this.account = new Account(other.account);
    }
    if (other.isSetRegistry()) {
      Map<Person,List<Sluch>> __this__registry = new HashMap<Person,List<Sluch>>();
      for (Map.Entry<Person, List<Sluch>> other_element : other.registry.entrySet()) {

        Person other_element_key = other_element.getKey();
        List<Sluch> other_element_value = other_element.getValue();

        Person __this__registry_copy_key = new Person(other_element_key);

        List<Sluch> __this__registry_copy_value = new ArrayList<Sluch>();
        for (Sluch other_element_value_element : other_element_value) {
          __this__registry_copy_value.add(new Sluch(other_element_value_element));
        }

        __this__registry.put(__this__registry_copy_key, __this__registry_copy_value);
      }
      this.registry = __this__registry;
    }
    this.data = other.data;
    if (other.isSetPatientRegistryFILENAME()) {
      this.patientRegistryFILENAME = other.patientRegistryFILENAME;
    }
    if (other.isSetServiceRegistryFILENAME()) {
      this.serviceRegistryFILENAME = other.serviceRegistryFILENAME;
    }
    if (other.isSetSchet()) {
      this.schet = new Schet(other.schet);
    }
    this.PR_NOV = other.PR_NOV;
  }

  public XMLRegisters deepCopy() {
    return new XMLRegisters(this);
  }

  @Override
  public void clear() {
    this.account = null;
    this.registry = null;
    setDataIsSet(false);
    this.data = 0;
    this.patientRegistryFILENAME = null;
    this.serviceRegistryFILENAME = null;
    this.schet = null;
    setPR_NOVIsSet(false);
    this.PR_NOV = 0;
  }

  public Account getAccount() {
    return this.account;
  }

  public XMLRegisters setAccount(Account account) {
    this.account = account;
    return this;
  }

  public void unsetAccount() {
    this.account = null;
  }

  /** Returns true if field account is set (has been assigned a value) and false otherwise */
  public boolean isSetAccount() {
    return this.account != null;
  }

  public void setAccountIsSet(boolean value) {
    if (!value) {
      this.account = null;
    }
  }

  public int getRegistrySize() {
    return (this.registry == null) ? 0 : this.registry.size();
  }

  public void putToRegistry(Person key, List<Sluch> val) {
    if (this.registry == null) {
      this.registry = new HashMap<Person,List<Sluch>>();
    }
    this.registry.put(key, val);
  }

  public Map<Person,List<Sluch>> getRegistry() {
    return this.registry;
  }

  public XMLRegisters setRegistry(Map<Person,List<Sluch>> registry) {
    this.registry = registry;
    return this;
  }

  public void unsetRegistry() {
    this.registry = null;
  }

  /** Returns true if field registry is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistry() {
    return this.registry != null;
  }

  public void setRegistryIsSet(boolean value) {
    if (!value) {
      this.registry = null;
    }
  }

  public long getData() {
    return this.data;
  }

  public XMLRegisters setData(long data) {
    this.data = data;
    setDataIsSet(true);
    return this;
  }

  public void unsetData() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATA_ISSET_ID);
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return EncodingUtils.testBit(__isset_bitfield, __DATA_ISSET_ID);
  }

  public void setDataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATA_ISSET_ID, value);
  }

  public String getPatientRegistryFILENAME() {
    return this.patientRegistryFILENAME;
  }

  public XMLRegisters setPatientRegistryFILENAME(String patientRegistryFILENAME) {
    this.patientRegistryFILENAME = patientRegistryFILENAME;
    return this;
  }

  public void unsetPatientRegistryFILENAME() {
    this.patientRegistryFILENAME = null;
  }

  /** Returns true if field patientRegistryFILENAME is set (has been assigned a value) and false otherwise */
  public boolean isSetPatientRegistryFILENAME() {
    return this.patientRegistryFILENAME != null;
  }

  public void setPatientRegistryFILENAMEIsSet(boolean value) {
    if (!value) {
      this.patientRegistryFILENAME = null;
    }
  }

  public String getServiceRegistryFILENAME() {
    return this.serviceRegistryFILENAME;
  }

  public XMLRegisters setServiceRegistryFILENAME(String serviceRegistryFILENAME) {
    this.serviceRegistryFILENAME = serviceRegistryFILENAME;
    return this;
  }

  public void unsetServiceRegistryFILENAME() {
    this.serviceRegistryFILENAME = null;
  }

  /** Returns true if field serviceRegistryFILENAME is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceRegistryFILENAME() {
    return this.serviceRegistryFILENAME != null;
  }

  public void setServiceRegistryFILENAMEIsSet(boolean value) {
    if (!value) {
      this.serviceRegistryFILENAME = null;
    }
  }

  public Schet getSchet() {
    return this.schet;
  }

  public XMLRegisters setSchet(Schet schet) {
    this.schet = schet;
    return this;
  }

  public void unsetSchet() {
    this.schet = null;
  }

  /** Returns true if field schet is set (has been assigned a value) and false otherwise */
  public boolean isSetSchet() {
    return this.schet != null;
  }

  public void setSchetIsSet(boolean value) {
    if (!value) {
      this.schet = null;
    }
  }

  public short getPR_NOV() {
    return this.PR_NOV;
  }

  public XMLRegisters setPR_NOV(short PR_NOV) {
    this.PR_NOV = PR_NOV;
    setPR_NOVIsSet(true);
    return this;
  }

  public void unsetPR_NOV() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PR_NOV_ISSET_ID);
  }

  /** Returns true if field PR_NOV is set (has been assigned a value) and false otherwise */
  public boolean isSetPR_NOV() {
    return EncodingUtils.testBit(__isset_bitfield, __PR_NOV_ISSET_ID);
  }

  public void setPR_NOVIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PR_NOV_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNT:
      if (value == null) {
        unsetAccount();
      } else {
        setAccount((Account)value);
      }
      break;

    case REGISTRY:
      if (value == null) {
        unsetRegistry();
      } else {
        setRegistry((Map<Person,List<Sluch>>)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((Long)value);
      }
      break;

    case PATIENT_REGISTRY_FILENAME:
      if (value == null) {
        unsetPatientRegistryFILENAME();
      } else {
        setPatientRegistryFILENAME((String)value);
      }
      break;

    case SERVICE_REGISTRY_FILENAME:
      if (value == null) {
        unsetServiceRegistryFILENAME();
      } else {
        setServiceRegistryFILENAME((String)value);
      }
      break;

    case SCHET:
      if (value == null) {
        unsetSchet();
      } else {
        setSchet((Schet)value);
      }
      break;

    case PR__NOV:
      if (value == null) {
        unsetPR_NOV();
      } else {
        setPR_NOV((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT:
      return getAccount();

    case REGISTRY:
      return getRegistry();

    case DATA:
      return Long.valueOf(getData());

    case PATIENT_REGISTRY_FILENAME:
      return getPatientRegistryFILENAME();

    case SERVICE_REGISTRY_FILENAME:
      return getServiceRegistryFILENAME();

    case SCHET:
      return getSchet();

    case PR__NOV:
      return Short.valueOf(getPR_NOV());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT:
      return isSetAccount();
    case REGISTRY:
      return isSetRegistry();
    case DATA:
      return isSetData();
    case PATIENT_REGISTRY_FILENAME:
      return isSetPatientRegistryFILENAME();
    case SERVICE_REGISTRY_FILENAME:
      return isSetServiceRegistryFILENAME();
    case SCHET:
      return isSetSchet();
    case PR__NOV:
      return isSetPR_NOV();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof XMLRegisters)
      return this.equals((XMLRegisters)that);
    return false;
  }

  public boolean equals(XMLRegisters that) {
    if (that == null)
      return false;

    boolean this_present_account = true && this.isSetAccount();
    boolean that_present_account = true && that.isSetAccount();
    if (this_present_account || that_present_account) {
      if (!(this_present_account && that_present_account))
        return false;
      if (!this.account.equals(that.account))
        return false;
    }

    boolean this_present_registry = true && this.isSetRegistry();
    boolean that_present_registry = true && that.isSetRegistry();
    if (this_present_registry || that_present_registry) {
      if (!(this_present_registry && that_present_registry))
        return false;
      if (!this.registry.equals(that.registry))
        return false;
    }

    boolean this_present_data = true;
    boolean that_present_data = true;
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (this.data != that.data)
        return false;
    }

    boolean this_present_patientRegistryFILENAME = true && this.isSetPatientRegistryFILENAME();
    boolean that_present_patientRegistryFILENAME = true && that.isSetPatientRegistryFILENAME();
    if (this_present_patientRegistryFILENAME || that_present_patientRegistryFILENAME) {
      if (!(this_present_patientRegistryFILENAME && that_present_patientRegistryFILENAME))
        return false;
      if (!this.patientRegistryFILENAME.equals(that.patientRegistryFILENAME))
        return false;
    }

    boolean this_present_serviceRegistryFILENAME = true && this.isSetServiceRegistryFILENAME();
    boolean that_present_serviceRegistryFILENAME = true && that.isSetServiceRegistryFILENAME();
    if (this_present_serviceRegistryFILENAME || that_present_serviceRegistryFILENAME) {
      if (!(this_present_serviceRegistryFILENAME && that_present_serviceRegistryFILENAME))
        return false;
      if (!this.serviceRegistryFILENAME.equals(that.serviceRegistryFILENAME))
        return false;
    }

    boolean this_present_schet = true && this.isSetSchet();
    boolean that_present_schet = true && that.isSetSchet();
    if (this_present_schet || that_present_schet) {
      if (!(this_present_schet && that_present_schet))
        return false;
      if (!this.schet.equals(that.schet))
        return false;
    }

    boolean this_present_PR_NOV = true;
    boolean that_present_PR_NOV = true;
    if (this_present_PR_NOV || that_present_PR_NOV) {
      if (!(this_present_PR_NOV && that_present_PR_NOV))
        return false;
      if (this.PR_NOV != that.PR_NOV)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(XMLRegisters other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    XMLRegisters typedOther = (XMLRegisters)other;

    lastComparison = Boolean.valueOf(isSetAccount()).compareTo(typedOther.isSetAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, typedOther.account);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistry()).compareTo(typedOther.isSetRegistry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registry, typedOther.registry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPatientRegistryFILENAME()).compareTo(typedOther.isSetPatientRegistryFILENAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatientRegistryFILENAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientRegistryFILENAME, typedOther.patientRegistryFILENAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceRegistryFILENAME()).compareTo(typedOther.isSetServiceRegistryFILENAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceRegistryFILENAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceRegistryFILENAME, typedOther.serviceRegistryFILENAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchet()).compareTo(typedOther.isSetSchet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schet, typedOther.schet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPR_NOV()).compareTo(typedOther.isSetPR_NOV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPR_NOV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PR_NOV, typedOther.PR_NOV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("XMLRegisters(");
    boolean first = true;

    sb.append("account:");
    if (this.account == null) {
      sb.append("null");
    } else {
      sb.append(this.account);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registry:");
    if (this.registry == null) {
      sb.append("null");
    } else {
      sb.append(this.registry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    sb.append(this.data);
    first = false;
    if (!first) sb.append(", ");
    sb.append("patientRegistryFILENAME:");
    if (this.patientRegistryFILENAME == null) {
      sb.append("null");
    } else {
      sb.append(this.patientRegistryFILENAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceRegistryFILENAME:");
    if (this.serviceRegistryFILENAME == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceRegistryFILENAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schet:");
    if (this.schet == null) {
      sb.append("null");
    } else {
      sb.append(this.schet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PR_NOV:");
    sb.append(this.PR_NOV);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (account == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'account' was not present! Struct: " + toString());
    }
    if (registry == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'registry' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'data' because it's a primitive and you chose the non-beans generator.
    if (patientRegistryFILENAME == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'patientRegistryFILENAME' was not present! Struct: " + toString());
    }
    if (serviceRegistryFILENAME == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceRegistryFILENAME' was not present! Struct: " + toString());
    }
    if (schet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'schet' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'PR_NOV' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (account != null) {
      account.validate();
    }
    if (schet != null) {
      schet.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class XMLRegistersStandardSchemeFactory implements SchemeFactory {
    public XMLRegistersStandardScheme getScheme() {
      return new XMLRegistersStandardScheme();
    }
  }

  private static class XMLRegistersStandardScheme extends StandardScheme<XMLRegisters> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, XMLRegisters struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.account = new Account();
              struct.account.read(iprot);
              struct.setAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGISTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.registry = new HashMap<Person,List<Sluch>>(2*_map24.size);
                for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                {
                  Person _key26; // required
                  List<Sluch> _val27; // required
                  _key26 = new Person();
                  _key26.read(iprot);
                  {
                    org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                    _val27 = new ArrayList<Sluch>(_list28.size);
                    for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                    {
                      Sluch _elem30; // required
                      _elem30 = new Sluch();
                      _elem30.read(iprot);
                      _val27.add(_elem30);
                    }
                    iprot.readListEnd();
                  }
                  struct.registry.put(_key26, _val27);
                }
                iprot.readMapEnd();
              }
              struct.setRegistryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.data = iprot.readI64();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PATIENT_REGISTRY_FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.patientRegistryFILENAME = iprot.readString();
              struct.setPatientRegistryFILENAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVICE_REGISTRY_FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceRegistryFILENAME = iprot.readString();
              struct.setServiceRegistryFILENAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCHET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schet = new Schet();
              struct.schet.read(iprot);
              struct.setSchetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PR__NOV
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.PR_NOV = iprot.readI16();
              struct.setPR_NOVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetData()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'data' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPR_NOV()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'PR_NOV' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, XMLRegisters struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.account != null) {
        oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
        struct.account.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.registry != null) {
        oprot.writeFieldBegin(REGISTRY_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, struct.registry.size()));
          for (Map.Entry<Person, List<Sluch>> _iter31 : struct.registry.entrySet())
          {
            _iter31.getKey().write(oprot);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter31.getValue().size()));
              for (Sluch _iter32 : _iter31.getValue())
              {
                _iter32.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      oprot.writeI64(struct.data);
      oprot.writeFieldEnd();
      if (struct.patientRegistryFILENAME != null) {
        oprot.writeFieldBegin(PATIENT_REGISTRY_FILENAME_FIELD_DESC);
        oprot.writeString(struct.patientRegistryFILENAME);
        oprot.writeFieldEnd();
      }
      if (struct.serviceRegistryFILENAME != null) {
        oprot.writeFieldBegin(SERVICE_REGISTRY_FILENAME_FIELD_DESC);
        oprot.writeString(struct.serviceRegistryFILENAME);
        oprot.writeFieldEnd();
      }
      if (struct.schet != null) {
        oprot.writeFieldBegin(SCHET_FIELD_DESC);
        struct.schet.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PR__NOV_FIELD_DESC);
      oprot.writeI16(struct.PR_NOV);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class XMLRegistersTupleSchemeFactory implements SchemeFactory {
    public XMLRegistersTupleScheme getScheme() {
      return new XMLRegistersTupleScheme();
    }
  }

  private static class XMLRegistersTupleScheme extends TupleScheme<XMLRegisters> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, XMLRegisters struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.account.write(oprot);
      {
        oprot.writeI32(struct.registry.size());
        for (Map.Entry<Person, List<Sluch>> _iter33 : struct.registry.entrySet())
        {
          _iter33.getKey().write(oprot);
          {
            oprot.writeI32(_iter33.getValue().size());
            for (Sluch _iter34 : _iter33.getValue())
            {
              _iter34.write(oprot);
            }
          }
        }
      }
      oprot.writeI64(struct.data);
      oprot.writeString(struct.patientRegistryFILENAME);
      oprot.writeString(struct.serviceRegistryFILENAME);
      struct.schet.write(oprot);
      oprot.writeI16(struct.PR_NOV);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, XMLRegisters struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.account = new Account();
      struct.account.read(iprot);
      struct.setAccountIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map35 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.registry = new HashMap<Person,List<Sluch>>(2*_map35.size);
        for (int _i36 = 0; _i36 < _map35.size; ++_i36)
        {
          Person _key37; // required
          List<Sluch> _val38; // required
          _key37 = new Person();
          _key37.read(iprot);
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _val38 = new ArrayList<Sluch>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              Sluch _elem41; // required
              _elem41 = new Sluch();
              _elem41.read(iprot);
              _val38.add(_elem41);
            }
          }
          struct.registry.put(_key37, _val38);
        }
      }
      struct.setRegistryIsSet(true);
      struct.data = iprot.readI64();
      struct.setDataIsSet(true);
      struct.patientRegistryFILENAME = iprot.readString();
      struct.setPatientRegistryFILENAMEIsSet(true);
      struct.serviceRegistryFILENAME = iprot.readString();
      struct.setServiceRegistryFILENAMEIsSet(true);
      struct.schet = new Schet();
      struct.schet.read(iprot);
      struct.setSchetIsSet(true);
      struct.PR_NOV = iprot.readI16();
      struct.setPR_NOVIsSet(true);
    }
  }

}

