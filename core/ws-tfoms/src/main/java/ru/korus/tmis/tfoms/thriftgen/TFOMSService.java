/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TFOMSService {

  public interface Iface {

    /**
     * Получение всех доступных счетов (deleted = 0), в случае если счетов нету - пустой сисок.
     * @return список счетов
     */
    public List<Account> getAvailableAccounts() throws org.apache.thrift.TException;

    /**
     * Получение одного счета по его идентификатору
     * @param accountId : идентификатор счета
     * @throw NotFoundException nfExc : Если нету счета с таким идентификатором
     * @return Счет / Ошибка
     * 
     * @param accountId
     */
    public Account getAccount(int accountId) throws NotFoundException, org.apache.thrift.TException;

    /**
     * Получение всех позиций счета по идентификатору счета
     * @param accountId : идентификатор счета по которому будут возвращены позиции
     * @throw NotFoundException nfExc : Если нету счета с таким идентификатором
     * @return Список позиций счета или пустой список если на счет нету ни одной позиции
     * 
     * @param accountId
     */
    public AccountInfo getAccountItems(int accountId) throws NotFoundException, org.apache.thrift.TException;

    /**
     * Проставление отметки "не выгружать более" для заданных позиций счета
     * @param items Список структур позиций счета, которых более не требуется выгружать ни в одном счете
     * 
     * @param items
     */
    public void setDoNotUploadAnymoreMarks(List<AccountItemWithMark> items) throws org.apache.thrift.TException;

    public boolean deleteAccount(int accountId) throws org.apache.thrift.TException;

    public XMLRegisters getXMLRegisters(int contractId, long beginDate, long endDate, String infisCode, String obsoleteInfisCode, String smoNumber, List<Integer> orgStructureIdList, Set<PatientOptionalFields> patientOptionalFields, Set<PersonOptionalFields> personOptionalFields, Set<SluchOptionalFields> sluchOptionalFields, boolean primaryAccount, String levelMO) throws InvalidOrganizationInfisException, InvalidContractException, InvalidDateIntervalException, InvalidArgumentException, NotFoundException, SQLException, org.apache.thrift.TException;

    /**
     * Получение всех подразделений у которых  инфис-код ЛПУ совпадает с заданным
     * @param organisationInfis             1)Инфис код ЛПУ для которого необходимо вернуть подразделения
     * @throw InvalidOrganizationInfisException  когда нету организации с таким инфис-кодом
     * 
     * @param organisationInfis
     */
    public List<OrgStructure> getOrgStructures(String organisationInfis) throws InvalidOrganizationInfisException, org.apache.thrift.TException;

    /**
     * Получение всех контрактов, где получателем является заданное ЛПУ
     * @param organisationInfis            1)Инфис код ЛПУ для которого необходимо вернуть контракту
     * @throw InvalidOrganizationInfisException  когда нету организации с таким инфис-кодом
     * 
     * @param organisationInfis
     */
    public List<Contract> getAvailableContracts(String organisationInfis) throws InvalidOrganizationInfisException, org.apache.thrift.TException;

    /**
     * Загрузка измененных данных от ТФОМС
     * 
     * @param patientId
     * @param newPolicy
     */
    public int changeClientPolicy(int patientId, TClientPolicy newPolicy) throws InvalidArgumentException, SQLException, org.apache.thrift.TException;

    /**
     * загрузка результатов оплаты случаев из ТФОМС
     * @param fileName имя файла в котором содержатся результаты ответа из ТФОМС
     * @param payments список структур с данными об оплате случая
     * @param refusedAmount количество отказанных случаев
     * @param payedAmount количество оплаченных случаев
     * @param payedSum  оплаченная сумма
     * @param refusedSum отказнная в оплате сумма
     * @param accountNumber номер счета
     * @param comment   комментарий к счету
     * @return map<int, string> карта вида <идентификатор позиции счета, текст ошибки>
     * или пустой список если все ок
     * @throw  NotFoundException когда в БД ЛПУ нету счета с таким номером
     * 
     * @param fileName
     * @param payments
     * @param refusedAmount
     * @param payedAmount
     * @param payedSum
     * @param refusedSum
     * @param accountNumber
     * @param comment
     */
    public Map<Integer,String> loadTfomsPayments(String fileName, List<Payment> payments, int refusedAmount, int payedAmount, double payedSum, double refusedSum, String accountNumber, String comment) throws NotFoundException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAvailableAccounts(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAvailableAccounts_call> resultHandler) throws org.apache.thrift.TException;

    public void getAccount(int accountId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAccount_call> resultHandler) throws org.apache.thrift.TException;

    public void getAccountItems(int accountId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAccountItems_call> resultHandler) throws org.apache.thrift.TException;

    public void setDoNotUploadAnymoreMarks(List<AccountItemWithMark> items, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setDoNotUploadAnymoreMarks_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteAccount(int accountId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteAccount_call> resultHandler) throws org.apache.thrift.TException;

    public void getXMLRegisters(int contractId, long beginDate, long endDate, String infisCode, String obsoleteInfisCode, String smoNumber, List<Integer> orgStructureIdList, Set<PatientOptionalFields> patientOptionalFields, Set<PersonOptionalFields> personOptionalFields, Set<SluchOptionalFields> sluchOptionalFields, boolean primaryAccount, String levelMO, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getXMLRegisters_call> resultHandler) throws org.apache.thrift.TException;

    public void getOrgStructures(String organisationInfis, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOrgStructures_call> resultHandler) throws org.apache.thrift.TException;

    public void getAvailableContracts(String organisationInfis, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAvailableContracts_call> resultHandler) throws org.apache.thrift.TException;

    public void changeClientPolicy(int patientId, TClientPolicy newPolicy, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.changeClientPolicy_call> resultHandler) throws org.apache.thrift.TException;

    public void loadTfomsPayments(String fileName, List<Payment> payments, int refusedAmount, int payedAmount, double payedSum, double refusedSum, String accountNumber, String comment, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loadTfomsPayments_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Account> getAvailableAccounts() throws org.apache.thrift.TException
    {
      send_getAvailableAccounts();
      return recv_getAvailableAccounts();
    }

    public void send_getAvailableAccounts() throws org.apache.thrift.TException
    {
      getAvailableAccounts_args args = new getAvailableAccounts_args();
      sendBase("getAvailableAccounts", args);
    }

    public List<Account> recv_getAvailableAccounts() throws org.apache.thrift.TException
    {
      getAvailableAccounts_result result = new getAvailableAccounts_result();
      receiveBase(result, "getAvailableAccounts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAvailableAccounts failed: unknown result");
    }

    public Account getAccount(int accountId) throws NotFoundException, org.apache.thrift.TException
    {
      send_getAccount(accountId);
      return recv_getAccount();
    }

    public void send_getAccount(int accountId) throws org.apache.thrift.TException
    {
      getAccount_args args = new getAccount_args();
      args.setAccountId(accountId);
      sendBase("getAccount", args);
    }

    public Account recv_getAccount() throws NotFoundException, org.apache.thrift.TException
    {
      getAccount_result result = new getAccount_result();
      receiveBase(result, "getAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.nfExc != null) {
        throw result.nfExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccount failed: unknown result");
    }

    public AccountInfo getAccountItems(int accountId) throws NotFoundException, org.apache.thrift.TException
    {
      send_getAccountItems(accountId);
      return recv_getAccountItems();
    }

    public void send_getAccountItems(int accountId) throws org.apache.thrift.TException
    {
      getAccountItems_args args = new getAccountItems_args();
      args.setAccountId(accountId);
      sendBase("getAccountItems", args);
    }

    public AccountInfo recv_getAccountItems() throws NotFoundException, org.apache.thrift.TException
    {
      getAccountItems_result result = new getAccountItems_result();
      receiveBase(result, "getAccountItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.nfExc != null) {
        throw result.nfExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccountItems failed: unknown result");
    }

    public void setDoNotUploadAnymoreMarks(List<AccountItemWithMark> items) throws org.apache.thrift.TException
    {
      send_setDoNotUploadAnymoreMarks(items);
    }

    public void send_setDoNotUploadAnymoreMarks(List<AccountItemWithMark> items) throws org.apache.thrift.TException
    {
      setDoNotUploadAnymoreMarks_args args = new setDoNotUploadAnymoreMarks_args();
      args.setItems(items);
      sendBase("setDoNotUploadAnymoreMarks", args);
    }

    public boolean deleteAccount(int accountId) throws org.apache.thrift.TException
    {
      send_deleteAccount(accountId);
      return recv_deleteAccount();
    }

    public void send_deleteAccount(int accountId) throws org.apache.thrift.TException
    {
      deleteAccount_args args = new deleteAccount_args();
      args.setAccountId(accountId);
      sendBase("deleteAccount", args);
    }

    public boolean recv_deleteAccount() throws org.apache.thrift.TException
    {
      deleteAccount_result result = new deleteAccount_result();
      receiveBase(result, "deleteAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAccount failed: unknown result");
    }

    public XMLRegisters getXMLRegisters(int contractId, long beginDate, long endDate, String infisCode, String obsoleteInfisCode, String smoNumber, List<Integer> orgStructureIdList, Set<PatientOptionalFields> patientOptionalFields, Set<PersonOptionalFields> personOptionalFields, Set<SluchOptionalFields> sluchOptionalFields, boolean primaryAccount, String levelMO) throws InvalidOrganizationInfisException, InvalidContractException, InvalidDateIntervalException, InvalidArgumentException, NotFoundException, SQLException, org.apache.thrift.TException
    {
      send_getXMLRegisters(contractId, beginDate, endDate, infisCode, obsoleteInfisCode, smoNumber, orgStructureIdList, patientOptionalFields, personOptionalFields, sluchOptionalFields, primaryAccount, levelMO);
      return recv_getXMLRegisters();
    }

    public void send_getXMLRegisters(int contractId, long beginDate, long endDate, String infisCode, String obsoleteInfisCode, String smoNumber, List<Integer> orgStructureIdList, Set<PatientOptionalFields> patientOptionalFields, Set<PersonOptionalFields> personOptionalFields, Set<SluchOptionalFields> sluchOptionalFields, boolean primaryAccount, String levelMO) throws org.apache.thrift.TException
    {
      getXMLRegisters_args args = new getXMLRegisters_args();
      args.setContractId(contractId);
      args.setBeginDate(beginDate);
      args.setEndDate(endDate);
      args.setInfisCode(infisCode);
      args.setObsoleteInfisCode(obsoleteInfisCode);
      args.setSmoNumber(smoNumber);
      args.setOrgStructureIdList(orgStructureIdList);
      args.setPatientOptionalFields(patientOptionalFields);
      args.setPersonOptionalFields(personOptionalFields);
      args.setSluchOptionalFields(sluchOptionalFields);
      args.setPrimaryAccount(primaryAccount);
      args.setLevelMO(levelMO);
      sendBase("getXMLRegisters", args);
    }

    public XMLRegisters recv_getXMLRegisters() throws InvalidOrganizationInfisException, InvalidContractException, InvalidDateIntervalException, InvalidArgumentException, NotFoundException, SQLException, org.apache.thrift.TException
    {
      getXMLRegisters_result result = new getXMLRegisters_result();
      receiveBase(result, "getXMLRegisters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.infisExc != null) {
        throw result.infisExc;
      }
      if (result.contractExc != null) {
        throw result.contractExc;
      }
      if (result.datesExc != null) {
        throw result.datesExc;
      }
      if (result.invExc != null) {
        throw result.invExc;
      }
      if (result.nfExc != null) {
        throw result.nfExc;
      }
      if (result.sqlExc != null) {
        throw result.sqlExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getXMLRegisters failed: unknown result");
    }

    public List<OrgStructure> getOrgStructures(String organisationInfis) throws InvalidOrganizationInfisException, org.apache.thrift.TException
    {
      send_getOrgStructures(organisationInfis);
      return recv_getOrgStructures();
    }

    public void send_getOrgStructures(String organisationInfis) throws org.apache.thrift.TException
    {
      getOrgStructures_args args = new getOrgStructures_args();
      args.setOrganisationInfis(organisationInfis);
      sendBase("getOrgStructures", args);
    }

    public List<OrgStructure> recv_getOrgStructures() throws InvalidOrganizationInfisException, org.apache.thrift.TException
    {
      getOrgStructures_result result = new getOrgStructures_result();
      receiveBase(result, "getOrgStructures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.infisExc != null) {
        throw result.infisExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrgStructures failed: unknown result");
    }

    public List<Contract> getAvailableContracts(String organisationInfis) throws InvalidOrganizationInfisException, org.apache.thrift.TException
    {
      send_getAvailableContracts(organisationInfis);
      return recv_getAvailableContracts();
    }

    public void send_getAvailableContracts(String organisationInfis) throws org.apache.thrift.TException
    {
      getAvailableContracts_args args = new getAvailableContracts_args();
      args.setOrganisationInfis(organisationInfis);
      sendBase("getAvailableContracts", args);
    }

    public List<Contract> recv_getAvailableContracts() throws InvalidOrganizationInfisException, org.apache.thrift.TException
    {
      getAvailableContracts_result result = new getAvailableContracts_result();
      receiveBase(result, "getAvailableContracts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.infisExc != null) {
        throw result.infisExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAvailableContracts failed: unknown result");
    }

    public int changeClientPolicy(int patientId, TClientPolicy newPolicy) throws InvalidArgumentException, SQLException, org.apache.thrift.TException
    {
      send_changeClientPolicy(patientId, newPolicy);
      return recv_changeClientPolicy();
    }

    public void send_changeClientPolicy(int patientId, TClientPolicy newPolicy) throws org.apache.thrift.TException
    {
      changeClientPolicy_args args = new changeClientPolicy_args();
      args.setPatientId(patientId);
      args.setNewPolicy(newPolicy);
      sendBase("changeClientPolicy", args);
    }

    public int recv_changeClientPolicy() throws InvalidArgumentException, SQLException, org.apache.thrift.TException
    {
      changeClientPolicy_result result = new changeClientPolicy_result();
      receiveBase(result, "changeClientPolicy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.argExc != null) {
        throw result.argExc;
      }
      if (result.sqlExc != null) {
        throw result.sqlExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeClientPolicy failed: unknown result");
    }

    public Map<Integer,String> loadTfomsPayments(String fileName, List<Payment> payments, int refusedAmount, int payedAmount, double payedSum, double refusedSum, String accountNumber, String comment) throws NotFoundException, org.apache.thrift.TException
    {
      send_loadTfomsPayments(fileName, payments, refusedAmount, payedAmount, payedSum, refusedSum, accountNumber, comment);
      return recv_loadTfomsPayments();
    }

    public void send_loadTfomsPayments(String fileName, List<Payment> payments, int refusedAmount, int payedAmount, double payedSum, double refusedSum, String accountNumber, String comment) throws org.apache.thrift.TException
    {
      loadTfomsPayments_args args = new loadTfomsPayments_args();
      args.setFileName(fileName);
      args.setPayments(payments);
      args.setRefusedAmount(refusedAmount);
      args.setPayedAmount(payedAmount);
      args.setPayedSum(payedSum);
      args.setRefusedSum(refusedSum);
      args.setAccountNumber(accountNumber);
      args.setComment(comment);
      sendBase("loadTfomsPayments", args);
    }

    public Map<Integer,String> recv_loadTfomsPayments() throws NotFoundException, org.apache.thrift.TException
    {
      loadTfomsPayments_result result = new loadTfomsPayments_result();
      receiveBase(result, "loadTfomsPayments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.nfExc != null) {
        throw result.nfExc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadTfomsPayments failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAvailableAccounts(org.apache.thrift.async.AsyncMethodCallback<getAvailableAccounts_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAvailableAccounts_call method_call = new getAvailableAccounts_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAvailableAccounts_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAvailableAccounts_call(org.apache.thrift.async.AsyncMethodCallback<getAvailableAccounts_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAvailableAccounts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAvailableAccounts_args args = new getAvailableAccounts_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Account> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAvailableAccounts();
      }
    }

    public void getAccount(int accountId, org.apache.thrift.async.AsyncMethodCallback<getAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccount_call method_call = new getAccount_call(accountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int accountId;
      public getAccount_call(int accountId, org.apache.thrift.async.AsyncMethodCallback<getAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountId = accountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccount_args args = new getAccount_args();
        args.setAccountId(accountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Account getResult() throws NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccount();
      }
    }

    public void getAccountItems(int accountId, org.apache.thrift.async.AsyncMethodCallback<getAccountItems_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccountItems_call method_call = new getAccountItems_call(accountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAccountItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int accountId;
      public getAccountItems_call(int accountId, org.apache.thrift.async.AsyncMethodCallback<getAccountItems_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountId = accountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccountItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccountItems_args args = new getAccountItems_args();
        args.setAccountId(accountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AccountInfo getResult() throws NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccountItems();
      }
    }

    public void setDoNotUploadAnymoreMarks(List<AccountItemWithMark> items, org.apache.thrift.async.AsyncMethodCallback<setDoNotUploadAnymoreMarks_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDoNotUploadAnymoreMarks_call method_call = new setDoNotUploadAnymoreMarks_call(items, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDoNotUploadAnymoreMarks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<AccountItemWithMark> items;
      public setDoNotUploadAnymoreMarks_call(List<AccountItemWithMark> items, org.apache.thrift.async.AsyncMethodCallback<setDoNotUploadAnymoreMarks_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.items = items;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDoNotUploadAnymoreMarks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDoNotUploadAnymoreMarks_args args = new setDoNotUploadAnymoreMarks_args();
        args.setItems(items);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void deleteAccount(int accountId, org.apache.thrift.async.AsyncMethodCallback<deleteAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAccount_call method_call = new deleteAccount_call(accountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int accountId;
      public deleteAccount_call(int accountId, org.apache.thrift.async.AsyncMethodCallback<deleteAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountId = accountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAccount_args args = new deleteAccount_args();
        args.setAccountId(accountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAccount();
      }
    }

    public void getXMLRegisters(int contractId, long beginDate, long endDate, String infisCode, String obsoleteInfisCode, String smoNumber, List<Integer> orgStructureIdList, Set<PatientOptionalFields> patientOptionalFields, Set<PersonOptionalFields> personOptionalFields, Set<SluchOptionalFields> sluchOptionalFields, boolean primaryAccount, String levelMO, org.apache.thrift.async.AsyncMethodCallback<getXMLRegisters_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getXMLRegisters_call method_call = new getXMLRegisters_call(contractId, beginDate, endDate, infisCode, obsoleteInfisCode, smoNumber, orgStructureIdList, patientOptionalFields, personOptionalFields, sluchOptionalFields, primaryAccount, levelMO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getXMLRegisters_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int contractId;
      private long beginDate;
      private long endDate;
      private String infisCode;
      private String obsoleteInfisCode;
      private String smoNumber;
      private List<Integer> orgStructureIdList;
      private Set<PatientOptionalFields> patientOptionalFields;
      private Set<PersonOptionalFields> personOptionalFields;
      private Set<SluchOptionalFields> sluchOptionalFields;
      private boolean primaryAccount;
      private String levelMO;
      public getXMLRegisters_call(int contractId, long beginDate, long endDate, String infisCode, String obsoleteInfisCode, String smoNumber, List<Integer> orgStructureIdList, Set<PatientOptionalFields> patientOptionalFields, Set<PersonOptionalFields> personOptionalFields, Set<SluchOptionalFields> sluchOptionalFields, boolean primaryAccount, String levelMO, org.apache.thrift.async.AsyncMethodCallback<getXMLRegisters_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractId = contractId;
        this.beginDate = beginDate;
        this.endDate = endDate;
        this.infisCode = infisCode;
        this.obsoleteInfisCode = obsoleteInfisCode;
        this.smoNumber = smoNumber;
        this.orgStructureIdList = orgStructureIdList;
        this.patientOptionalFields = patientOptionalFields;
        this.personOptionalFields = personOptionalFields;
        this.sluchOptionalFields = sluchOptionalFields;
        this.primaryAccount = primaryAccount;
        this.levelMO = levelMO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getXMLRegisters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getXMLRegisters_args args = new getXMLRegisters_args();
        args.setContractId(contractId);
        args.setBeginDate(beginDate);
        args.setEndDate(endDate);
        args.setInfisCode(infisCode);
        args.setObsoleteInfisCode(obsoleteInfisCode);
        args.setSmoNumber(smoNumber);
        args.setOrgStructureIdList(orgStructureIdList);
        args.setPatientOptionalFields(patientOptionalFields);
        args.setPersonOptionalFields(personOptionalFields);
        args.setSluchOptionalFields(sluchOptionalFields);
        args.setPrimaryAccount(primaryAccount);
        args.setLevelMO(levelMO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public XMLRegisters getResult() throws InvalidOrganizationInfisException, InvalidContractException, InvalidDateIntervalException, InvalidArgumentException, NotFoundException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getXMLRegisters();
      }
    }

    public void getOrgStructures(String organisationInfis, org.apache.thrift.async.AsyncMethodCallback<getOrgStructures_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrgStructures_call method_call = new getOrgStructures_call(organisationInfis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrgStructures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String organisationInfis;
      public getOrgStructures_call(String organisationInfis, org.apache.thrift.async.AsyncMethodCallback<getOrgStructures_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.organisationInfis = organisationInfis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgStructures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrgStructures_args args = new getOrgStructures_args();
        args.setOrganisationInfis(organisationInfis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OrgStructure> getResult() throws InvalidOrganizationInfisException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrgStructures();
      }
    }

    public void getAvailableContracts(String organisationInfis, org.apache.thrift.async.AsyncMethodCallback<getAvailableContracts_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAvailableContracts_call method_call = new getAvailableContracts_call(organisationInfis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAvailableContracts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String organisationInfis;
      public getAvailableContracts_call(String organisationInfis, org.apache.thrift.async.AsyncMethodCallback<getAvailableContracts_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.organisationInfis = organisationInfis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAvailableContracts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAvailableContracts_args args = new getAvailableContracts_args();
        args.setOrganisationInfis(organisationInfis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Contract> getResult() throws InvalidOrganizationInfisException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAvailableContracts();
      }
    }

    public void changeClientPolicy(int patientId, TClientPolicy newPolicy, org.apache.thrift.async.AsyncMethodCallback<changeClientPolicy_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeClientPolicy_call method_call = new changeClientPolicy_call(patientId, newPolicy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeClientPolicy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int patientId;
      private TClientPolicy newPolicy;
      public changeClientPolicy_call(int patientId, TClientPolicy newPolicy, org.apache.thrift.async.AsyncMethodCallback<changeClientPolicy_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patientId = patientId;
        this.newPolicy = newPolicy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeClientPolicy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeClientPolicy_args args = new changeClientPolicy_args();
        args.setPatientId(patientId);
        args.setNewPolicy(newPolicy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws InvalidArgumentException, SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeClientPolicy();
      }
    }

    public void loadTfomsPayments(String fileName, List<Payment> payments, int refusedAmount, int payedAmount, double payedSum, double refusedSum, String accountNumber, String comment, org.apache.thrift.async.AsyncMethodCallback<loadTfomsPayments_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadTfomsPayments_call method_call = new loadTfomsPayments_call(fileName, payments, refusedAmount, payedAmount, payedSum, refusedSum, accountNumber, comment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadTfomsPayments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fileName;
      private List<Payment> payments;
      private int refusedAmount;
      private int payedAmount;
      private double payedSum;
      private double refusedSum;
      private String accountNumber;
      private String comment;
      public loadTfomsPayments_call(String fileName, List<Payment> payments, int refusedAmount, int payedAmount, double payedSum, double refusedSum, String accountNumber, String comment, org.apache.thrift.async.AsyncMethodCallback<loadTfomsPayments_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
        this.payments = payments;
        this.refusedAmount = refusedAmount;
        this.payedAmount = payedAmount;
        this.payedSum = payedSum;
        this.refusedSum = refusedSum;
        this.accountNumber = accountNumber;
        this.comment = comment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadTfomsPayments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadTfomsPayments_args args = new loadTfomsPayments_args();
        args.setFileName(fileName);
        args.setPayments(payments);
        args.setRefusedAmount(refusedAmount);
        args.setPayedAmount(payedAmount);
        args.setPayedSum(payedSum);
        args.setRefusedSum(refusedSum);
        args.setAccountNumber(accountNumber);
        args.setComment(comment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,String> getResult() throws NotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadTfomsPayments();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAvailableAccounts", new getAvailableAccounts());
      processMap.put("getAccount", new getAccount());
      processMap.put("getAccountItems", new getAccountItems());
      processMap.put("setDoNotUploadAnymoreMarks", new setDoNotUploadAnymoreMarks());
      processMap.put("deleteAccount", new deleteAccount());
      processMap.put("getXMLRegisters", new getXMLRegisters());
      processMap.put("getOrgStructures", new getOrgStructures());
      processMap.put("getAvailableContracts", new getAvailableContracts());
      processMap.put("changeClientPolicy", new changeClientPolicy());
      processMap.put("loadTfomsPayments", new loadTfomsPayments());
      return processMap;
    }

    public static class getAvailableAccounts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAvailableAccounts_args> {
      public getAvailableAccounts() {
        super("getAvailableAccounts");
      }

      public getAvailableAccounts_args getEmptyArgsInstance() {
        return new getAvailableAccounts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAvailableAccounts_result getResult(I iface, getAvailableAccounts_args args) throws org.apache.thrift.TException {
        getAvailableAccounts_result result = new getAvailableAccounts_result();
        result.success = iface.getAvailableAccounts();
        return result;
      }
    }

    public static class getAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccount_args> {
      public getAccount() {
        super("getAccount");
      }

      public getAccount_args getEmptyArgsInstance() {
        return new getAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAccount_result getResult(I iface, getAccount_args args) throws org.apache.thrift.TException {
        getAccount_result result = new getAccount_result();
        try {
          result.success = iface.getAccount(args.accountId);
        } catch (NotFoundException nfExc) {
          result.nfExc = nfExc;
        }
        return result;
      }
    }

    public static class getAccountItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccountItems_args> {
      public getAccountItems() {
        super("getAccountItems");
      }

      public getAccountItems_args getEmptyArgsInstance() {
        return new getAccountItems_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAccountItems_result getResult(I iface, getAccountItems_args args) throws org.apache.thrift.TException {
        getAccountItems_result result = new getAccountItems_result();
        try {
          result.success = iface.getAccountItems(args.accountId);
        } catch (NotFoundException nfExc) {
          result.nfExc = nfExc;
        }
        return result;
      }
    }

    public static class setDoNotUploadAnymoreMarks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDoNotUploadAnymoreMarks_args> {
      public setDoNotUploadAnymoreMarks() {
        super("setDoNotUploadAnymoreMarks");
      }

      public setDoNotUploadAnymoreMarks_args getEmptyArgsInstance() {
        return new setDoNotUploadAnymoreMarks_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, setDoNotUploadAnymoreMarks_args args) throws org.apache.thrift.TException {
        iface.setDoNotUploadAnymoreMarks(args.items);
        return null;
      }
    }

    public static class deleteAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAccount_args> {
      public deleteAccount() {
        super("deleteAccount");
      }

      public deleteAccount_args getEmptyArgsInstance() {
        return new deleteAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteAccount_result getResult(I iface, deleteAccount_args args) throws org.apache.thrift.TException {
        deleteAccount_result result = new deleteAccount_result();
        result.success = iface.deleteAccount(args.accountId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getXMLRegisters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getXMLRegisters_args> {
      public getXMLRegisters() {
        super("getXMLRegisters");
      }

      public getXMLRegisters_args getEmptyArgsInstance() {
        return new getXMLRegisters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getXMLRegisters_result getResult(I iface, getXMLRegisters_args args) throws org.apache.thrift.TException {
        getXMLRegisters_result result = new getXMLRegisters_result();
        try {
          result.success = iface.getXMLRegisters(args.contractId, args.beginDate, args.endDate, args.infisCode, args.obsoleteInfisCode, args.smoNumber, args.orgStructureIdList, args.patientOptionalFields, args.personOptionalFields, args.sluchOptionalFields, args.primaryAccount, args.levelMO);
        } catch (InvalidOrganizationInfisException infisExc) {
          result.infisExc = infisExc;
        } catch (InvalidContractException contractExc) {
          result.contractExc = contractExc;
        } catch (InvalidDateIntervalException datesExc) {
          result.datesExc = datesExc;
        } catch (InvalidArgumentException invExc) {
          result.invExc = invExc;
        } catch (NotFoundException nfExc) {
          result.nfExc = nfExc;
        } catch (SQLException sqlExc) {
          result.sqlExc = sqlExc;
        }
        return result;
      }
    }

    public static class getOrgStructures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgStructures_args> {
      public getOrgStructures() {
        super("getOrgStructures");
      }

      public getOrgStructures_args getEmptyArgsInstance() {
        return new getOrgStructures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrgStructures_result getResult(I iface, getOrgStructures_args args) throws org.apache.thrift.TException {
        getOrgStructures_result result = new getOrgStructures_result();
        try {
          result.success = iface.getOrgStructures(args.organisationInfis);
        } catch (InvalidOrganizationInfisException infisExc) {
          result.infisExc = infisExc;
        }
        return result;
      }
    }

    public static class getAvailableContracts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAvailableContracts_args> {
      public getAvailableContracts() {
        super("getAvailableContracts");
      }

      public getAvailableContracts_args getEmptyArgsInstance() {
        return new getAvailableContracts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAvailableContracts_result getResult(I iface, getAvailableContracts_args args) throws org.apache.thrift.TException {
        getAvailableContracts_result result = new getAvailableContracts_result();
        try {
          result.success = iface.getAvailableContracts(args.organisationInfis);
        } catch (InvalidOrganizationInfisException infisExc) {
          result.infisExc = infisExc;
        }
        return result;
      }
    }

    public static class changeClientPolicy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeClientPolicy_args> {
      public changeClientPolicy() {
        super("changeClientPolicy");
      }

      public changeClientPolicy_args getEmptyArgsInstance() {
        return new changeClientPolicy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeClientPolicy_result getResult(I iface, changeClientPolicy_args args) throws org.apache.thrift.TException {
        changeClientPolicy_result result = new changeClientPolicy_result();
        try {
          result.success = iface.changeClientPolicy(args.patientId, args.newPolicy);
          result.setSuccessIsSet(true);
        } catch (InvalidArgumentException argExc) {
          result.argExc = argExc;
        } catch (SQLException sqlExc) {
          result.sqlExc = sqlExc;
        }
        return result;
      }
    }

    public static class loadTfomsPayments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadTfomsPayments_args> {
      public loadTfomsPayments() {
        super("loadTfomsPayments");
      }

      public loadTfomsPayments_args getEmptyArgsInstance() {
        return new loadTfomsPayments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadTfomsPayments_result getResult(I iface, loadTfomsPayments_args args) throws org.apache.thrift.TException {
        loadTfomsPayments_result result = new loadTfomsPayments_result();
        try {
          result.success = iface.loadTfomsPayments(args.fileName, args.payments, args.refusedAmount, args.payedAmount, args.payedSum, args.refusedSum, args.accountNumber, args.comment);
        } catch (NotFoundException nfExc) {
          result.nfExc = nfExc;
        }
        return result;
      }
    }

  }

  public static class getAvailableAccounts_args implements org.apache.thrift.TBase<getAvailableAccounts_args, getAvailableAccounts_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAvailableAccounts_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAvailableAccounts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAvailableAccounts_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAvailableAccounts_args.class, metaDataMap);
    }

    public getAvailableAccounts_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAvailableAccounts_args(getAvailableAccounts_args other) {
    }

    public getAvailableAccounts_args deepCopy() {
      return new getAvailableAccounts_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAvailableAccounts_args)
        return this.equals((getAvailableAccounts_args)that);
      return false;
    }

    public boolean equals(getAvailableAccounts_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAvailableAccounts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAvailableAccounts_args typedOther = (getAvailableAccounts_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAvailableAccounts_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAvailableAccounts_argsStandardSchemeFactory implements SchemeFactory {
      public getAvailableAccounts_argsStandardScheme getScheme() {
        return new getAvailableAccounts_argsStandardScheme();
      }
    }

    private static class getAvailableAccounts_argsStandardScheme extends StandardScheme<getAvailableAccounts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAvailableAccounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAvailableAccounts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAvailableAccounts_argsTupleSchemeFactory implements SchemeFactory {
      public getAvailableAccounts_argsTupleScheme getScheme() {
        return new getAvailableAccounts_argsTupleScheme();
      }
    }

    private static class getAvailableAccounts_argsTupleScheme extends TupleScheme<getAvailableAccounts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAvailableAccounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAvailableAccounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAvailableAccounts_result implements org.apache.thrift.TBase<getAvailableAccounts_result, getAvailableAccounts_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAvailableAccounts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAvailableAccounts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAvailableAccounts_resultTupleSchemeFactory());
    }

    public List<Account> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Account.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAvailableAccounts_result.class, metaDataMap);
    }

    public getAvailableAccounts_result() {
    }

    public getAvailableAccounts_result(
      List<Account> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAvailableAccounts_result(getAvailableAccounts_result other) {
      if (other.isSetSuccess()) {
        List<Account> __this__success = new ArrayList<Account>();
        for (Account other_element : other.success) {
          __this__success.add(new Account(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAvailableAccounts_result deepCopy() {
      return new getAvailableAccounts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Account> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Account elem) {
      if (this.success == null) {
        this.success = new ArrayList<Account>();
      }
      this.success.add(elem);
    }

    public List<Account> getSuccess() {
      return this.success;
    }

    public getAvailableAccounts_result setSuccess(List<Account> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Account>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAvailableAccounts_result)
        return this.equals((getAvailableAccounts_result)that);
      return false;
    }

    public boolean equals(getAvailableAccounts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAvailableAccounts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAvailableAccounts_result typedOther = (getAvailableAccounts_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAvailableAccounts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAvailableAccounts_resultStandardSchemeFactory implements SchemeFactory {
      public getAvailableAccounts_resultStandardScheme getScheme() {
        return new getAvailableAccounts_resultStandardScheme();
      }
    }

    private static class getAvailableAccounts_resultStandardScheme extends StandardScheme<getAvailableAccounts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAvailableAccounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new ArrayList<Account>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    Account _elem44; // required
                    _elem44 = new Account();
                    _elem44.read(iprot);
                    struct.success.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAvailableAccounts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Account _iter45 : struct.success)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAvailableAccounts_resultTupleSchemeFactory implements SchemeFactory {
      public getAvailableAccounts_resultTupleScheme getScheme() {
        return new getAvailableAccounts_resultTupleScheme();
      }
    }

    private static class getAvailableAccounts_resultTupleScheme extends TupleScheme<getAvailableAccounts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAvailableAccounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Account _iter46 : struct.success)
            {
              _iter46.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAvailableAccounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Account>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              Account _elem49; // required
              _elem49 = new Account();
              _elem49.read(iprot);
              struct.success.add(_elem49);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAccount_args implements org.apache.thrift.TBase<getAccount_args, getAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccount_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAccount_argsTupleSchemeFactory());
    }

    public int accountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccount_args.class, metaDataMap);
    }

    public getAccount_args() {
    }

    public getAccount_args(
      int accountId)
    {
      this();
      this.accountId = accountId;
      setAccountIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccount_args(getAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.accountId = other.accountId;
    }

    public getAccount_args deepCopy() {
      return new getAccount_args(this);
    }

    @Override
    public void clear() {
      setAccountIdIsSet(false);
      this.accountId = 0;
    }

    public int getAccountId() {
      return this.accountId;
    }

    public getAccount_args setAccountId(int accountId) {
      this.accountId = accountId;
      setAccountIdIsSet(true);
      return this;
    }

    public void unsetAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    public void setAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return Integer.valueOf(getAccountId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccount_args)
        return this.equals((getAccount_args)that);
      return false;
    }

    public boolean equals(getAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_accountId = true;
      boolean that_present_accountId = true;
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (this.accountId != that.accountId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccount_args typedOther = (getAccount_args)other;

      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(typedOther.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, typedOther.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccount_args(");
      boolean first = true;

      sb.append("accountId:");
      sb.append(this.accountId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccount_argsStandardSchemeFactory implements SchemeFactory {
      public getAccount_argsStandardScheme getScheme() {
        return new getAccount_argsStandardScheme();
      }
    }

    private static class getAccount_argsStandardScheme extends StandardScheme<getAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.accountId = iprot.readI32();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.accountId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccount_argsTupleSchemeFactory implements SchemeFactory {
      public getAccount_argsTupleScheme getScheme() {
        return new getAccount_argsTupleScheme();
      }
    }

    private static class getAccount_argsTupleScheme extends TupleScheme<getAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccountId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccountId()) {
          oprot.writeI32(struct.accountId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.accountId = iprot.readI32();
          struct.setAccountIdIsSet(true);
        }
      }
    }

  }

  public static class getAccount_result implements org.apache.thrift.TBase<getAccount_result, getAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField NF_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("nfExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAccount_resultTupleSchemeFactory());
    }

    public Account success; // required
    public NotFoundException nfExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NF_EXC((short)1, "nfExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NF_EXC
            return NF_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Account.class)));
      tmpMap.put(_Fields.NF_EXC, new org.apache.thrift.meta_data.FieldMetaData("nfExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccount_result.class, metaDataMap);
    }

    public getAccount_result() {
    }

    public getAccount_result(
      Account success,
      NotFoundException nfExc)
    {
      this();
      this.success = success;
      this.nfExc = nfExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccount_result(getAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new Account(other.success);
      }
      if (other.isSetNfExc()) {
        this.nfExc = new NotFoundException(other.nfExc);
      }
    }

    public getAccount_result deepCopy() {
      return new getAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.nfExc = null;
    }

    public Account getSuccess() {
      return this.success;
    }

    public getAccount_result setSuccess(Account success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getNfExc() {
      return this.nfExc;
    }

    public getAccount_result setNfExc(NotFoundException nfExc) {
      this.nfExc = nfExc;
      return this;
    }

    public void unsetNfExc() {
      this.nfExc = null;
    }

    /** Returns true if field nfExc is set (has been assigned a value) and false otherwise */
    public boolean isSetNfExc() {
      return this.nfExc != null;
    }

    public void setNfExcIsSet(boolean value) {
      if (!value) {
        this.nfExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Account)value);
        }
        break;

      case NF_EXC:
        if (value == null) {
          unsetNfExc();
        } else {
          setNfExc((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NF_EXC:
        return getNfExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NF_EXC:
        return isSetNfExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccount_result)
        return this.equals((getAccount_result)that);
      return false;
    }

    public boolean equals(getAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nfExc = true && this.isSetNfExc();
      boolean that_present_nfExc = true && that.isSetNfExc();
      if (this_present_nfExc || that_present_nfExc) {
        if (!(this_present_nfExc && that_present_nfExc))
          return false;
        if (!this.nfExc.equals(that.nfExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccount_result typedOther = (getAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNfExc()).compareTo(typedOther.isSetNfExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNfExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nfExc, typedOther.nfExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nfExc:");
      if (this.nfExc == null) {
        sb.append("null");
      } else {
        sb.append(this.nfExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccount_resultStandardSchemeFactory implements SchemeFactory {
      public getAccount_resultStandardScheme getScheme() {
        return new getAccount_resultStandardScheme();
      }
    }

    private static class getAccount_resultStandardScheme extends StandardScheme<getAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Account();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NF_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nfExc = new NotFoundException();
                struct.nfExc.read(iprot);
                struct.setNfExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nfExc != null) {
          oprot.writeFieldBegin(NF_EXC_FIELD_DESC);
          struct.nfExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccount_resultTupleSchemeFactory implements SchemeFactory {
      public getAccount_resultTupleScheme getScheme() {
        return new getAccount_resultTupleScheme();
      }
    }

    private static class getAccount_resultTupleScheme extends TupleScheme<getAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNfExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetNfExc()) {
          struct.nfExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Account();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nfExc = new NotFoundException();
          struct.nfExc.read(iprot);
          struct.setNfExcIsSet(true);
        }
      }
    }

  }

  public static class getAccountItems_args implements org.apache.thrift.TBase<getAccountItems_args, getAccountItems_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountItems_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAccountItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAccountItems_argsTupleSchemeFactory());
    }

    public int accountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountItems_args.class, metaDataMap);
    }

    public getAccountItems_args() {
    }

    public getAccountItems_args(
      int accountId)
    {
      this();
      this.accountId = accountId;
      setAccountIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountItems_args(getAccountItems_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.accountId = other.accountId;
    }

    public getAccountItems_args deepCopy() {
      return new getAccountItems_args(this);
    }

    @Override
    public void clear() {
      setAccountIdIsSet(false);
      this.accountId = 0;
    }

    public int getAccountId() {
      return this.accountId;
    }

    public getAccountItems_args setAccountId(int accountId) {
      this.accountId = accountId;
      setAccountIdIsSet(true);
      return this;
    }

    public void unsetAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    public void setAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return Integer.valueOf(getAccountId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountItems_args)
        return this.equals((getAccountItems_args)that);
      return false;
    }

    public boolean equals(getAccountItems_args that) {
      if (that == null)
        return false;

      boolean this_present_accountId = true;
      boolean that_present_accountId = true;
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (this.accountId != that.accountId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccountItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccountItems_args typedOther = (getAccountItems_args)other;

      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(typedOther.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, typedOther.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccountItems_args(");
      boolean first = true;

      sb.append("accountId:");
      sb.append(this.accountId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountItems_argsStandardSchemeFactory implements SchemeFactory {
      public getAccountItems_argsStandardScheme getScheme() {
        return new getAccountItems_argsStandardScheme();
      }
    }

    private static class getAccountItems_argsStandardScheme extends StandardScheme<getAccountItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.accountId = iprot.readI32();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.accountId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountItems_argsTupleSchemeFactory implements SchemeFactory {
      public getAccountItems_argsTupleScheme getScheme() {
        return new getAccountItems_argsTupleScheme();
      }
    }

    private static class getAccountItems_argsTupleScheme extends TupleScheme<getAccountItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccountId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccountId()) {
          oprot.writeI32(struct.accountId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.accountId = iprot.readI32();
          struct.setAccountIdIsSet(true);
        }
      }
    }

  }

  public static class getAccountItems_result implements org.apache.thrift.TBase<getAccountItems_result, getAccountItems_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField NF_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("nfExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAccountItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAccountItems_resultTupleSchemeFactory());
    }

    public AccountInfo success; // required
    public NotFoundException nfExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NF_EXC((short)1, "nfExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NF_EXC
            return NF_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountInfo.class)));
      tmpMap.put(_Fields.NF_EXC, new org.apache.thrift.meta_data.FieldMetaData("nfExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountItems_result.class, metaDataMap);
    }

    public getAccountItems_result() {
    }

    public getAccountItems_result(
      AccountInfo success,
      NotFoundException nfExc)
    {
      this();
      this.success = success;
      this.nfExc = nfExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountItems_result(getAccountItems_result other) {
      if (other.isSetSuccess()) {
        this.success = new AccountInfo(other.success);
      }
      if (other.isSetNfExc()) {
        this.nfExc = new NotFoundException(other.nfExc);
      }
    }

    public getAccountItems_result deepCopy() {
      return new getAccountItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.nfExc = null;
    }

    public AccountInfo getSuccess() {
      return this.success;
    }

    public getAccountItems_result setSuccess(AccountInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getNfExc() {
      return this.nfExc;
    }

    public getAccountItems_result setNfExc(NotFoundException nfExc) {
      this.nfExc = nfExc;
      return this;
    }

    public void unsetNfExc() {
      this.nfExc = null;
    }

    /** Returns true if field nfExc is set (has been assigned a value) and false otherwise */
    public boolean isSetNfExc() {
      return this.nfExc != null;
    }

    public void setNfExcIsSet(boolean value) {
      if (!value) {
        this.nfExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AccountInfo)value);
        }
        break;

      case NF_EXC:
        if (value == null) {
          unsetNfExc();
        } else {
          setNfExc((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NF_EXC:
        return getNfExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NF_EXC:
        return isSetNfExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountItems_result)
        return this.equals((getAccountItems_result)that);
      return false;
    }

    public boolean equals(getAccountItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nfExc = true && this.isSetNfExc();
      boolean that_present_nfExc = true && that.isSetNfExc();
      if (this_present_nfExc || that_present_nfExc) {
        if (!(this_present_nfExc && that_present_nfExc))
          return false;
        if (!this.nfExc.equals(that.nfExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccountItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccountItems_result typedOther = (getAccountItems_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNfExc()).compareTo(typedOther.isSetNfExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNfExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nfExc, typedOther.nfExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAccountItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nfExc:");
      if (this.nfExc == null) {
        sb.append("null");
      } else {
        sb.append(this.nfExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountItems_resultStandardSchemeFactory implements SchemeFactory {
      public getAccountItems_resultStandardScheme getScheme() {
        return new getAccountItems_resultStandardScheme();
      }
    }

    private static class getAccountItems_resultStandardScheme extends StandardScheme<getAccountItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AccountInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NF_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nfExc = new NotFoundException();
                struct.nfExc.read(iprot);
                struct.setNfExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nfExc != null) {
          oprot.writeFieldBegin(NF_EXC_FIELD_DESC);
          struct.nfExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountItems_resultTupleSchemeFactory implements SchemeFactory {
      public getAccountItems_resultTupleScheme getScheme() {
        return new getAccountItems_resultTupleScheme();
      }
    }

    private static class getAccountItems_resultTupleScheme extends TupleScheme<getAccountItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNfExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetNfExc()) {
          struct.nfExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AccountInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nfExc = new NotFoundException();
          struct.nfExc.read(iprot);
          struct.setNfExcIsSet(true);
        }
      }
    }

  }

  public static class setDoNotUploadAnymoreMarks_args implements org.apache.thrift.TBase<setDoNotUploadAnymoreMarks_args, setDoNotUploadAnymoreMarks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDoNotUploadAnymoreMarks_args");

    private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDoNotUploadAnymoreMarks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDoNotUploadAnymoreMarks_argsTupleSchemeFactory());
    }

    public List<AccountItemWithMark> items; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEMS((short)1, "items");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEMS
            return ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountItemWithMark.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDoNotUploadAnymoreMarks_args.class, metaDataMap);
    }

    public setDoNotUploadAnymoreMarks_args() {
    }

    public setDoNotUploadAnymoreMarks_args(
      List<AccountItemWithMark> items)
    {
      this();
      this.items = items;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDoNotUploadAnymoreMarks_args(setDoNotUploadAnymoreMarks_args other) {
      if (other.isSetItems()) {
        List<AccountItemWithMark> __this__items = new ArrayList<AccountItemWithMark>();
        for (AccountItemWithMark other_element : other.items) {
          __this__items.add(new AccountItemWithMark(other_element));
        }
        this.items = __this__items;
      }
    }

    public setDoNotUploadAnymoreMarks_args deepCopy() {
      return new setDoNotUploadAnymoreMarks_args(this);
    }

    @Override
    public void clear() {
      this.items = null;
    }

    public int getItemsSize() {
      return (this.items == null) ? 0 : this.items.size();
    }

    public java.util.Iterator<AccountItemWithMark> getItemsIterator() {
      return (this.items == null) ? null : this.items.iterator();
    }

    public void addToItems(AccountItemWithMark elem) {
      if (this.items == null) {
        this.items = new ArrayList<AccountItemWithMark>();
      }
      this.items.add(elem);
    }

    public List<AccountItemWithMark> getItems() {
      return this.items;
    }

    public setDoNotUploadAnymoreMarks_args setItems(List<AccountItemWithMark> items) {
      this.items = items;
      return this;
    }

    public void unsetItems() {
      this.items = null;
    }

    /** Returns true if field items is set (has been assigned a value) and false otherwise */
    public boolean isSetItems() {
      return this.items != null;
    }

    public void setItemsIsSet(boolean value) {
      if (!value) {
        this.items = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEMS:
        if (value == null) {
          unsetItems();
        } else {
          setItems((List<AccountItemWithMark>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEMS:
        return getItems();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEMS:
        return isSetItems();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDoNotUploadAnymoreMarks_args)
        return this.equals((setDoNotUploadAnymoreMarks_args)that);
      return false;
    }

    public boolean equals(setDoNotUploadAnymoreMarks_args that) {
      if (that == null)
        return false;

      boolean this_present_items = true && this.isSetItems();
      boolean that_present_items = true && that.isSetItems();
      if (this_present_items || that_present_items) {
        if (!(this_present_items && that_present_items))
          return false;
        if (!this.items.equals(that.items))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDoNotUploadAnymoreMarks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDoNotUploadAnymoreMarks_args typedOther = (setDoNotUploadAnymoreMarks_args)other;

      lastComparison = Boolean.valueOf(isSetItems()).compareTo(typedOther.isSetItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, typedOther.items);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDoNotUploadAnymoreMarks_args(");
      boolean first = true;

      sb.append("items:");
      if (this.items == null) {
        sb.append("null");
      } else {
        sb.append(this.items);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDoNotUploadAnymoreMarks_argsStandardSchemeFactory implements SchemeFactory {
      public setDoNotUploadAnymoreMarks_argsStandardScheme getScheme() {
        return new setDoNotUploadAnymoreMarks_argsStandardScheme();
      }
    }

    private static class setDoNotUploadAnymoreMarks_argsStandardScheme extends StandardScheme<setDoNotUploadAnymoreMarks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDoNotUploadAnymoreMarks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.items = new ArrayList<AccountItemWithMark>(_list50.size);
                  for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                  {
                    AccountItemWithMark _elem52; // required
                    _elem52 = new AccountItemWithMark();
                    _elem52.read(iprot);
                    struct.items.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDoNotUploadAnymoreMarks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.items != null) {
          oprot.writeFieldBegin(ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
            for (AccountItemWithMark _iter53 : struct.items)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDoNotUploadAnymoreMarks_argsTupleSchemeFactory implements SchemeFactory {
      public setDoNotUploadAnymoreMarks_argsTupleScheme getScheme() {
        return new setDoNotUploadAnymoreMarks_argsTupleScheme();
      }
    }

    private static class setDoNotUploadAnymoreMarks_argsTupleScheme extends TupleScheme<setDoNotUploadAnymoreMarks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDoNotUploadAnymoreMarks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItems()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetItems()) {
          {
            oprot.writeI32(struct.items.size());
            for (AccountItemWithMark _iter54 : struct.items)
            {
              _iter54.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDoNotUploadAnymoreMarks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.items = new ArrayList<AccountItemWithMark>(_list55.size);
            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
            {
              AccountItemWithMark _elem57; // required
              _elem57 = new AccountItemWithMark();
              _elem57.read(iprot);
              struct.items.add(_elem57);
            }
          }
          struct.setItemsIsSet(true);
        }
      }
    }

  }

  public static class deleteAccount_args implements org.apache.thrift.TBase<deleteAccount_args, deleteAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAccount_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAccount_argsTupleSchemeFactory());
    }

    public int accountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAccount_args.class, metaDataMap);
    }

    public deleteAccount_args() {
    }

    public deleteAccount_args(
      int accountId)
    {
      this();
      this.accountId = accountId;
      setAccountIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAccount_args(deleteAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.accountId = other.accountId;
    }

    public deleteAccount_args deepCopy() {
      return new deleteAccount_args(this);
    }

    @Override
    public void clear() {
      setAccountIdIsSet(false);
      this.accountId = 0;
    }

    public int getAccountId() {
      return this.accountId;
    }

    public deleteAccount_args setAccountId(int accountId) {
      this.accountId = accountId;
      setAccountIdIsSet(true);
      return this;
    }

    public void unsetAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    public void setAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return Integer.valueOf(getAccountId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAccount_args)
        return this.equals((deleteAccount_args)that);
      return false;
    }

    public boolean equals(deleteAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_accountId = true;
      boolean that_present_accountId = true;
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (this.accountId != that.accountId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteAccount_args typedOther = (deleteAccount_args)other;

      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(typedOther.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, typedOther.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAccount_args(");
      boolean first = true;

      sb.append("accountId:");
      sb.append(this.accountId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAccount_argsStandardSchemeFactory implements SchemeFactory {
      public deleteAccount_argsStandardScheme getScheme() {
        return new deleteAccount_argsStandardScheme();
      }
    }

    private static class deleteAccount_argsStandardScheme extends StandardScheme<deleteAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.accountId = iprot.readI32();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.accountId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAccount_argsTupleSchemeFactory implements SchemeFactory {
      public deleteAccount_argsTupleScheme getScheme() {
        return new deleteAccount_argsTupleScheme();
      }
    }

    private static class deleteAccount_argsTupleScheme extends TupleScheme<deleteAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccountId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccountId()) {
          oprot.writeI32(struct.accountId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.accountId = iprot.readI32();
          struct.setAccountIdIsSet(true);
        }
      }
    }

  }

  public static class deleteAccount_result implements org.apache.thrift.TBase<deleteAccount_result, deleteAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAccount_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAccount_result.class, metaDataMap);
    }

    public deleteAccount_result() {
    }

    public deleteAccount_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAccount_result(deleteAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteAccount_result deepCopy() {
      return new deleteAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteAccount_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAccount_result)
        return this.equals((deleteAccount_result)that);
      return false;
    }

    public boolean equals(deleteAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteAccount_result typedOther = (deleteAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAccount_resultStandardSchemeFactory implements SchemeFactory {
      public deleteAccount_resultStandardScheme getScheme() {
        return new deleteAccount_resultStandardScheme();
      }
    }

    private static class deleteAccount_resultStandardScheme extends StandardScheme<deleteAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAccount_resultTupleSchemeFactory implements SchemeFactory {
      public deleteAccount_resultTupleScheme getScheme() {
        return new deleteAccount_resultTupleScheme();
      }
    }

    private static class deleteAccount_resultTupleScheme extends TupleScheme<deleteAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getXMLRegisters_args implements org.apache.thrift.TBase<getXMLRegisters_args, getXMLRegisters_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXMLRegisters_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BEGIN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("beginDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField INFIS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("infisCode", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField OBSOLETE_INFIS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("obsoleteInfisCode", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SMO_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("smoNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ORG_STRUCTURE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("orgStructureIdList", org.apache.thrift.protocol.TType.LIST, (short)7);
    private static final org.apache.thrift.protocol.TField PATIENT_OPTIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("patientOptionalFields", org.apache.thrift.protocol.TType.SET, (short)8);
    private static final org.apache.thrift.protocol.TField PERSON_OPTIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("personOptionalFields", org.apache.thrift.protocol.TType.SET, (short)9);
    private static final org.apache.thrift.protocol.TField SLUCH_OPTIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sluchOptionalFields", org.apache.thrift.protocol.TType.SET, (short)10);
    private static final org.apache.thrift.protocol.TField PRIMARY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryAccount", org.apache.thrift.protocol.TType.BOOL, (short)11);
    private static final org.apache.thrift.protocol.TField LEVEL_MO_FIELD_DESC = new org.apache.thrift.protocol.TField("levelMO", org.apache.thrift.protocol.TType.STRING, (short)12);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXMLRegisters_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXMLRegisters_argsTupleSchemeFactory());
    }

    public int contractId; // required
    public long beginDate; // required
    public long endDate; // required
    public String infisCode; // required
    public String obsoleteInfisCode; // required
    public String smoNumber; // required
    public List<Integer> orgStructureIdList; // required
    public Set<PatientOptionalFields> patientOptionalFields; // required
    public Set<PersonOptionalFields> personOptionalFields; // required
    public Set<SluchOptionalFields> sluchOptionalFields; // required
    public boolean primaryAccount; // required
    public String levelMO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_ID((short)1, "contractId"),
      BEGIN_DATE((short)2, "beginDate"),
      END_DATE((short)3, "endDate"),
      INFIS_CODE((short)4, "infisCode"),
      OBSOLETE_INFIS_CODE((short)5, "obsoleteInfisCode"),
      SMO_NUMBER((short)6, "smoNumber"),
      ORG_STRUCTURE_ID_LIST((short)7, "orgStructureIdList"),
      PATIENT_OPTIONAL_FIELDS((short)8, "patientOptionalFields"),
      PERSON_OPTIONAL_FIELDS((short)9, "personOptionalFields"),
      SLUCH_OPTIONAL_FIELDS((short)10, "sluchOptionalFields"),
      PRIMARY_ACCOUNT((short)11, "primaryAccount"),
      LEVEL_MO((short)12, "levelMO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_ID
            return CONTRACT_ID;
          case 2: // BEGIN_DATE
            return BEGIN_DATE;
          case 3: // END_DATE
            return END_DATE;
          case 4: // INFIS_CODE
            return INFIS_CODE;
          case 5: // OBSOLETE_INFIS_CODE
            return OBSOLETE_INFIS_CODE;
          case 6: // SMO_NUMBER
            return SMO_NUMBER;
          case 7: // ORG_STRUCTURE_ID_LIST
            return ORG_STRUCTURE_ID_LIST;
          case 8: // PATIENT_OPTIONAL_FIELDS
            return PATIENT_OPTIONAL_FIELDS;
          case 9: // PERSON_OPTIONAL_FIELDS
            return PERSON_OPTIONAL_FIELDS;
          case 10: // SLUCH_OPTIONAL_FIELDS
            return SLUCH_OPTIONAL_FIELDS;
          case 11: // PRIMARY_ACCOUNT
            return PRIMARY_ACCOUNT;
          case 12: // LEVEL_MO
            return LEVEL_MO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONTRACTID_ISSET_ID = 0;
    private static final int __BEGINDATE_ISSET_ID = 1;
    private static final int __ENDDATE_ISSET_ID = 2;
    private static final int __PRIMARYACCOUNT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.BEGIN_DATE, new org.apache.thrift.meta_data.FieldMetaData("beginDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "timestamp")));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "timestamp")));
      tmpMap.put(_Fields.INFIS_CODE, new org.apache.thrift.meta_data.FieldMetaData("infisCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBSOLETE_INFIS_CODE, new org.apache.thrift.meta_data.FieldMetaData("obsoleteInfisCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SMO_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("smoNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_STRUCTURE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("orgStructureIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.PATIENT_OPTIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("patientOptionalFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PatientOptionalFields.class))));
      tmpMap.put(_Fields.PERSON_OPTIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("personOptionalFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PersonOptionalFields.class))));
      tmpMap.put(_Fields.SLUCH_OPTIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("sluchOptionalFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SluchOptionalFields.class))));
      tmpMap.put(_Fields.PRIMARY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("primaryAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LEVEL_MO, new org.apache.thrift.meta_data.FieldMetaData("levelMO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXMLRegisters_args.class, metaDataMap);
    }

    public getXMLRegisters_args() {
    }

    public getXMLRegisters_args(
      int contractId,
      long beginDate,
      long endDate,
      String infisCode,
      String obsoleteInfisCode,
      String smoNumber,
      List<Integer> orgStructureIdList,
      Set<PatientOptionalFields> patientOptionalFields,
      Set<PersonOptionalFields> personOptionalFields,
      Set<SluchOptionalFields> sluchOptionalFields,
      boolean primaryAccount,
      String levelMO)
    {
      this();
      this.contractId = contractId;
      setContractIdIsSet(true);
      this.beginDate = beginDate;
      setBeginDateIsSet(true);
      this.endDate = endDate;
      setEndDateIsSet(true);
      this.infisCode = infisCode;
      this.obsoleteInfisCode = obsoleteInfisCode;
      this.smoNumber = smoNumber;
      this.orgStructureIdList = orgStructureIdList;
      this.patientOptionalFields = patientOptionalFields;
      this.personOptionalFields = personOptionalFields;
      this.sluchOptionalFields = sluchOptionalFields;
      this.primaryAccount = primaryAccount;
      setPrimaryAccountIsSet(true);
      this.levelMO = levelMO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXMLRegisters_args(getXMLRegisters_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.contractId = other.contractId;
      this.beginDate = other.beginDate;
      this.endDate = other.endDate;
      if (other.isSetInfisCode()) {
        this.infisCode = other.infisCode;
      }
      if (other.isSetObsoleteInfisCode()) {
        this.obsoleteInfisCode = other.obsoleteInfisCode;
      }
      if (other.isSetSmoNumber()) {
        this.smoNumber = other.smoNumber;
      }
      if (other.isSetOrgStructureIdList()) {
        List<Integer> __this__orgStructureIdList = new ArrayList<Integer>();
        for (Integer other_element : other.orgStructureIdList) {
          __this__orgStructureIdList.add(other_element);
        }
        this.orgStructureIdList = __this__orgStructureIdList;
      }
      if (other.isSetPatientOptionalFields()) {
        Set<PatientOptionalFields> __this__patientOptionalFields = new HashSet<PatientOptionalFields>();
        for (PatientOptionalFields other_element : other.patientOptionalFields) {
          __this__patientOptionalFields.add(other_element);
        }
        this.patientOptionalFields = __this__patientOptionalFields;
      }
      if (other.isSetPersonOptionalFields()) {
        Set<PersonOptionalFields> __this__personOptionalFields = new HashSet<PersonOptionalFields>();
        for (PersonOptionalFields other_element : other.personOptionalFields) {
          __this__personOptionalFields.add(other_element);
        }
        this.personOptionalFields = __this__personOptionalFields;
      }
      if (other.isSetSluchOptionalFields()) {
        Set<SluchOptionalFields> __this__sluchOptionalFields = new HashSet<SluchOptionalFields>();
        for (SluchOptionalFields other_element : other.sluchOptionalFields) {
          __this__sluchOptionalFields.add(other_element);
        }
        this.sluchOptionalFields = __this__sluchOptionalFields;
      }
      this.primaryAccount = other.primaryAccount;
      if (other.isSetLevelMO()) {
        this.levelMO = other.levelMO;
      }
    }

    public getXMLRegisters_args deepCopy() {
      return new getXMLRegisters_args(this);
    }

    @Override
    public void clear() {
      setContractIdIsSet(false);
      this.contractId = 0;
      setBeginDateIsSet(false);
      this.beginDate = 0;
      setEndDateIsSet(false);
      this.endDate = 0;
      this.infisCode = null;
      this.obsoleteInfisCode = null;
      this.smoNumber = null;
      this.orgStructureIdList = null;
      this.patientOptionalFields = null;
      this.personOptionalFields = null;
      this.sluchOptionalFields = null;
      setPrimaryAccountIsSet(false);
      this.primaryAccount = false;
      this.levelMO = null;
    }

    public int getContractId() {
      return this.contractId;
    }

    public getXMLRegisters_args setContractId(int contractId) {
      this.contractId = contractId;
      setContractIdIsSet(true);
      return this;
    }

    public void unsetContractId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
    }

    /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
    public boolean isSetContractId() {
      return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
    }

    public void setContractIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
    }

    public long getBeginDate() {
      return this.beginDate;
    }

    public getXMLRegisters_args setBeginDate(long beginDate) {
      this.beginDate = beginDate;
      setBeginDateIsSet(true);
      return this;
    }

    public void unsetBeginDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field beginDate is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginDate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBeginDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public long getEndDate() {
      return this.endDate;
    }

    public getXMLRegisters_args setEndDate(long endDate) {
      this.endDate = endDate;
      setEndDateIsSet(true);
      return this;
    }

    public void unsetEndDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEndDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getInfisCode() {
      return this.infisCode;
    }

    public getXMLRegisters_args setInfisCode(String infisCode) {
      this.infisCode = infisCode;
      return this;
    }

    public void unsetInfisCode() {
      this.infisCode = null;
    }

    /** Returns true if field infisCode is set (has been assigned a value) and false otherwise */
    public boolean isSetInfisCode() {
      return this.infisCode != null;
    }

    public void setInfisCodeIsSet(boolean value) {
      if (!value) {
        this.infisCode = null;
      }
    }

    public String getObsoleteInfisCode() {
      return this.obsoleteInfisCode;
    }

    public getXMLRegisters_args setObsoleteInfisCode(String obsoleteInfisCode) {
      this.obsoleteInfisCode = obsoleteInfisCode;
      return this;
    }

    public void unsetObsoleteInfisCode() {
      this.obsoleteInfisCode = null;
    }

    /** Returns true if field obsoleteInfisCode is set (has been assigned a value) and false otherwise */
    public boolean isSetObsoleteInfisCode() {
      return this.obsoleteInfisCode != null;
    }

    public void setObsoleteInfisCodeIsSet(boolean value) {
      if (!value) {
        this.obsoleteInfisCode = null;
      }
    }

    public String getSmoNumber() {
      return this.smoNumber;
    }

    public getXMLRegisters_args setSmoNumber(String smoNumber) {
      this.smoNumber = smoNumber;
      return this;
    }

    public void unsetSmoNumber() {
      this.smoNumber = null;
    }

    /** Returns true if field smoNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetSmoNumber() {
      return this.smoNumber != null;
    }

    public void setSmoNumberIsSet(boolean value) {
      if (!value) {
        this.smoNumber = null;
      }
    }

    public int getOrgStructureIdListSize() {
      return (this.orgStructureIdList == null) ? 0 : this.orgStructureIdList.size();
    }

    public java.util.Iterator<Integer> getOrgStructureIdListIterator() {
      return (this.orgStructureIdList == null) ? null : this.orgStructureIdList.iterator();
    }

    public void addToOrgStructureIdList(int elem) {
      if (this.orgStructureIdList == null) {
        this.orgStructureIdList = new ArrayList<Integer>();
      }
      this.orgStructureIdList.add(elem);
    }

    public List<Integer> getOrgStructureIdList() {
      return this.orgStructureIdList;
    }

    public getXMLRegisters_args setOrgStructureIdList(List<Integer> orgStructureIdList) {
      this.orgStructureIdList = orgStructureIdList;
      return this;
    }

    public void unsetOrgStructureIdList() {
      this.orgStructureIdList = null;
    }

    /** Returns true if field orgStructureIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgStructureIdList() {
      return this.orgStructureIdList != null;
    }

    public void setOrgStructureIdListIsSet(boolean value) {
      if (!value) {
        this.orgStructureIdList = null;
      }
    }

    public int getPatientOptionalFieldsSize() {
      return (this.patientOptionalFields == null) ? 0 : this.patientOptionalFields.size();
    }

    public java.util.Iterator<PatientOptionalFields> getPatientOptionalFieldsIterator() {
      return (this.patientOptionalFields == null) ? null : this.patientOptionalFields.iterator();
    }

    public void addToPatientOptionalFields(PatientOptionalFields elem) {
      if (this.patientOptionalFields == null) {
        this.patientOptionalFields = new HashSet<PatientOptionalFields>();
      }
      this.patientOptionalFields.add(elem);
    }

    public Set<PatientOptionalFields> getPatientOptionalFields() {
      return this.patientOptionalFields;
    }

    public getXMLRegisters_args setPatientOptionalFields(Set<PatientOptionalFields> patientOptionalFields) {
      this.patientOptionalFields = patientOptionalFields;
      return this;
    }

    public void unsetPatientOptionalFields() {
      this.patientOptionalFields = null;
    }

    /** Returns true if field patientOptionalFields is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientOptionalFields() {
      return this.patientOptionalFields != null;
    }

    public void setPatientOptionalFieldsIsSet(boolean value) {
      if (!value) {
        this.patientOptionalFields = null;
      }
    }

    public int getPersonOptionalFieldsSize() {
      return (this.personOptionalFields == null) ? 0 : this.personOptionalFields.size();
    }

    public java.util.Iterator<PersonOptionalFields> getPersonOptionalFieldsIterator() {
      return (this.personOptionalFields == null) ? null : this.personOptionalFields.iterator();
    }

    public void addToPersonOptionalFields(PersonOptionalFields elem) {
      if (this.personOptionalFields == null) {
        this.personOptionalFields = new HashSet<PersonOptionalFields>();
      }
      this.personOptionalFields.add(elem);
    }

    public Set<PersonOptionalFields> getPersonOptionalFields() {
      return this.personOptionalFields;
    }

    public getXMLRegisters_args setPersonOptionalFields(Set<PersonOptionalFields> personOptionalFields) {
      this.personOptionalFields = personOptionalFields;
      return this;
    }

    public void unsetPersonOptionalFields() {
      this.personOptionalFields = null;
    }

    /** Returns true if field personOptionalFields is set (has been assigned a value) and false otherwise */
    public boolean isSetPersonOptionalFields() {
      return this.personOptionalFields != null;
    }

    public void setPersonOptionalFieldsIsSet(boolean value) {
      if (!value) {
        this.personOptionalFields = null;
      }
    }

    public int getSluchOptionalFieldsSize() {
      return (this.sluchOptionalFields == null) ? 0 : this.sluchOptionalFields.size();
    }

    public java.util.Iterator<SluchOptionalFields> getSluchOptionalFieldsIterator() {
      return (this.sluchOptionalFields == null) ? null : this.sluchOptionalFields.iterator();
    }

    public void addToSluchOptionalFields(SluchOptionalFields elem) {
      if (this.sluchOptionalFields == null) {
        this.sluchOptionalFields = new HashSet<SluchOptionalFields>();
      }
      this.sluchOptionalFields.add(elem);
    }

    public Set<SluchOptionalFields> getSluchOptionalFields() {
      return this.sluchOptionalFields;
    }

    public getXMLRegisters_args setSluchOptionalFields(Set<SluchOptionalFields> sluchOptionalFields) {
      this.sluchOptionalFields = sluchOptionalFields;
      return this;
    }

    public void unsetSluchOptionalFields() {
      this.sluchOptionalFields = null;
    }

    /** Returns true if field sluchOptionalFields is set (has been assigned a value) and false otherwise */
    public boolean isSetSluchOptionalFields() {
      return this.sluchOptionalFields != null;
    }

    public void setSluchOptionalFieldsIsSet(boolean value) {
      if (!value) {
        this.sluchOptionalFields = null;
      }
    }

    public boolean isPrimaryAccount() {
      return this.primaryAccount;
    }

    public getXMLRegisters_args setPrimaryAccount(boolean primaryAccount) {
      this.primaryAccount = primaryAccount;
      setPrimaryAccountIsSet(true);
      return this;
    }

    public void unsetPrimaryAccount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIMARYACCOUNT_ISSET_ID);
    }

    /** Returns true if field primaryAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimaryAccount() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIMARYACCOUNT_ISSET_ID);
    }

    public void setPrimaryAccountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIMARYACCOUNT_ISSET_ID, value);
    }

    public String getLevelMO() {
      return this.levelMO;
    }

    public getXMLRegisters_args setLevelMO(String levelMO) {
      this.levelMO = levelMO;
      return this;
    }

    public void unsetLevelMO() {
      this.levelMO = null;
    }

    /** Returns true if field levelMO is set (has been assigned a value) and false otherwise */
    public boolean isSetLevelMO() {
      return this.levelMO != null;
    }

    public void setLevelMOIsSet(boolean value) {
      if (!value) {
        this.levelMO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_ID:
        if (value == null) {
          unsetContractId();
        } else {
          setContractId((Integer)value);
        }
        break;

      case BEGIN_DATE:
        if (value == null) {
          unsetBeginDate();
        } else {
          setBeginDate((Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((Long)value);
        }
        break;

      case INFIS_CODE:
        if (value == null) {
          unsetInfisCode();
        } else {
          setInfisCode((String)value);
        }
        break;

      case OBSOLETE_INFIS_CODE:
        if (value == null) {
          unsetObsoleteInfisCode();
        } else {
          setObsoleteInfisCode((String)value);
        }
        break;

      case SMO_NUMBER:
        if (value == null) {
          unsetSmoNumber();
        } else {
          setSmoNumber((String)value);
        }
        break;

      case ORG_STRUCTURE_ID_LIST:
        if (value == null) {
          unsetOrgStructureIdList();
        } else {
          setOrgStructureIdList((List<Integer>)value);
        }
        break;

      case PATIENT_OPTIONAL_FIELDS:
        if (value == null) {
          unsetPatientOptionalFields();
        } else {
          setPatientOptionalFields((Set<PatientOptionalFields>)value);
        }
        break;

      case PERSON_OPTIONAL_FIELDS:
        if (value == null) {
          unsetPersonOptionalFields();
        } else {
          setPersonOptionalFields((Set<PersonOptionalFields>)value);
        }
        break;

      case SLUCH_OPTIONAL_FIELDS:
        if (value == null) {
          unsetSluchOptionalFields();
        } else {
          setSluchOptionalFields((Set<SluchOptionalFields>)value);
        }
        break;

      case PRIMARY_ACCOUNT:
        if (value == null) {
          unsetPrimaryAccount();
        } else {
          setPrimaryAccount((Boolean)value);
        }
        break;

      case LEVEL_MO:
        if (value == null) {
          unsetLevelMO();
        } else {
          setLevelMO((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_ID:
        return Integer.valueOf(getContractId());

      case BEGIN_DATE:
        return Long.valueOf(getBeginDate());

      case END_DATE:
        return Long.valueOf(getEndDate());

      case INFIS_CODE:
        return getInfisCode();

      case OBSOLETE_INFIS_CODE:
        return getObsoleteInfisCode();

      case SMO_NUMBER:
        return getSmoNumber();

      case ORG_STRUCTURE_ID_LIST:
        return getOrgStructureIdList();

      case PATIENT_OPTIONAL_FIELDS:
        return getPatientOptionalFields();

      case PERSON_OPTIONAL_FIELDS:
        return getPersonOptionalFields();

      case SLUCH_OPTIONAL_FIELDS:
        return getSluchOptionalFields();

      case PRIMARY_ACCOUNT:
        return Boolean.valueOf(isPrimaryAccount());

      case LEVEL_MO:
        return getLevelMO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_ID:
        return isSetContractId();
      case BEGIN_DATE:
        return isSetBeginDate();
      case END_DATE:
        return isSetEndDate();
      case INFIS_CODE:
        return isSetInfisCode();
      case OBSOLETE_INFIS_CODE:
        return isSetObsoleteInfisCode();
      case SMO_NUMBER:
        return isSetSmoNumber();
      case ORG_STRUCTURE_ID_LIST:
        return isSetOrgStructureIdList();
      case PATIENT_OPTIONAL_FIELDS:
        return isSetPatientOptionalFields();
      case PERSON_OPTIONAL_FIELDS:
        return isSetPersonOptionalFields();
      case SLUCH_OPTIONAL_FIELDS:
        return isSetSluchOptionalFields();
      case PRIMARY_ACCOUNT:
        return isSetPrimaryAccount();
      case LEVEL_MO:
        return isSetLevelMO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXMLRegisters_args)
        return this.equals((getXMLRegisters_args)that);
      return false;
    }

    public boolean equals(getXMLRegisters_args that) {
      if (that == null)
        return false;

      boolean this_present_contractId = true;
      boolean that_present_contractId = true;
      if (this_present_contractId || that_present_contractId) {
        if (!(this_present_contractId && that_present_contractId))
          return false;
        if (this.contractId != that.contractId)
          return false;
      }

      boolean this_present_beginDate = true;
      boolean that_present_beginDate = true;
      if (this_present_beginDate || that_present_beginDate) {
        if (!(this_present_beginDate && that_present_beginDate))
          return false;
        if (this.beginDate != that.beginDate)
          return false;
      }

      boolean this_present_endDate = true;
      boolean that_present_endDate = true;
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (this.endDate != that.endDate)
          return false;
      }

      boolean this_present_infisCode = true && this.isSetInfisCode();
      boolean that_present_infisCode = true && that.isSetInfisCode();
      if (this_present_infisCode || that_present_infisCode) {
        if (!(this_present_infisCode && that_present_infisCode))
          return false;
        if (!this.infisCode.equals(that.infisCode))
          return false;
      }

      boolean this_present_obsoleteInfisCode = true && this.isSetObsoleteInfisCode();
      boolean that_present_obsoleteInfisCode = true && that.isSetObsoleteInfisCode();
      if (this_present_obsoleteInfisCode || that_present_obsoleteInfisCode) {
        if (!(this_present_obsoleteInfisCode && that_present_obsoleteInfisCode))
          return false;
        if (!this.obsoleteInfisCode.equals(that.obsoleteInfisCode))
          return false;
      }

      boolean this_present_smoNumber = true && this.isSetSmoNumber();
      boolean that_present_smoNumber = true && that.isSetSmoNumber();
      if (this_present_smoNumber || that_present_smoNumber) {
        if (!(this_present_smoNumber && that_present_smoNumber))
          return false;
        if (!this.smoNumber.equals(that.smoNumber))
          return false;
      }

      boolean this_present_orgStructureIdList = true && this.isSetOrgStructureIdList();
      boolean that_present_orgStructureIdList = true && that.isSetOrgStructureIdList();
      if (this_present_orgStructureIdList || that_present_orgStructureIdList) {
        if (!(this_present_orgStructureIdList && that_present_orgStructureIdList))
          return false;
        if (!this.orgStructureIdList.equals(that.orgStructureIdList))
          return false;
      }

      boolean this_present_patientOptionalFields = true && this.isSetPatientOptionalFields();
      boolean that_present_patientOptionalFields = true && that.isSetPatientOptionalFields();
      if (this_present_patientOptionalFields || that_present_patientOptionalFields) {
        if (!(this_present_patientOptionalFields && that_present_patientOptionalFields))
          return false;
        if (!this.patientOptionalFields.equals(that.patientOptionalFields))
          return false;
      }

      boolean this_present_personOptionalFields = true && this.isSetPersonOptionalFields();
      boolean that_present_personOptionalFields = true && that.isSetPersonOptionalFields();
      if (this_present_personOptionalFields || that_present_personOptionalFields) {
        if (!(this_present_personOptionalFields && that_present_personOptionalFields))
          return false;
        if (!this.personOptionalFields.equals(that.personOptionalFields))
          return false;
      }

      boolean this_present_sluchOptionalFields = true && this.isSetSluchOptionalFields();
      boolean that_present_sluchOptionalFields = true && that.isSetSluchOptionalFields();
      if (this_present_sluchOptionalFields || that_present_sluchOptionalFields) {
        if (!(this_present_sluchOptionalFields && that_present_sluchOptionalFields))
          return false;
        if (!this.sluchOptionalFields.equals(that.sluchOptionalFields))
          return false;
      }

      boolean this_present_primaryAccount = true;
      boolean that_present_primaryAccount = true;
      if (this_present_primaryAccount || that_present_primaryAccount) {
        if (!(this_present_primaryAccount && that_present_primaryAccount))
          return false;
        if (this.primaryAccount != that.primaryAccount)
          return false;
      }

      boolean this_present_levelMO = true && this.isSetLevelMO();
      boolean that_present_levelMO = true && that.isSetLevelMO();
      if (this_present_levelMO || that_present_levelMO) {
        if (!(this_present_levelMO && that_present_levelMO))
          return false;
        if (!this.levelMO.equals(that.levelMO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getXMLRegisters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getXMLRegisters_args typedOther = (getXMLRegisters_args)other;

      lastComparison = Boolean.valueOf(isSetContractId()).compareTo(typedOther.isSetContractId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, typedOther.contractId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBeginDate()).compareTo(typedOther.isSetBeginDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginDate, typedOther.beginDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInfisCode()).compareTo(typedOther.isSetInfisCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfisCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infisCode, typedOther.infisCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObsoleteInfisCode()).compareTo(typedOther.isSetObsoleteInfisCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObsoleteInfisCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obsoleteInfisCode, typedOther.obsoleteInfisCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmoNumber()).compareTo(typedOther.isSetSmoNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmoNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smoNumber, typedOther.smoNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgStructureIdList()).compareTo(typedOther.isSetOrgStructureIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgStructureIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgStructureIdList, typedOther.orgStructureIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPatientOptionalFields()).compareTo(typedOther.isSetPatientOptionalFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientOptionalFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientOptionalFields, typedOther.patientOptionalFields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPersonOptionalFields()).compareTo(typedOther.isSetPersonOptionalFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPersonOptionalFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personOptionalFields, typedOther.personOptionalFields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSluchOptionalFields()).compareTo(typedOther.isSetSluchOptionalFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSluchOptionalFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sluchOptionalFields, typedOther.sluchOptionalFields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrimaryAccount()).compareTo(typedOther.isSetPrimaryAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimaryAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryAccount, typedOther.primaryAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLevelMO()).compareTo(typedOther.isSetLevelMO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevelMO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelMO, typedOther.levelMO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXMLRegisters_args(");
      boolean first = true;

      sb.append("contractId:");
      sb.append(this.contractId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("beginDate:");
      sb.append(this.beginDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("infisCode:");
      if (this.infisCode == null) {
        sb.append("null");
      } else {
        sb.append(this.infisCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("obsoleteInfisCode:");
      if (this.obsoleteInfisCode == null) {
        sb.append("null");
      } else {
        sb.append(this.obsoleteInfisCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smoNumber:");
      if (this.smoNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.smoNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgStructureIdList:");
      if (this.orgStructureIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.orgStructureIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("patientOptionalFields:");
      if (this.patientOptionalFields == null) {
        sb.append("null");
      } else {
        sb.append(this.patientOptionalFields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("personOptionalFields:");
      if (this.personOptionalFields == null) {
        sb.append("null");
      } else {
        sb.append(this.personOptionalFields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sluchOptionalFields:");
      if (this.sluchOptionalFields == null) {
        sb.append("null");
      } else {
        sb.append(this.sluchOptionalFields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primaryAccount:");
      sb.append(this.primaryAccount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("levelMO:");
      if (this.levelMO == null) {
        sb.append("null");
      } else {
        sb.append(this.levelMO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXMLRegisters_argsStandardSchemeFactory implements SchemeFactory {
      public getXMLRegisters_argsStandardScheme getScheme() {
        return new getXMLRegisters_argsStandardScheme();
      }
    }

    private static class getXMLRegisters_argsStandardScheme extends StandardScheme<getXMLRegisters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXMLRegisters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.contractId = iprot.readI32();
                struct.setContractIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEGIN_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.beginDate = iprot.readI64();
                struct.setBeginDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDate = iprot.readI64();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INFIS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.infisCode = iprot.readString();
                struct.setInfisCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OBSOLETE_INFIS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.obsoleteInfisCode = iprot.readString();
                struct.setObsoleteInfisCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SMO_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.smoNumber = iprot.readString();
                struct.setSmoNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ORG_STRUCTURE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.orgStructureIdList = new ArrayList<Integer>(_list58.size);
                  for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                  {
                    int _elem60; // required
                    _elem60 = iprot.readI32();
                    struct.orgStructureIdList.add(_elem60);
                  }
                  iprot.readListEnd();
                }
                struct.setOrgStructureIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // PATIENT_OPTIONAL_FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set61 = iprot.readSetBegin();
                  struct.patientOptionalFields = new HashSet<PatientOptionalFields>(2*_set61.size);
                  for (int _i62 = 0; _i62 < _set61.size; ++_i62)
                  {
                    PatientOptionalFields _elem63; // required
                    _elem63 = PatientOptionalFields.findByValue(iprot.readI32());
                    struct.patientOptionalFields.add(_elem63);
                  }
                  iprot.readSetEnd();
                }
                struct.setPatientOptionalFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // PERSON_OPTIONAL_FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set64 = iprot.readSetBegin();
                  struct.personOptionalFields = new HashSet<PersonOptionalFields>(2*_set64.size);
                  for (int _i65 = 0; _i65 < _set64.size; ++_i65)
                  {
                    PersonOptionalFields _elem66; // required
                    _elem66 = PersonOptionalFields.findByValue(iprot.readI32());
                    struct.personOptionalFields.add(_elem66);
                  }
                  iprot.readSetEnd();
                }
                struct.setPersonOptionalFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // SLUCH_OPTIONAL_FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set67 = iprot.readSetBegin();
                  struct.sluchOptionalFields = new HashSet<SluchOptionalFields>(2*_set67.size);
                  for (int _i68 = 0; _i68 < _set67.size; ++_i68)
                  {
                    SluchOptionalFields _elem69; // required
                    _elem69 = SluchOptionalFields.findByValue(iprot.readI32());
                    struct.sluchOptionalFields.add(_elem69);
                  }
                  iprot.readSetEnd();
                }
                struct.setSluchOptionalFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // PRIMARY_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.primaryAccount = iprot.readBool();
                struct.setPrimaryAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // LEVEL_MO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.levelMO = iprot.readString();
                struct.setLevelMOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXMLRegisters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.contractId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BEGIN_DATE_FIELD_DESC);
        oprot.writeI64(struct.beginDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
        if (struct.infisCode != null) {
          oprot.writeFieldBegin(INFIS_CODE_FIELD_DESC);
          oprot.writeString(struct.infisCode);
          oprot.writeFieldEnd();
        }
        if (struct.obsoleteInfisCode != null) {
          oprot.writeFieldBegin(OBSOLETE_INFIS_CODE_FIELD_DESC);
          oprot.writeString(struct.obsoleteInfisCode);
          oprot.writeFieldEnd();
        }
        if (struct.smoNumber != null) {
          oprot.writeFieldBegin(SMO_NUMBER_FIELD_DESC);
          oprot.writeString(struct.smoNumber);
          oprot.writeFieldEnd();
        }
        if (struct.orgStructureIdList != null) {
          oprot.writeFieldBegin(ORG_STRUCTURE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.orgStructureIdList.size()));
            for (int _iter70 : struct.orgStructureIdList)
            {
              oprot.writeI32(_iter70);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.patientOptionalFields != null) {
          oprot.writeFieldBegin(PATIENT_OPTIONAL_FIELDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.patientOptionalFields.size()));
            for (PatientOptionalFields _iter71 : struct.patientOptionalFields)
            {
              oprot.writeI32(_iter71.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.personOptionalFields != null) {
          oprot.writeFieldBegin(PERSON_OPTIONAL_FIELDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.personOptionalFields.size()));
            for (PersonOptionalFields _iter72 : struct.personOptionalFields)
            {
              oprot.writeI32(_iter72.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sluchOptionalFields != null) {
          oprot.writeFieldBegin(SLUCH_OPTIONAL_FIELDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.sluchOptionalFields.size()));
            for (SluchOptionalFields _iter73 : struct.sluchOptionalFields)
            {
              oprot.writeI32(_iter73.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIMARY_ACCOUNT_FIELD_DESC);
        oprot.writeBool(struct.primaryAccount);
        oprot.writeFieldEnd();
        if (struct.levelMO != null) {
          oprot.writeFieldBegin(LEVEL_MO_FIELD_DESC);
          oprot.writeString(struct.levelMO);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXMLRegisters_argsTupleSchemeFactory implements SchemeFactory {
      public getXMLRegisters_argsTupleScheme getScheme() {
        return new getXMLRegisters_argsTupleScheme();
      }
    }

    private static class getXMLRegisters_argsTupleScheme extends TupleScheme<getXMLRegisters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXMLRegisters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractId()) {
          optionals.set(0);
        }
        if (struct.isSetBeginDate()) {
          optionals.set(1);
        }
        if (struct.isSetEndDate()) {
          optionals.set(2);
        }
        if (struct.isSetInfisCode()) {
          optionals.set(3);
        }
        if (struct.isSetObsoleteInfisCode()) {
          optionals.set(4);
        }
        if (struct.isSetSmoNumber()) {
          optionals.set(5);
        }
        if (struct.isSetOrgStructureIdList()) {
          optionals.set(6);
        }
        if (struct.isSetPatientOptionalFields()) {
          optionals.set(7);
        }
        if (struct.isSetPersonOptionalFields()) {
          optionals.set(8);
        }
        if (struct.isSetSluchOptionalFields()) {
          optionals.set(9);
        }
        if (struct.isSetPrimaryAccount()) {
          optionals.set(10);
        }
        if (struct.isSetLevelMO()) {
          optionals.set(11);
        }
        oprot.writeBitSet(optionals, 12);
        if (struct.isSetContractId()) {
          oprot.writeI32(struct.contractId);
        }
        if (struct.isSetBeginDate()) {
          oprot.writeI64(struct.beginDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeI64(struct.endDate);
        }
        if (struct.isSetInfisCode()) {
          oprot.writeString(struct.infisCode);
        }
        if (struct.isSetObsoleteInfisCode()) {
          oprot.writeString(struct.obsoleteInfisCode);
        }
        if (struct.isSetSmoNumber()) {
          oprot.writeString(struct.smoNumber);
        }
        if (struct.isSetOrgStructureIdList()) {
          {
            oprot.writeI32(struct.orgStructureIdList.size());
            for (int _iter74 : struct.orgStructureIdList)
            {
              oprot.writeI32(_iter74);
            }
          }
        }
        if (struct.isSetPatientOptionalFields()) {
          {
            oprot.writeI32(struct.patientOptionalFields.size());
            for (PatientOptionalFields _iter75 : struct.patientOptionalFields)
            {
              oprot.writeI32(_iter75.getValue());
            }
          }
        }
        if (struct.isSetPersonOptionalFields()) {
          {
            oprot.writeI32(struct.personOptionalFields.size());
            for (PersonOptionalFields _iter76 : struct.personOptionalFields)
            {
              oprot.writeI32(_iter76.getValue());
            }
          }
        }
        if (struct.isSetSluchOptionalFields()) {
          {
            oprot.writeI32(struct.sluchOptionalFields.size());
            for (SluchOptionalFields _iter77 : struct.sluchOptionalFields)
            {
              oprot.writeI32(_iter77.getValue());
            }
          }
        }
        if (struct.isSetPrimaryAccount()) {
          oprot.writeBool(struct.primaryAccount);
        }
        if (struct.isSetLevelMO()) {
          oprot.writeString(struct.levelMO);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXMLRegisters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(12);
        if (incoming.get(0)) {
          struct.contractId = iprot.readI32();
          struct.setContractIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.beginDate = iprot.readI64();
          struct.setBeginDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endDate = iprot.readI64();
          struct.setEndDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.infisCode = iprot.readString();
          struct.setInfisCodeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.obsoleteInfisCode = iprot.readString();
          struct.setObsoleteInfisCodeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.smoNumber = iprot.readString();
          struct.setSmoNumberIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.orgStructureIdList = new ArrayList<Integer>(_list78.size);
            for (int _i79 = 0; _i79 < _list78.size; ++_i79)
            {
              int _elem80; // required
              _elem80 = iprot.readI32();
              struct.orgStructureIdList.add(_elem80);
            }
          }
          struct.setOrgStructureIdListIsSet(true);
        }
        if (incoming.get(7)) {
          {
            org.apache.thrift.protocol.TSet _set81 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.patientOptionalFields = new HashSet<PatientOptionalFields>(2*_set81.size);
            for (int _i82 = 0; _i82 < _set81.size; ++_i82)
            {
              PatientOptionalFields _elem83; // required
              _elem83 = PatientOptionalFields.findByValue(iprot.readI32());
              struct.patientOptionalFields.add(_elem83);
            }
          }
          struct.setPatientOptionalFieldsIsSet(true);
        }
        if (incoming.get(8)) {
          {
            org.apache.thrift.protocol.TSet _set84 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.personOptionalFields = new HashSet<PersonOptionalFields>(2*_set84.size);
            for (int _i85 = 0; _i85 < _set84.size; ++_i85)
            {
              PersonOptionalFields _elem86; // required
              _elem86 = PersonOptionalFields.findByValue(iprot.readI32());
              struct.personOptionalFields.add(_elem86);
            }
          }
          struct.setPersonOptionalFieldsIsSet(true);
        }
        if (incoming.get(9)) {
          {
            org.apache.thrift.protocol.TSet _set87 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.sluchOptionalFields = new HashSet<SluchOptionalFields>(2*_set87.size);
            for (int _i88 = 0; _i88 < _set87.size; ++_i88)
            {
              SluchOptionalFields _elem89; // required
              _elem89 = SluchOptionalFields.findByValue(iprot.readI32());
              struct.sluchOptionalFields.add(_elem89);
            }
          }
          struct.setSluchOptionalFieldsIsSet(true);
        }
        if (incoming.get(10)) {
          struct.primaryAccount = iprot.readBool();
          struct.setPrimaryAccountIsSet(true);
        }
        if (incoming.get(11)) {
          struct.levelMO = iprot.readString();
          struct.setLevelMOIsSet(true);
        }
      }
    }

  }

  public static class getXMLRegisters_result implements org.apache.thrift.TBase<getXMLRegisters_result, getXMLRegisters_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getXMLRegisters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField INFIS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("infisExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRACT_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("contractExc", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATES_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("datesExc", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField INV_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("invExc", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField NF_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("nfExc", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField SQL_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlExc", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getXMLRegisters_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getXMLRegisters_resultTupleSchemeFactory());
    }

    public XMLRegisters success; // required
    public InvalidOrganizationInfisException infisExc; // required
    public InvalidContractException contractExc; // required
    public InvalidDateIntervalException datesExc; // required
    public InvalidArgumentException invExc; // required
    public NotFoundException nfExc; // required
    public SQLException sqlExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INFIS_EXC((short)1, "infisExc"),
      CONTRACT_EXC((short)2, "contractExc"),
      DATES_EXC((short)3, "datesExc"),
      INV_EXC((short)4, "invExc"),
      NF_EXC((short)5, "nfExc"),
      SQL_EXC((short)6, "sqlExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INFIS_EXC
            return INFIS_EXC;
          case 2: // CONTRACT_EXC
            return CONTRACT_EXC;
          case 3: // DATES_EXC
            return DATES_EXC;
          case 4: // INV_EXC
            return INV_EXC;
          case 5: // NF_EXC
            return NF_EXC;
          case 6: // SQL_EXC
            return SQL_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, XMLRegisters.class)));
      tmpMap.put(_Fields.INFIS_EXC, new org.apache.thrift.meta_data.FieldMetaData("infisExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_EXC, new org.apache.thrift.meta_data.FieldMetaData("contractExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DATES_EXC, new org.apache.thrift.meta_data.FieldMetaData("datesExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INV_EXC, new org.apache.thrift.meta_data.FieldMetaData("invExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NF_EXC, new org.apache.thrift.meta_data.FieldMetaData("nfExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SQL_EXC, new org.apache.thrift.meta_data.FieldMetaData("sqlExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getXMLRegisters_result.class, metaDataMap);
    }

    public getXMLRegisters_result() {
    }

    public getXMLRegisters_result(
      XMLRegisters success,
      InvalidOrganizationInfisException infisExc,
      InvalidContractException contractExc,
      InvalidDateIntervalException datesExc,
      InvalidArgumentException invExc,
      NotFoundException nfExc,
      SQLException sqlExc)
    {
      this();
      this.success = success;
      this.infisExc = infisExc;
      this.contractExc = contractExc;
      this.datesExc = datesExc;
      this.invExc = invExc;
      this.nfExc = nfExc;
      this.sqlExc = sqlExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getXMLRegisters_result(getXMLRegisters_result other) {
      if (other.isSetSuccess()) {
        this.success = new XMLRegisters(other.success);
      }
      if (other.isSetInfisExc()) {
        this.infisExc = new InvalidOrganizationInfisException(other.infisExc);
      }
      if (other.isSetContractExc()) {
        this.contractExc = new InvalidContractException(other.contractExc);
      }
      if (other.isSetDatesExc()) {
        this.datesExc = new InvalidDateIntervalException(other.datesExc);
      }
      if (other.isSetInvExc()) {
        this.invExc = new InvalidArgumentException(other.invExc);
      }
      if (other.isSetNfExc()) {
        this.nfExc = new NotFoundException(other.nfExc);
      }
      if (other.isSetSqlExc()) {
        this.sqlExc = new SQLException(other.sqlExc);
      }
    }

    public getXMLRegisters_result deepCopy() {
      return new getXMLRegisters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.infisExc = null;
      this.contractExc = null;
      this.datesExc = null;
      this.invExc = null;
      this.nfExc = null;
      this.sqlExc = null;
    }

    public XMLRegisters getSuccess() {
      return this.success;
    }

    public getXMLRegisters_result setSuccess(XMLRegisters success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidOrganizationInfisException getInfisExc() {
      return this.infisExc;
    }

    public getXMLRegisters_result setInfisExc(InvalidOrganizationInfisException infisExc) {
      this.infisExc = infisExc;
      return this;
    }

    public void unsetInfisExc() {
      this.infisExc = null;
    }

    /** Returns true if field infisExc is set (has been assigned a value) and false otherwise */
    public boolean isSetInfisExc() {
      return this.infisExc != null;
    }

    public void setInfisExcIsSet(boolean value) {
      if (!value) {
        this.infisExc = null;
      }
    }

    public InvalidContractException getContractExc() {
      return this.contractExc;
    }

    public getXMLRegisters_result setContractExc(InvalidContractException contractExc) {
      this.contractExc = contractExc;
      return this;
    }

    public void unsetContractExc() {
      this.contractExc = null;
    }

    /** Returns true if field contractExc is set (has been assigned a value) and false otherwise */
    public boolean isSetContractExc() {
      return this.contractExc != null;
    }

    public void setContractExcIsSet(boolean value) {
      if (!value) {
        this.contractExc = null;
      }
    }

    public InvalidDateIntervalException getDatesExc() {
      return this.datesExc;
    }

    public getXMLRegisters_result setDatesExc(InvalidDateIntervalException datesExc) {
      this.datesExc = datesExc;
      return this;
    }

    public void unsetDatesExc() {
      this.datesExc = null;
    }

    /** Returns true if field datesExc is set (has been assigned a value) and false otherwise */
    public boolean isSetDatesExc() {
      return this.datesExc != null;
    }

    public void setDatesExcIsSet(boolean value) {
      if (!value) {
        this.datesExc = null;
      }
    }

    public InvalidArgumentException getInvExc() {
      return this.invExc;
    }

    public getXMLRegisters_result setInvExc(InvalidArgumentException invExc) {
      this.invExc = invExc;
      return this;
    }

    public void unsetInvExc() {
      this.invExc = null;
    }

    /** Returns true if field invExc is set (has been assigned a value) and false otherwise */
    public boolean isSetInvExc() {
      return this.invExc != null;
    }

    public void setInvExcIsSet(boolean value) {
      if (!value) {
        this.invExc = null;
      }
    }

    public NotFoundException getNfExc() {
      return this.nfExc;
    }

    public getXMLRegisters_result setNfExc(NotFoundException nfExc) {
      this.nfExc = nfExc;
      return this;
    }

    public void unsetNfExc() {
      this.nfExc = null;
    }

    /** Returns true if field nfExc is set (has been assigned a value) and false otherwise */
    public boolean isSetNfExc() {
      return this.nfExc != null;
    }

    public void setNfExcIsSet(boolean value) {
      if (!value) {
        this.nfExc = null;
      }
    }

    public SQLException getSqlExc() {
      return this.sqlExc;
    }

    public getXMLRegisters_result setSqlExc(SQLException sqlExc) {
      this.sqlExc = sqlExc;
      return this;
    }

    public void unsetSqlExc() {
      this.sqlExc = null;
    }

    /** Returns true if field sqlExc is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlExc() {
      return this.sqlExc != null;
    }

    public void setSqlExcIsSet(boolean value) {
      if (!value) {
        this.sqlExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((XMLRegisters)value);
        }
        break;

      case INFIS_EXC:
        if (value == null) {
          unsetInfisExc();
        } else {
          setInfisExc((InvalidOrganizationInfisException)value);
        }
        break;

      case CONTRACT_EXC:
        if (value == null) {
          unsetContractExc();
        } else {
          setContractExc((InvalidContractException)value);
        }
        break;

      case DATES_EXC:
        if (value == null) {
          unsetDatesExc();
        } else {
          setDatesExc((InvalidDateIntervalException)value);
        }
        break;

      case INV_EXC:
        if (value == null) {
          unsetInvExc();
        } else {
          setInvExc((InvalidArgumentException)value);
        }
        break;

      case NF_EXC:
        if (value == null) {
          unsetNfExc();
        } else {
          setNfExc((NotFoundException)value);
        }
        break;

      case SQL_EXC:
        if (value == null) {
          unsetSqlExc();
        } else {
          setSqlExc((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INFIS_EXC:
        return getInfisExc();

      case CONTRACT_EXC:
        return getContractExc();

      case DATES_EXC:
        return getDatesExc();

      case INV_EXC:
        return getInvExc();

      case NF_EXC:
        return getNfExc();

      case SQL_EXC:
        return getSqlExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INFIS_EXC:
        return isSetInfisExc();
      case CONTRACT_EXC:
        return isSetContractExc();
      case DATES_EXC:
        return isSetDatesExc();
      case INV_EXC:
        return isSetInvExc();
      case NF_EXC:
        return isSetNfExc();
      case SQL_EXC:
        return isSetSqlExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getXMLRegisters_result)
        return this.equals((getXMLRegisters_result)that);
      return false;
    }

    public boolean equals(getXMLRegisters_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_infisExc = true && this.isSetInfisExc();
      boolean that_present_infisExc = true && that.isSetInfisExc();
      if (this_present_infisExc || that_present_infisExc) {
        if (!(this_present_infisExc && that_present_infisExc))
          return false;
        if (!this.infisExc.equals(that.infisExc))
          return false;
      }

      boolean this_present_contractExc = true && this.isSetContractExc();
      boolean that_present_contractExc = true && that.isSetContractExc();
      if (this_present_contractExc || that_present_contractExc) {
        if (!(this_present_contractExc && that_present_contractExc))
          return false;
        if (!this.contractExc.equals(that.contractExc))
          return false;
      }

      boolean this_present_datesExc = true && this.isSetDatesExc();
      boolean that_present_datesExc = true && that.isSetDatesExc();
      if (this_present_datesExc || that_present_datesExc) {
        if (!(this_present_datesExc && that_present_datesExc))
          return false;
        if (!this.datesExc.equals(that.datesExc))
          return false;
      }

      boolean this_present_invExc = true && this.isSetInvExc();
      boolean that_present_invExc = true && that.isSetInvExc();
      if (this_present_invExc || that_present_invExc) {
        if (!(this_present_invExc && that_present_invExc))
          return false;
        if (!this.invExc.equals(that.invExc))
          return false;
      }

      boolean this_present_nfExc = true && this.isSetNfExc();
      boolean that_present_nfExc = true && that.isSetNfExc();
      if (this_present_nfExc || that_present_nfExc) {
        if (!(this_present_nfExc && that_present_nfExc))
          return false;
        if (!this.nfExc.equals(that.nfExc))
          return false;
      }

      boolean this_present_sqlExc = true && this.isSetSqlExc();
      boolean that_present_sqlExc = true && that.isSetSqlExc();
      if (this_present_sqlExc || that_present_sqlExc) {
        if (!(this_present_sqlExc && that_present_sqlExc))
          return false;
        if (!this.sqlExc.equals(that.sqlExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getXMLRegisters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getXMLRegisters_result typedOther = (getXMLRegisters_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInfisExc()).compareTo(typedOther.isSetInfisExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfisExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infisExc, typedOther.infisExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractExc()).compareTo(typedOther.isSetContractExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractExc, typedOther.contractExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatesExc()).compareTo(typedOther.isSetDatesExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatesExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datesExc, typedOther.datesExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvExc()).compareTo(typedOther.isSetInvExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invExc, typedOther.invExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNfExc()).compareTo(typedOther.isSetNfExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNfExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nfExc, typedOther.nfExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSqlExc()).compareTo(typedOther.isSetSqlExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlExc, typedOther.sqlExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getXMLRegisters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("infisExc:");
      if (this.infisExc == null) {
        sb.append("null");
      } else {
        sb.append(this.infisExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractExc:");
      if (this.contractExc == null) {
        sb.append("null");
      } else {
        sb.append(this.contractExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("datesExc:");
      if (this.datesExc == null) {
        sb.append("null");
      } else {
        sb.append(this.datesExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invExc:");
      if (this.invExc == null) {
        sb.append("null");
      } else {
        sb.append(this.invExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nfExc:");
      if (this.nfExc == null) {
        sb.append("null");
      } else {
        sb.append(this.nfExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sqlExc:");
      if (this.sqlExc == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getXMLRegisters_resultStandardSchemeFactory implements SchemeFactory {
      public getXMLRegisters_resultStandardScheme getScheme() {
        return new getXMLRegisters_resultStandardScheme();
      }
    }

    private static class getXMLRegisters_resultStandardScheme extends StandardScheme<getXMLRegisters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getXMLRegisters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new XMLRegisters();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INFIS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.infisExc = new InvalidOrganizationInfisException();
                struct.infisExc.read(iprot);
                struct.setInfisExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRACT_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractExc = new InvalidContractException();
                struct.contractExc.read(iprot);
                struct.setContractExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATES_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.datesExc = new InvalidDateIntervalException();
                struct.datesExc.read(iprot);
                struct.setDatesExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INV_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invExc = new InvalidArgumentException();
                struct.invExc.read(iprot);
                struct.setInvExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NF_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nfExc = new NotFoundException();
                struct.nfExc.read(iprot);
                struct.setNfExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SQL_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlExc = new SQLException();
                struct.sqlExc.read(iprot);
                struct.setSqlExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getXMLRegisters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.infisExc != null) {
          oprot.writeFieldBegin(INFIS_EXC_FIELD_DESC);
          struct.infisExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractExc != null) {
          oprot.writeFieldBegin(CONTRACT_EXC_FIELD_DESC);
          struct.contractExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.datesExc != null) {
          oprot.writeFieldBegin(DATES_EXC_FIELD_DESC);
          struct.datesExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invExc != null) {
          oprot.writeFieldBegin(INV_EXC_FIELD_DESC);
          struct.invExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nfExc != null) {
          oprot.writeFieldBegin(NF_EXC_FIELD_DESC);
          struct.nfExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sqlExc != null) {
          oprot.writeFieldBegin(SQL_EXC_FIELD_DESC);
          struct.sqlExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getXMLRegisters_resultTupleSchemeFactory implements SchemeFactory {
      public getXMLRegisters_resultTupleScheme getScheme() {
        return new getXMLRegisters_resultTupleScheme();
      }
    }

    private static class getXMLRegisters_resultTupleScheme extends TupleScheme<getXMLRegisters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getXMLRegisters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInfisExc()) {
          optionals.set(1);
        }
        if (struct.isSetContractExc()) {
          optionals.set(2);
        }
        if (struct.isSetDatesExc()) {
          optionals.set(3);
        }
        if (struct.isSetInvExc()) {
          optionals.set(4);
        }
        if (struct.isSetNfExc()) {
          optionals.set(5);
        }
        if (struct.isSetSqlExc()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetInfisExc()) {
          struct.infisExc.write(oprot);
        }
        if (struct.isSetContractExc()) {
          struct.contractExc.write(oprot);
        }
        if (struct.isSetDatesExc()) {
          struct.datesExc.write(oprot);
        }
        if (struct.isSetInvExc()) {
          struct.invExc.write(oprot);
        }
        if (struct.isSetNfExc()) {
          struct.nfExc.write(oprot);
        }
        if (struct.isSetSqlExc()) {
          struct.sqlExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getXMLRegisters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = new XMLRegisters();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.infisExc = new InvalidOrganizationInfisException();
          struct.infisExc.read(iprot);
          struct.setInfisExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.contractExc = new InvalidContractException();
          struct.contractExc.read(iprot);
          struct.setContractExcIsSet(true);
        }
        if (incoming.get(3)) {
          struct.datesExc = new InvalidDateIntervalException();
          struct.datesExc.read(iprot);
          struct.setDatesExcIsSet(true);
        }
        if (incoming.get(4)) {
          struct.invExc = new InvalidArgumentException();
          struct.invExc.read(iprot);
          struct.setInvExcIsSet(true);
        }
        if (incoming.get(5)) {
          struct.nfExc = new NotFoundException();
          struct.nfExc.read(iprot);
          struct.setNfExcIsSet(true);
        }
        if (incoming.get(6)) {
          struct.sqlExc = new SQLException();
          struct.sqlExc.read(iprot);
          struct.setSqlExcIsSet(true);
        }
      }
    }

  }

  public static class getOrgStructures_args implements org.apache.thrift.TBase<getOrgStructures_args, getOrgStructures_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgStructures_args");

    private static final org.apache.thrift.protocol.TField ORGANISATION_INFIS_FIELD_DESC = new org.apache.thrift.protocol.TField("organisationInfis", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgStructures_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgStructures_argsTupleSchemeFactory());
    }

    public String organisationInfis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORGANISATION_INFIS((short)1, "organisationInfis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORGANISATION_INFIS
            return ORGANISATION_INFIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORGANISATION_INFIS, new org.apache.thrift.meta_data.FieldMetaData("organisationInfis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgStructures_args.class, metaDataMap);
    }

    public getOrgStructures_args() {
    }

    public getOrgStructures_args(
      String organisationInfis)
    {
      this();
      this.organisationInfis = organisationInfis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgStructures_args(getOrgStructures_args other) {
      if (other.isSetOrganisationInfis()) {
        this.organisationInfis = other.organisationInfis;
      }
    }

    public getOrgStructures_args deepCopy() {
      return new getOrgStructures_args(this);
    }

    @Override
    public void clear() {
      this.organisationInfis = null;
    }

    public String getOrganisationInfis() {
      return this.organisationInfis;
    }

    public getOrgStructures_args setOrganisationInfis(String organisationInfis) {
      this.organisationInfis = organisationInfis;
      return this;
    }

    public void unsetOrganisationInfis() {
      this.organisationInfis = null;
    }

    /** Returns true if field organisationInfis is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganisationInfis() {
      return this.organisationInfis != null;
    }

    public void setOrganisationInfisIsSet(boolean value) {
      if (!value) {
        this.organisationInfis = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORGANISATION_INFIS:
        if (value == null) {
          unsetOrganisationInfis();
        } else {
          setOrganisationInfis((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORGANISATION_INFIS:
        return getOrganisationInfis();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORGANISATION_INFIS:
        return isSetOrganisationInfis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgStructures_args)
        return this.equals((getOrgStructures_args)that);
      return false;
    }

    public boolean equals(getOrgStructures_args that) {
      if (that == null)
        return false;

      boolean this_present_organisationInfis = true && this.isSetOrganisationInfis();
      boolean that_present_organisationInfis = true && that.isSetOrganisationInfis();
      if (this_present_organisationInfis || that_present_organisationInfis) {
        if (!(this_present_organisationInfis && that_present_organisationInfis))
          return false;
        if (!this.organisationInfis.equals(that.organisationInfis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrgStructures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrgStructures_args typedOther = (getOrgStructures_args)other;

      lastComparison = Boolean.valueOf(isSetOrganisationInfis()).compareTo(typedOther.isSetOrganisationInfis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganisationInfis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organisationInfis, typedOther.organisationInfis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgStructures_args(");
      boolean first = true;

      sb.append("organisationInfis:");
      if (this.organisationInfis == null) {
        sb.append("null");
      } else {
        sb.append(this.organisationInfis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgStructures_argsStandardSchemeFactory implements SchemeFactory {
      public getOrgStructures_argsStandardScheme getScheme() {
        return new getOrgStructures_argsStandardScheme();
      }
    }

    private static class getOrgStructures_argsStandardScheme extends StandardScheme<getOrgStructures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgStructures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORGANISATION_INFIS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organisationInfis = iprot.readString();
                struct.setOrganisationInfisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgStructures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.organisationInfis != null) {
          oprot.writeFieldBegin(ORGANISATION_INFIS_FIELD_DESC);
          oprot.writeString(struct.organisationInfis);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgStructures_argsTupleSchemeFactory implements SchemeFactory {
      public getOrgStructures_argsTupleScheme getScheme() {
        return new getOrgStructures_argsTupleScheme();
      }
    }

    private static class getOrgStructures_argsTupleScheme extends TupleScheme<getOrgStructures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgStructures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrganisationInfis()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrganisationInfis()) {
          oprot.writeString(struct.organisationInfis);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgStructures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.organisationInfis = iprot.readString();
          struct.setOrganisationInfisIsSet(true);
        }
      }
    }

  }

  public static class getOrgStructures_result implements org.apache.thrift.TBase<getOrgStructures_result, getOrgStructures_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgStructures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField INFIS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("infisExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgStructures_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgStructures_resultTupleSchemeFactory());
    }

    public List<OrgStructure> success; // required
    public InvalidOrganizationInfisException infisExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INFIS_EXC((short)1, "infisExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INFIS_EXC
            return INFIS_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrgStructure.class))));
      tmpMap.put(_Fields.INFIS_EXC, new org.apache.thrift.meta_data.FieldMetaData("infisExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgStructures_result.class, metaDataMap);
    }

    public getOrgStructures_result() {
    }

    public getOrgStructures_result(
      List<OrgStructure> success,
      InvalidOrganizationInfisException infisExc)
    {
      this();
      this.success = success;
      this.infisExc = infisExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgStructures_result(getOrgStructures_result other) {
      if (other.isSetSuccess()) {
        List<OrgStructure> __this__success = new ArrayList<OrgStructure>();
        for (OrgStructure other_element : other.success) {
          __this__success.add(new OrgStructure(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetInfisExc()) {
        this.infisExc = new InvalidOrganizationInfisException(other.infisExc);
      }
    }

    public getOrgStructures_result deepCopy() {
      return new getOrgStructures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.infisExc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OrgStructure> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OrgStructure elem) {
      if (this.success == null) {
        this.success = new ArrayList<OrgStructure>();
      }
      this.success.add(elem);
    }

    public List<OrgStructure> getSuccess() {
      return this.success;
    }

    public getOrgStructures_result setSuccess(List<OrgStructure> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidOrganizationInfisException getInfisExc() {
      return this.infisExc;
    }

    public getOrgStructures_result setInfisExc(InvalidOrganizationInfisException infisExc) {
      this.infisExc = infisExc;
      return this;
    }

    public void unsetInfisExc() {
      this.infisExc = null;
    }

    /** Returns true if field infisExc is set (has been assigned a value) and false otherwise */
    public boolean isSetInfisExc() {
      return this.infisExc != null;
    }

    public void setInfisExcIsSet(boolean value) {
      if (!value) {
        this.infisExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OrgStructure>)value);
        }
        break;

      case INFIS_EXC:
        if (value == null) {
          unsetInfisExc();
        } else {
          setInfisExc((InvalidOrganizationInfisException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INFIS_EXC:
        return getInfisExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INFIS_EXC:
        return isSetInfisExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgStructures_result)
        return this.equals((getOrgStructures_result)that);
      return false;
    }

    public boolean equals(getOrgStructures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_infisExc = true && this.isSetInfisExc();
      boolean that_present_infisExc = true && that.isSetInfisExc();
      if (this_present_infisExc || that_present_infisExc) {
        if (!(this_present_infisExc && that_present_infisExc))
          return false;
        if (!this.infisExc.equals(that.infisExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrgStructures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrgStructures_result typedOther = (getOrgStructures_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInfisExc()).compareTo(typedOther.isSetInfisExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfisExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infisExc, typedOther.infisExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgStructures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("infisExc:");
      if (this.infisExc == null) {
        sb.append("null");
      } else {
        sb.append(this.infisExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgStructures_resultStandardSchemeFactory implements SchemeFactory {
      public getOrgStructures_resultStandardScheme getScheme() {
        return new getOrgStructures_resultStandardScheme();
      }
    }

    private static class getOrgStructures_resultStandardScheme extends StandardScheme<getOrgStructures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgStructures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.success = new ArrayList<OrgStructure>(_list90.size);
                  for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                  {
                    OrgStructure _elem92; // required
                    _elem92 = new OrgStructure();
                    _elem92.read(iprot);
                    struct.success.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INFIS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.infisExc = new InvalidOrganizationInfisException();
                struct.infisExc.read(iprot);
                struct.setInfisExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgStructures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OrgStructure _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.infisExc != null) {
          oprot.writeFieldBegin(INFIS_EXC_FIELD_DESC);
          struct.infisExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgStructures_resultTupleSchemeFactory implements SchemeFactory {
      public getOrgStructures_resultTupleScheme getScheme() {
        return new getOrgStructures_resultTupleScheme();
      }
    }

    private static class getOrgStructures_resultTupleScheme extends TupleScheme<getOrgStructures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgStructures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInfisExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OrgStructure _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
        if (struct.isSetInfisExc()) {
          struct.infisExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgStructures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OrgStructure>(_list95.size);
            for (int _i96 = 0; _i96 < _list95.size; ++_i96)
            {
              OrgStructure _elem97; // required
              _elem97 = new OrgStructure();
              _elem97.read(iprot);
              struct.success.add(_elem97);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.infisExc = new InvalidOrganizationInfisException();
          struct.infisExc.read(iprot);
          struct.setInfisExcIsSet(true);
        }
      }
    }

  }

  public static class getAvailableContracts_args implements org.apache.thrift.TBase<getAvailableContracts_args, getAvailableContracts_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAvailableContracts_args");

    private static final org.apache.thrift.protocol.TField ORGANISATION_INFIS_FIELD_DESC = new org.apache.thrift.protocol.TField("organisationInfis", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAvailableContracts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAvailableContracts_argsTupleSchemeFactory());
    }

    public String organisationInfis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORGANISATION_INFIS((short)1, "organisationInfis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORGANISATION_INFIS
            return ORGANISATION_INFIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORGANISATION_INFIS, new org.apache.thrift.meta_data.FieldMetaData("organisationInfis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAvailableContracts_args.class, metaDataMap);
    }

    public getAvailableContracts_args() {
    }

    public getAvailableContracts_args(
      String organisationInfis)
    {
      this();
      this.organisationInfis = organisationInfis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAvailableContracts_args(getAvailableContracts_args other) {
      if (other.isSetOrganisationInfis()) {
        this.organisationInfis = other.organisationInfis;
      }
    }

    public getAvailableContracts_args deepCopy() {
      return new getAvailableContracts_args(this);
    }

    @Override
    public void clear() {
      this.organisationInfis = null;
    }

    public String getOrganisationInfis() {
      return this.organisationInfis;
    }

    public getAvailableContracts_args setOrganisationInfis(String organisationInfis) {
      this.organisationInfis = organisationInfis;
      return this;
    }

    public void unsetOrganisationInfis() {
      this.organisationInfis = null;
    }

    /** Returns true if field organisationInfis is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganisationInfis() {
      return this.organisationInfis != null;
    }

    public void setOrganisationInfisIsSet(boolean value) {
      if (!value) {
        this.organisationInfis = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORGANISATION_INFIS:
        if (value == null) {
          unsetOrganisationInfis();
        } else {
          setOrganisationInfis((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORGANISATION_INFIS:
        return getOrganisationInfis();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORGANISATION_INFIS:
        return isSetOrganisationInfis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAvailableContracts_args)
        return this.equals((getAvailableContracts_args)that);
      return false;
    }

    public boolean equals(getAvailableContracts_args that) {
      if (that == null)
        return false;

      boolean this_present_organisationInfis = true && this.isSetOrganisationInfis();
      boolean that_present_organisationInfis = true && that.isSetOrganisationInfis();
      if (this_present_organisationInfis || that_present_organisationInfis) {
        if (!(this_present_organisationInfis && that_present_organisationInfis))
          return false;
        if (!this.organisationInfis.equals(that.organisationInfis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAvailableContracts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAvailableContracts_args typedOther = (getAvailableContracts_args)other;

      lastComparison = Boolean.valueOf(isSetOrganisationInfis()).compareTo(typedOther.isSetOrganisationInfis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganisationInfis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organisationInfis, typedOther.organisationInfis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAvailableContracts_args(");
      boolean first = true;

      sb.append("organisationInfis:");
      if (this.organisationInfis == null) {
        sb.append("null");
      } else {
        sb.append(this.organisationInfis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAvailableContracts_argsStandardSchemeFactory implements SchemeFactory {
      public getAvailableContracts_argsStandardScheme getScheme() {
        return new getAvailableContracts_argsStandardScheme();
      }
    }

    private static class getAvailableContracts_argsStandardScheme extends StandardScheme<getAvailableContracts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAvailableContracts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORGANISATION_INFIS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organisationInfis = iprot.readString();
                struct.setOrganisationInfisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAvailableContracts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.organisationInfis != null) {
          oprot.writeFieldBegin(ORGANISATION_INFIS_FIELD_DESC);
          oprot.writeString(struct.organisationInfis);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAvailableContracts_argsTupleSchemeFactory implements SchemeFactory {
      public getAvailableContracts_argsTupleScheme getScheme() {
        return new getAvailableContracts_argsTupleScheme();
      }
    }

    private static class getAvailableContracts_argsTupleScheme extends TupleScheme<getAvailableContracts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAvailableContracts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrganisationInfis()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrganisationInfis()) {
          oprot.writeString(struct.organisationInfis);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAvailableContracts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.organisationInfis = iprot.readString();
          struct.setOrganisationInfisIsSet(true);
        }
      }
    }

  }

  public static class getAvailableContracts_result implements org.apache.thrift.TBase<getAvailableContracts_result, getAvailableContracts_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAvailableContracts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField INFIS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("infisExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAvailableContracts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAvailableContracts_resultTupleSchemeFactory());
    }

    public List<Contract> success; // required
    public InvalidOrganizationInfisException infisExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INFIS_EXC((short)1, "infisExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INFIS_EXC
            return INFIS_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contract.class))));
      tmpMap.put(_Fields.INFIS_EXC, new org.apache.thrift.meta_data.FieldMetaData("infisExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAvailableContracts_result.class, metaDataMap);
    }

    public getAvailableContracts_result() {
    }

    public getAvailableContracts_result(
      List<Contract> success,
      InvalidOrganizationInfisException infisExc)
    {
      this();
      this.success = success;
      this.infisExc = infisExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAvailableContracts_result(getAvailableContracts_result other) {
      if (other.isSetSuccess()) {
        List<Contract> __this__success = new ArrayList<Contract>();
        for (Contract other_element : other.success) {
          __this__success.add(new Contract(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetInfisExc()) {
        this.infisExc = new InvalidOrganizationInfisException(other.infisExc);
      }
    }

    public getAvailableContracts_result deepCopy() {
      return new getAvailableContracts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.infisExc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Contract> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Contract elem) {
      if (this.success == null) {
        this.success = new ArrayList<Contract>();
      }
      this.success.add(elem);
    }

    public List<Contract> getSuccess() {
      return this.success;
    }

    public getAvailableContracts_result setSuccess(List<Contract> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidOrganizationInfisException getInfisExc() {
      return this.infisExc;
    }

    public getAvailableContracts_result setInfisExc(InvalidOrganizationInfisException infisExc) {
      this.infisExc = infisExc;
      return this;
    }

    public void unsetInfisExc() {
      this.infisExc = null;
    }

    /** Returns true if field infisExc is set (has been assigned a value) and false otherwise */
    public boolean isSetInfisExc() {
      return this.infisExc != null;
    }

    public void setInfisExcIsSet(boolean value) {
      if (!value) {
        this.infisExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Contract>)value);
        }
        break;

      case INFIS_EXC:
        if (value == null) {
          unsetInfisExc();
        } else {
          setInfisExc((InvalidOrganizationInfisException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INFIS_EXC:
        return getInfisExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INFIS_EXC:
        return isSetInfisExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAvailableContracts_result)
        return this.equals((getAvailableContracts_result)that);
      return false;
    }

    public boolean equals(getAvailableContracts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_infisExc = true && this.isSetInfisExc();
      boolean that_present_infisExc = true && that.isSetInfisExc();
      if (this_present_infisExc || that_present_infisExc) {
        if (!(this_present_infisExc && that_present_infisExc))
          return false;
        if (!this.infisExc.equals(that.infisExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAvailableContracts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAvailableContracts_result typedOther = (getAvailableContracts_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInfisExc()).compareTo(typedOther.isSetInfisExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfisExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infisExc, typedOther.infisExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAvailableContracts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("infisExc:");
      if (this.infisExc == null) {
        sb.append("null");
      } else {
        sb.append(this.infisExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAvailableContracts_resultStandardSchemeFactory implements SchemeFactory {
      public getAvailableContracts_resultStandardScheme getScheme() {
        return new getAvailableContracts_resultStandardScheme();
      }
    }

    private static class getAvailableContracts_resultStandardScheme extends StandardScheme<getAvailableContracts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAvailableContracts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new ArrayList<Contract>(_list98.size);
                  for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                  {
                    Contract _elem100; // required
                    _elem100 = new Contract();
                    _elem100.read(iprot);
                    struct.success.add(_elem100);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INFIS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.infisExc = new InvalidOrganizationInfisException();
                struct.infisExc.read(iprot);
                struct.setInfisExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAvailableContracts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Contract _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.infisExc != null) {
          oprot.writeFieldBegin(INFIS_EXC_FIELD_DESC);
          struct.infisExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAvailableContracts_resultTupleSchemeFactory implements SchemeFactory {
      public getAvailableContracts_resultTupleScheme getScheme() {
        return new getAvailableContracts_resultTupleScheme();
      }
    }

    private static class getAvailableContracts_resultTupleScheme extends TupleScheme<getAvailableContracts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAvailableContracts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInfisExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Contract _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
        if (struct.isSetInfisExc()) {
          struct.infisExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAvailableContracts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Contract>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              Contract _elem105; // required
              _elem105 = new Contract();
              _elem105.read(iprot);
              struct.success.add(_elem105);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.infisExc = new InvalidOrganizationInfisException();
          struct.infisExc.read(iprot);
          struct.setInfisExcIsSet(true);
        }
      }
    }

  }

  public static class changeClientPolicy_args implements org.apache.thrift.TBase<changeClientPolicy_args, changeClientPolicy_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeClientPolicy_args");

    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("newPolicy", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeClientPolicy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeClientPolicy_argsTupleSchemeFactory());
    }

    public int patientId; // required
    public TClientPolicy newPolicy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT_ID((short)1, "patientId"),
      NEW_POLICY((short)2, "newPolicy");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT_ID
            return PATIENT_ID;
          case 2: // NEW_POLICY
            return NEW_POLICY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PATIENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.NEW_POLICY, new org.apache.thrift.meta_data.FieldMetaData("newPolicy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClientPolicy.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeClientPolicy_args.class, metaDataMap);
    }

    public changeClientPolicy_args() {
    }

    public changeClientPolicy_args(
      int patientId,
      TClientPolicy newPolicy)
    {
      this();
      this.patientId = patientId;
      setPatientIdIsSet(true);
      this.newPolicy = newPolicy;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeClientPolicy_args(changeClientPolicy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.patientId = other.patientId;
      if (other.isSetNewPolicy()) {
        this.newPolicy = new TClientPolicy(other.newPolicy);
      }
    }

    public changeClientPolicy_args deepCopy() {
      return new changeClientPolicy_args(this);
    }

    @Override
    public void clear() {
      setPatientIdIsSet(false);
      this.patientId = 0;
      this.newPolicy = null;
    }

    public int getPatientId() {
      return this.patientId;
    }

    public changeClientPolicy_args setPatientId(int patientId) {
      this.patientId = patientId;
      setPatientIdIsSet(true);
      return this;
    }

    public void unsetPatientId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientId() {
      return EncodingUtils.testBit(__isset_bitfield, __PATIENTID_ISSET_ID);
    }

    public void setPatientIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATIENTID_ISSET_ID, value);
    }

    public TClientPolicy getNewPolicy() {
      return this.newPolicy;
    }

    public changeClientPolicy_args setNewPolicy(TClientPolicy newPolicy) {
      this.newPolicy = newPolicy;
      return this;
    }

    public void unsetNewPolicy() {
      this.newPolicy = null;
    }

    /** Returns true if field newPolicy is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPolicy() {
      return this.newPolicy != null;
    }

    public void setNewPolicyIsSet(boolean value) {
      if (!value) {
        this.newPolicy = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATIENT_ID:
        if (value == null) {
          unsetPatientId();
        } else {
          setPatientId((Integer)value);
        }
        break;

      case NEW_POLICY:
        if (value == null) {
          unsetNewPolicy();
        } else {
          setNewPolicy((TClientPolicy)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT_ID:
        return Integer.valueOf(getPatientId());

      case NEW_POLICY:
        return getNewPolicy();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATIENT_ID:
        return isSetPatientId();
      case NEW_POLICY:
        return isSetNewPolicy();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeClientPolicy_args)
        return this.equals((changeClientPolicy_args)that);
      return false;
    }

    public boolean equals(changeClientPolicy_args that) {
      if (that == null)
        return false;

      boolean this_present_patientId = true;
      boolean that_present_patientId = true;
      if (this_present_patientId || that_present_patientId) {
        if (!(this_present_patientId && that_present_patientId))
          return false;
        if (this.patientId != that.patientId)
          return false;
      }

      boolean this_present_newPolicy = true && this.isSetNewPolicy();
      boolean that_present_newPolicy = true && that.isSetNewPolicy();
      if (this_present_newPolicy || that_present_newPolicy) {
        if (!(this_present_newPolicy && that_present_newPolicy))
          return false;
        if (!this.newPolicy.equals(that.newPolicy))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(changeClientPolicy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      changeClientPolicy_args typedOther = (changeClientPolicy_args)other;

      lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(typedOther.isSetPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, typedOther.patientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPolicy()).compareTo(typedOther.isSetNewPolicy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPolicy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPolicy, typedOther.newPolicy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeClientPolicy_args(");
      boolean first = true;

      sb.append("patientId:");
      sb.append(this.patientId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPolicy:");
      if (this.newPolicy == null) {
        sb.append("null");
      } else {
        sb.append(this.newPolicy);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newPolicy != null) {
        newPolicy.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeClientPolicy_argsStandardSchemeFactory implements SchemeFactory {
      public changeClientPolicy_argsStandardScheme getScheme() {
        return new changeClientPolicy_argsStandardScheme();
      }
    }

    private static class changeClientPolicy_argsStandardScheme extends StandardScheme<changeClientPolicy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeClientPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.patientId = iprot.readI32();
                struct.setPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_POLICY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newPolicy = new TClientPolicy();
                struct.newPolicy.read(iprot);
                struct.setNewPolicyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeClientPolicy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.patientId);
        oprot.writeFieldEnd();
        if (struct.newPolicy != null) {
          oprot.writeFieldBegin(NEW_POLICY_FIELD_DESC);
          struct.newPolicy.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeClientPolicy_argsTupleSchemeFactory implements SchemeFactory {
      public changeClientPolicy_argsTupleScheme getScheme() {
        return new changeClientPolicy_argsTupleScheme();
      }
    }

    private static class changeClientPolicy_argsTupleScheme extends TupleScheme<changeClientPolicy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeClientPolicy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatientId()) {
          optionals.set(0);
        }
        if (struct.isSetNewPolicy()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPatientId()) {
          oprot.writeI32(struct.patientId);
        }
        if (struct.isSetNewPolicy()) {
          struct.newPolicy.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeClientPolicy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.patientId = iprot.readI32();
          struct.setPatientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newPolicy = new TClientPolicy();
          struct.newPolicy.read(iprot);
          struct.setNewPolicyIsSet(true);
        }
      }
    }

  }

  public static class changeClientPolicy_result implements org.apache.thrift.TBase<changeClientPolicy_result, changeClientPolicy_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeClientPolicy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("argExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SQL_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlExc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeClientPolicy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeClientPolicy_resultTupleSchemeFactory());
    }

    public int success; // required
    public InvalidArgumentException argExc; // required
    public SQLException sqlExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG_EXC((short)1, "argExc"),
      SQL_EXC((short)2, "sqlExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG_EXC
            return ARG_EXC;
          case 2: // SQL_EXC
            return SQL_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.ARG_EXC, new org.apache.thrift.meta_data.FieldMetaData("argExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SQL_EXC, new org.apache.thrift.meta_data.FieldMetaData("sqlExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeClientPolicy_result.class, metaDataMap);
    }

    public changeClientPolicy_result() {
    }

    public changeClientPolicy_result(
      int success,
      InvalidArgumentException argExc,
      SQLException sqlExc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.argExc = argExc;
      this.sqlExc = sqlExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeClientPolicy_result(changeClientPolicy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetArgExc()) {
        this.argExc = new InvalidArgumentException(other.argExc);
      }
      if (other.isSetSqlExc()) {
        this.sqlExc = new SQLException(other.sqlExc);
      }
    }

    public changeClientPolicy_result deepCopy() {
      return new changeClientPolicy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.argExc = null;
      this.sqlExc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public changeClientPolicy_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidArgumentException getArgExc() {
      return this.argExc;
    }

    public changeClientPolicy_result setArgExc(InvalidArgumentException argExc) {
      this.argExc = argExc;
      return this;
    }

    public void unsetArgExc() {
      this.argExc = null;
    }

    /** Returns true if field argExc is set (has been assigned a value) and false otherwise */
    public boolean isSetArgExc() {
      return this.argExc != null;
    }

    public void setArgExcIsSet(boolean value) {
      if (!value) {
        this.argExc = null;
      }
    }

    public SQLException getSqlExc() {
      return this.sqlExc;
    }

    public changeClientPolicy_result setSqlExc(SQLException sqlExc) {
      this.sqlExc = sqlExc;
      return this;
    }

    public void unsetSqlExc() {
      this.sqlExc = null;
    }

    /** Returns true if field sqlExc is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlExc() {
      return this.sqlExc != null;
    }

    public void setSqlExcIsSet(boolean value) {
      if (!value) {
        this.sqlExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ARG_EXC:
        if (value == null) {
          unsetArgExc();
        } else {
          setArgExc((InvalidArgumentException)value);
        }
        break;

      case SQL_EXC:
        if (value == null) {
          unsetSqlExc();
        } else {
          setSqlExc((SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case ARG_EXC:
        return getArgExc();

      case SQL_EXC:
        return getSqlExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG_EXC:
        return isSetArgExc();
      case SQL_EXC:
        return isSetSqlExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeClientPolicy_result)
        return this.equals((changeClientPolicy_result)that);
      return false;
    }

    public boolean equals(changeClientPolicy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_argExc = true && this.isSetArgExc();
      boolean that_present_argExc = true && that.isSetArgExc();
      if (this_present_argExc || that_present_argExc) {
        if (!(this_present_argExc && that_present_argExc))
          return false;
        if (!this.argExc.equals(that.argExc))
          return false;
      }

      boolean this_present_sqlExc = true && this.isSetSqlExc();
      boolean that_present_sqlExc = true && that.isSetSqlExc();
      if (this_present_sqlExc || that_present_sqlExc) {
        if (!(this_present_sqlExc && that_present_sqlExc))
          return false;
        if (!this.sqlExc.equals(that.sqlExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(changeClientPolicy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      changeClientPolicy_result typedOther = (changeClientPolicy_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgExc()).compareTo(typedOther.isSetArgExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argExc, typedOther.argExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSqlExc()).compareTo(typedOther.isSetSqlExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlExc, typedOther.sqlExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeClientPolicy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("argExc:");
      if (this.argExc == null) {
        sb.append("null");
      } else {
        sb.append(this.argExc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sqlExc:");
      if (this.sqlExc == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeClientPolicy_resultStandardSchemeFactory implements SchemeFactory {
      public changeClientPolicy_resultStandardScheme getScheme() {
        return new changeClientPolicy_resultStandardScheme();
      }
    }

    private static class changeClientPolicy_resultStandardScheme extends StandardScheme<changeClientPolicy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeClientPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.argExc = new InvalidArgumentException();
                struct.argExc.read(iprot);
                struct.setArgExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SQL_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlExc = new SQLException();
                struct.sqlExc.read(iprot);
                struct.setSqlExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeClientPolicy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.argExc != null) {
          oprot.writeFieldBegin(ARG_EXC_FIELD_DESC);
          struct.argExc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sqlExc != null) {
          oprot.writeFieldBegin(SQL_EXC_FIELD_DESC);
          struct.sqlExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeClientPolicy_resultTupleSchemeFactory implements SchemeFactory {
      public changeClientPolicy_resultTupleScheme getScheme() {
        return new changeClientPolicy_resultTupleScheme();
      }
    }

    private static class changeClientPolicy_resultTupleScheme extends TupleScheme<changeClientPolicy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeClientPolicy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArgExc()) {
          optionals.set(1);
        }
        if (struct.isSetSqlExc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetArgExc()) {
          struct.argExc.write(oprot);
        }
        if (struct.isSetSqlExc()) {
          struct.sqlExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeClientPolicy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.argExc = new InvalidArgumentException();
          struct.argExc.read(iprot);
          struct.setArgExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sqlExc = new SQLException();
          struct.sqlExc.read(iprot);
          struct.setSqlExcIsSet(true);
        }
      }
    }

  }

  public static class loadTfomsPayments_args implements org.apache.thrift.TBase<loadTfomsPayments_args, loadTfomsPayments_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadTfomsPayments_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAYMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("payments", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField REFUSED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refusedAmount", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAYED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("payedAmount", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAYED_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("payedSum", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField REFUSED_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("refusedSum", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField ACCOUNT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNumber", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadTfomsPayments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadTfomsPayments_argsTupleSchemeFactory());
    }

    public String fileName; // required
    public List<Payment> payments; // required
    public int refusedAmount; // required
    public int payedAmount; // required
    public double payedSum; // required
    public double refusedSum; // required
    public String accountNumber; // required
    public String comment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName"),
      PAYMENTS((short)2, "payments"),
      REFUSED_AMOUNT((short)3, "refusedAmount"),
      PAYED_AMOUNT((short)4, "payedAmount"),
      PAYED_SUM((short)5, "payedSum"),
      REFUSED_SUM((short)6, "refusedSum"),
      ACCOUNT_NUMBER((short)7, "accountNumber"),
      COMMENT((short)8, "comment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // PAYMENTS
            return PAYMENTS;
          case 3: // REFUSED_AMOUNT
            return REFUSED_AMOUNT;
          case 4: // PAYED_AMOUNT
            return PAYED_AMOUNT;
          case 5: // PAYED_SUM
            return PAYED_SUM;
          case 6: // REFUSED_SUM
            return REFUSED_SUM;
          case 7: // ACCOUNT_NUMBER
            return ACCOUNT_NUMBER;
          case 8: // COMMENT
            return COMMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REFUSEDAMOUNT_ISSET_ID = 0;
    private static final int __PAYEDAMOUNT_ISSET_ID = 1;
    private static final int __PAYEDSUM_ISSET_ID = 2;
    private static final int __REFUSEDSUM_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYMENTS, new org.apache.thrift.meta_data.FieldMetaData("payments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Payment.class))));
      tmpMap.put(_Fields.REFUSED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refusedAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAYED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("payedAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAYED_SUM, new org.apache.thrift.meta_data.FieldMetaData("payedSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.REFUSED_SUM, new org.apache.thrift.meta_data.FieldMetaData("refusedSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.ACCOUNT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("accountNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadTfomsPayments_args.class, metaDataMap);
    }

    public loadTfomsPayments_args() {
    }

    public loadTfomsPayments_args(
      String fileName,
      List<Payment> payments,
      int refusedAmount,
      int payedAmount,
      double payedSum,
      double refusedSum,
      String accountNumber,
      String comment)
    {
      this();
      this.fileName = fileName;
      this.payments = payments;
      this.refusedAmount = refusedAmount;
      setRefusedAmountIsSet(true);
      this.payedAmount = payedAmount;
      setPayedAmountIsSet(true);
      this.payedSum = payedSum;
      setPayedSumIsSet(true);
      this.refusedSum = refusedSum;
      setRefusedSumIsSet(true);
      this.accountNumber = accountNumber;
      this.comment = comment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadTfomsPayments_args(loadTfomsPayments_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetPayments()) {
        List<Payment> __this__payments = new ArrayList<Payment>();
        for (Payment other_element : other.payments) {
          __this__payments.add(new Payment(other_element));
        }
        this.payments = __this__payments;
      }
      this.refusedAmount = other.refusedAmount;
      this.payedAmount = other.payedAmount;
      this.payedSum = other.payedSum;
      this.refusedSum = other.refusedSum;
      if (other.isSetAccountNumber()) {
        this.accountNumber = other.accountNumber;
      }
      if (other.isSetComment()) {
        this.comment = other.comment;
      }
    }

    public loadTfomsPayments_args deepCopy() {
      return new loadTfomsPayments_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
      this.payments = null;
      setRefusedAmountIsSet(false);
      this.refusedAmount = 0;
      setPayedAmountIsSet(false);
      this.payedAmount = 0;
      setPayedSumIsSet(false);
      this.payedSum = 0.0;
      setRefusedSumIsSet(false);
      this.refusedSum = 0.0;
      this.accountNumber = null;
      this.comment = null;
    }

    public String getFileName() {
      return this.fileName;
    }

    public loadTfomsPayments_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public int getPaymentsSize() {
      return (this.payments == null) ? 0 : this.payments.size();
    }

    public java.util.Iterator<Payment> getPaymentsIterator() {
      return (this.payments == null) ? null : this.payments.iterator();
    }

    public void addToPayments(Payment elem) {
      if (this.payments == null) {
        this.payments = new ArrayList<Payment>();
      }
      this.payments.add(elem);
    }

    public List<Payment> getPayments() {
      return this.payments;
    }

    public loadTfomsPayments_args setPayments(List<Payment> payments) {
      this.payments = payments;
      return this;
    }

    public void unsetPayments() {
      this.payments = null;
    }

    /** Returns true if field payments is set (has been assigned a value) and false otherwise */
    public boolean isSetPayments() {
      return this.payments != null;
    }

    public void setPaymentsIsSet(boolean value) {
      if (!value) {
        this.payments = null;
      }
    }

    public int getRefusedAmount() {
      return this.refusedAmount;
    }

    public loadTfomsPayments_args setRefusedAmount(int refusedAmount) {
      this.refusedAmount = refusedAmount;
      setRefusedAmountIsSet(true);
      return this;
    }

    public void unsetRefusedAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUSEDAMOUNT_ISSET_ID);
    }

    /** Returns true if field refusedAmount is set (has been assigned a value) and false otherwise */
    public boolean isSetRefusedAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __REFUSEDAMOUNT_ISSET_ID);
    }

    public void setRefusedAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUSEDAMOUNT_ISSET_ID, value);
    }

    public int getPayedAmount() {
      return this.payedAmount;
    }

    public loadTfomsPayments_args setPayedAmount(int payedAmount) {
      this.payedAmount = payedAmount;
      setPayedAmountIsSet(true);
      return this;
    }

    public void unsetPayedAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYEDAMOUNT_ISSET_ID);
    }

    /** Returns true if field payedAmount is set (has been assigned a value) and false otherwise */
    public boolean isSetPayedAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __PAYEDAMOUNT_ISSET_ID);
    }

    public void setPayedAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYEDAMOUNT_ISSET_ID, value);
    }

    public double getPayedSum() {
      return this.payedSum;
    }

    public loadTfomsPayments_args setPayedSum(double payedSum) {
      this.payedSum = payedSum;
      setPayedSumIsSet(true);
      return this;
    }

    public void unsetPayedSum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYEDSUM_ISSET_ID);
    }

    /** Returns true if field payedSum is set (has been assigned a value) and false otherwise */
    public boolean isSetPayedSum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAYEDSUM_ISSET_ID);
    }

    public void setPayedSumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYEDSUM_ISSET_ID, value);
    }

    public double getRefusedSum() {
      return this.refusedSum;
    }

    public loadTfomsPayments_args setRefusedSum(double refusedSum) {
      this.refusedSum = refusedSum;
      setRefusedSumIsSet(true);
      return this;
    }

    public void unsetRefusedSum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUSEDSUM_ISSET_ID);
    }

    /** Returns true if field refusedSum is set (has been assigned a value) and false otherwise */
    public boolean isSetRefusedSum() {
      return EncodingUtils.testBit(__isset_bitfield, __REFUSEDSUM_ISSET_ID);
    }

    public void setRefusedSumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUSEDSUM_ISSET_ID, value);
    }

    public String getAccountNumber() {
      return this.accountNumber;
    }

    public loadTfomsPayments_args setAccountNumber(String accountNumber) {
      this.accountNumber = accountNumber;
      return this;
    }

    public void unsetAccountNumber() {
      this.accountNumber = null;
    }

    /** Returns true if field accountNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountNumber() {
      return this.accountNumber != null;
    }

    public void setAccountNumberIsSet(boolean value) {
      if (!value) {
        this.accountNumber = null;
      }
    }

    public String getComment() {
      return this.comment;
    }

    public loadTfomsPayments_args setComment(String comment) {
      this.comment = comment;
      return this;
    }

    public void unsetComment() {
      this.comment = null;
    }

    /** Returns true if field comment is set (has been assigned a value) and false otherwise */
    public boolean isSetComment() {
      return this.comment != null;
    }

    public void setCommentIsSet(boolean value) {
      if (!value) {
        this.comment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      case PAYMENTS:
        if (value == null) {
          unsetPayments();
        } else {
          setPayments((List<Payment>)value);
        }
        break;

      case REFUSED_AMOUNT:
        if (value == null) {
          unsetRefusedAmount();
        } else {
          setRefusedAmount((Integer)value);
        }
        break;

      case PAYED_AMOUNT:
        if (value == null) {
          unsetPayedAmount();
        } else {
          setPayedAmount((Integer)value);
        }
        break;

      case PAYED_SUM:
        if (value == null) {
          unsetPayedSum();
        } else {
          setPayedSum((Double)value);
        }
        break;

      case REFUSED_SUM:
        if (value == null) {
          unsetRefusedSum();
        } else {
          setRefusedSum((Double)value);
        }
        break;

      case ACCOUNT_NUMBER:
        if (value == null) {
          unsetAccountNumber();
        } else {
          setAccountNumber((String)value);
        }
        break;

      case COMMENT:
        if (value == null) {
          unsetComment();
        } else {
          setComment((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      case PAYMENTS:
        return getPayments();

      case REFUSED_AMOUNT:
        return Integer.valueOf(getRefusedAmount());

      case PAYED_AMOUNT:
        return Integer.valueOf(getPayedAmount());

      case PAYED_SUM:
        return Double.valueOf(getPayedSum());

      case REFUSED_SUM:
        return Double.valueOf(getRefusedSum());

      case ACCOUNT_NUMBER:
        return getAccountNumber();

      case COMMENT:
        return getComment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      case PAYMENTS:
        return isSetPayments();
      case REFUSED_AMOUNT:
        return isSetRefusedAmount();
      case PAYED_AMOUNT:
        return isSetPayedAmount();
      case PAYED_SUM:
        return isSetPayedSum();
      case REFUSED_SUM:
        return isSetRefusedSum();
      case ACCOUNT_NUMBER:
        return isSetAccountNumber();
      case COMMENT:
        return isSetComment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadTfomsPayments_args)
        return this.equals((loadTfomsPayments_args)that);
      return false;
    }

    public boolean equals(loadTfomsPayments_args that) {
      if (that == null)
        return false;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_payments = true && this.isSetPayments();
      boolean that_present_payments = true && that.isSetPayments();
      if (this_present_payments || that_present_payments) {
        if (!(this_present_payments && that_present_payments))
          return false;
        if (!this.payments.equals(that.payments))
          return false;
      }

      boolean this_present_refusedAmount = true;
      boolean that_present_refusedAmount = true;
      if (this_present_refusedAmount || that_present_refusedAmount) {
        if (!(this_present_refusedAmount && that_present_refusedAmount))
          return false;
        if (this.refusedAmount != that.refusedAmount)
          return false;
      }

      boolean this_present_payedAmount = true;
      boolean that_present_payedAmount = true;
      if (this_present_payedAmount || that_present_payedAmount) {
        if (!(this_present_payedAmount && that_present_payedAmount))
          return false;
        if (this.payedAmount != that.payedAmount)
          return false;
      }

      boolean this_present_payedSum = true;
      boolean that_present_payedSum = true;
      if (this_present_payedSum || that_present_payedSum) {
        if (!(this_present_payedSum && that_present_payedSum))
          return false;
        if (this.payedSum != that.payedSum)
          return false;
      }

      boolean this_present_refusedSum = true;
      boolean that_present_refusedSum = true;
      if (this_present_refusedSum || that_present_refusedSum) {
        if (!(this_present_refusedSum && that_present_refusedSum))
          return false;
        if (this.refusedSum != that.refusedSum)
          return false;
      }

      boolean this_present_accountNumber = true && this.isSetAccountNumber();
      boolean that_present_accountNumber = true && that.isSetAccountNumber();
      if (this_present_accountNumber || that_present_accountNumber) {
        if (!(this_present_accountNumber && that_present_accountNumber))
          return false;
        if (!this.accountNumber.equals(that.accountNumber))
          return false;
      }

      boolean this_present_comment = true && this.isSetComment();
      boolean that_present_comment = true && that.isSetComment();
      if (this_present_comment || that_present_comment) {
        if (!(this_present_comment && that_present_comment))
          return false;
        if (!this.comment.equals(that.comment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadTfomsPayments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadTfomsPayments_args typedOther = (loadTfomsPayments_args)other;

      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(typedOther.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, typedOther.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayments()).compareTo(typedOther.isSetPayments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payments, typedOther.payments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRefusedAmount()).compareTo(typedOther.isSetRefusedAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefusedAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refusedAmount, typedOther.refusedAmount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayedAmount()).compareTo(typedOther.isSetPayedAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayedAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payedAmount, typedOther.payedAmount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayedSum()).compareTo(typedOther.isSetPayedSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayedSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payedSum, typedOther.payedSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRefusedSum()).compareTo(typedOther.isSetRefusedSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefusedSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refusedSum, typedOther.refusedSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountNumber()).compareTo(typedOther.isSetAccountNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNumber, typedOther.accountNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadTfomsPayments_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("payments:");
      if (this.payments == null) {
        sb.append("null");
      } else {
        sb.append(this.payments);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("refusedAmount:");
      sb.append(this.refusedAmount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("payedAmount:");
      sb.append(this.payedAmount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("payedSum:");
      sb.append(this.payedSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("refusedSum:");
      sb.append(this.refusedSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountNumber:");
      if (this.accountNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.accountNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadTfomsPayments_argsStandardSchemeFactory implements SchemeFactory {
      public loadTfomsPayments_argsStandardScheme getScheme() {
        return new loadTfomsPayments_argsStandardScheme();
      }
    }

    private static class loadTfomsPayments_argsStandardScheme extends StandardScheme<loadTfomsPayments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadTfomsPayments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAYMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.payments = new ArrayList<Payment>(_list106.size);
                  for (int _i107 = 0; _i107 < _list106.size; ++_i107)
                  {
                    Payment _elem108; // required
                    _elem108 = new Payment();
                    _elem108.read(iprot);
                    struct.payments.add(_elem108);
                  }
                  iprot.readListEnd();
                }
                struct.setPaymentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REFUSED_AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.refusedAmount = iprot.readI32();
                struct.setRefusedAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAYED_AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.payedAmount = iprot.readI32();
                struct.setPayedAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAYED_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.payedSum = iprot.readDouble();
                struct.setPayedSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // REFUSED_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.refusedSum = iprot.readDouble();
                struct.setRefusedSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ACCOUNT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountNumber = iprot.readString();
                struct.setAccountNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // COMMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.comment = iprot.readString();
                struct.setCommentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadTfomsPayments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.payments != null) {
          oprot.writeFieldBegin(PAYMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.payments.size()));
            for (Payment _iter109 : struct.payments)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REFUSED_AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.refusedAmount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAYED_AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.payedAmount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAYED_SUM_FIELD_DESC);
        oprot.writeDouble(struct.payedSum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REFUSED_SUM_FIELD_DESC);
        oprot.writeDouble(struct.refusedSum);
        oprot.writeFieldEnd();
        if (struct.accountNumber != null) {
          oprot.writeFieldBegin(ACCOUNT_NUMBER_FIELD_DESC);
          oprot.writeString(struct.accountNumber);
          oprot.writeFieldEnd();
        }
        if (struct.comment != null) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadTfomsPayments_argsTupleSchemeFactory implements SchemeFactory {
      public loadTfomsPayments_argsTupleScheme getScheme() {
        return new loadTfomsPayments_argsTupleScheme();
      }
    }

    private static class loadTfomsPayments_argsTupleScheme extends TupleScheme<loadTfomsPayments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadTfomsPayments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        if (struct.isSetPayments()) {
          optionals.set(1);
        }
        if (struct.isSetRefusedAmount()) {
          optionals.set(2);
        }
        if (struct.isSetPayedAmount()) {
          optionals.set(3);
        }
        if (struct.isSetPayedSum()) {
          optionals.set(4);
        }
        if (struct.isSetRefusedSum()) {
          optionals.set(5);
        }
        if (struct.isSetAccountNumber()) {
          optionals.set(6);
        }
        if (struct.isSetComment()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetPayments()) {
          {
            oprot.writeI32(struct.payments.size());
            for (Payment _iter110 : struct.payments)
            {
              _iter110.write(oprot);
            }
          }
        }
        if (struct.isSetRefusedAmount()) {
          oprot.writeI32(struct.refusedAmount);
        }
        if (struct.isSetPayedAmount()) {
          oprot.writeI32(struct.payedAmount);
        }
        if (struct.isSetPayedSum()) {
          oprot.writeDouble(struct.payedSum);
        }
        if (struct.isSetRefusedSum()) {
          oprot.writeDouble(struct.refusedSum);
        }
        if (struct.isSetAccountNumber()) {
          oprot.writeString(struct.accountNumber);
        }
        if (struct.isSetComment()) {
          oprot.writeString(struct.comment);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadTfomsPayments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.payments = new ArrayList<Payment>(_list111.size);
            for (int _i112 = 0; _i112 < _list111.size; ++_i112)
            {
              Payment _elem113; // required
              _elem113 = new Payment();
              _elem113.read(iprot);
              struct.payments.add(_elem113);
            }
          }
          struct.setPaymentsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.refusedAmount = iprot.readI32();
          struct.setRefusedAmountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.payedAmount = iprot.readI32();
          struct.setPayedAmountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.payedSum = iprot.readDouble();
          struct.setPayedSumIsSet(true);
        }
        if (incoming.get(5)) {
          struct.refusedSum = iprot.readDouble();
          struct.setRefusedSumIsSet(true);
        }
        if (incoming.get(6)) {
          struct.accountNumber = iprot.readString();
          struct.setAccountNumberIsSet(true);
        }
        if (incoming.get(7)) {
          struct.comment = iprot.readString();
          struct.setCommentIsSet(true);
        }
      }
    }

  }

  public static class loadTfomsPayments_result implements org.apache.thrift.TBase<loadTfomsPayments_result, loadTfomsPayments_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadTfomsPayments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField NF_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("nfExc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadTfomsPayments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadTfomsPayments_resultTupleSchemeFactory());
    }

    public Map<Integer,String> success; // required
    public NotFoundException nfExc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NF_EXC((short)1, "nfExc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NF_EXC
            return NF_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.NF_EXC, new org.apache.thrift.meta_data.FieldMetaData("nfExc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadTfomsPayments_result.class, metaDataMap);
    }

    public loadTfomsPayments_result() {
    }

    public loadTfomsPayments_result(
      Map<Integer,String> success,
      NotFoundException nfExc)
    {
      this();
      this.success = success;
      this.nfExc = nfExc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadTfomsPayments_result(loadTfomsPayments_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,String> __this__success = new HashMap<Integer,String>();
        for (Map.Entry<Integer, String> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetNfExc()) {
        this.nfExc = new NotFoundException(other.nfExc);
      }
    }

    public loadTfomsPayments_result deepCopy() {
      return new loadTfomsPayments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.nfExc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, String val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,String>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,String> getSuccess() {
      return this.success;
    }

    public loadTfomsPayments_result setSuccess(Map<Integer,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotFoundException getNfExc() {
      return this.nfExc;
    }

    public loadTfomsPayments_result setNfExc(NotFoundException nfExc) {
      this.nfExc = nfExc;
      return this;
    }

    public void unsetNfExc() {
      this.nfExc = null;
    }

    /** Returns true if field nfExc is set (has been assigned a value) and false otherwise */
    public boolean isSetNfExc() {
      return this.nfExc != null;
    }

    public void setNfExcIsSet(boolean value) {
      if (!value) {
        this.nfExc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,String>)value);
        }
        break;

      case NF_EXC:
        if (value == null) {
          unsetNfExc();
        } else {
          setNfExc((NotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NF_EXC:
        return getNfExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NF_EXC:
        return isSetNfExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadTfomsPayments_result)
        return this.equals((loadTfomsPayments_result)that);
      return false;
    }

    public boolean equals(loadTfomsPayments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nfExc = true && this.isSetNfExc();
      boolean that_present_nfExc = true && that.isSetNfExc();
      if (this_present_nfExc || that_present_nfExc) {
        if (!(this_present_nfExc && that_present_nfExc))
          return false;
        if (!this.nfExc.equals(that.nfExc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadTfomsPayments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadTfomsPayments_result typedOther = (loadTfomsPayments_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNfExc()).compareTo(typedOther.isSetNfExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNfExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nfExc, typedOther.nfExc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadTfomsPayments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nfExc:");
      if (this.nfExc == null) {
        sb.append("null");
      } else {
        sb.append(this.nfExc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadTfomsPayments_resultStandardSchemeFactory implements SchemeFactory {
      public loadTfomsPayments_resultStandardScheme getScheme() {
        return new loadTfomsPayments_resultStandardScheme();
      }
    }

    private static class loadTfomsPayments_resultStandardScheme extends StandardScheme<loadTfomsPayments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadTfomsPayments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map114 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,String>(2*_map114.size);
                  for (int _i115 = 0; _i115 < _map114.size; ++_i115)
                  {
                    int _key116; // required
                    String _val117; // required
                    _key116 = iprot.readI32();
                    _val117 = iprot.readString();
                    struct.success.put(_key116, _val117);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NF_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nfExc = new NotFoundException();
                struct.nfExc.read(iprot);
                struct.setNfExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadTfomsPayments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<Integer, String> _iter118 : struct.success.entrySet())
            {
              oprot.writeI32(_iter118.getKey());
              oprot.writeString(_iter118.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.nfExc != null) {
          oprot.writeFieldBegin(NF_EXC_FIELD_DESC);
          struct.nfExc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadTfomsPayments_resultTupleSchemeFactory implements SchemeFactory {
      public loadTfomsPayments_resultTupleScheme getScheme() {
        return new loadTfomsPayments_resultTupleScheme();
      }
    }

    private static class loadTfomsPayments_resultTupleScheme extends TupleScheme<loadTfomsPayments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadTfomsPayments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNfExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, String> _iter119 : struct.success.entrySet())
            {
              oprot.writeI32(_iter119.getKey());
              oprot.writeString(_iter119.getValue());
            }
          }
        }
        if (struct.isSetNfExc()) {
          struct.nfExc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadTfomsPayments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<Integer,String>(2*_map120.size);
            for (int _i121 = 0; _i121 < _map120.size; ++_i121)
            {
              int _key122; // required
              String _val123; // required
              _key122 = iprot.readI32();
              _val123 = iprot.readString();
              struct.success.put(_key122, _val123);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nfExc = new NotFoundException();
          struct.nfExc.read(iprot);
          struct.setNfExcIsSet(true);
        }
      }
    }

  }

}
