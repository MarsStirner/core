/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.tfoms.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Структура с данными об оплате выгруженного случая
 * @param accountItemId                1)Уникальный идентификатор позиции счета (SLUCH:IDCASE)
 * @param refuseTypeCode               2)Код причины отказа в оплате            (SLUCH:REFREASON)
 * @param comment                      3)Комментарий к оплате случая            (SLUCH:COMENTSL)
 */
public class Payment implements org.apache.thrift.TBase<Payment, Payment._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Payment");

  private static final org.apache.thrift.protocol.TField ACCOUNT_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountItemId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REFUSE_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseTypeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PaymentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PaymentTupleSchemeFactory());
  }

  public int accountItemId; // required
  public String refuseTypeCode; // optional
  public String comment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_ITEM_ID((short)1, "accountItemId"),
    REFUSE_TYPE_CODE((short)2, "refuseTypeCode"),
    COMMENT((short)3, "comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_ITEM_ID
          return ACCOUNT_ITEM_ID;
        case 2: // REFUSE_TYPE_CODE
          return REFUSE_TYPE_CODE;
        case 3: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCOUNTITEMID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.REFUSE_TYPE_CODE,_Fields.COMMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("accountItemId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.REFUSE_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("refuseTypeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Payment.class, metaDataMap);
  }

  public Payment() {
  }

  public Payment(
    int accountItemId)
  {
    this();
    this.accountItemId = accountItemId;
    setAccountItemIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Payment(Payment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.accountItemId = other.accountItemId;
    if (other.isSetRefuseTypeCode()) {
      this.refuseTypeCode = other.refuseTypeCode;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  public Payment deepCopy() {
    return new Payment(this);
  }

  @Override
  public void clear() {
    setAccountItemIdIsSet(false);
    this.accountItemId = 0;
    this.refuseTypeCode = null;
    this.comment = null;
  }

  public int getAccountItemId() {
    return this.accountItemId;
  }

  public Payment setAccountItemId(int accountItemId) {
    this.accountItemId = accountItemId;
    setAccountItemIdIsSet(true);
    return this;
  }

  public void unsetAccountItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTITEMID_ISSET_ID);
  }

  /** Returns true if field accountItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTITEMID_ISSET_ID);
  }

  public void setAccountItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTITEMID_ISSET_ID, value);
  }

  public String getRefuseTypeCode() {
    return this.refuseTypeCode;
  }

  public Payment setRefuseTypeCode(String refuseTypeCode) {
    this.refuseTypeCode = refuseTypeCode;
    return this;
  }

  public void unsetRefuseTypeCode() {
    this.refuseTypeCode = null;
  }

  /** Returns true if field refuseTypeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseTypeCode() {
    return this.refuseTypeCode != null;
  }

  public void setRefuseTypeCodeIsSet(boolean value) {
    if (!value) {
      this.refuseTypeCode = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public Payment setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNT_ITEM_ID:
      if (value == null) {
        unsetAccountItemId();
      } else {
        setAccountItemId((Integer)value);
      }
      break;

    case REFUSE_TYPE_CODE:
      if (value == null) {
        unsetRefuseTypeCode();
      } else {
        setRefuseTypeCode((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_ITEM_ID:
      return Integer.valueOf(getAccountItemId());

    case REFUSE_TYPE_CODE:
      return getRefuseTypeCode();

    case COMMENT:
      return getComment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_ITEM_ID:
      return isSetAccountItemId();
    case REFUSE_TYPE_CODE:
      return isSetRefuseTypeCode();
    case COMMENT:
      return isSetComment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Payment)
      return this.equals((Payment)that);
    return false;
  }

  public boolean equals(Payment that) {
    if (that == null)
      return false;

    boolean this_present_accountItemId = true;
    boolean that_present_accountItemId = true;
    if (this_present_accountItemId || that_present_accountItemId) {
      if (!(this_present_accountItemId && that_present_accountItemId))
        return false;
      if (this.accountItemId != that.accountItemId)
        return false;
    }

    boolean this_present_refuseTypeCode = true && this.isSetRefuseTypeCode();
    boolean that_present_refuseTypeCode = true && that.isSetRefuseTypeCode();
    if (this_present_refuseTypeCode || that_present_refuseTypeCode) {
      if (!(this_present_refuseTypeCode && that_present_refuseTypeCode))
        return false;
      if (!this.refuseTypeCode.equals(that.refuseTypeCode))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Payment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Payment typedOther = (Payment)other;

    lastComparison = Boolean.valueOf(isSetAccountItemId()).compareTo(typedOther.isSetAccountItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountItemId, typedOther.accountItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseTypeCode()).compareTo(typedOther.isSetRefuseTypeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseTypeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseTypeCode, typedOther.refuseTypeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Payment(");
    boolean first = true;

    sb.append("accountItemId:");
    sb.append(this.accountItemId);
    first = false;
    if (isSetRefuseTypeCode()) {
      if (!first) sb.append(", ");
      sb.append("refuseTypeCode:");
      if (this.refuseTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.refuseTypeCode);
      }
      first = false;
    }
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'accountItemId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaymentStandardSchemeFactory implements SchemeFactory {
    public PaymentStandardScheme getScheme() {
      return new PaymentStandardScheme();
    }
  }

  private static class PaymentStandardScheme extends StandardScheme<Payment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Payment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountItemId = iprot.readI32();
              struct.setAccountItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REFUSE_TYPE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseTypeCode = iprot.readString();
              struct.setRefuseTypeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAccountItemId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountItemId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Payment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACCOUNT_ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.accountItemId);
      oprot.writeFieldEnd();
      if (struct.refuseTypeCode != null) {
        if (struct.isSetRefuseTypeCode()) {
          oprot.writeFieldBegin(REFUSE_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.refuseTypeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaymentTupleSchemeFactory implements SchemeFactory {
    public PaymentTupleScheme getScheme() {
      return new PaymentTupleScheme();
    }
  }

  private static class PaymentTupleScheme extends TupleScheme<Payment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Payment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.accountItemId);
      BitSet optionals = new BitSet();
      if (struct.isSetRefuseTypeCode()) {
        optionals.set(0);
      }
      if (struct.isSetComment()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRefuseTypeCode()) {
        oprot.writeString(struct.refuseTypeCode);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Payment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.accountItemId = iprot.readI32();
      struct.setAccountItemIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.refuseTypeCode = iprot.readString();
        struct.setRefuseTypeCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
    }
  }

}

