/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.hitsl.tmis.tfoms.spb.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * ClientDocument
 * Данные о документе пациента для записи реестра услуг
 * *************************************************
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-30")
public class ClientDocument implements org.apache.thrift.TBase<ClientDocument, ClientDocument._Fields>, java.io.Serializable, Cloneable, Comparable<ClientDocument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientDocument");

  private static final org.apache.thrift.protocol.TField TYPEDOC_FIELD_DESC = new org.apache.thrift.protocol.TField("TYPEDOC", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SER1_FIELD_DESC = new org.apache.thrift.protocol.TField("SER1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SER2_FIELD_DESC = new org.apache.thrift.protocol.TField("SER2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("NPASP", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientDocumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientDocumentTupleSchemeFactory());
  }

  public String TYPEDOC; // optional
  public String SER1; // optional
  public String SER2; // optional
  public String NPASP; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPEDOC((short)1, "TYPEDOC"),
    SER1((short)2, "SER1"),
    SER2((short)3, "SER2"),
    NPASP((short)4, "NPASP");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPEDOC
          return TYPEDOC;
        case 2: // SER1
          return SER1;
        case 3: // SER2
          return SER2;
        case 4: // NPASP
          return NPASP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TYPEDOC,_Fields.SER1,_Fields.SER2,_Fields.NPASP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPEDOC, new org.apache.thrift.meta_data.FieldMetaData("TYPEDOC", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SER1, new org.apache.thrift.meta_data.FieldMetaData("SER1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SER2, new org.apache.thrift.meta_data.FieldMetaData("SER2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("NPASP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientDocument.class, metaDataMap);
  }

  public ClientDocument() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientDocument(ClientDocument other) {
    if (other.isSetTYPEDOC()) {
      this.TYPEDOC = other.TYPEDOC;
    }
    if (other.isSetSER1()) {
      this.SER1 = other.SER1;
    }
    if (other.isSetSER2()) {
      this.SER2 = other.SER2;
    }
    if (other.isSetNPASP()) {
      this.NPASP = other.NPASP;
    }
  }

  public ClientDocument deepCopy() {
    return new ClientDocument(this);
  }

  @Override
  public void clear() {
    this.TYPEDOC = null;
    this.SER1 = null;
    this.SER2 = null;
    this.NPASP = null;
  }

  public String getTYPEDOC() {
    return this.TYPEDOC;
  }

  public ClientDocument setTYPEDOC(String TYPEDOC) {
    this.TYPEDOC = TYPEDOC;
    return this;
  }

  public void unsetTYPEDOC() {
    this.TYPEDOC = null;
  }

  /** Returns true if field TYPEDOC is set (has been assigned a value) and false otherwise */
  public boolean isSetTYPEDOC() {
    return this.TYPEDOC != null;
  }

  public void setTYPEDOCIsSet(boolean value) {
    if (!value) {
      this.TYPEDOC = null;
    }
  }

  public String getSER1() {
    return this.SER1;
  }

  public ClientDocument setSER1(String SER1) {
    this.SER1 = SER1;
    return this;
  }

  public void unsetSER1() {
    this.SER1 = null;
  }

  /** Returns true if field SER1 is set (has been assigned a value) and false otherwise */
  public boolean isSetSER1() {
    return this.SER1 != null;
  }

  public void setSER1IsSet(boolean value) {
    if (!value) {
      this.SER1 = null;
    }
  }

  public String getSER2() {
    return this.SER2;
  }

  public ClientDocument setSER2(String SER2) {
    this.SER2 = SER2;
    return this;
  }

  public void unsetSER2() {
    this.SER2 = null;
  }

  /** Returns true if field SER2 is set (has been assigned a value) and false otherwise */
  public boolean isSetSER2() {
    return this.SER2 != null;
  }

  public void setSER2IsSet(boolean value) {
    if (!value) {
      this.SER2 = null;
    }
  }

  public String getNPASP() {
    return this.NPASP;
  }

  public ClientDocument setNPASP(String NPASP) {
    this.NPASP = NPASP;
    return this;
  }

  public void unsetNPASP() {
    this.NPASP = null;
  }

  /** Returns true if field NPASP is set (has been assigned a value) and false otherwise */
  public boolean isSetNPASP() {
    return this.NPASP != null;
  }

  public void setNPASPIsSet(boolean value) {
    if (!value) {
      this.NPASP = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPEDOC:
      if (value == null) {
        unsetTYPEDOC();
      } else {
        setTYPEDOC((String)value);
      }
      break;

    case SER1:
      if (value == null) {
        unsetSER1();
      } else {
        setSER1((String)value);
      }
      break;

    case SER2:
      if (value == null) {
        unsetSER2();
      } else {
        setSER2((String)value);
      }
      break;

    case NPASP:
      if (value == null) {
        unsetNPASP();
      } else {
        setNPASP((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPEDOC:
      return getTYPEDOC();

    case SER1:
      return getSER1();

    case SER2:
      return getSER2();

    case NPASP:
      return getNPASP();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPEDOC:
      return isSetTYPEDOC();
    case SER1:
      return isSetSER1();
    case SER2:
      return isSetSER2();
    case NPASP:
      return isSetNPASP();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientDocument)
      return this.equals((ClientDocument)that);
    return false;
  }

  public boolean equals(ClientDocument that) {
    if (that == null)
      return false;

    boolean this_present_TYPEDOC = true && this.isSetTYPEDOC();
    boolean that_present_TYPEDOC = true && that.isSetTYPEDOC();
    if (this_present_TYPEDOC || that_present_TYPEDOC) {
      if (!(this_present_TYPEDOC && that_present_TYPEDOC))
        return false;
      if (!this.TYPEDOC.equals(that.TYPEDOC))
        return false;
    }

    boolean this_present_SER1 = true && this.isSetSER1();
    boolean that_present_SER1 = true && that.isSetSER1();
    if (this_present_SER1 || that_present_SER1) {
      if (!(this_present_SER1 && that_present_SER1))
        return false;
      if (!this.SER1.equals(that.SER1))
        return false;
    }

    boolean this_present_SER2 = true && this.isSetSER2();
    boolean that_present_SER2 = true && that.isSetSER2();
    if (this_present_SER2 || that_present_SER2) {
      if (!(this_present_SER2 && that_present_SER2))
        return false;
      if (!this.SER2.equals(that.SER2))
        return false;
    }

    boolean this_present_NPASP = true && this.isSetNPASP();
    boolean that_present_NPASP = true && that.isSetNPASP();
    if (this_present_NPASP || that_present_NPASP) {
      if (!(this_present_NPASP && that_present_NPASP))
        return false;
      if (!this.NPASP.equals(that.NPASP))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_TYPEDOC = true && (isSetTYPEDOC());
    list.add(present_TYPEDOC);
    if (present_TYPEDOC)
      list.add(TYPEDOC);

    boolean present_SER1 = true && (isSetSER1());
    list.add(present_SER1);
    if (present_SER1)
      list.add(SER1);

    boolean present_SER2 = true && (isSetSER2());
    list.add(present_SER2);
    if (present_SER2)
      list.add(SER2);

    boolean present_NPASP = true && (isSetNPASP());
    list.add(present_NPASP);
    if (present_NPASP)
      list.add(NPASP);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClientDocument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTYPEDOC()).compareTo(other.isSetTYPEDOC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTYPEDOC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TYPEDOC, other.TYPEDOC);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSER1()).compareTo(other.isSetSER1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSER1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SER1, other.SER1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSER2()).compareTo(other.isSetSER2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSER2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SER2, other.SER2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNPASP()).compareTo(other.isSetNPASP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNPASP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NPASP, other.NPASP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientDocument(");
    boolean first = true;

    if (isSetTYPEDOC()) {
      sb.append("TYPEDOC:");
      if (this.TYPEDOC == null) {
        sb.append("null");
      } else {
        sb.append(this.TYPEDOC);
      }
      first = false;
    }
    if (isSetSER1()) {
      if (!first) sb.append(", ");
      sb.append("SER1:");
      if (this.SER1 == null) {
        sb.append("null");
      } else {
        sb.append(this.SER1);
      }
      first = false;
    }
    if (isSetSER2()) {
      if (!first) sb.append(", ");
      sb.append("SER2:");
      if (this.SER2 == null) {
        sb.append("null");
      } else {
        sb.append(this.SER2);
      }
      first = false;
    }
    if (isSetNPASP()) {
      if (!first) sb.append(", ");
      sb.append("NPASP:");
      if (this.NPASP == null) {
        sb.append("null");
      } else {
        sb.append(this.NPASP);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientDocumentStandardSchemeFactory implements SchemeFactory {
    public ClientDocumentStandardScheme getScheme() {
      return new ClientDocumentStandardScheme();
    }
  }

  private static class ClientDocumentStandardScheme extends StandardScheme<ClientDocument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientDocument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPEDOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TYPEDOC = iprot.readString();
              struct.setTYPEDOCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SER1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SER1 = iprot.readString();
              struct.setSER1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SER2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SER2 = iprot.readString();
              struct.setSER2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NPASP = iprot.readString();
              struct.setNPASPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientDocument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.TYPEDOC != null) {
        if (struct.isSetTYPEDOC()) {
          oprot.writeFieldBegin(TYPEDOC_FIELD_DESC);
          oprot.writeString(struct.TYPEDOC);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SER1 != null) {
        if (struct.isSetSER1()) {
          oprot.writeFieldBegin(SER1_FIELD_DESC);
          oprot.writeString(struct.SER1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SER2 != null) {
        if (struct.isSetSER2()) {
          oprot.writeFieldBegin(SER2_FIELD_DESC);
          oprot.writeString(struct.SER2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.NPASP != null) {
        if (struct.isSetNPASP()) {
          oprot.writeFieldBegin(NPASP_FIELD_DESC);
          oprot.writeString(struct.NPASP);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientDocumentTupleSchemeFactory implements SchemeFactory {
    public ClientDocumentTupleScheme getScheme() {
      return new ClientDocumentTupleScheme();
    }
  }

  private static class ClientDocumentTupleScheme extends TupleScheme<ClientDocument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTYPEDOC()) {
        optionals.set(0);
      }
      if (struct.isSetSER1()) {
        optionals.set(1);
      }
      if (struct.isSetSER2()) {
        optionals.set(2);
      }
      if (struct.isSetNPASP()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTYPEDOC()) {
        oprot.writeString(struct.TYPEDOC);
      }
      if (struct.isSetSER1()) {
        oprot.writeString(struct.SER1);
      }
      if (struct.isSetSER2()) {
        oprot.writeString(struct.SER2);
      }
      if (struct.isSetNPASP()) {
        oprot.writeString(struct.NPASP);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.TYPEDOC = iprot.readString();
        struct.setTYPEDOCIsSet(true);
      }
      if (incoming.get(1)) {
        struct.SER1 = iprot.readString();
        struct.setSER1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.SER2 = iprot.readString();
        struct.setSER2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.NPASP = iprot.readString();
        struct.setNPASPIsSet(true);
      }
    }
  }

}

