/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.hitsl.tmis.tfoms.spb.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-30")
public class PatientAddress implements org.apache.thrift.TBase<PatientAddress, PatientAddress._Fields>, java.io.Serializable, Cloneable, Comparable<PatientAddress> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PatientAddress");

  private static final org.apache.thrift.protocol.TField ADDR__TPYE_FIELD_DESC = new org.apache.thrift.protocol.TField("ADDR_TPYE", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IDOKATOREG_FIELD_DESC = new org.apache.thrift.protocol.TField("IDOKATOREG", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IDOBLTOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("IDOBLTOWN", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ID__PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_PREFIX", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ID__HOUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_HOUSE", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HOUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("HOUSE", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField KORPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("KORPUS", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FLAT_FIELD_DESC = new org.apache.thrift.protocol.TField("FLAT", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField U__ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("U_ADDRESS", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField KLADR__CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("KLADR_CODE", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STREET_FIELD_DESC = new org.apache.thrift.protocol.TField("STREET", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IDSTREETTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("IDSTREETTYPE", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientAddressStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientAddressTupleSchemeFactory());
  }

  public String ADDR_TPYE; // required
  public String IDOKATOREG; // optional
  public int IDOBLTOWN; // optional
  public int ID_PREFIX; // optional
  public String ID_HOUSE; // optional
  public String HOUSE; // optional
  public String KORPUS; // optional
  public String FLAT; // optional
  public String U_ADDRESS; // optional
  public String KLADR_CODE; // optional
  public String STREET; // optional
  public String IDSTREETTYPE; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDR__TPYE((short)1, "ADDR_TPYE"),
    IDOKATOREG((short)2, "IDOKATOREG"),
    IDOBLTOWN((short)3, "IDOBLTOWN"),
    ID__PREFIX((short)4, "ID_PREFIX"),
    ID__HOUSE((short)5, "ID_HOUSE"),
    HOUSE((short)6, "HOUSE"),
    KORPUS((short)7, "KORPUS"),
    FLAT((short)8, "FLAT"),
    U__ADDRESS((short)9, "U_ADDRESS"),
    KLADR__CODE((short)10, "KLADR_CODE"),
    STREET((short)11, "STREET"),
    IDSTREETTYPE((short)12, "IDSTREETTYPE");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDR__TPYE
          return ADDR__TPYE;
        case 2: // IDOKATOREG
          return IDOKATOREG;
        case 3: // IDOBLTOWN
          return IDOBLTOWN;
        case 4: // ID__PREFIX
          return ID__PREFIX;
        case 5: // ID__HOUSE
          return ID__HOUSE;
        case 6: // HOUSE
          return HOUSE;
        case 7: // KORPUS
          return KORPUS;
        case 8: // FLAT
          return FLAT;
        case 9: // U__ADDRESS
          return U__ADDRESS;
        case 10: // KLADR__CODE
          return KLADR__CODE;
        case 11: // STREET
          return STREET;
        case 12: // IDSTREETTYPE
          return IDSTREETTYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDOBLTOWN_ISSET_ID = 0;
  private static final int __ID_PREFIX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IDOKATOREG,_Fields.IDOBLTOWN,_Fields.ID__PREFIX,_Fields.ID__HOUSE,_Fields.HOUSE,_Fields.KORPUS,_Fields.FLAT,_Fields.U__ADDRESS,_Fields.KLADR__CODE,_Fields.STREET,_Fields.IDSTREETTYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDR__TPYE, new org.apache.thrift.meta_data.FieldMetaData("ADDR_TPYE", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDOKATOREG, new org.apache.thrift.meta_data.FieldMetaData("IDOKATOREG", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDOBLTOWN, new org.apache.thrift.meta_data.FieldMetaData("IDOBLTOWN", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__PREFIX, new org.apache.thrift.meta_data.FieldMetaData("ID_PREFIX", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__HOUSE, new org.apache.thrift.meta_data.FieldMetaData("ID_HOUSE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE, new org.apache.thrift.meta_data.FieldMetaData("HOUSE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KORPUS, new org.apache.thrift.meta_data.FieldMetaData("KORPUS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAT, new org.apache.thrift.meta_data.FieldMetaData("FLAT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.U__ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("U_ADDRESS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KLADR__CODE, new org.apache.thrift.meta_data.FieldMetaData("KLADR_CODE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREET, new org.apache.thrift.meta_data.FieldMetaData("STREET", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDSTREETTYPE, new org.apache.thrift.meta_data.FieldMetaData("IDSTREETTYPE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PatientAddress.class, metaDataMap);
  }

  public PatientAddress() {
  }

  public PatientAddress(
    String ADDR_TPYE)
  {
    this();
    this.ADDR_TPYE = ADDR_TPYE;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PatientAddress(PatientAddress other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetADDR_TPYE()) {
      this.ADDR_TPYE = other.ADDR_TPYE;
    }
    if (other.isSetIDOKATOREG()) {
      this.IDOKATOREG = other.IDOKATOREG;
    }
    this.IDOBLTOWN = other.IDOBLTOWN;
    this.ID_PREFIX = other.ID_PREFIX;
    if (other.isSetID_HOUSE()) {
      this.ID_HOUSE = other.ID_HOUSE;
    }
    if (other.isSetHOUSE()) {
      this.HOUSE = other.HOUSE;
    }
    if (other.isSetKORPUS()) {
      this.KORPUS = other.KORPUS;
    }
    if (other.isSetFLAT()) {
      this.FLAT = other.FLAT;
    }
    if (other.isSetU_ADDRESS()) {
      this.U_ADDRESS = other.U_ADDRESS;
    }
    if (other.isSetKLADR_CODE()) {
      this.KLADR_CODE = other.KLADR_CODE;
    }
    if (other.isSetSTREET()) {
      this.STREET = other.STREET;
    }
    if (other.isSetIDSTREETTYPE()) {
      this.IDSTREETTYPE = other.IDSTREETTYPE;
    }
  }

  public PatientAddress deepCopy() {
    return new PatientAddress(this);
  }

  @Override
  public void clear() {
    this.ADDR_TPYE = null;
    this.IDOKATOREG = null;
    setIDOBLTOWNIsSet(false);
    this.IDOBLTOWN = 0;
    setID_PREFIXIsSet(false);
    this.ID_PREFIX = 0;
    this.ID_HOUSE = null;
    this.HOUSE = null;
    this.KORPUS = null;
    this.FLAT = null;
    this.U_ADDRESS = null;
    this.KLADR_CODE = null;
    this.STREET = null;
    this.IDSTREETTYPE = null;
  }

  public String getADDR_TPYE() {
    return this.ADDR_TPYE;
  }

  public PatientAddress setADDR_TPYE(String ADDR_TPYE) {
    this.ADDR_TPYE = ADDR_TPYE;
    return this;
  }

  public void unsetADDR_TPYE() {
    this.ADDR_TPYE = null;
  }

  /** Returns true if field ADDR_TPYE is set (has been assigned a value) and false otherwise */
  public boolean isSetADDR_TPYE() {
    return this.ADDR_TPYE != null;
  }

  public void setADDR_TPYEIsSet(boolean value) {
    if (!value) {
      this.ADDR_TPYE = null;
    }
  }

  public String getIDOKATOREG() {
    return this.IDOKATOREG;
  }

  public PatientAddress setIDOKATOREG(String IDOKATOREG) {
    this.IDOKATOREG = IDOKATOREG;
    return this;
  }

  public void unsetIDOKATOREG() {
    this.IDOKATOREG = null;
  }

  /** Returns true if field IDOKATOREG is set (has been assigned a value) and false otherwise */
  public boolean isSetIDOKATOREG() {
    return this.IDOKATOREG != null;
  }

  public void setIDOKATOREGIsSet(boolean value) {
    if (!value) {
      this.IDOKATOREG = null;
    }
  }

  public int getIDOBLTOWN() {
    return this.IDOBLTOWN;
  }

  public PatientAddress setIDOBLTOWN(int IDOBLTOWN) {
    this.IDOBLTOWN = IDOBLTOWN;
    setIDOBLTOWNIsSet(true);
    return this;
  }

  public void unsetIDOBLTOWN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDOBLTOWN_ISSET_ID);
  }

  /** Returns true if field IDOBLTOWN is set (has been assigned a value) and false otherwise */
  public boolean isSetIDOBLTOWN() {
    return EncodingUtils.testBit(__isset_bitfield, __IDOBLTOWN_ISSET_ID);
  }

  public void setIDOBLTOWNIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDOBLTOWN_ISSET_ID, value);
  }

  public int getID_PREFIX() {
    return this.ID_PREFIX;
  }

  public PatientAddress setID_PREFIX(int ID_PREFIX) {
    this.ID_PREFIX = ID_PREFIX;
    setID_PREFIXIsSet(true);
    return this;
  }

  public void unsetID_PREFIX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_PREFIX_ISSET_ID);
  }

  /** Returns true if field ID_PREFIX is set (has been assigned a value) and false otherwise */
  public boolean isSetID_PREFIX() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_PREFIX_ISSET_ID);
  }

  public void setID_PREFIXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_PREFIX_ISSET_ID, value);
  }

  public String getID_HOUSE() {
    return this.ID_HOUSE;
  }

  public PatientAddress setID_HOUSE(String ID_HOUSE) {
    this.ID_HOUSE = ID_HOUSE;
    return this;
  }

  public void unsetID_HOUSE() {
    this.ID_HOUSE = null;
  }

  /** Returns true if field ID_HOUSE is set (has been assigned a value) and false otherwise */
  public boolean isSetID_HOUSE() {
    return this.ID_HOUSE != null;
  }

  public void setID_HOUSEIsSet(boolean value) {
    if (!value) {
      this.ID_HOUSE = null;
    }
  }

  public String getHOUSE() {
    return this.HOUSE;
  }

  public PatientAddress setHOUSE(String HOUSE) {
    this.HOUSE = HOUSE;
    return this;
  }

  public void unsetHOUSE() {
    this.HOUSE = null;
  }

  /** Returns true if field HOUSE is set (has been assigned a value) and false otherwise */
  public boolean isSetHOUSE() {
    return this.HOUSE != null;
  }

  public void setHOUSEIsSet(boolean value) {
    if (!value) {
      this.HOUSE = null;
    }
  }

  public String getKORPUS() {
    return this.KORPUS;
  }

  public PatientAddress setKORPUS(String KORPUS) {
    this.KORPUS = KORPUS;
    return this;
  }

  public void unsetKORPUS() {
    this.KORPUS = null;
  }

  /** Returns true if field KORPUS is set (has been assigned a value) and false otherwise */
  public boolean isSetKORPUS() {
    return this.KORPUS != null;
  }

  public void setKORPUSIsSet(boolean value) {
    if (!value) {
      this.KORPUS = null;
    }
  }

  public String getFLAT() {
    return this.FLAT;
  }

  public PatientAddress setFLAT(String FLAT) {
    this.FLAT = FLAT;
    return this;
  }

  public void unsetFLAT() {
    this.FLAT = null;
  }

  /** Returns true if field FLAT is set (has been assigned a value) and false otherwise */
  public boolean isSetFLAT() {
    return this.FLAT != null;
  }

  public void setFLATIsSet(boolean value) {
    if (!value) {
      this.FLAT = null;
    }
  }

  public String getU_ADDRESS() {
    return this.U_ADDRESS;
  }

  public PatientAddress setU_ADDRESS(String U_ADDRESS) {
    this.U_ADDRESS = U_ADDRESS;
    return this;
  }

  public void unsetU_ADDRESS() {
    this.U_ADDRESS = null;
  }

  /** Returns true if field U_ADDRESS is set (has been assigned a value) and false otherwise */
  public boolean isSetU_ADDRESS() {
    return this.U_ADDRESS != null;
  }

  public void setU_ADDRESSIsSet(boolean value) {
    if (!value) {
      this.U_ADDRESS = null;
    }
  }

  public String getKLADR_CODE() {
    return this.KLADR_CODE;
  }

  public PatientAddress setKLADR_CODE(String KLADR_CODE) {
    this.KLADR_CODE = KLADR_CODE;
    return this;
  }

  public void unsetKLADR_CODE() {
    this.KLADR_CODE = null;
  }

  /** Returns true if field KLADR_CODE is set (has been assigned a value) and false otherwise */
  public boolean isSetKLADR_CODE() {
    return this.KLADR_CODE != null;
  }

  public void setKLADR_CODEIsSet(boolean value) {
    if (!value) {
      this.KLADR_CODE = null;
    }
  }

  public String getSTREET() {
    return this.STREET;
  }

  public PatientAddress setSTREET(String STREET) {
    this.STREET = STREET;
    return this;
  }

  public void unsetSTREET() {
    this.STREET = null;
  }

  /** Returns true if field STREET is set (has been assigned a value) and false otherwise */
  public boolean isSetSTREET() {
    return this.STREET != null;
  }

  public void setSTREETIsSet(boolean value) {
    if (!value) {
      this.STREET = null;
    }
  }

  public String getIDSTREETTYPE() {
    return this.IDSTREETTYPE;
  }

  public PatientAddress setIDSTREETTYPE(String IDSTREETTYPE) {
    this.IDSTREETTYPE = IDSTREETTYPE;
    return this;
  }

  public void unsetIDSTREETTYPE() {
    this.IDSTREETTYPE = null;
  }

  /** Returns true if field IDSTREETTYPE is set (has been assigned a value) and false otherwise */
  public boolean isSetIDSTREETTYPE() {
    return this.IDSTREETTYPE != null;
  }

  public void setIDSTREETTYPEIsSet(boolean value) {
    if (!value) {
      this.IDSTREETTYPE = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADDR__TPYE:
      if (value == null) {
        unsetADDR_TPYE();
      } else {
        setADDR_TPYE((String)value);
      }
      break;

    case IDOKATOREG:
      if (value == null) {
        unsetIDOKATOREG();
      } else {
        setIDOKATOREG((String)value);
      }
      break;

    case IDOBLTOWN:
      if (value == null) {
        unsetIDOBLTOWN();
      } else {
        setIDOBLTOWN((Integer)value);
      }
      break;

    case ID__PREFIX:
      if (value == null) {
        unsetID_PREFIX();
      } else {
        setID_PREFIX((Integer)value);
      }
      break;

    case ID__HOUSE:
      if (value == null) {
        unsetID_HOUSE();
      } else {
        setID_HOUSE((String)value);
      }
      break;

    case HOUSE:
      if (value == null) {
        unsetHOUSE();
      } else {
        setHOUSE((String)value);
      }
      break;

    case KORPUS:
      if (value == null) {
        unsetKORPUS();
      } else {
        setKORPUS((String)value);
      }
      break;

    case FLAT:
      if (value == null) {
        unsetFLAT();
      } else {
        setFLAT((String)value);
      }
      break;

    case U__ADDRESS:
      if (value == null) {
        unsetU_ADDRESS();
      } else {
        setU_ADDRESS((String)value);
      }
      break;

    case KLADR__CODE:
      if (value == null) {
        unsetKLADR_CODE();
      } else {
        setKLADR_CODE((String)value);
      }
      break;

    case STREET:
      if (value == null) {
        unsetSTREET();
      } else {
        setSTREET((String)value);
      }
      break;

    case IDSTREETTYPE:
      if (value == null) {
        unsetIDSTREETTYPE();
      } else {
        setIDSTREETTYPE((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDR__TPYE:
      return getADDR_TPYE();

    case IDOKATOREG:
      return getIDOKATOREG();

    case IDOBLTOWN:
      return Integer.valueOf(getIDOBLTOWN());

    case ID__PREFIX:
      return Integer.valueOf(getID_PREFIX());

    case ID__HOUSE:
      return getID_HOUSE();

    case HOUSE:
      return getHOUSE();

    case KORPUS:
      return getKORPUS();

    case FLAT:
      return getFLAT();

    case U__ADDRESS:
      return getU_ADDRESS();

    case KLADR__CODE:
      return getKLADR_CODE();

    case STREET:
      return getSTREET();

    case IDSTREETTYPE:
      return getIDSTREETTYPE();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADDR__TPYE:
      return isSetADDR_TPYE();
    case IDOKATOREG:
      return isSetIDOKATOREG();
    case IDOBLTOWN:
      return isSetIDOBLTOWN();
    case ID__PREFIX:
      return isSetID_PREFIX();
    case ID__HOUSE:
      return isSetID_HOUSE();
    case HOUSE:
      return isSetHOUSE();
    case KORPUS:
      return isSetKORPUS();
    case FLAT:
      return isSetFLAT();
    case U__ADDRESS:
      return isSetU_ADDRESS();
    case KLADR__CODE:
      return isSetKLADR_CODE();
    case STREET:
      return isSetSTREET();
    case IDSTREETTYPE:
      return isSetIDSTREETTYPE();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PatientAddress)
      return this.equals((PatientAddress)that);
    return false;
  }

  public boolean equals(PatientAddress that) {
    if (that == null)
      return false;

    boolean this_present_ADDR_TPYE = true && this.isSetADDR_TPYE();
    boolean that_present_ADDR_TPYE = true && that.isSetADDR_TPYE();
    if (this_present_ADDR_TPYE || that_present_ADDR_TPYE) {
      if (!(this_present_ADDR_TPYE && that_present_ADDR_TPYE))
        return false;
      if (!this.ADDR_TPYE.equals(that.ADDR_TPYE))
        return false;
    }

    boolean this_present_IDOKATOREG = true && this.isSetIDOKATOREG();
    boolean that_present_IDOKATOREG = true && that.isSetIDOKATOREG();
    if (this_present_IDOKATOREG || that_present_IDOKATOREG) {
      if (!(this_present_IDOKATOREG && that_present_IDOKATOREG))
        return false;
      if (!this.IDOKATOREG.equals(that.IDOKATOREG))
        return false;
    }

    boolean this_present_IDOBLTOWN = true && this.isSetIDOBLTOWN();
    boolean that_present_IDOBLTOWN = true && that.isSetIDOBLTOWN();
    if (this_present_IDOBLTOWN || that_present_IDOBLTOWN) {
      if (!(this_present_IDOBLTOWN && that_present_IDOBLTOWN))
        return false;
      if (this.IDOBLTOWN != that.IDOBLTOWN)
        return false;
    }

    boolean this_present_ID_PREFIX = true && this.isSetID_PREFIX();
    boolean that_present_ID_PREFIX = true && that.isSetID_PREFIX();
    if (this_present_ID_PREFIX || that_present_ID_PREFIX) {
      if (!(this_present_ID_PREFIX && that_present_ID_PREFIX))
        return false;
      if (this.ID_PREFIX != that.ID_PREFIX)
        return false;
    }

    boolean this_present_ID_HOUSE = true && this.isSetID_HOUSE();
    boolean that_present_ID_HOUSE = true && that.isSetID_HOUSE();
    if (this_present_ID_HOUSE || that_present_ID_HOUSE) {
      if (!(this_present_ID_HOUSE && that_present_ID_HOUSE))
        return false;
      if (!this.ID_HOUSE.equals(that.ID_HOUSE))
        return false;
    }

    boolean this_present_HOUSE = true && this.isSetHOUSE();
    boolean that_present_HOUSE = true && that.isSetHOUSE();
    if (this_present_HOUSE || that_present_HOUSE) {
      if (!(this_present_HOUSE && that_present_HOUSE))
        return false;
      if (!this.HOUSE.equals(that.HOUSE))
        return false;
    }

    boolean this_present_KORPUS = true && this.isSetKORPUS();
    boolean that_present_KORPUS = true && that.isSetKORPUS();
    if (this_present_KORPUS || that_present_KORPUS) {
      if (!(this_present_KORPUS && that_present_KORPUS))
        return false;
      if (!this.KORPUS.equals(that.KORPUS))
        return false;
    }

    boolean this_present_FLAT = true && this.isSetFLAT();
    boolean that_present_FLAT = true && that.isSetFLAT();
    if (this_present_FLAT || that_present_FLAT) {
      if (!(this_present_FLAT && that_present_FLAT))
        return false;
      if (!this.FLAT.equals(that.FLAT))
        return false;
    }

    boolean this_present_U_ADDRESS = true && this.isSetU_ADDRESS();
    boolean that_present_U_ADDRESS = true && that.isSetU_ADDRESS();
    if (this_present_U_ADDRESS || that_present_U_ADDRESS) {
      if (!(this_present_U_ADDRESS && that_present_U_ADDRESS))
        return false;
      if (!this.U_ADDRESS.equals(that.U_ADDRESS))
        return false;
    }

    boolean this_present_KLADR_CODE = true && this.isSetKLADR_CODE();
    boolean that_present_KLADR_CODE = true && that.isSetKLADR_CODE();
    if (this_present_KLADR_CODE || that_present_KLADR_CODE) {
      if (!(this_present_KLADR_CODE && that_present_KLADR_CODE))
        return false;
      if (!this.KLADR_CODE.equals(that.KLADR_CODE))
        return false;
    }

    boolean this_present_STREET = true && this.isSetSTREET();
    boolean that_present_STREET = true && that.isSetSTREET();
    if (this_present_STREET || that_present_STREET) {
      if (!(this_present_STREET && that_present_STREET))
        return false;
      if (!this.STREET.equals(that.STREET))
        return false;
    }

    boolean this_present_IDSTREETTYPE = true && this.isSetIDSTREETTYPE();
    boolean that_present_IDSTREETTYPE = true && that.isSetIDSTREETTYPE();
    if (this_present_IDSTREETTYPE || that_present_IDSTREETTYPE) {
      if (!(this_present_IDSTREETTYPE && that_present_IDSTREETTYPE))
        return false;
      if (!this.IDSTREETTYPE.equals(that.IDSTREETTYPE))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ADDR_TPYE = true && (isSetADDR_TPYE());
    list.add(present_ADDR_TPYE);
    if (present_ADDR_TPYE)
      list.add(ADDR_TPYE);

    boolean present_IDOKATOREG = true && (isSetIDOKATOREG());
    list.add(present_IDOKATOREG);
    if (present_IDOKATOREG)
      list.add(IDOKATOREG);

    boolean present_IDOBLTOWN = true && (isSetIDOBLTOWN());
    list.add(present_IDOBLTOWN);
    if (present_IDOBLTOWN)
      list.add(IDOBLTOWN);

    boolean present_ID_PREFIX = true && (isSetID_PREFIX());
    list.add(present_ID_PREFIX);
    if (present_ID_PREFIX)
      list.add(ID_PREFIX);

    boolean present_ID_HOUSE = true && (isSetID_HOUSE());
    list.add(present_ID_HOUSE);
    if (present_ID_HOUSE)
      list.add(ID_HOUSE);

    boolean present_HOUSE = true && (isSetHOUSE());
    list.add(present_HOUSE);
    if (present_HOUSE)
      list.add(HOUSE);

    boolean present_KORPUS = true && (isSetKORPUS());
    list.add(present_KORPUS);
    if (present_KORPUS)
      list.add(KORPUS);

    boolean present_FLAT = true && (isSetFLAT());
    list.add(present_FLAT);
    if (present_FLAT)
      list.add(FLAT);

    boolean present_U_ADDRESS = true && (isSetU_ADDRESS());
    list.add(present_U_ADDRESS);
    if (present_U_ADDRESS)
      list.add(U_ADDRESS);

    boolean present_KLADR_CODE = true && (isSetKLADR_CODE());
    list.add(present_KLADR_CODE);
    if (present_KLADR_CODE)
      list.add(KLADR_CODE);

    boolean present_STREET = true && (isSetSTREET());
    list.add(present_STREET);
    if (present_STREET)
      list.add(STREET);

    boolean present_IDSTREETTYPE = true && (isSetIDSTREETTYPE());
    list.add(present_IDSTREETTYPE);
    if (present_IDSTREETTYPE)
      list.add(IDSTREETTYPE);

    return list.hashCode();
  }

  @Override
  public int compareTo(PatientAddress other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetADDR_TPYE()).compareTo(other.isSetADDR_TPYE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetADDR_TPYE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ADDR_TPYE, other.ADDR_TPYE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDOKATOREG()).compareTo(other.isSetIDOKATOREG());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDOKATOREG()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDOKATOREG, other.IDOKATOREG);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDOBLTOWN()).compareTo(other.isSetIDOBLTOWN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDOBLTOWN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDOBLTOWN, other.IDOBLTOWN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_PREFIX()).compareTo(other.isSetID_PREFIX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_PREFIX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_PREFIX, other.ID_PREFIX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_HOUSE()).compareTo(other.isSetID_HOUSE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_HOUSE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_HOUSE, other.ID_HOUSE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHOUSE()).compareTo(other.isSetHOUSE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHOUSE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.HOUSE, other.HOUSE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKORPUS()).compareTo(other.isSetKORPUS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKORPUS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KORPUS, other.KORPUS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFLAT()).compareTo(other.isSetFLAT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFLAT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FLAT, other.FLAT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetU_ADDRESS()).compareTo(other.isSetU_ADDRESS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetU_ADDRESS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.U_ADDRESS, other.U_ADDRESS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKLADR_CODE()).compareTo(other.isSetKLADR_CODE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKLADR_CODE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KLADR_CODE, other.KLADR_CODE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSTREET()).compareTo(other.isSetSTREET());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSTREET()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.STREET, other.STREET);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDSTREETTYPE()).compareTo(other.isSetIDSTREETTYPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDSTREETTYPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDSTREETTYPE, other.IDSTREETTYPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PatientAddress(");
    boolean first = true;

    sb.append("ADDR_TPYE:");
    if (this.ADDR_TPYE == null) {
      sb.append("null");
    } else {
      sb.append(this.ADDR_TPYE);
    }
    first = false;
    if (isSetIDOKATOREG()) {
      if (!first) sb.append(", ");
      sb.append("IDOKATOREG:");
      if (this.IDOKATOREG == null) {
        sb.append("null");
      } else {
        sb.append(this.IDOKATOREG);
      }
      first = false;
    }
    if (isSetIDOBLTOWN()) {
      if (!first) sb.append(", ");
      sb.append("IDOBLTOWN:");
      sb.append(this.IDOBLTOWN);
      first = false;
    }
    if (isSetID_PREFIX()) {
      if (!first) sb.append(", ");
      sb.append("ID_PREFIX:");
      sb.append(this.ID_PREFIX);
      first = false;
    }
    if (isSetID_HOUSE()) {
      if (!first) sb.append(", ");
      sb.append("ID_HOUSE:");
      if (this.ID_HOUSE == null) {
        sb.append("null");
      } else {
        sb.append(this.ID_HOUSE);
      }
      first = false;
    }
    if (isSetHOUSE()) {
      if (!first) sb.append(", ");
      sb.append("HOUSE:");
      if (this.HOUSE == null) {
        sb.append("null");
      } else {
        sb.append(this.HOUSE);
      }
      first = false;
    }
    if (isSetKORPUS()) {
      if (!first) sb.append(", ");
      sb.append("KORPUS:");
      if (this.KORPUS == null) {
        sb.append("null");
      } else {
        sb.append(this.KORPUS);
      }
      first = false;
    }
    if (isSetFLAT()) {
      if (!first) sb.append(", ");
      sb.append("FLAT:");
      if (this.FLAT == null) {
        sb.append("null");
      } else {
        sb.append(this.FLAT);
      }
      first = false;
    }
    if (isSetU_ADDRESS()) {
      if (!first) sb.append(", ");
      sb.append("U_ADDRESS:");
      if (this.U_ADDRESS == null) {
        sb.append("null");
      } else {
        sb.append(this.U_ADDRESS);
      }
      first = false;
    }
    if (isSetKLADR_CODE()) {
      if (!first) sb.append(", ");
      sb.append("KLADR_CODE:");
      if (this.KLADR_CODE == null) {
        sb.append("null");
      } else {
        sb.append(this.KLADR_CODE);
      }
      first = false;
    }
    if (isSetSTREET()) {
      if (!first) sb.append(", ");
      sb.append("STREET:");
      if (this.STREET == null) {
        sb.append("null");
      } else {
        sb.append(this.STREET);
      }
      first = false;
    }
    if (isSetIDSTREETTYPE()) {
      if (!first) sb.append(", ");
      sb.append("IDSTREETTYPE:");
      if (this.IDSTREETTYPE == null) {
        sb.append("null");
      } else {
        sb.append(this.IDSTREETTYPE);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ADDR_TPYE == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ADDR_TPYE' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientAddressStandardSchemeFactory implements SchemeFactory {
    public PatientAddressStandardScheme getScheme() {
      return new PatientAddressStandardScheme();
    }
  }

  private static class PatientAddressStandardScheme extends StandardScheme<PatientAddress> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PatientAddress struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDR__TPYE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ADDR_TPYE = iprot.readString();
              struct.setADDR_TPYEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IDOKATOREG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.IDOKATOREG = iprot.readString();
              struct.setIDOKATOREGIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDOBLTOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IDOBLTOWN = iprot.readI32();
              struct.setIDOBLTOWNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID__PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_PREFIX = iprot.readI32();
              struct.setID_PREFIXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ID__HOUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID_HOUSE = iprot.readString();
              struct.setID_HOUSEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.HOUSE = iprot.readString();
              struct.setHOUSEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KORPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KORPUS = iprot.readString();
              struct.setKORPUSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FLAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FLAT = iprot.readString();
              struct.setFLATIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // U__ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.U_ADDRESS = iprot.readString();
              struct.setU_ADDRESSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // KLADR__CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KLADR_CODE = iprot.readString();
              struct.setKLADR_CODEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STREET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.STREET = iprot.readString();
              struct.setSTREETIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IDSTREETTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.IDSTREETTYPE = iprot.readString();
              struct.setIDSTREETTYPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PatientAddress struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ADDR_TPYE != null) {
        oprot.writeFieldBegin(ADDR__TPYE_FIELD_DESC);
        oprot.writeString(struct.ADDR_TPYE);
        oprot.writeFieldEnd();
      }
      if (struct.IDOKATOREG != null) {
        if (struct.isSetIDOKATOREG()) {
          oprot.writeFieldBegin(IDOKATOREG_FIELD_DESC);
          oprot.writeString(struct.IDOKATOREG);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIDOBLTOWN()) {
        oprot.writeFieldBegin(IDOBLTOWN_FIELD_DESC);
        oprot.writeI32(struct.IDOBLTOWN);
        oprot.writeFieldEnd();
      }
      if (struct.isSetID_PREFIX()) {
        oprot.writeFieldBegin(ID__PREFIX_FIELD_DESC);
        oprot.writeI32(struct.ID_PREFIX);
        oprot.writeFieldEnd();
      }
      if (struct.ID_HOUSE != null) {
        if (struct.isSetID_HOUSE()) {
          oprot.writeFieldBegin(ID__HOUSE_FIELD_DESC);
          oprot.writeString(struct.ID_HOUSE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.HOUSE != null) {
        if (struct.isSetHOUSE()) {
          oprot.writeFieldBegin(HOUSE_FIELD_DESC);
          oprot.writeString(struct.HOUSE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.KORPUS != null) {
        if (struct.isSetKORPUS()) {
          oprot.writeFieldBegin(KORPUS_FIELD_DESC);
          oprot.writeString(struct.KORPUS);
          oprot.writeFieldEnd();
        }
      }
      if (struct.FLAT != null) {
        if (struct.isSetFLAT()) {
          oprot.writeFieldBegin(FLAT_FIELD_DESC);
          oprot.writeString(struct.FLAT);
          oprot.writeFieldEnd();
        }
      }
      if (struct.U_ADDRESS != null) {
        if (struct.isSetU_ADDRESS()) {
          oprot.writeFieldBegin(U__ADDRESS_FIELD_DESC);
          oprot.writeString(struct.U_ADDRESS);
          oprot.writeFieldEnd();
        }
      }
      if (struct.KLADR_CODE != null) {
        if (struct.isSetKLADR_CODE()) {
          oprot.writeFieldBegin(KLADR__CODE_FIELD_DESC);
          oprot.writeString(struct.KLADR_CODE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.STREET != null) {
        if (struct.isSetSTREET()) {
          oprot.writeFieldBegin(STREET_FIELD_DESC);
          oprot.writeString(struct.STREET);
          oprot.writeFieldEnd();
        }
      }
      if (struct.IDSTREETTYPE != null) {
        if (struct.isSetIDSTREETTYPE()) {
          oprot.writeFieldBegin(IDSTREETTYPE_FIELD_DESC);
          oprot.writeString(struct.IDSTREETTYPE);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientAddressTupleSchemeFactory implements SchemeFactory {
    public PatientAddressTupleScheme getScheme() {
      return new PatientAddressTupleScheme();
    }
  }

  private static class PatientAddressTupleScheme extends TupleScheme<PatientAddress> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PatientAddress struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.ADDR_TPYE);
      BitSet optionals = new BitSet();
      if (struct.isSetIDOKATOREG()) {
        optionals.set(0);
      }
      if (struct.isSetIDOBLTOWN()) {
        optionals.set(1);
      }
      if (struct.isSetID_PREFIX()) {
        optionals.set(2);
      }
      if (struct.isSetID_HOUSE()) {
        optionals.set(3);
      }
      if (struct.isSetHOUSE()) {
        optionals.set(4);
      }
      if (struct.isSetKORPUS()) {
        optionals.set(5);
      }
      if (struct.isSetFLAT()) {
        optionals.set(6);
      }
      if (struct.isSetU_ADDRESS()) {
        optionals.set(7);
      }
      if (struct.isSetKLADR_CODE()) {
        optionals.set(8);
      }
      if (struct.isSetSTREET()) {
        optionals.set(9);
      }
      if (struct.isSetIDSTREETTYPE()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetIDOKATOREG()) {
        oprot.writeString(struct.IDOKATOREG);
      }
      if (struct.isSetIDOBLTOWN()) {
        oprot.writeI32(struct.IDOBLTOWN);
      }
      if (struct.isSetID_PREFIX()) {
        oprot.writeI32(struct.ID_PREFIX);
      }
      if (struct.isSetID_HOUSE()) {
        oprot.writeString(struct.ID_HOUSE);
      }
      if (struct.isSetHOUSE()) {
        oprot.writeString(struct.HOUSE);
      }
      if (struct.isSetKORPUS()) {
        oprot.writeString(struct.KORPUS);
      }
      if (struct.isSetFLAT()) {
        oprot.writeString(struct.FLAT);
      }
      if (struct.isSetU_ADDRESS()) {
        oprot.writeString(struct.U_ADDRESS);
      }
      if (struct.isSetKLADR_CODE()) {
        oprot.writeString(struct.KLADR_CODE);
      }
      if (struct.isSetSTREET()) {
        oprot.writeString(struct.STREET);
      }
      if (struct.isSetIDSTREETTYPE()) {
        oprot.writeString(struct.IDSTREETTYPE);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PatientAddress struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ADDR_TPYE = iprot.readString();
      struct.setADDR_TPYEIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.IDOKATOREG = iprot.readString();
        struct.setIDOKATOREGIsSet(true);
      }
      if (incoming.get(1)) {
        struct.IDOBLTOWN = iprot.readI32();
        struct.setIDOBLTOWNIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ID_PREFIX = iprot.readI32();
        struct.setID_PREFIXIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ID_HOUSE = iprot.readString();
        struct.setID_HOUSEIsSet(true);
      }
      if (incoming.get(4)) {
        struct.HOUSE = iprot.readString();
        struct.setHOUSEIsSet(true);
      }
      if (incoming.get(5)) {
        struct.KORPUS = iprot.readString();
        struct.setKORPUSIsSet(true);
      }
      if (incoming.get(6)) {
        struct.FLAT = iprot.readString();
        struct.setFLATIsSet(true);
      }
      if (incoming.get(7)) {
        struct.U_ADDRESS = iprot.readString();
        struct.setU_ADDRESSIsSet(true);
      }
      if (incoming.get(8)) {
        struct.KLADR_CODE = iprot.readString();
        struct.setKLADR_CODEIsSet(true);
      }
      if (incoming.get(9)) {
        struct.STREET = iprot.readString();
        struct.setSTREETIsSet(true);
      }
      if (incoming.get(10)) {
        struct.IDSTREETTYPE = iprot.readString();
        struct.setIDSTREETTYPEIsSet(true);
      }
    }
  }

}

