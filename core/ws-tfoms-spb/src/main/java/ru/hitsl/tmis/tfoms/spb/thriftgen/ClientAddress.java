/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.hitsl.tmis.tfoms.spb.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * ClientAddress
 * Данные об адресе пациента для записи реестра услуг
 * *************************************************
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-30")
public class ClientAddress implements org.apache.thrift.TBase<ClientAddress, ClientAddress._Fields>, java.io.Serializable, Cloneable, Comparable<ClientAddress> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientAddress");

  private static final org.apache.thrift.protocol.TField STREET_FIELD_DESC = new org.apache.thrift.protocol.TField("STREET", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STREETTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("STREETTYPE", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("AREA", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HOUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("HOUSE", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField KORP_FIELD_DESC = new org.apache.thrift.protocol.TField("KORP", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FLAT_FIELD_DESC = new org.apache.thrift.protocol.TField("FLAT", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientAddressStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientAddressTupleSchemeFactory());
  }

  public String STREET; // optional
  public String STREETTYPE; // optional
  public String AREA; // optional
  public String HOUSE; // optional
  public String KORP; // optional
  public String FLAT; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STREET((short)1, "STREET"),
    STREETTYPE((short)2, "STREETTYPE"),
    AREA((short)3, "AREA"),
    HOUSE((short)4, "HOUSE"),
    KORP((short)5, "KORP"),
    FLAT((short)6, "FLAT");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STREET
          return STREET;
        case 2: // STREETTYPE
          return STREETTYPE;
        case 3: // AREA
          return AREA;
        case 4: // HOUSE
          return HOUSE;
        case 5: // KORP
          return KORP;
        case 6: // FLAT
          return FLAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STREET,_Fields.STREETTYPE,_Fields.AREA,_Fields.HOUSE,_Fields.KORP,_Fields.FLAT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STREET, new org.apache.thrift.meta_data.FieldMetaData("STREET", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREETTYPE, new org.apache.thrift.meta_data.FieldMetaData("STREETTYPE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("AREA", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE, new org.apache.thrift.meta_data.FieldMetaData("HOUSE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KORP, new org.apache.thrift.meta_data.FieldMetaData("KORP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAT, new org.apache.thrift.meta_data.FieldMetaData("FLAT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientAddress.class, metaDataMap);
  }

  public ClientAddress() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientAddress(ClientAddress other) {
    if (other.isSetSTREET()) {
      this.STREET = other.STREET;
    }
    if (other.isSetSTREETTYPE()) {
      this.STREETTYPE = other.STREETTYPE;
    }
    if (other.isSetAREA()) {
      this.AREA = other.AREA;
    }
    if (other.isSetHOUSE()) {
      this.HOUSE = other.HOUSE;
    }
    if (other.isSetKORP()) {
      this.KORP = other.KORP;
    }
    if (other.isSetFLAT()) {
      this.FLAT = other.FLAT;
    }
  }

  public ClientAddress deepCopy() {
    return new ClientAddress(this);
  }

  @Override
  public void clear() {
    this.STREET = null;
    this.STREETTYPE = null;
    this.AREA = null;
    this.HOUSE = null;
    this.KORP = null;
    this.FLAT = null;
  }

  public String getSTREET() {
    return this.STREET;
  }

  public ClientAddress setSTREET(String STREET) {
    this.STREET = STREET;
    return this;
  }

  public void unsetSTREET() {
    this.STREET = null;
  }

  /** Returns true if field STREET is set (has been assigned a value) and false otherwise */
  public boolean isSetSTREET() {
    return this.STREET != null;
  }

  public void setSTREETIsSet(boolean value) {
    if (!value) {
      this.STREET = null;
    }
  }

  public String getSTREETTYPE() {
    return this.STREETTYPE;
  }

  public ClientAddress setSTREETTYPE(String STREETTYPE) {
    this.STREETTYPE = STREETTYPE;
    return this;
  }

  public void unsetSTREETTYPE() {
    this.STREETTYPE = null;
  }

  /** Returns true if field STREETTYPE is set (has been assigned a value) and false otherwise */
  public boolean isSetSTREETTYPE() {
    return this.STREETTYPE != null;
  }

  public void setSTREETTYPEIsSet(boolean value) {
    if (!value) {
      this.STREETTYPE = null;
    }
  }

  public String getAREA() {
    return this.AREA;
  }

  public ClientAddress setAREA(String AREA) {
    this.AREA = AREA;
    return this;
  }

  public void unsetAREA() {
    this.AREA = null;
  }

  /** Returns true if field AREA is set (has been assigned a value) and false otherwise */
  public boolean isSetAREA() {
    return this.AREA != null;
  }

  public void setAREAIsSet(boolean value) {
    if (!value) {
      this.AREA = null;
    }
  }

  public String getHOUSE() {
    return this.HOUSE;
  }

  public ClientAddress setHOUSE(String HOUSE) {
    this.HOUSE = HOUSE;
    return this;
  }

  public void unsetHOUSE() {
    this.HOUSE = null;
  }

  /** Returns true if field HOUSE is set (has been assigned a value) and false otherwise */
  public boolean isSetHOUSE() {
    return this.HOUSE != null;
  }

  public void setHOUSEIsSet(boolean value) {
    if (!value) {
      this.HOUSE = null;
    }
  }

  public String getKORP() {
    return this.KORP;
  }

  public ClientAddress setKORP(String KORP) {
    this.KORP = KORP;
    return this;
  }

  public void unsetKORP() {
    this.KORP = null;
  }

  /** Returns true if field KORP is set (has been assigned a value) and false otherwise */
  public boolean isSetKORP() {
    return this.KORP != null;
  }

  public void setKORPIsSet(boolean value) {
    if (!value) {
      this.KORP = null;
    }
  }

  public String getFLAT() {
    return this.FLAT;
  }

  public ClientAddress setFLAT(String FLAT) {
    this.FLAT = FLAT;
    return this;
  }

  public void unsetFLAT() {
    this.FLAT = null;
  }

  /** Returns true if field FLAT is set (has been assigned a value) and false otherwise */
  public boolean isSetFLAT() {
    return this.FLAT != null;
  }

  public void setFLATIsSet(boolean value) {
    if (!value) {
      this.FLAT = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STREET:
      if (value == null) {
        unsetSTREET();
      } else {
        setSTREET((String)value);
      }
      break;

    case STREETTYPE:
      if (value == null) {
        unsetSTREETTYPE();
      } else {
        setSTREETTYPE((String)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetAREA();
      } else {
        setAREA((String)value);
      }
      break;

    case HOUSE:
      if (value == null) {
        unsetHOUSE();
      } else {
        setHOUSE((String)value);
      }
      break;

    case KORP:
      if (value == null) {
        unsetKORP();
      } else {
        setKORP((String)value);
      }
      break;

    case FLAT:
      if (value == null) {
        unsetFLAT();
      } else {
        setFLAT((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STREET:
      return getSTREET();

    case STREETTYPE:
      return getSTREETTYPE();

    case AREA:
      return getAREA();

    case HOUSE:
      return getHOUSE();

    case KORP:
      return getKORP();

    case FLAT:
      return getFLAT();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STREET:
      return isSetSTREET();
    case STREETTYPE:
      return isSetSTREETTYPE();
    case AREA:
      return isSetAREA();
    case HOUSE:
      return isSetHOUSE();
    case KORP:
      return isSetKORP();
    case FLAT:
      return isSetFLAT();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientAddress)
      return this.equals((ClientAddress)that);
    return false;
  }

  public boolean equals(ClientAddress that) {
    if (that == null)
      return false;

    boolean this_present_STREET = true && this.isSetSTREET();
    boolean that_present_STREET = true && that.isSetSTREET();
    if (this_present_STREET || that_present_STREET) {
      if (!(this_present_STREET && that_present_STREET))
        return false;
      if (!this.STREET.equals(that.STREET))
        return false;
    }

    boolean this_present_STREETTYPE = true && this.isSetSTREETTYPE();
    boolean that_present_STREETTYPE = true && that.isSetSTREETTYPE();
    if (this_present_STREETTYPE || that_present_STREETTYPE) {
      if (!(this_present_STREETTYPE && that_present_STREETTYPE))
        return false;
      if (!this.STREETTYPE.equals(that.STREETTYPE))
        return false;
    }

    boolean this_present_AREA = true && this.isSetAREA();
    boolean that_present_AREA = true && that.isSetAREA();
    if (this_present_AREA || that_present_AREA) {
      if (!(this_present_AREA && that_present_AREA))
        return false;
      if (!this.AREA.equals(that.AREA))
        return false;
    }

    boolean this_present_HOUSE = true && this.isSetHOUSE();
    boolean that_present_HOUSE = true && that.isSetHOUSE();
    if (this_present_HOUSE || that_present_HOUSE) {
      if (!(this_present_HOUSE && that_present_HOUSE))
        return false;
      if (!this.HOUSE.equals(that.HOUSE))
        return false;
    }

    boolean this_present_KORP = true && this.isSetKORP();
    boolean that_present_KORP = true && that.isSetKORP();
    if (this_present_KORP || that_present_KORP) {
      if (!(this_present_KORP && that_present_KORP))
        return false;
      if (!this.KORP.equals(that.KORP))
        return false;
    }

    boolean this_present_FLAT = true && this.isSetFLAT();
    boolean that_present_FLAT = true && that.isSetFLAT();
    if (this_present_FLAT || that_present_FLAT) {
      if (!(this_present_FLAT && that_present_FLAT))
        return false;
      if (!this.FLAT.equals(that.FLAT))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_STREET = true && (isSetSTREET());
    list.add(present_STREET);
    if (present_STREET)
      list.add(STREET);

    boolean present_STREETTYPE = true && (isSetSTREETTYPE());
    list.add(present_STREETTYPE);
    if (present_STREETTYPE)
      list.add(STREETTYPE);

    boolean present_AREA = true && (isSetAREA());
    list.add(present_AREA);
    if (present_AREA)
      list.add(AREA);

    boolean present_HOUSE = true && (isSetHOUSE());
    list.add(present_HOUSE);
    if (present_HOUSE)
      list.add(HOUSE);

    boolean present_KORP = true && (isSetKORP());
    list.add(present_KORP);
    if (present_KORP)
      list.add(KORP);

    boolean present_FLAT = true && (isSetFLAT());
    list.add(present_FLAT);
    if (present_FLAT)
      list.add(FLAT);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClientAddress other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSTREET()).compareTo(other.isSetSTREET());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSTREET()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.STREET, other.STREET);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSTREETTYPE()).compareTo(other.isSetSTREETTYPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSTREETTYPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.STREETTYPE, other.STREETTYPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAREA()).compareTo(other.isSetAREA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAREA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AREA, other.AREA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHOUSE()).compareTo(other.isSetHOUSE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHOUSE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.HOUSE, other.HOUSE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKORP()).compareTo(other.isSetKORP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKORP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KORP, other.KORP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFLAT()).compareTo(other.isSetFLAT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFLAT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FLAT, other.FLAT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientAddress(");
    boolean first = true;

    if (isSetSTREET()) {
      sb.append("STREET:");
      if (this.STREET == null) {
        sb.append("null");
      } else {
        sb.append(this.STREET);
      }
      first = false;
    }
    if (isSetSTREETTYPE()) {
      if (!first) sb.append(", ");
      sb.append("STREETTYPE:");
      if (this.STREETTYPE == null) {
        sb.append("null");
      } else {
        sb.append(this.STREETTYPE);
      }
      first = false;
    }
    if (isSetAREA()) {
      if (!first) sb.append(", ");
      sb.append("AREA:");
      if (this.AREA == null) {
        sb.append("null");
      } else {
        sb.append(this.AREA);
      }
      first = false;
    }
    if (isSetHOUSE()) {
      if (!first) sb.append(", ");
      sb.append("HOUSE:");
      if (this.HOUSE == null) {
        sb.append("null");
      } else {
        sb.append(this.HOUSE);
      }
      first = false;
    }
    if (isSetKORP()) {
      if (!first) sb.append(", ");
      sb.append("KORP:");
      if (this.KORP == null) {
        sb.append("null");
      } else {
        sb.append(this.KORP);
      }
      first = false;
    }
    if (isSetFLAT()) {
      if (!first) sb.append(", ");
      sb.append("FLAT:");
      if (this.FLAT == null) {
        sb.append("null");
      } else {
        sb.append(this.FLAT);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientAddressStandardSchemeFactory implements SchemeFactory {
    public ClientAddressStandardScheme getScheme() {
      return new ClientAddressStandardScheme();
    }
  }

  private static class ClientAddressStandardScheme extends StandardScheme<ClientAddress> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientAddress struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STREET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.STREET = iprot.readString();
              struct.setSTREETIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STREETTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.STREETTYPE = iprot.readString();
              struct.setSTREETTYPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.AREA = iprot.readString();
              struct.setAREAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.HOUSE = iprot.readString();
              struct.setHOUSEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // KORP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KORP = iprot.readString();
              struct.setKORPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FLAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FLAT = iprot.readString();
              struct.setFLATIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientAddress struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.STREET != null) {
        if (struct.isSetSTREET()) {
          oprot.writeFieldBegin(STREET_FIELD_DESC);
          oprot.writeString(struct.STREET);
          oprot.writeFieldEnd();
        }
      }
      if (struct.STREETTYPE != null) {
        if (struct.isSetSTREETTYPE()) {
          oprot.writeFieldBegin(STREETTYPE_FIELD_DESC);
          oprot.writeString(struct.STREETTYPE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.AREA != null) {
        if (struct.isSetAREA()) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          oprot.writeString(struct.AREA);
          oprot.writeFieldEnd();
        }
      }
      if (struct.HOUSE != null) {
        if (struct.isSetHOUSE()) {
          oprot.writeFieldBegin(HOUSE_FIELD_DESC);
          oprot.writeString(struct.HOUSE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.KORP != null) {
        if (struct.isSetKORP()) {
          oprot.writeFieldBegin(KORP_FIELD_DESC);
          oprot.writeString(struct.KORP);
          oprot.writeFieldEnd();
        }
      }
      if (struct.FLAT != null) {
        if (struct.isSetFLAT()) {
          oprot.writeFieldBegin(FLAT_FIELD_DESC);
          oprot.writeString(struct.FLAT);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientAddressTupleSchemeFactory implements SchemeFactory {
    public ClientAddressTupleScheme getScheme() {
      return new ClientAddressTupleScheme();
    }
  }

  private static class ClientAddressTupleScheme extends TupleScheme<ClientAddress> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientAddress struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSTREET()) {
        optionals.set(0);
      }
      if (struct.isSetSTREETTYPE()) {
        optionals.set(1);
      }
      if (struct.isSetAREA()) {
        optionals.set(2);
      }
      if (struct.isSetHOUSE()) {
        optionals.set(3);
      }
      if (struct.isSetKORP()) {
        optionals.set(4);
      }
      if (struct.isSetFLAT()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSTREET()) {
        oprot.writeString(struct.STREET);
      }
      if (struct.isSetSTREETTYPE()) {
        oprot.writeString(struct.STREETTYPE);
      }
      if (struct.isSetAREA()) {
        oprot.writeString(struct.AREA);
      }
      if (struct.isSetHOUSE()) {
        oprot.writeString(struct.HOUSE);
      }
      if (struct.isSetKORP()) {
        oprot.writeString(struct.KORP);
      }
      if (struct.isSetFLAT()) {
        oprot.writeString(struct.FLAT);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientAddress struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.STREET = iprot.readString();
        struct.setSTREETIsSet(true);
      }
      if (incoming.get(1)) {
        struct.STREETTYPE = iprot.readString();
        struct.setSTREETTYPEIsSet(true);
      }
      if (incoming.get(2)) {
        struct.AREA = iprot.readString();
        struct.setAREAIsSet(true);
      }
      if (incoming.get(3)) {
        struct.HOUSE = iprot.readString();
        struct.setHOUSEIsSet(true);
      }
      if (incoming.get(4)) {
        struct.KORP = iprot.readString();
        struct.setKORPIsSet(true);
      }
      if (incoming.get(5)) {
        struct.FLAT = iprot.readString();
        struct.setFLATIsSet(true);
      }
    }
  }

}

