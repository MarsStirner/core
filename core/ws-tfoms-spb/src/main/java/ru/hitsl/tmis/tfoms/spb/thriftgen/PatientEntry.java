/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.hitsl.tmis.tfoms.spb.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-30")
public class PatientEntry implements org.apache.thrift.TBase<PatientEntry, PatientEntry._Fields>, java.io.Serializable, Cloneable, Comparable<PatientEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PatientEntry");

  private static final org.apache.thrift.protocol.TField ID__PATIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_PATIENT", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SURNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("SURNAME", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("NAME", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField S__NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("S_NAME", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("BIRTHDAY", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("SEX", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField ID__PAT__CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_PAT_CAT", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField DOC__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("DOC_TYPE", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SER__L_FIELD_DESC = new org.apache.thrift.protocol.TField("SER_L", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SER__R_FIELD_DESC = new org.apache.thrift.protocol.TField("SER_R", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DOC__NUMERIC_FIELD_DESC = new org.apache.thrift.protocol.TField("DOC_Numeric", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SNILS_FIELD_DESC = new org.apache.thrift.protocol.TField("SNILS", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField C__OKSM_FIELD_DESC = new org.apache.thrift.protocol.TField("C_OKSM", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IS__SMP_FIELD_DESC = new org.apache.thrift.protocol.TField("IS_SMP", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField POLIS__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("POLIS_TYPE", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField POLIS__S_FIELD_DESC = new org.apache.thrift.protocol.TField("POLIS_S", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField POLIS__N_FIELD_DESC = new org.apache.thrift.protocol.TField("POLIS_N", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ID__SMO_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_SMO", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField POLIS__BD_FIELD_DESC = new org.apache.thrift.protocol.TField("POLIS_BD", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField POLIS__ED_FIELD_DESC = new org.apache.thrift.protocol.TField("POLIS_ED", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField ID__SMO__REG_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_SMO_REG", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField REGISTRATION_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationAddress", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField LIVING_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("livingAddress", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField PLACE__WORK_FIELD_DESC = new org.apache.thrift.protocol.TField("PLACE_WORK", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField ADDR__WORK_FIELD_DESC = new org.apache.thrift.protocol.TField("ADDR_WORK", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField ADDR__PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ADDR_PLACE", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("REMARK", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField B__PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("B_PLACE", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField VNOV__D_FIELD_DESC = new org.apache.thrift.protocol.TField("VNOV_D", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField SPOKESMAN_FIELD_DESC = new org.apache.thrift.protocol.TField("spokesman", org.apache.thrift.protocol.TType.STRUCT, (short)30);
  private static final org.apache.thrift.protocol.TField SEND_FIELD_DESC = new org.apache.thrift.protocol.TField("SEND", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("ERROR", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField ID__MIS_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_MIS", org.apache.thrift.protocol.TType.STRING, (short)33);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientEntryTupleSchemeFactory());
  }

  public String ID_PATIENT; // required
  public String SURNAME; // required
  public String NAME; // required
  public String S_NAME; // required
  public long BIRTHDAY; // required
  public short SEX; // required
  public short ID_PAT_CAT; // required
  public String DOC_TYPE; // optional
  public String SER_L; // optional
  public String SER_R; // optional
  public String DOC_Numeric; // optional
  public String SNILS; // optional
  public String C_OKSM; // optional
  public boolean IS_SMP; // optional
  public String POLIS_TYPE; // optional
  public String POLIS_S; // optional
  public String POLIS_N; // optional
  public String ID_SMO; // optional
  public long POLIS_BD; // optional
  public long POLIS_ED; // optional
  public String ID_SMO_REG; // optional
  public PatientAddress registrationAddress; // optional
  public PatientAddress livingAddress; // optional
  public String PLACE_WORK; // optional
  public String ADDR_WORK; // optional
  public String ADDR_PLACE; // optional
  public String REMARK; // optional
  public String B_PLACE; // optional
  public int VNOV_D; // optional
  public Spokesman spokesman; // optional
  public boolean SEND; // optional
  public String ERROR; // optional
  public String ID_MIS; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID__PATIENT((short)1, "ID_PATIENT"),
    SURNAME((short)2, "SURNAME"),
    NAME((short)3, "NAME"),
    S__NAME((short)4, "S_NAME"),
    BIRTHDAY((short)5, "BIRTHDAY"),
    SEX((short)6, "SEX"),
    ID__PAT__CAT((short)7, "ID_PAT_CAT"),
    DOC__TYPE((short)8, "DOC_TYPE"),
    SER__L((short)9, "SER_L"),
    SER__R((short)10, "SER_R"),
    DOC__NUMERIC((short)11, "DOC_Numeric"),
    SNILS((short)12, "SNILS"),
    C__OKSM((short)13, "C_OKSM"),
    IS__SMP((short)14, "IS_SMP"),
    POLIS__TYPE((short)15, "POLIS_TYPE"),
    POLIS__S((short)16, "POLIS_S"),
    POLIS__N((short)17, "POLIS_N"),
    ID__SMO((short)18, "ID_SMO"),
    POLIS__BD((short)19, "POLIS_BD"),
    POLIS__ED((short)20, "POLIS_ED"),
    ID__SMO__REG((short)21, "ID_SMO_REG"),
    REGISTRATION_ADDRESS((short)22, "registrationAddress"),
    LIVING_ADDRESS((short)23, "livingAddress"),
    PLACE__WORK((short)24, "PLACE_WORK"),
    ADDR__WORK((short)25, "ADDR_WORK"),
    ADDR__PLACE((short)26, "ADDR_PLACE"),
    REMARK((short)27, "REMARK"),
    B__PLACE((short)28, "B_PLACE"),
    VNOV__D((short)29, "VNOV_D"),
    SPOKESMAN((short)30, "spokesman"),
    SEND((short)31, "SEND"),
    ERROR((short)32, "ERROR"),
    ID__MIS((short)33, "ID_MIS");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID__PATIENT
          return ID__PATIENT;
        case 2: // SURNAME
          return SURNAME;
        case 3: // NAME
          return NAME;
        case 4: // S__NAME
          return S__NAME;
        case 5: // BIRTHDAY
          return BIRTHDAY;
        case 6: // SEX
          return SEX;
        case 7: // ID__PAT__CAT
          return ID__PAT__CAT;
        case 8: // DOC__TYPE
          return DOC__TYPE;
        case 9: // SER__L
          return SER__L;
        case 10: // SER__R
          return SER__R;
        case 11: // DOC__NUMERIC
          return DOC__NUMERIC;
        case 12: // SNILS
          return SNILS;
        case 13: // C__OKSM
          return C__OKSM;
        case 14: // IS__SMP
          return IS__SMP;
        case 15: // POLIS__TYPE
          return POLIS__TYPE;
        case 16: // POLIS__S
          return POLIS__S;
        case 17: // POLIS__N
          return POLIS__N;
        case 18: // ID__SMO
          return ID__SMO;
        case 19: // POLIS__BD
          return POLIS__BD;
        case 20: // POLIS__ED
          return POLIS__ED;
        case 21: // ID__SMO__REG
          return ID__SMO__REG;
        case 22: // REGISTRATION_ADDRESS
          return REGISTRATION_ADDRESS;
        case 23: // LIVING_ADDRESS
          return LIVING_ADDRESS;
        case 24: // PLACE__WORK
          return PLACE__WORK;
        case 25: // ADDR__WORK
          return ADDR__WORK;
        case 26: // ADDR__PLACE
          return ADDR__PLACE;
        case 27: // REMARK
          return REMARK;
        case 28: // B__PLACE
          return B__PLACE;
        case 29: // VNOV__D
          return VNOV__D;
        case 30: // SPOKESMAN
          return SPOKESMAN;
        case 31: // SEND
          return SEND;
        case 32: // ERROR
          return ERROR;
        case 33: // ID__MIS
          return ID__MIS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIRTHDAY_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __ID_PAT_CAT_ISSET_ID = 2;
  private static final int __IS_SMP_ISSET_ID = 3;
  private static final int __POLIS_BD_ISSET_ID = 4;
  private static final int __POLIS_ED_ISSET_ID = 5;
  private static final int __VNOV_D_ISSET_ID = 6;
  private static final int __SEND_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOC__TYPE,_Fields.SER__L,_Fields.SER__R,_Fields.DOC__NUMERIC,_Fields.SNILS,_Fields.C__OKSM,_Fields.IS__SMP,_Fields.POLIS__TYPE,_Fields.POLIS__S,_Fields.POLIS__N,_Fields.ID__SMO,_Fields.POLIS__BD,_Fields.POLIS__ED,_Fields.ID__SMO__REG,_Fields.REGISTRATION_ADDRESS,_Fields.LIVING_ADDRESS,_Fields.PLACE__WORK,_Fields.ADDR__WORK,_Fields.ADDR__PLACE,_Fields.REMARK,_Fields.B__PLACE,_Fields.VNOV__D,_Fields.SPOKESMAN,_Fields.SEND,_Fields.ERROR,_Fields.ID__MIS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID__PATIENT, new org.apache.thrift.meta_data.FieldMetaData("ID_PATIENT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SURNAME, new org.apache.thrift.meta_data.FieldMetaData("SURNAME", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("NAME", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S__NAME, new org.apache.thrift.meta_data.FieldMetaData("S_NAME", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("BIRTHDAY", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("SEX", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.ID__PAT__CAT, new org.apache.thrift.meta_data.FieldMetaData("ID_PAT_CAT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.DOC__TYPE, new org.apache.thrift.meta_data.FieldMetaData("DOC_TYPE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SER__L, new org.apache.thrift.meta_data.FieldMetaData("SER_L", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SER__R, new org.apache.thrift.meta_data.FieldMetaData("SER_R", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOC__NUMERIC, new org.apache.thrift.meta_data.FieldMetaData("DOC_Numeric", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNILS, new org.apache.thrift.meta_data.FieldMetaData("SNILS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.C__OKSM, new org.apache.thrift.meta_data.FieldMetaData("C_OKSM", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS__SMP, new org.apache.thrift.meta_data.FieldMetaData("IS_SMP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.POLIS__TYPE, new org.apache.thrift.meta_data.FieldMetaData("POLIS_TYPE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLIS__S, new org.apache.thrift.meta_data.FieldMetaData("POLIS_S", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLIS__N, new org.apache.thrift.meta_data.FieldMetaData("POLIS_N", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID__SMO, new org.apache.thrift.meta_data.FieldMetaData("ID_SMO", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLIS__BD, new org.apache.thrift.meta_data.FieldMetaData("POLIS_BD", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.POLIS__ED, new org.apache.thrift.meta_data.FieldMetaData("POLIS_ED", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.ID__SMO__REG, new org.apache.thrift.meta_data.FieldMetaData("ID_SMO_REG", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTRATION_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("registrationAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientAddress.class)));
    tmpMap.put(_Fields.LIVING_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("livingAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientAddress.class)));
    tmpMap.put(_Fields.PLACE__WORK, new org.apache.thrift.meta_data.FieldMetaData("PLACE_WORK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDR__WORK, new org.apache.thrift.meta_data.FieldMetaData("ADDR_WORK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDR__PLACE, new org.apache.thrift.meta_data.FieldMetaData("ADDR_PLACE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("REMARK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.B__PLACE, new org.apache.thrift.meta_data.FieldMetaData("B_PLACE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VNOV__D, new org.apache.thrift.meta_data.FieldMetaData("VNOV_D", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SPOKESMAN, new org.apache.thrift.meta_data.FieldMetaData("spokesman", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Spokesman.class)));
    tmpMap.put(_Fields.SEND, new org.apache.thrift.meta_data.FieldMetaData("SEND", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("ERROR", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID__MIS, new org.apache.thrift.meta_data.FieldMetaData("ID_MIS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PatientEntry.class, metaDataMap);
  }

  public PatientEntry() {
  }

  public PatientEntry(
    String ID_PATIENT,
    String SURNAME,
    String NAME,
    String S_NAME,
    long BIRTHDAY,
    short SEX,
    short ID_PAT_CAT)
  {
    this();
    this.ID_PATIENT = ID_PATIENT;
    this.SURNAME = SURNAME;
    this.NAME = NAME;
    this.S_NAME = S_NAME;
    this.BIRTHDAY = BIRTHDAY;
    setBIRTHDAYIsSet(true);
    this.SEX = SEX;
    setSEXIsSet(true);
    this.ID_PAT_CAT = ID_PAT_CAT;
    setID_PAT_CATIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PatientEntry(PatientEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetID_PATIENT()) {
      this.ID_PATIENT = other.ID_PATIENT;
    }
    if (other.isSetSURNAME()) {
      this.SURNAME = other.SURNAME;
    }
    if (other.isSetNAME()) {
      this.NAME = other.NAME;
    }
    if (other.isSetS_NAME()) {
      this.S_NAME = other.S_NAME;
    }
    this.BIRTHDAY = other.BIRTHDAY;
    this.SEX = other.SEX;
    this.ID_PAT_CAT = other.ID_PAT_CAT;
    if (other.isSetDOC_TYPE()) {
      this.DOC_TYPE = other.DOC_TYPE;
    }
    if (other.isSetSER_L()) {
      this.SER_L = other.SER_L;
    }
    if (other.isSetSER_R()) {
      this.SER_R = other.SER_R;
    }
    if (other.isSetDOC_Numeric()) {
      this.DOC_Numeric = other.DOC_Numeric;
    }
    if (other.isSetSNILS()) {
      this.SNILS = other.SNILS;
    }
    if (other.isSetC_OKSM()) {
      this.C_OKSM = other.C_OKSM;
    }
    this.IS_SMP = other.IS_SMP;
    if (other.isSetPOLIS_TYPE()) {
      this.POLIS_TYPE = other.POLIS_TYPE;
    }
    if (other.isSetPOLIS_S()) {
      this.POLIS_S = other.POLIS_S;
    }
    if (other.isSetPOLIS_N()) {
      this.POLIS_N = other.POLIS_N;
    }
    if (other.isSetID_SMO()) {
      this.ID_SMO = other.ID_SMO;
    }
    this.POLIS_BD = other.POLIS_BD;
    this.POLIS_ED = other.POLIS_ED;
    if (other.isSetID_SMO_REG()) {
      this.ID_SMO_REG = other.ID_SMO_REG;
    }
    if (other.isSetRegistrationAddress()) {
      this.registrationAddress = new PatientAddress(other.registrationAddress);
    }
    if (other.isSetLivingAddress()) {
      this.livingAddress = new PatientAddress(other.livingAddress);
    }
    if (other.isSetPLACE_WORK()) {
      this.PLACE_WORK = other.PLACE_WORK;
    }
    if (other.isSetADDR_WORK()) {
      this.ADDR_WORK = other.ADDR_WORK;
    }
    if (other.isSetADDR_PLACE()) {
      this.ADDR_PLACE = other.ADDR_PLACE;
    }
    if (other.isSetREMARK()) {
      this.REMARK = other.REMARK;
    }
    if (other.isSetB_PLACE()) {
      this.B_PLACE = other.B_PLACE;
    }
    this.VNOV_D = other.VNOV_D;
    if (other.isSetSpokesman()) {
      this.spokesman = new Spokesman(other.spokesman);
    }
    this.SEND = other.SEND;
    if (other.isSetERROR()) {
      this.ERROR = other.ERROR;
    }
    if (other.isSetID_MIS()) {
      this.ID_MIS = other.ID_MIS;
    }
  }

  public PatientEntry deepCopy() {
    return new PatientEntry(this);
  }

  @Override
  public void clear() {
    this.ID_PATIENT = null;
    this.SURNAME = null;
    this.NAME = null;
    this.S_NAME = null;
    setBIRTHDAYIsSet(false);
    this.BIRTHDAY = 0;
    setSEXIsSet(false);
    this.SEX = 0;
    setID_PAT_CATIsSet(false);
    this.ID_PAT_CAT = 0;
    this.DOC_TYPE = null;
    this.SER_L = null;
    this.SER_R = null;
    this.DOC_Numeric = null;
    this.SNILS = null;
    this.C_OKSM = null;
    setIS_SMPIsSet(false);
    this.IS_SMP = false;
    this.POLIS_TYPE = null;
    this.POLIS_S = null;
    this.POLIS_N = null;
    this.ID_SMO = null;
    setPOLIS_BDIsSet(false);
    this.POLIS_BD = 0;
    setPOLIS_EDIsSet(false);
    this.POLIS_ED = 0;
    this.ID_SMO_REG = null;
    this.registrationAddress = null;
    this.livingAddress = null;
    this.PLACE_WORK = null;
    this.ADDR_WORK = null;
    this.ADDR_PLACE = null;
    this.REMARK = null;
    this.B_PLACE = null;
    setVNOV_DIsSet(false);
    this.VNOV_D = 0;
    this.spokesman = null;
    setSENDIsSet(false);
    this.SEND = false;
    this.ERROR = null;
    this.ID_MIS = null;
  }

  public String getID_PATIENT() {
    return this.ID_PATIENT;
  }

  public PatientEntry setID_PATIENT(String ID_PATIENT) {
    this.ID_PATIENT = ID_PATIENT;
    return this;
  }

  public void unsetID_PATIENT() {
    this.ID_PATIENT = null;
  }

  /** Returns true if field ID_PATIENT is set (has been assigned a value) and false otherwise */
  public boolean isSetID_PATIENT() {
    return this.ID_PATIENT != null;
  }

  public void setID_PATIENTIsSet(boolean value) {
    if (!value) {
      this.ID_PATIENT = null;
    }
  }

  public String getSURNAME() {
    return this.SURNAME;
  }

  public PatientEntry setSURNAME(String SURNAME) {
    this.SURNAME = SURNAME;
    return this;
  }

  public void unsetSURNAME() {
    this.SURNAME = null;
  }

  /** Returns true if field SURNAME is set (has been assigned a value) and false otherwise */
  public boolean isSetSURNAME() {
    return this.SURNAME != null;
  }

  public void setSURNAMEIsSet(boolean value) {
    if (!value) {
      this.SURNAME = null;
    }
  }

  public String getNAME() {
    return this.NAME;
  }

  public PatientEntry setNAME(String NAME) {
    this.NAME = NAME;
    return this;
  }

  public void unsetNAME() {
    this.NAME = null;
  }

  /** Returns true if field NAME is set (has been assigned a value) and false otherwise */
  public boolean isSetNAME() {
    return this.NAME != null;
  }

  public void setNAMEIsSet(boolean value) {
    if (!value) {
      this.NAME = null;
    }
  }

  public String getS_NAME() {
    return this.S_NAME;
  }

  public PatientEntry setS_NAME(String S_NAME) {
    this.S_NAME = S_NAME;
    return this;
  }

  public void unsetS_NAME() {
    this.S_NAME = null;
  }

  /** Returns true if field S_NAME is set (has been assigned a value) and false otherwise */
  public boolean isSetS_NAME() {
    return this.S_NAME != null;
  }

  public void setS_NAMEIsSet(boolean value) {
    if (!value) {
      this.S_NAME = null;
    }
  }

  public long getBIRTHDAY() {
    return this.BIRTHDAY;
  }

  public PatientEntry setBIRTHDAY(long BIRTHDAY) {
    this.BIRTHDAY = BIRTHDAY;
    setBIRTHDAYIsSet(true);
    return this;
  }

  public void unsetBIRTHDAY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  /** Returns true if field BIRTHDAY is set (has been assigned a value) and false otherwise */
  public boolean isSetBIRTHDAY() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  public void setBIRTHDAYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDAY_ISSET_ID, value);
  }

  public short getSEX() {
    return this.SEX;
  }

  public PatientEntry setSEX(short SEX) {
    this.SEX = SEX;
    setSEXIsSet(true);
    return this;
  }

  public void unsetSEX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field SEX is set (has been assigned a value) and false otherwise */
  public boolean isSetSEX() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSEXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public short getID_PAT_CAT() {
    return this.ID_PAT_CAT;
  }

  public PatientEntry setID_PAT_CAT(short ID_PAT_CAT) {
    this.ID_PAT_CAT = ID_PAT_CAT;
    setID_PAT_CATIsSet(true);
    return this;
  }

  public void unsetID_PAT_CAT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_PAT_CAT_ISSET_ID);
  }

  /** Returns true if field ID_PAT_CAT is set (has been assigned a value) and false otherwise */
  public boolean isSetID_PAT_CAT() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_PAT_CAT_ISSET_ID);
  }

  public void setID_PAT_CATIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_PAT_CAT_ISSET_ID, value);
  }

  public String getDOC_TYPE() {
    return this.DOC_TYPE;
  }

  public PatientEntry setDOC_TYPE(String DOC_TYPE) {
    this.DOC_TYPE = DOC_TYPE;
    return this;
  }

  public void unsetDOC_TYPE() {
    this.DOC_TYPE = null;
  }

  /** Returns true if field DOC_TYPE is set (has been assigned a value) and false otherwise */
  public boolean isSetDOC_TYPE() {
    return this.DOC_TYPE != null;
  }

  public void setDOC_TYPEIsSet(boolean value) {
    if (!value) {
      this.DOC_TYPE = null;
    }
  }

  public String getSER_L() {
    return this.SER_L;
  }

  public PatientEntry setSER_L(String SER_L) {
    this.SER_L = SER_L;
    return this;
  }

  public void unsetSER_L() {
    this.SER_L = null;
  }

  /** Returns true if field SER_L is set (has been assigned a value) and false otherwise */
  public boolean isSetSER_L() {
    return this.SER_L != null;
  }

  public void setSER_LIsSet(boolean value) {
    if (!value) {
      this.SER_L = null;
    }
  }

  public String getSER_R() {
    return this.SER_R;
  }

  public PatientEntry setSER_R(String SER_R) {
    this.SER_R = SER_R;
    return this;
  }

  public void unsetSER_R() {
    this.SER_R = null;
  }

  /** Returns true if field SER_R is set (has been assigned a value) and false otherwise */
  public boolean isSetSER_R() {
    return this.SER_R != null;
  }

  public void setSER_RIsSet(boolean value) {
    if (!value) {
      this.SER_R = null;
    }
  }

  public String getDOC_Numeric() {
    return this.DOC_Numeric;
  }

  public PatientEntry setDOC_Numeric(String DOC_Numeric) {
    this.DOC_Numeric = DOC_Numeric;
    return this;
  }

  public void unsetDOC_Numeric() {
    this.DOC_Numeric = null;
  }

  /** Returns true if field DOC_Numeric is set (has been assigned a value) and false otherwise */
  public boolean isSetDOC_Numeric() {
    return this.DOC_Numeric != null;
  }

  public void setDOC_NumericIsSet(boolean value) {
    if (!value) {
      this.DOC_Numeric = null;
    }
  }

  public String getSNILS() {
    return this.SNILS;
  }

  public PatientEntry setSNILS(String SNILS) {
    this.SNILS = SNILS;
    return this;
  }

  public void unsetSNILS() {
    this.SNILS = null;
  }

  /** Returns true if field SNILS is set (has been assigned a value) and false otherwise */
  public boolean isSetSNILS() {
    return this.SNILS != null;
  }

  public void setSNILSIsSet(boolean value) {
    if (!value) {
      this.SNILS = null;
    }
  }

  public String getC_OKSM() {
    return this.C_OKSM;
  }

  public PatientEntry setC_OKSM(String C_OKSM) {
    this.C_OKSM = C_OKSM;
    return this;
  }

  public void unsetC_OKSM() {
    this.C_OKSM = null;
  }

  /** Returns true if field C_OKSM is set (has been assigned a value) and false otherwise */
  public boolean isSetC_OKSM() {
    return this.C_OKSM != null;
  }

  public void setC_OKSMIsSet(boolean value) {
    if (!value) {
      this.C_OKSM = null;
    }
  }

  public boolean isIS_SMP() {
    return this.IS_SMP;
  }

  public PatientEntry setIS_SMP(boolean IS_SMP) {
    this.IS_SMP = IS_SMP;
    setIS_SMPIsSet(true);
    return this;
  }

  public void unsetIS_SMP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_SMP_ISSET_ID);
  }

  /** Returns true if field IS_SMP is set (has been assigned a value) and false otherwise */
  public boolean isSetIS_SMP() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_SMP_ISSET_ID);
  }

  public void setIS_SMPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_SMP_ISSET_ID, value);
  }

  public String getPOLIS_TYPE() {
    return this.POLIS_TYPE;
  }

  public PatientEntry setPOLIS_TYPE(String POLIS_TYPE) {
    this.POLIS_TYPE = POLIS_TYPE;
    return this;
  }

  public void unsetPOLIS_TYPE() {
    this.POLIS_TYPE = null;
  }

  /** Returns true if field POLIS_TYPE is set (has been assigned a value) and false otherwise */
  public boolean isSetPOLIS_TYPE() {
    return this.POLIS_TYPE != null;
  }

  public void setPOLIS_TYPEIsSet(boolean value) {
    if (!value) {
      this.POLIS_TYPE = null;
    }
  }

  public String getPOLIS_S() {
    return this.POLIS_S;
  }

  public PatientEntry setPOLIS_S(String POLIS_S) {
    this.POLIS_S = POLIS_S;
    return this;
  }

  public void unsetPOLIS_S() {
    this.POLIS_S = null;
  }

  /** Returns true if field POLIS_S is set (has been assigned a value) and false otherwise */
  public boolean isSetPOLIS_S() {
    return this.POLIS_S != null;
  }

  public void setPOLIS_SIsSet(boolean value) {
    if (!value) {
      this.POLIS_S = null;
    }
  }

  public String getPOLIS_N() {
    return this.POLIS_N;
  }

  public PatientEntry setPOLIS_N(String POLIS_N) {
    this.POLIS_N = POLIS_N;
    return this;
  }

  public void unsetPOLIS_N() {
    this.POLIS_N = null;
  }

  /** Returns true if field POLIS_N is set (has been assigned a value) and false otherwise */
  public boolean isSetPOLIS_N() {
    return this.POLIS_N != null;
  }

  public void setPOLIS_NIsSet(boolean value) {
    if (!value) {
      this.POLIS_N = null;
    }
  }

  public String getID_SMO() {
    return this.ID_SMO;
  }

  public PatientEntry setID_SMO(String ID_SMO) {
    this.ID_SMO = ID_SMO;
    return this;
  }

  public void unsetID_SMO() {
    this.ID_SMO = null;
  }

  /** Returns true if field ID_SMO is set (has been assigned a value) and false otherwise */
  public boolean isSetID_SMO() {
    return this.ID_SMO != null;
  }

  public void setID_SMOIsSet(boolean value) {
    if (!value) {
      this.ID_SMO = null;
    }
  }

  public long getPOLIS_BD() {
    return this.POLIS_BD;
  }

  public PatientEntry setPOLIS_BD(long POLIS_BD) {
    this.POLIS_BD = POLIS_BD;
    setPOLIS_BDIsSet(true);
    return this;
  }

  public void unsetPOLIS_BD() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POLIS_BD_ISSET_ID);
  }

  /** Returns true if field POLIS_BD is set (has been assigned a value) and false otherwise */
  public boolean isSetPOLIS_BD() {
    return EncodingUtils.testBit(__isset_bitfield, __POLIS_BD_ISSET_ID);
  }

  public void setPOLIS_BDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POLIS_BD_ISSET_ID, value);
  }

  public long getPOLIS_ED() {
    return this.POLIS_ED;
  }

  public PatientEntry setPOLIS_ED(long POLIS_ED) {
    this.POLIS_ED = POLIS_ED;
    setPOLIS_EDIsSet(true);
    return this;
  }

  public void unsetPOLIS_ED() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POLIS_ED_ISSET_ID);
  }

  /** Returns true if field POLIS_ED is set (has been assigned a value) and false otherwise */
  public boolean isSetPOLIS_ED() {
    return EncodingUtils.testBit(__isset_bitfield, __POLIS_ED_ISSET_ID);
  }

  public void setPOLIS_EDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POLIS_ED_ISSET_ID, value);
  }

  public String getID_SMO_REG() {
    return this.ID_SMO_REG;
  }

  public PatientEntry setID_SMO_REG(String ID_SMO_REG) {
    this.ID_SMO_REG = ID_SMO_REG;
    return this;
  }

  public void unsetID_SMO_REG() {
    this.ID_SMO_REG = null;
  }

  /** Returns true if field ID_SMO_REG is set (has been assigned a value) and false otherwise */
  public boolean isSetID_SMO_REG() {
    return this.ID_SMO_REG != null;
  }

  public void setID_SMO_REGIsSet(boolean value) {
    if (!value) {
      this.ID_SMO_REG = null;
    }
  }

  public PatientAddress getRegistrationAddress() {
    return this.registrationAddress;
  }

  public PatientEntry setRegistrationAddress(PatientAddress registrationAddress) {
    this.registrationAddress = registrationAddress;
    return this;
  }

  public void unsetRegistrationAddress() {
    this.registrationAddress = null;
  }

  /** Returns true if field registrationAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationAddress() {
    return this.registrationAddress != null;
  }

  public void setRegistrationAddressIsSet(boolean value) {
    if (!value) {
      this.registrationAddress = null;
    }
  }

  public PatientAddress getLivingAddress() {
    return this.livingAddress;
  }

  public PatientEntry setLivingAddress(PatientAddress livingAddress) {
    this.livingAddress = livingAddress;
    return this;
  }

  public void unsetLivingAddress() {
    this.livingAddress = null;
  }

  /** Returns true if field livingAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetLivingAddress() {
    return this.livingAddress != null;
  }

  public void setLivingAddressIsSet(boolean value) {
    if (!value) {
      this.livingAddress = null;
    }
  }

  public String getPLACE_WORK() {
    return this.PLACE_WORK;
  }

  public PatientEntry setPLACE_WORK(String PLACE_WORK) {
    this.PLACE_WORK = PLACE_WORK;
    return this;
  }

  public void unsetPLACE_WORK() {
    this.PLACE_WORK = null;
  }

  /** Returns true if field PLACE_WORK is set (has been assigned a value) and false otherwise */
  public boolean isSetPLACE_WORK() {
    return this.PLACE_WORK != null;
  }

  public void setPLACE_WORKIsSet(boolean value) {
    if (!value) {
      this.PLACE_WORK = null;
    }
  }

  public String getADDR_WORK() {
    return this.ADDR_WORK;
  }

  public PatientEntry setADDR_WORK(String ADDR_WORK) {
    this.ADDR_WORK = ADDR_WORK;
    return this;
  }

  public void unsetADDR_WORK() {
    this.ADDR_WORK = null;
  }

  /** Returns true if field ADDR_WORK is set (has been assigned a value) and false otherwise */
  public boolean isSetADDR_WORK() {
    return this.ADDR_WORK != null;
  }

  public void setADDR_WORKIsSet(boolean value) {
    if (!value) {
      this.ADDR_WORK = null;
    }
  }

  public String getADDR_PLACE() {
    return this.ADDR_PLACE;
  }

  public PatientEntry setADDR_PLACE(String ADDR_PLACE) {
    this.ADDR_PLACE = ADDR_PLACE;
    return this;
  }

  public void unsetADDR_PLACE() {
    this.ADDR_PLACE = null;
  }

  /** Returns true if field ADDR_PLACE is set (has been assigned a value) and false otherwise */
  public boolean isSetADDR_PLACE() {
    return this.ADDR_PLACE != null;
  }

  public void setADDR_PLACEIsSet(boolean value) {
    if (!value) {
      this.ADDR_PLACE = null;
    }
  }

  public String getREMARK() {
    return this.REMARK;
  }

  public PatientEntry setREMARK(String REMARK) {
    this.REMARK = REMARK;
    return this;
  }

  public void unsetREMARK() {
    this.REMARK = null;
  }

  /** Returns true if field REMARK is set (has been assigned a value) and false otherwise */
  public boolean isSetREMARK() {
    return this.REMARK != null;
  }

  public void setREMARKIsSet(boolean value) {
    if (!value) {
      this.REMARK = null;
    }
  }

  public String getB_PLACE() {
    return this.B_PLACE;
  }

  public PatientEntry setB_PLACE(String B_PLACE) {
    this.B_PLACE = B_PLACE;
    return this;
  }

  public void unsetB_PLACE() {
    this.B_PLACE = null;
  }

  /** Returns true if field B_PLACE is set (has been assigned a value) and false otherwise */
  public boolean isSetB_PLACE() {
    return this.B_PLACE != null;
  }

  public void setB_PLACEIsSet(boolean value) {
    if (!value) {
      this.B_PLACE = null;
    }
  }

  public int getVNOV_D() {
    return this.VNOV_D;
  }

  public PatientEntry setVNOV_D(int VNOV_D) {
    this.VNOV_D = VNOV_D;
    setVNOV_DIsSet(true);
    return this;
  }

  public void unsetVNOV_D() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VNOV_D_ISSET_ID);
  }

  /** Returns true if field VNOV_D is set (has been assigned a value) and false otherwise */
  public boolean isSetVNOV_D() {
    return EncodingUtils.testBit(__isset_bitfield, __VNOV_D_ISSET_ID);
  }

  public void setVNOV_DIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VNOV_D_ISSET_ID, value);
  }

  public Spokesman getSpokesman() {
    return this.spokesman;
  }

  public PatientEntry setSpokesman(Spokesman spokesman) {
    this.spokesman = spokesman;
    return this;
  }

  public void unsetSpokesman() {
    this.spokesman = null;
  }

  /** Returns true if field spokesman is set (has been assigned a value) and false otherwise */
  public boolean isSetSpokesman() {
    return this.spokesman != null;
  }

  public void setSpokesmanIsSet(boolean value) {
    if (!value) {
      this.spokesman = null;
    }
  }

  public boolean isSEND() {
    return this.SEND;
  }

  public PatientEntry setSEND(boolean SEND) {
    this.SEND = SEND;
    setSENDIsSet(true);
    return this;
  }

  public void unsetSEND() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEND_ISSET_ID);
  }

  /** Returns true if field SEND is set (has been assigned a value) and false otherwise */
  public boolean isSetSEND() {
    return EncodingUtils.testBit(__isset_bitfield, __SEND_ISSET_ID);
  }

  public void setSENDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEND_ISSET_ID, value);
  }

  public String getERROR() {
    return this.ERROR;
  }

  public PatientEntry setERROR(String ERROR) {
    this.ERROR = ERROR;
    return this;
  }

  public void unsetERROR() {
    this.ERROR = null;
  }

  /** Returns true if field ERROR is set (has been assigned a value) and false otherwise */
  public boolean isSetERROR() {
    return this.ERROR != null;
  }

  public void setERRORIsSet(boolean value) {
    if (!value) {
      this.ERROR = null;
    }
  }

  public String getID_MIS() {
    return this.ID_MIS;
  }

  public PatientEntry setID_MIS(String ID_MIS) {
    this.ID_MIS = ID_MIS;
    return this;
  }

  public void unsetID_MIS() {
    this.ID_MIS = null;
  }

  /** Returns true if field ID_MIS is set (has been assigned a value) and false otherwise */
  public boolean isSetID_MIS() {
    return this.ID_MIS != null;
  }

  public void setID_MISIsSet(boolean value) {
    if (!value) {
      this.ID_MIS = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID__PATIENT:
      if (value == null) {
        unsetID_PATIENT();
      } else {
        setID_PATIENT((String)value);
      }
      break;

    case SURNAME:
      if (value == null) {
        unsetSURNAME();
      } else {
        setSURNAME((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetNAME();
      } else {
        setNAME((String)value);
      }
      break;

    case S__NAME:
      if (value == null) {
        unsetS_NAME();
      } else {
        setS_NAME((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBIRTHDAY();
      } else {
        setBIRTHDAY((Long)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSEX();
      } else {
        setSEX((Short)value);
      }
      break;

    case ID__PAT__CAT:
      if (value == null) {
        unsetID_PAT_CAT();
      } else {
        setID_PAT_CAT((Short)value);
      }
      break;

    case DOC__TYPE:
      if (value == null) {
        unsetDOC_TYPE();
      } else {
        setDOC_TYPE((String)value);
      }
      break;

    case SER__L:
      if (value == null) {
        unsetSER_L();
      } else {
        setSER_L((String)value);
      }
      break;

    case SER__R:
      if (value == null) {
        unsetSER_R();
      } else {
        setSER_R((String)value);
      }
      break;

    case DOC__NUMERIC:
      if (value == null) {
        unsetDOC_Numeric();
      } else {
        setDOC_Numeric((String)value);
      }
      break;

    case SNILS:
      if (value == null) {
        unsetSNILS();
      } else {
        setSNILS((String)value);
      }
      break;

    case C__OKSM:
      if (value == null) {
        unsetC_OKSM();
      } else {
        setC_OKSM((String)value);
      }
      break;

    case IS__SMP:
      if (value == null) {
        unsetIS_SMP();
      } else {
        setIS_SMP((Boolean)value);
      }
      break;

    case POLIS__TYPE:
      if (value == null) {
        unsetPOLIS_TYPE();
      } else {
        setPOLIS_TYPE((String)value);
      }
      break;

    case POLIS__S:
      if (value == null) {
        unsetPOLIS_S();
      } else {
        setPOLIS_S((String)value);
      }
      break;

    case POLIS__N:
      if (value == null) {
        unsetPOLIS_N();
      } else {
        setPOLIS_N((String)value);
      }
      break;

    case ID__SMO:
      if (value == null) {
        unsetID_SMO();
      } else {
        setID_SMO((String)value);
      }
      break;

    case POLIS__BD:
      if (value == null) {
        unsetPOLIS_BD();
      } else {
        setPOLIS_BD((Long)value);
      }
      break;

    case POLIS__ED:
      if (value == null) {
        unsetPOLIS_ED();
      } else {
        setPOLIS_ED((Long)value);
      }
      break;

    case ID__SMO__REG:
      if (value == null) {
        unsetID_SMO_REG();
      } else {
        setID_SMO_REG((String)value);
      }
      break;

    case REGISTRATION_ADDRESS:
      if (value == null) {
        unsetRegistrationAddress();
      } else {
        setRegistrationAddress((PatientAddress)value);
      }
      break;

    case LIVING_ADDRESS:
      if (value == null) {
        unsetLivingAddress();
      } else {
        setLivingAddress((PatientAddress)value);
      }
      break;

    case PLACE__WORK:
      if (value == null) {
        unsetPLACE_WORK();
      } else {
        setPLACE_WORK((String)value);
      }
      break;

    case ADDR__WORK:
      if (value == null) {
        unsetADDR_WORK();
      } else {
        setADDR_WORK((String)value);
      }
      break;

    case ADDR__PLACE:
      if (value == null) {
        unsetADDR_PLACE();
      } else {
        setADDR_PLACE((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetREMARK();
      } else {
        setREMARK((String)value);
      }
      break;

    case B__PLACE:
      if (value == null) {
        unsetB_PLACE();
      } else {
        setB_PLACE((String)value);
      }
      break;

    case VNOV__D:
      if (value == null) {
        unsetVNOV_D();
      } else {
        setVNOV_D((Integer)value);
      }
      break;

    case SPOKESMAN:
      if (value == null) {
        unsetSpokesman();
      } else {
        setSpokesman((Spokesman)value);
      }
      break;

    case SEND:
      if (value == null) {
        unsetSEND();
      } else {
        setSEND((Boolean)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetERROR();
      } else {
        setERROR((String)value);
      }
      break;

    case ID__MIS:
      if (value == null) {
        unsetID_MIS();
      } else {
        setID_MIS((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID__PATIENT:
      return getID_PATIENT();

    case SURNAME:
      return getSURNAME();

    case NAME:
      return getNAME();

    case S__NAME:
      return getS_NAME();

    case BIRTHDAY:
      return Long.valueOf(getBIRTHDAY());

    case SEX:
      return Short.valueOf(getSEX());

    case ID__PAT__CAT:
      return Short.valueOf(getID_PAT_CAT());

    case DOC__TYPE:
      return getDOC_TYPE();

    case SER__L:
      return getSER_L();

    case SER__R:
      return getSER_R();

    case DOC__NUMERIC:
      return getDOC_Numeric();

    case SNILS:
      return getSNILS();

    case C__OKSM:
      return getC_OKSM();

    case IS__SMP:
      return Boolean.valueOf(isIS_SMP());

    case POLIS__TYPE:
      return getPOLIS_TYPE();

    case POLIS__S:
      return getPOLIS_S();

    case POLIS__N:
      return getPOLIS_N();

    case ID__SMO:
      return getID_SMO();

    case POLIS__BD:
      return Long.valueOf(getPOLIS_BD());

    case POLIS__ED:
      return Long.valueOf(getPOLIS_ED());

    case ID__SMO__REG:
      return getID_SMO_REG();

    case REGISTRATION_ADDRESS:
      return getRegistrationAddress();

    case LIVING_ADDRESS:
      return getLivingAddress();

    case PLACE__WORK:
      return getPLACE_WORK();

    case ADDR__WORK:
      return getADDR_WORK();

    case ADDR__PLACE:
      return getADDR_PLACE();

    case REMARK:
      return getREMARK();

    case B__PLACE:
      return getB_PLACE();

    case VNOV__D:
      return Integer.valueOf(getVNOV_D());

    case SPOKESMAN:
      return getSpokesman();

    case SEND:
      return Boolean.valueOf(isSEND());

    case ERROR:
      return getERROR();

    case ID__MIS:
      return getID_MIS();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID__PATIENT:
      return isSetID_PATIENT();
    case SURNAME:
      return isSetSURNAME();
    case NAME:
      return isSetNAME();
    case S__NAME:
      return isSetS_NAME();
    case BIRTHDAY:
      return isSetBIRTHDAY();
    case SEX:
      return isSetSEX();
    case ID__PAT__CAT:
      return isSetID_PAT_CAT();
    case DOC__TYPE:
      return isSetDOC_TYPE();
    case SER__L:
      return isSetSER_L();
    case SER__R:
      return isSetSER_R();
    case DOC__NUMERIC:
      return isSetDOC_Numeric();
    case SNILS:
      return isSetSNILS();
    case C__OKSM:
      return isSetC_OKSM();
    case IS__SMP:
      return isSetIS_SMP();
    case POLIS__TYPE:
      return isSetPOLIS_TYPE();
    case POLIS__S:
      return isSetPOLIS_S();
    case POLIS__N:
      return isSetPOLIS_N();
    case ID__SMO:
      return isSetID_SMO();
    case POLIS__BD:
      return isSetPOLIS_BD();
    case POLIS__ED:
      return isSetPOLIS_ED();
    case ID__SMO__REG:
      return isSetID_SMO_REG();
    case REGISTRATION_ADDRESS:
      return isSetRegistrationAddress();
    case LIVING_ADDRESS:
      return isSetLivingAddress();
    case PLACE__WORK:
      return isSetPLACE_WORK();
    case ADDR__WORK:
      return isSetADDR_WORK();
    case ADDR__PLACE:
      return isSetADDR_PLACE();
    case REMARK:
      return isSetREMARK();
    case B__PLACE:
      return isSetB_PLACE();
    case VNOV__D:
      return isSetVNOV_D();
    case SPOKESMAN:
      return isSetSpokesman();
    case SEND:
      return isSetSEND();
    case ERROR:
      return isSetERROR();
    case ID__MIS:
      return isSetID_MIS();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PatientEntry)
      return this.equals((PatientEntry)that);
    return false;
  }

  public boolean equals(PatientEntry that) {
    if (that == null)
      return false;

    boolean this_present_ID_PATIENT = true && this.isSetID_PATIENT();
    boolean that_present_ID_PATIENT = true && that.isSetID_PATIENT();
    if (this_present_ID_PATIENT || that_present_ID_PATIENT) {
      if (!(this_present_ID_PATIENT && that_present_ID_PATIENT))
        return false;
      if (!this.ID_PATIENT.equals(that.ID_PATIENT))
        return false;
    }

    boolean this_present_SURNAME = true && this.isSetSURNAME();
    boolean that_present_SURNAME = true && that.isSetSURNAME();
    if (this_present_SURNAME || that_present_SURNAME) {
      if (!(this_present_SURNAME && that_present_SURNAME))
        return false;
      if (!this.SURNAME.equals(that.SURNAME))
        return false;
    }

    boolean this_present_NAME = true && this.isSetNAME();
    boolean that_present_NAME = true && that.isSetNAME();
    if (this_present_NAME || that_present_NAME) {
      if (!(this_present_NAME && that_present_NAME))
        return false;
      if (!this.NAME.equals(that.NAME))
        return false;
    }

    boolean this_present_S_NAME = true && this.isSetS_NAME();
    boolean that_present_S_NAME = true && that.isSetS_NAME();
    if (this_present_S_NAME || that_present_S_NAME) {
      if (!(this_present_S_NAME && that_present_S_NAME))
        return false;
      if (!this.S_NAME.equals(that.S_NAME))
        return false;
    }

    boolean this_present_BIRTHDAY = true;
    boolean that_present_BIRTHDAY = true;
    if (this_present_BIRTHDAY || that_present_BIRTHDAY) {
      if (!(this_present_BIRTHDAY && that_present_BIRTHDAY))
        return false;
      if (this.BIRTHDAY != that.BIRTHDAY)
        return false;
    }

    boolean this_present_SEX = true;
    boolean that_present_SEX = true;
    if (this_present_SEX || that_present_SEX) {
      if (!(this_present_SEX && that_present_SEX))
        return false;
      if (this.SEX != that.SEX)
        return false;
    }

    boolean this_present_ID_PAT_CAT = true;
    boolean that_present_ID_PAT_CAT = true;
    if (this_present_ID_PAT_CAT || that_present_ID_PAT_CAT) {
      if (!(this_present_ID_PAT_CAT && that_present_ID_PAT_CAT))
        return false;
      if (this.ID_PAT_CAT != that.ID_PAT_CAT)
        return false;
    }

    boolean this_present_DOC_TYPE = true && this.isSetDOC_TYPE();
    boolean that_present_DOC_TYPE = true && that.isSetDOC_TYPE();
    if (this_present_DOC_TYPE || that_present_DOC_TYPE) {
      if (!(this_present_DOC_TYPE && that_present_DOC_TYPE))
        return false;
      if (!this.DOC_TYPE.equals(that.DOC_TYPE))
        return false;
    }

    boolean this_present_SER_L = true && this.isSetSER_L();
    boolean that_present_SER_L = true && that.isSetSER_L();
    if (this_present_SER_L || that_present_SER_L) {
      if (!(this_present_SER_L && that_present_SER_L))
        return false;
      if (!this.SER_L.equals(that.SER_L))
        return false;
    }

    boolean this_present_SER_R = true && this.isSetSER_R();
    boolean that_present_SER_R = true && that.isSetSER_R();
    if (this_present_SER_R || that_present_SER_R) {
      if (!(this_present_SER_R && that_present_SER_R))
        return false;
      if (!this.SER_R.equals(that.SER_R))
        return false;
    }

    boolean this_present_DOC_Numeric = true && this.isSetDOC_Numeric();
    boolean that_present_DOC_Numeric = true && that.isSetDOC_Numeric();
    if (this_present_DOC_Numeric || that_present_DOC_Numeric) {
      if (!(this_present_DOC_Numeric && that_present_DOC_Numeric))
        return false;
      if (!this.DOC_Numeric.equals(that.DOC_Numeric))
        return false;
    }

    boolean this_present_SNILS = true && this.isSetSNILS();
    boolean that_present_SNILS = true && that.isSetSNILS();
    if (this_present_SNILS || that_present_SNILS) {
      if (!(this_present_SNILS && that_present_SNILS))
        return false;
      if (!this.SNILS.equals(that.SNILS))
        return false;
    }

    boolean this_present_C_OKSM = true && this.isSetC_OKSM();
    boolean that_present_C_OKSM = true && that.isSetC_OKSM();
    if (this_present_C_OKSM || that_present_C_OKSM) {
      if (!(this_present_C_OKSM && that_present_C_OKSM))
        return false;
      if (!this.C_OKSM.equals(that.C_OKSM))
        return false;
    }

    boolean this_present_IS_SMP = true && this.isSetIS_SMP();
    boolean that_present_IS_SMP = true && that.isSetIS_SMP();
    if (this_present_IS_SMP || that_present_IS_SMP) {
      if (!(this_present_IS_SMP && that_present_IS_SMP))
        return false;
      if (this.IS_SMP != that.IS_SMP)
        return false;
    }

    boolean this_present_POLIS_TYPE = true && this.isSetPOLIS_TYPE();
    boolean that_present_POLIS_TYPE = true && that.isSetPOLIS_TYPE();
    if (this_present_POLIS_TYPE || that_present_POLIS_TYPE) {
      if (!(this_present_POLIS_TYPE && that_present_POLIS_TYPE))
        return false;
      if (!this.POLIS_TYPE.equals(that.POLIS_TYPE))
        return false;
    }

    boolean this_present_POLIS_S = true && this.isSetPOLIS_S();
    boolean that_present_POLIS_S = true && that.isSetPOLIS_S();
    if (this_present_POLIS_S || that_present_POLIS_S) {
      if (!(this_present_POLIS_S && that_present_POLIS_S))
        return false;
      if (!this.POLIS_S.equals(that.POLIS_S))
        return false;
    }

    boolean this_present_POLIS_N = true && this.isSetPOLIS_N();
    boolean that_present_POLIS_N = true && that.isSetPOLIS_N();
    if (this_present_POLIS_N || that_present_POLIS_N) {
      if (!(this_present_POLIS_N && that_present_POLIS_N))
        return false;
      if (!this.POLIS_N.equals(that.POLIS_N))
        return false;
    }

    boolean this_present_ID_SMO = true && this.isSetID_SMO();
    boolean that_present_ID_SMO = true && that.isSetID_SMO();
    if (this_present_ID_SMO || that_present_ID_SMO) {
      if (!(this_present_ID_SMO && that_present_ID_SMO))
        return false;
      if (!this.ID_SMO.equals(that.ID_SMO))
        return false;
    }

    boolean this_present_POLIS_BD = true && this.isSetPOLIS_BD();
    boolean that_present_POLIS_BD = true && that.isSetPOLIS_BD();
    if (this_present_POLIS_BD || that_present_POLIS_BD) {
      if (!(this_present_POLIS_BD && that_present_POLIS_BD))
        return false;
      if (this.POLIS_BD != that.POLIS_BD)
        return false;
    }

    boolean this_present_POLIS_ED = true && this.isSetPOLIS_ED();
    boolean that_present_POLIS_ED = true && that.isSetPOLIS_ED();
    if (this_present_POLIS_ED || that_present_POLIS_ED) {
      if (!(this_present_POLIS_ED && that_present_POLIS_ED))
        return false;
      if (this.POLIS_ED != that.POLIS_ED)
        return false;
    }

    boolean this_present_ID_SMO_REG = true && this.isSetID_SMO_REG();
    boolean that_present_ID_SMO_REG = true && that.isSetID_SMO_REG();
    if (this_present_ID_SMO_REG || that_present_ID_SMO_REG) {
      if (!(this_present_ID_SMO_REG && that_present_ID_SMO_REG))
        return false;
      if (!this.ID_SMO_REG.equals(that.ID_SMO_REG))
        return false;
    }

    boolean this_present_registrationAddress = true && this.isSetRegistrationAddress();
    boolean that_present_registrationAddress = true && that.isSetRegistrationAddress();
    if (this_present_registrationAddress || that_present_registrationAddress) {
      if (!(this_present_registrationAddress && that_present_registrationAddress))
        return false;
      if (!this.registrationAddress.equals(that.registrationAddress))
        return false;
    }

    boolean this_present_livingAddress = true && this.isSetLivingAddress();
    boolean that_present_livingAddress = true && that.isSetLivingAddress();
    if (this_present_livingAddress || that_present_livingAddress) {
      if (!(this_present_livingAddress && that_present_livingAddress))
        return false;
      if (!this.livingAddress.equals(that.livingAddress))
        return false;
    }

    boolean this_present_PLACE_WORK = true && this.isSetPLACE_WORK();
    boolean that_present_PLACE_WORK = true && that.isSetPLACE_WORK();
    if (this_present_PLACE_WORK || that_present_PLACE_WORK) {
      if (!(this_present_PLACE_WORK && that_present_PLACE_WORK))
        return false;
      if (!this.PLACE_WORK.equals(that.PLACE_WORK))
        return false;
    }

    boolean this_present_ADDR_WORK = true && this.isSetADDR_WORK();
    boolean that_present_ADDR_WORK = true && that.isSetADDR_WORK();
    if (this_present_ADDR_WORK || that_present_ADDR_WORK) {
      if (!(this_present_ADDR_WORK && that_present_ADDR_WORK))
        return false;
      if (!this.ADDR_WORK.equals(that.ADDR_WORK))
        return false;
    }

    boolean this_present_ADDR_PLACE = true && this.isSetADDR_PLACE();
    boolean that_present_ADDR_PLACE = true && that.isSetADDR_PLACE();
    if (this_present_ADDR_PLACE || that_present_ADDR_PLACE) {
      if (!(this_present_ADDR_PLACE && that_present_ADDR_PLACE))
        return false;
      if (!this.ADDR_PLACE.equals(that.ADDR_PLACE))
        return false;
    }

    boolean this_present_REMARK = true && this.isSetREMARK();
    boolean that_present_REMARK = true && that.isSetREMARK();
    if (this_present_REMARK || that_present_REMARK) {
      if (!(this_present_REMARK && that_present_REMARK))
        return false;
      if (!this.REMARK.equals(that.REMARK))
        return false;
    }

    boolean this_present_B_PLACE = true && this.isSetB_PLACE();
    boolean that_present_B_PLACE = true && that.isSetB_PLACE();
    if (this_present_B_PLACE || that_present_B_PLACE) {
      if (!(this_present_B_PLACE && that_present_B_PLACE))
        return false;
      if (!this.B_PLACE.equals(that.B_PLACE))
        return false;
    }

    boolean this_present_VNOV_D = true && this.isSetVNOV_D();
    boolean that_present_VNOV_D = true && that.isSetVNOV_D();
    if (this_present_VNOV_D || that_present_VNOV_D) {
      if (!(this_present_VNOV_D && that_present_VNOV_D))
        return false;
      if (this.VNOV_D != that.VNOV_D)
        return false;
    }

    boolean this_present_spokesman = true && this.isSetSpokesman();
    boolean that_present_spokesman = true && that.isSetSpokesman();
    if (this_present_spokesman || that_present_spokesman) {
      if (!(this_present_spokesman && that_present_spokesman))
        return false;
      if (!this.spokesman.equals(that.spokesman))
        return false;
    }

    boolean this_present_SEND = true && this.isSetSEND();
    boolean that_present_SEND = true && that.isSetSEND();
    if (this_present_SEND || that_present_SEND) {
      if (!(this_present_SEND && that_present_SEND))
        return false;
      if (this.SEND != that.SEND)
        return false;
    }

    boolean this_present_ERROR = true && this.isSetERROR();
    boolean that_present_ERROR = true && that.isSetERROR();
    if (this_present_ERROR || that_present_ERROR) {
      if (!(this_present_ERROR && that_present_ERROR))
        return false;
      if (!this.ERROR.equals(that.ERROR))
        return false;
    }

    boolean this_present_ID_MIS = true && this.isSetID_MIS();
    boolean that_present_ID_MIS = true && that.isSetID_MIS();
    if (this_present_ID_MIS || that_present_ID_MIS) {
      if (!(this_present_ID_MIS && that_present_ID_MIS))
        return false;
      if (!this.ID_MIS.equals(that.ID_MIS))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ID_PATIENT = true && (isSetID_PATIENT());
    list.add(present_ID_PATIENT);
    if (present_ID_PATIENT)
      list.add(ID_PATIENT);

    boolean present_SURNAME = true && (isSetSURNAME());
    list.add(present_SURNAME);
    if (present_SURNAME)
      list.add(SURNAME);

    boolean present_NAME = true && (isSetNAME());
    list.add(present_NAME);
    if (present_NAME)
      list.add(NAME);

    boolean present_S_NAME = true && (isSetS_NAME());
    list.add(present_S_NAME);
    if (present_S_NAME)
      list.add(S_NAME);

    boolean present_BIRTHDAY = true;
    list.add(present_BIRTHDAY);
    if (present_BIRTHDAY)
      list.add(BIRTHDAY);

    boolean present_SEX = true;
    list.add(present_SEX);
    if (present_SEX)
      list.add(SEX);

    boolean present_ID_PAT_CAT = true;
    list.add(present_ID_PAT_CAT);
    if (present_ID_PAT_CAT)
      list.add(ID_PAT_CAT);

    boolean present_DOC_TYPE = true && (isSetDOC_TYPE());
    list.add(present_DOC_TYPE);
    if (present_DOC_TYPE)
      list.add(DOC_TYPE);

    boolean present_SER_L = true && (isSetSER_L());
    list.add(present_SER_L);
    if (present_SER_L)
      list.add(SER_L);

    boolean present_SER_R = true && (isSetSER_R());
    list.add(present_SER_R);
    if (present_SER_R)
      list.add(SER_R);

    boolean present_DOC_Numeric = true && (isSetDOC_Numeric());
    list.add(present_DOC_Numeric);
    if (present_DOC_Numeric)
      list.add(DOC_Numeric);

    boolean present_SNILS = true && (isSetSNILS());
    list.add(present_SNILS);
    if (present_SNILS)
      list.add(SNILS);

    boolean present_C_OKSM = true && (isSetC_OKSM());
    list.add(present_C_OKSM);
    if (present_C_OKSM)
      list.add(C_OKSM);

    boolean present_IS_SMP = true && (isSetIS_SMP());
    list.add(present_IS_SMP);
    if (present_IS_SMP)
      list.add(IS_SMP);

    boolean present_POLIS_TYPE = true && (isSetPOLIS_TYPE());
    list.add(present_POLIS_TYPE);
    if (present_POLIS_TYPE)
      list.add(POLIS_TYPE);

    boolean present_POLIS_S = true && (isSetPOLIS_S());
    list.add(present_POLIS_S);
    if (present_POLIS_S)
      list.add(POLIS_S);

    boolean present_POLIS_N = true && (isSetPOLIS_N());
    list.add(present_POLIS_N);
    if (present_POLIS_N)
      list.add(POLIS_N);

    boolean present_ID_SMO = true && (isSetID_SMO());
    list.add(present_ID_SMO);
    if (present_ID_SMO)
      list.add(ID_SMO);

    boolean present_POLIS_BD = true && (isSetPOLIS_BD());
    list.add(present_POLIS_BD);
    if (present_POLIS_BD)
      list.add(POLIS_BD);

    boolean present_POLIS_ED = true && (isSetPOLIS_ED());
    list.add(present_POLIS_ED);
    if (present_POLIS_ED)
      list.add(POLIS_ED);

    boolean present_ID_SMO_REG = true && (isSetID_SMO_REG());
    list.add(present_ID_SMO_REG);
    if (present_ID_SMO_REG)
      list.add(ID_SMO_REG);

    boolean present_registrationAddress = true && (isSetRegistrationAddress());
    list.add(present_registrationAddress);
    if (present_registrationAddress)
      list.add(registrationAddress);

    boolean present_livingAddress = true && (isSetLivingAddress());
    list.add(present_livingAddress);
    if (present_livingAddress)
      list.add(livingAddress);

    boolean present_PLACE_WORK = true && (isSetPLACE_WORK());
    list.add(present_PLACE_WORK);
    if (present_PLACE_WORK)
      list.add(PLACE_WORK);

    boolean present_ADDR_WORK = true && (isSetADDR_WORK());
    list.add(present_ADDR_WORK);
    if (present_ADDR_WORK)
      list.add(ADDR_WORK);

    boolean present_ADDR_PLACE = true && (isSetADDR_PLACE());
    list.add(present_ADDR_PLACE);
    if (present_ADDR_PLACE)
      list.add(ADDR_PLACE);

    boolean present_REMARK = true && (isSetREMARK());
    list.add(present_REMARK);
    if (present_REMARK)
      list.add(REMARK);

    boolean present_B_PLACE = true && (isSetB_PLACE());
    list.add(present_B_PLACE);
    if (present_B_PLACE)
      list.add(B_PLACE);

    boolean present_VNOV_D = true && (isSetVNOV_D());
    list.add(present_VNOV_D);
    if (present_VNOV_D)
      list.add(VNOV_D);

    boolean present_spokesman = true && (isSetSpokesman());
    list.add(present_spokesman);
    if (present_spokesman)
      list.add(spokesman);

    boolean present_SEND = true && (isSetSEND());
    list.add(present_SEND);
    if (present_SEND)
      list.add(SEND);

    boolean present_ERROR = true && (isSetERROR());
    list.add(present_ERROR);
    if (present_ERROR)
      list.add(ERROR);

    boolean present_ID_MIS = true && (isSetID_MIS());
    list.add(present_ID_MIS);
    if (present_ID_MIS)
      list.add(ID_MIS);

    return list.hashCode();
  }

  @Override
  public int compareTo(PatientEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetID_PATIENT()).compareTo(other.isSetID_PATIENT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_PATIENT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_PATIENT, other.ID_PATIENT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSURNAME()).compareTo(other.isSetSURNAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSURNAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SURNAME, other.SURNAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNAME()).compareTo(other.isSetNAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NAME, other.NAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_NAME()).compareTo(other.isSetS_NAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_NAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.S_NAME, other.S_NAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBIRTHDAY()).compareTo(other.isSetBIRTHDAY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBIRTHDAY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BIRTHDAY, other.BIRTHDAY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSEX()).compareTo(other.isSetSEX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSEX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SEX, other.SEX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_PAT_CAT()).compareTo(other.isSetID_PAT_CAT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_PAT_CAT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_PAT_CAT, other.ID_PAT_CAT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOC_TYPE()).compareTo(other.isSetDOC_TYPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOC_TYPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOC_TYPE, other.DOC_TYPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSER_L()).compareTo(other.isSetSER_L());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSER_L()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SER_L, other.SER_L);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSER_R()).compareTo(other.isSetSER_R());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSER_R()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SER_R, other.SER_R);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOC_Numeric()).compareTo(other.isSetDOC_Numeric());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOC_Numeric()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOC_Numeric, other.DOC_Numeric);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSNILS()).compareTo(other.isSetSNILS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSNILS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SNILS, other.SNILS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetC_OKSM()).compareTo(other.isSetC_OKSM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC_OKSM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.C_OKSM, other.C_OKSM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIS_SMP()).compareTo(other.isSetIS_SMP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIS_SMP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IS_SMP, other.IS_SMP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOLIS_TYPE()).compareTo(other.isSetPOLIS_TYPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOLIS_TYPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POLIS_TYPE, other.POLIS_TYPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOLIS_S()).compareTo(other.isSetPOLIS_S());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOLIS_S()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POLIS_S, other.POLIS_S);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOLIS_N()).compareTo(other.isSetPOLIS_N());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOLIS_N()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POLIS_N, other.POLIS_N);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_SMO()).compareTo(other.isSetID_SMO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_SMO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_SMO, other.ID_SMO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOLIS_BD()).compareTo(other.isSetPOLIS_BD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOLIS_BD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POLIS_BD, other.POLIS_BD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOLIS_ED()).compareTo(other.isSetPOLIS_ED());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOLIS_ED()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POLIS_ED, other.POLIS_ED);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_SMO_REG()).compareTo(other.isSetID_SMO_REG());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_SMO_REG()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_SMO_REG, other.ID_SMO_REG);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationAddress()).compareTo(other.isSetRegistrationAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationAddress, other.registrationAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLivingAddress()).compareTo(other.isSetLivingAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLivingAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.livingAddress, other.livingAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPLACE_WORK()).compareTo(other.isSetPLACE_WORK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPLACE_WORK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PLACE_WORK, other.PLACE_WORK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetADDR_WORK()).compareTo(other.isSetADDR_WORK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetADDR_WORK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ADDR_WORK, other.ADDR_WORK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetADDR_PLACE()).compareTo(other.isSetADDR_PLACE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetADDR_PLACE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ADDR_PLACE, other.ADDR_PLACE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetREMARK()).compareTo(other.isSetREMARK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetREMARK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.REMARK, other.REMARK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB_PLACE()).compareTo(other.isSetB_PLACE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB_PLACE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.B_PLACE, other.B_PLACE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVNOV_D()).compareTo(other.isSetVNOV_D());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVNOV_D()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VNOV_D, other.VNOV_D);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpokesman()).compareTo(other.isSetSpokesman());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpokesman()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spokesman, other.spokesman);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSEND()).compareTo(other.isSetSEND());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSEND()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SEND, other.SEND);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetERROR()).compareTo(other.isSetERROR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetERROR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ERROR, other.ERROR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_MIS()).compareTo(other.isSetID_MIS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_MIS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_MIS, other.ID_MIS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PatientEntry(");
    boolean first = true;

    sb.append("ID_PATIENT:");
    if (this.ID_PATIENT == null) {
      sb.append("null");
    } else {
      sb.append(this.ID_PATIENT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SURNAME:");
    if (this.SURNAME == null) {
      sb.append("null");
    } else {
      sb.append(this.SURNAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NAME:");
    if (this.NAME == null) {
      sb.append("null");
    } else {
      sb.append(this.NAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("S_NAME:");
    if (this.S_NAME == null) {
      sb.append("null");
    } else {
      sb.append(this.S_NAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BIRTHDAY:");
    sb.append(this.BIRTHDAY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SEX:");
    sb.append(this.SEX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID_PAT_CAT:");
    sb.append(this.ID_PAT_CAT);
    first = false;
    if (isSetDOC_TYPE()) {
      if (!first) sb.append(", ");
      sb.append("DOC_TYPE:");
      if (this.DOC_TYPE == null) {
        sb.append("null");
      } else {
        sb.append(this.DOC_TYPE);
      }
      first = false;
    }
    if (isSetSER_L()) {
      if (!first) sb.append(", ");
      sb.append("SER_L:");
      if (this.SER_L == null) {
        sb.append("null");
      } else {
        sb.append(this.SER_L);
      }
      first = false;
    }
    if (isSetSER_R()) {
      if (!first) sb.append(", ");
      sb.append("SER_R:");
      if (this.SER_R == null) {
        sb.append("null");
      } else {
        sb.append(this.SER_R);
      }
      first = false;
    }
    if (isSetDOC_Numeric()) {
      if (!first) sb.append(", ");
      sb.append("DOC_Numeric:");
      if (this.DOC_Numeric == null) {
        sb.append("null");
      } else {
        sb.append(this.DOC_Numeric);
      }
      first = false;
    }
    if (isSetSNILS()) {
      if (!first) sb.append(", ");
      sb.append("SNILS:");
      if (this.SNILS == null) {
        sb.append("null");
      } else {
        sb.append(this.SNILS);
      }
      first = false;
    }
    if (isSetC_OKSM()) {
      if (!first) sb.append(", ");
      sb.append("C_OKSM:");
      if (this.C_OKSM == null) {
        sb.append("null");
      } else {
        sb.append(this.C_OKSM);
      }
      first = false;
    }
    if (isSetIS_SMP()) {
      if (!first) sb.append(", ");
      sb.append("IS_SMP:");
      sb.append(this.IS_SMP);
      first = false;
    }
    if (isSetPOLIS_TYPE()) {
      if (!first) sb.append(", ");
      sb.append("POLIS_TYPE:");
      if (this.POLIS_TYPE == null) {
        sb.append("null");
      } else {
        sb.append(this.POLIS_TYPE);
      }
      first = false;
    }
    if (isSetPOLIS_S()) {
      if (!first) sb.append(", ");
      sb.append("POLIS_S:");
      if (this.POLIS_S == null) {
        sb.append("null");
      } else {
        sb.append(this.POLIS_S);
      }
      first = false;
    }
    if (isSetPOLIS_N()) {
      if (!first) sb.append(", ");
      sb.append("POLIS_N:");
      if (this.POLIS_N == null) {
        sb.append("null");
      } else {
        sb.append(this.POLIS_N);
      }
      first = false;
    }
    if (isSetID_SMO()) {
      if (!first) sb.append(", ");
      sb.append("ID_SMO:");
      if (this.ID_SMO == null) {
        sb.append("null");
      } else {
        sb.append(this.ID_SMO);
      }
      first = false;
    }
    if (isSetPOLIS_BD()) {
      if (!first) sb.append(", ");
      sb.append("POLIS_BD:");
      sb.append(this.POLIS_BD);
      first = false;
    }
    if (isSetPOLIS_ED()) {
      if (!first) sb.append(", ");
      sb.append("POLIS_ED:");
      sb.append(this.POLIS_ED);
      first = false;
    }
    if (isSetID_SMO_REG()) {
      if (!first) sb.append(", ");
      sb.append("ID_SMO_REG:");
      if (this.ID_SMO_REG == null) {
        sb.append("null");
      } else {
        sb.append(this.ID_SMO_REG);
      }
      first = false;
    }
    if (isSetRegistrationAddress()) {
      if (!first) sb.append(", ");
      sb.append("registrationAddress:");
      if (this.registrationAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.registrationAddress);
      }
      first = false;
    }
    if (isSetLivingAddress()) {
      if (!first) sb.append(", ");
      sb.append("livingAddress:");
      if (this.livingAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.livingAddress);
      }
      first = false;
    }
    if (isSetPLACE_WORK()) {
      if (!first) sb.append(", ");
      sb.append("PLACE_WORK:");
      if (this.PLACE_WORK == null) {
        sb.append("null");
      } else {
        sb.append(this.PLACE_WORK);
      }
      first = false;
    }
    if (isSetADDR_WORK()) {
      if (!first) sb.append(", ");
      sb.append("ADDR_WORK:");
      if (this.ADDR_WORK == null) {
        sb.append("null");
      } else {
        sb.append(this.ADDR_WORK);
      }
      first = false;
    }
    if (isSetADDR_PLACE()) {
      if (!first) sb.append(", ");
      sb.append("ADDR_PLACE:");
      if (this.ADDR_PLACE == null) {
        sb.append("null");
      } else {
        sb.append(this.ADDR_PLACE);
      }
      first = false;
    }
    if (isSetREMARK()) {
      if (!first) sb.append(", ");
      sb.append("REMARK:");
      if (this.REMARK == null) {
        sb.append("null");
      } else {
        sb.append(this.REMARK);
      }
      first = false;
    }
    if (isSetB_PLACE()) {
      if (!first) sb.append(", ");
      sb.append("B_PLACE:");
      if (this.B_PLACE == null) {
        sb.append("null");
      } else {
        sb.append(this.B_PLACE);
      }
      first = false;
    }
    if (isSetVNOV_D()) {
      if (!first) sb.append(", ");
      sb.append("VNOV_D:");
      sb.append(this.VNOV_D);
      first = false;
    }
    if (isSetSpokesman()) {
      if (!first) sb.append(", ");
      sb.append("spokesman:");
      if (this.spokesman == null) {
        sb.append("null");
      } else {
        sb.append(this.spokesman);
      }
      first = false;
    }
    if (isSetSEND()) {
      if (!first) sb.append(", ");
      sb.append("SEND:");
      sb.append(this.SEND);
      first = false;
    }
    if (isSetERROR()) {
      if (!first) sb.append(", ");
      sb.append("ERROR:");
      if (this.ERROR == null) {
        sb.append("null");
      } else {
        sb.append(this.ERROR);
      }
      first = false;
    }
    if (isSetID_MIS()) {
      if (!first) sb.append(", ");
      sb.append("ID_MIS:");
      if (this.ID_MIS == null) {
        sb.append("null");
      } else {
        sb.append(this.ID_MIS);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ID_PATIENT == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_PATIENT' was not present! Struct: " + toString());
    }
    if (SURNAME == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SURNAME' was not present! Struct: " + toString());
    }
    if (NAME == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NAME' was not present! Struct: " + toString());
    }
    if (S_NAME == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'S_NAME' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'BIRTHDAY' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'SEX' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ID_PAT_CAT' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (registrationAddress != null) {
      registrationAddress.validate();
    }
    if (livingAddress != null) {
      livingAddress.validate();
    }
    if (spokesman != null) {
      spokesman.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientEntryStandardSchemeFactory implements SchemeFactory {
    public PatientEntryStandardScheme getScheme() {
      return new PatientEntryStandardScheme();
    }
  }

  private static class PatientEntryStandardScheme extends StandardScheme<PatientEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PatientEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID__PATIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID_PATIENT = iprot.readString();
              struct.setID_PATIENTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SURNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SURNAME = iprot.readString();
              struct.setSURNAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NAME = iprot.readString();
              struct.setNAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // S__NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.S_NAME = iprot.readString();
              struct.setS_NAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.BIRTHDAY = iprot.readI64();
              struct.setBIRTHDAYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.SEX = iprot.readI16();
              struct.setSEXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ID__PAT__CAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ID_PAT_CAT = iprot.readI16();
              struct.setID_PAT_CATIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOC__TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOC_TYPE = iprot.readString();
              struct.setDOC_TYPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SER__L
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SER_L = iprot.readString();
              struct.setSER_LIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SER__R
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SER_R = iprot.readString();
              struct.setSER_RIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DOC__NUMERIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOC_Numeric = iprot.readString();
              struct.setDOC_NumericIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SNILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SNILS = iprot.readString();
              struct.setSNILSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // C__OKSM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.C_OKSM = iprot.readString();
              struct.setC_OKSMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS__SMP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IS_SMP = iprot.readBool();
              struct.setIS_SMPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // POLIS__TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.POLIS_TYPE = iprot.readString();
              struct.setPOLIS_TYPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // POLIS__S
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.POLIS_S = iprot.readString();
              struct.setPOLIS_SIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // POLIS__N
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.POLIS_N = iprot.readString();
              struct.setPOLIS_NIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ID__SMO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID_SMO = iprot.readString();
              struct.setID_SMOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // POLIS__BD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.POLIS_BD = iprot.readI64();
              struct.setPOLIS_BDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // POLIS__ED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.POLIS_ED = iprot.readI64();
              struct.setPOLIS_EDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ID__SMO__REG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID_SMO_REG = iprot.readString();
              struct.setID_SMO_REGIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REGISTRATION_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.registrationAddress = new PatientAddress();
              struct.registrationAddress.read(iprot);
              struct.setRegistrationAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // LIVING_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.livingAddress = new PatientAddress();
              struct.livingAddress.read(iprot);
              struct.setLivingAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PLACE__WORK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PLACE_WORK = iprot.readString();
              struct.setPLACE_WORKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ADDR__WORK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ADDR_WORK = iprot.readString();
              struct.setADDR_WORKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ADDR__PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ADDR_PLACE = iprot.readString();
              struct.setADDR_PLACEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.REMARK = iprot.readString();
              struct.setREMARKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // B__PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.B_PLACE = iprot.readString();
              struct.setB_PLACEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // VNOV__D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.VNOV_D = iprot.readI32();
              struct.setVNOV_DIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SPOKESMAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spokesman = new Spokesman();
              struct.spokesman.read(iprot);
              struct.setSpokesmanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // SEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.SEND = iprot.readBool();
              struct.setSENDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ERROR = iprot.readString();
              struct.setERRORIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ID__MIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID_MIS = iprot.readString();
              struct.setID_MISIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBIRTHDAY()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'BIRTHDAY' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSEX()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SEX' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetID_PAT_CAT()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_PAT_CAT' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PatientEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ID_PATIENT != null) {
        oprot.writeFieldBegin(ID__PATIENT_FIELD_DESC);
        oprot.writeString(struct.ID_PATIENT);
        oprot.writeFieldEnd();
      }
      if (struct.SURNAME != null) {
        oprot.writeFieldBegin(SURNAME_FIELD_DESC);
        oprot.writeString(struct.SURNAME);
        oprot.writeFieldEnd();
      }
      if (struct.NAME != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.NAME);
        oprot.writeFieldEnd();
      }
      if (struct.S_NAME != null) {
        oprot.writeFieldBegin(S__NAME_FIELD_DESC);
        oprot.writeString(struct.S_NAME);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
      oprot.writeI64(struct.BIRTHDAY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI16(struct.SEX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID__PAT__CAT_FIELD_DESC);
      oprot.writeI16(struct.ID_PAT_CAT);
      oprot.writeFieldEnd();
      if (struct.DOC_TYPE != null) {
        if (struct.isSetDOC_TYPE()) {
          oprot.writeFieldBegin(DOC__TYPE_FIELD_DESC);
          oprot.writeString(struct.DOC_TYPE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SER_L != null) {
        if (struct.isSetSER_L()) {
          oprot.writeFieldBegin(SER__L_FIELD_DESC);
          oprot.writeString(struct.SER_L);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SER_R != null) {
        if (struct.isSetSER_R()) {
          oprot.writeFieldBegin(SER__R_FIELD_DESC);
          oprot.writeString(struct.SER_R);
          oprot.writeFieldEnd();
        }
      }
      if (struct.DOC_Numeric != null) {
        if (struct.isSetDOC_Numeric()) {
          oprot.writeFieldBegin(DOC__NUMERIC_FIELD_DESC);
          oprot.writeString(struct.DOC_Numeric);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SNILS != null) {
        if (struct.isSetSNILS()) {
          oprot.writeFieldBegin(SNILS_FIELD_DESC);
          oprot.writeString(struct.SNILS);
          oprot.writeFieldEnd();
        }
      }
      if (struct.C_OKSM != null) {
        if (struct.isSetC_OKSM()) {
          oprot.writeFieldBegin(C__OKSM_FIELD_DESC);
          oprot.writeString(struct.C_OKSM);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIS_SMP()) {
        oprot.writeFieldBegin(IS__SMP_FIELD_DESC);
        oprot.writeBool(struct.IS_SMP);
        oprot.writeFieldEnd();
      }
      if (struct.POLIS_TYPE != null) {
        if (struct.isSetPOLIS_TYPE()) {
          oprot.writeFieldBegin(POLIS__TYPE_FIELD_DESC);
          oprot.writeString(struct.POLIS_TYPE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.POLIS_S != null) {
        if (struct.isSetPOLIS_S()) {
          oprot.writeFieldBegin(POLIS__S_FIELD_DESC);
          oprot.writeString(struct.POLIS_S);
          oprot.writeFieldEnd();
        }
      }
      if (struct.POLIS_N != null) {
        if (struct.isSetPOLIS_N()) {
          oprot.writeFieldBegin(POLIS__N_FIELD_DESC);
          oprot.writeString(struct.POLIS_N);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ID_SMO != null) {
        if (struct.isSetID_SMO()) {
          oprot.writeFieldBegin(ID__SMO_FIELD_DESC);
          oprot.writeString(struct.ID_SMO);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPOLIS_BD()) {
        oprot.writeFieldBegin(POLIS__BD_FIELD_DESC);
        oprot.writeI64(struct.POLIS_BD);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPOLIS_ED()) {
        oprot.writeFieldBegin(POLIS__ED_FIELD_DESC);
        oprot.writeI64(struct.POLIS_ED);
        oprot.writeFieldEnd();
      }
      if (struct.ID_SMO_REG != null) {
        if (struct.isSetID_SMO_REG()) {
          oprot.writeFieldBegin(ID__SMO__REG_FIELD_DESC);
          oprot.writeString(struct.ID_SMO_REG);
          oprot.writeFieldEnd();
        }
      }
      if (struct.registrationAddress != null) {
        if (struct.isSetRegistrationAddress()) {
          oprot.writeFieldBegin(REGISTRATION_ADDRESS_FIELD_DESC);
          struct.registrationAddress.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.livingAddress != null) {
        if (struct.isSetLivingAddress()) {
          oprot.writeFieldBegin(LIVING_ADDRESS_FIELD_DESC);
          struct.livingAddress.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.PLACE_WORK != null) {
        if (struct.isSetPLACE_WORK()) {
          oprot.writeFieldBegin(PLACE__WORK_FIELD_DESC);
          oprot.writeString(struct.PLACE_WORK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ADDR_WORK != null) {
        if (struct.isSetADDR_WORK()) {
          oprot.writeFieldBegin(ADDR__WORK_FIELD_DESC);
          oprot.writeString(struct.ADDR_WORK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ADDR_PLACE != null) {
        if (struct.isSetADDR_PLACE()) {
          oprot.writeFieldBegin(ADDR__PLACE_FIELD_DESC);
          oprot.writeString(struct.ADDR_PLACE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.REMARK != null) {
        if (struct.isSetREMARK()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.REMARK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.B_PLACE != null) {
        if (struct.isSetB_PLACE()) {
          oprot.writeFieldBegin(B__PLACE_FIELD_DESC);
          oprot.writeString(struct.B_PLACE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVNOV_D()) {
        oprot.writeFieldBegin(VNOV__D_FIELD_DESC);
        oprot.writeI32(struct.VNOV_D);
        oprot.writeFieldEnd();
      }
      if (struct.spokesman != null) {
        if (struct.isSetSpokesman()) {
          oprot.writeFieldBegin(SPOKESMAN_FIELD_DESC);
          struct.spokesman.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSEND()) {
        oprot.writeFieldBegin(SEND_FIELD_DESC);
        oprot.writeBool(struct.SEND);
        oprot.writeFieldEnd();
      }
      if (struct.ERROR != null) {
        if (struct.isSetERROR()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          oprot.writeString(struct.ERROR);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ID_MIS != null) {
        if (struct.isSetID_MIS()) {
          oprot.writeFieldBegin(ID__MIS_FIELD_DESC);
          oprot.writeString(struct.ID_MIS);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientEntryTupleSchemeFactory implements SchemeFactory {
    public PatientEntryTupleScheme getScheme() {
      return new PatientEntryTupleScheme();
    }
  }

  private static class PatientEntryTupleScheme extends TupleScheme<PatientEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PatientEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.ID_PATIENT);
      oprot.writeString(struct.SURNAME);
      oprot.writeString(struct.NAME);
      oprot.writeString(struct.S_NAME);
      oprot.writeI64(struct.BIRTHDAY);
      oprot.writeI16(struct.SEX);
      oprot.writeI16(struct.ID_PAT_CAT);
      BitSet optionals = new BitSet();
      if (struct.isSetDOC_TYPE()) {
        optionals.set(0);
      }
      if (struct.isSetSER_L()) {
        optionals.set(1);
      }
      if (struct.isSetSER_R()) {
        optionals.set(2);
      }
      if (struct.isSetDOC_Numeric()) {
        optionals.set(3);
      }
      if (struct.isSetSNILS()) {
        optionals.set(4);
      }
      if (struct.isSetC_OKSM()) {
        optionals.set(5);
      }
      if (struct.isSetIS_SMP()) {
        optionals.set(6);
      }
      if (struct.isSetPOLIS_TYPE()) {
        optionals.set(7);
      }
      if (struct.isSetPOLIS_S()) {
        optionals.set(8);
      }
      if (struct.isSetPOLIS_N()) {
        optionals.set(9);
      }
      if (struct.isSetID_SMO()) {
        optionals.set(10);
      }
      if (struct.isSetPOLIS_BD()) {
        optionals.set(11);
      }
      if (struct.isSetPOLIS_ED()) {
        optionals.set(12);
      }
      if (struct.isSetID_SMO_REG()) {
        optionals.set(13);
      }
      if (struct.isSetRegistrationAddress()) {
        optionals.set(14);
      }
      if (struct.isSetLivingAddress()) {
        optionals.set(15);
      }
      if (struct.isSetPLACE_WORK()) {
        optionals.set(16);
      }
      if (struct.isSetADDR_WORK()) {
        optionals.set(17);
      }
      if (struct.isSetADDR_PLACE()) {
        optionals.set(18);
      }
      if (struct.isSetREMARK()) {
        optionals.set(19);
      }
      if (struct.isSetB_PLACE()) {
        optionals.set(20);
      }
      if (struct.isSetVNOV_D()) {
        optionals.set(21);
      }
      if (struct.isSetSpokesman()) {
        optionals.set(22);
      }
      if (struct.isSetSEND()) {
        optionals.set(23);
      }
      if (struct.isSetERROR()) {
        optionals.set(24);
      }
      if (struct.isSetID_MIS()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetDOC_TYPE()) {
        oprot.writeString(struct.DOC_TYPE);
      }
      if (struct.isSetSER_L()) {
        oprot.writeString(struct.SER_L);
      }
      if (struct.isSetSER_R()) {
        oprot.writeString(struct.SER_R);
      }
      if (struct.isSetDOC_Numeric()) {
        oprot.writeString(struct.DOC_Numeric);
      }
      if (struct.isSetSNILS()) {
        oprot.writeString(struct.SNILS);
      }
      if (struct.isSetC_OKSM()) {
        oprot.writeString(struct.C_OKSM);
      }
      if (struct.isSetIS_SMP()) {
        oprot.writeBool(struct.IS_SMP);
      }
      if (struct.isSetPOLIS_TYPE()) {
        oprot.writeString(struct.POLIS_TYPE);
      }
      if (struct.isSetPOLIS_S()) {
        oprot.writeString(struct.POLIS_S);
      }
      if (struct.isSetPOLIS_N()) {
        oprot.writeString(struct.POLIS_N);
      }
      if (struct.isSetID_SMO()) {
        oprot.writeString(struct.ID_SMO);
      }
      if (struct.isSetPOLIS_BD()) {
        oprot.writeI64(struct.POLIS_BD);
      }
      if (struct.isSetPOLIS_ED()) {
        oprot.writeI64(struct.POLIS_ED);
      }
      if (struct.isSetID_SMO_REG()) {
        oprot.writeString(struct.ID_SMO_REG);
      }
      if (struct.isSetRegistrationAddress()) {
        struct.registrationAddress.write(oprot);
      }
      if (struct.isSetLivingAddress()) {
        struct.livingAddress.write(oprot);
      }
      if (struct.isSetPLACE_WORK()) {
        oprot.writeString(struct.PLACE_WORK);
      }
      if (struct.isSetADDR_WORK()) {
        oprot.writeString(struct.ADDR_WORK);
      }
      if (struct.isSetADDR_PLACE()) {
        oprot.writeString(struct.ADDR_PLACE);
      }
      if (struct.isSetREMARK()) {
        oprot.writeString(struct.REMARK);
      }
      if (struct.isSetB_PLACE()) {
        oprot.writeString(struct.B_PLACE);
      }
      if (struct.isSetVNOV_D()) {
        oprot.writeI32(struct.VNOV_D);
      }
      if (struct.isSetSpokesman()) {
        struct.spokesman.write(oprot);
      }
      if (struct.isSetSEND()) {
        oprot.writeBool(struct.SEND);
      }
      if (struct.isSetERROR()) {
        oprot.writeString(struct.ERROR);
      }
      if (struct.isSetID_MIS()) {
        oprot.writeString(struct.ID_MIS);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PatientEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ID_PATIENT = iprot.readString();
      struct.setID_PATIENTIsSet(true);
      struct.SURNAME = iprot.readString();
      struct.setSURNAMEIsSet(true);
      struct.NAME = iprot.readString();
      struct.setNAMEIsSet(true);
      struct.S_NAME = iprot.readString();
      struct.setS_NAMEIsSet(true);
      struct.BIRTHDAY = iprot.readI64();
      struct.setBIRTHDAYIsSet(true);
      struct.SEX = iprot.readI16();
      struct.setSEXIsSet(true);
      struct.ID_PAT_CAT = iprot.readI16();
      struct.setID_PAT_CATIsSet(true);
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.DOC_TYPE = iprot.readString();
        struct.setDOC_TYPEIsSet(true);
      }
      if (incoming.get(1)) {
        struct.SER_L = iprot.readString();
        struct.setSER_LIsSet(true);
      }
      if (incoming.get(2)) {
        struct.SER_R = iprot.readString();
        struct.setSER_RIsSet(true);
      }
      if (incoming.get(3)) {
        struct.DOC_Numeric = iprot.readString();
        struct.setDOC_NumericIsSet(true);
      }
      if (incoming.get(4)) {
        struct.SNILS = iprot.readString();
        struct.setSNILSIsSet(true);
      }
      if (incoming.get(5)) {
        struct.C_OKSM = iprot.readString();
        struct.setC_OKSMIsSet(true);
      }
      if (incoming.get(6)) {
        struct.IS_SMP = iprot.readBool();
        struct.setIS_SMPIsSet(true);
      }
      if (incoming.get(7)) {
        struct.POLIS_TYPE = iprot.readString();
        struct.setPOLIS_TYPEIsSet(true);
      }
      if (incoming.get(8)) {
        struct.POLIS_S = iprot.readString();
        struct.setPOLIS_SIsSet(true);
      }
      if (incoming.get(9)) {
        struct.POLIS_N = iprot.readString();
        struct.setPOLIS_NIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ID_SMO = iprot.readString();
        struct.setID_SMOIsSet(true);
      }
      if (incoming.get(11)) {
        struct.POLIS_BD = iprot.readI64();
        struct.setPOLIS_BDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.POLIS_ED = iprot.readI64();
        struct.setPOLIS_EDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ID_SMO_REG = iprot.readString();
        struct.setID_SMO_REGIsSet(true);
      }
      if (incoming.get(14)) {
        struct.registrationAddress = new PatientAddress();
        struct.registrationAddress.read(iprot);
        struct.setRegistrationAddressIsSet(true);
      }
      if (incoming.get(15)) {
        struct.livingAddress = new PatientAddress();
        struct.livingAddress.read(iprot);
        struct.setLivingAddressIsSet(true);
      }
      if (incoming.get(16)) {
        struct.PLACE_WORK = iprot.readString();
        struct.setPLACE_WORKIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ADDR_WORK = iprot.readString();
        struct.setADDR_WORKIsSet(true);
      }
      if (incoming.get(18)) {
        struct.ADDR_PLACE = iprot.readString();
        struct.setADDR_PLACEIsSet(true);
      }
      if (incoming.get(19)) {
        struct.REMARK = iprot.readString();
        struct.setREMARKIsSet(true);
      }
      if (incoming.get(20)) {
        struct.B_PLACE = iprot.readString();
        struct.setB_PLACEIsSet(true);
      }
      if (incoming.get(21)) {
        struct.VNOV_D = iprot.readI32();
        struct.setVNOV_DIsSet(true);
      }
      if (incoming.get(22)) {
        struct.spokesman = new Spokesman();
        struct.spokesman.read(iprot);
        struct.setSpokesmanIsSet(true);
      }
      if (incoming.get(23)) {
        struct.SEND = iprot.readBool();
        struct.setSENDIsSet(true);
      }
      if (incoming.get(24)) {
        struct.ERROR = iprot.readString();
        struct.setERRORIsSet(true);
      }
      if (incoming.get(25)) {
        struct.ID_MIS = iprot.readString();
        struct.setID_MISIsSet(true);
      }
    }
  }

}

