/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.hitsl.tmis.tfoms.spb.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-30")
public class Spokesman implements org.apache.thrift.TBase<Spokesman, Spokesman._Fields>, java.io.Serializable, Cloneable, Comparable<Spokesman> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Spokesman");

  private static final org.apache.thrift.protocol.TField ID__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_TYPE", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SURNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("SURNAME", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("NAME", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField S__NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("S_NAME", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("BIRTHDAY", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("SEX", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField DOC__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("DOC_TYPE", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SER__L_FIELD_DESC = new org.apache.thrift.protocol.TField("SER_L", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SER__R_FIELD_DESC = new org.apache.thrift.protocol.TField("SER_R", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DOC__NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("DOC_NUM", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField B__PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("B_PLACE", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpokesmanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpokesmanTupleSchemeFactory());
  }

  public int ID_TYPE; // required
  public String SURNAME; // required
  public String NAME; // required
  public String S_NAME; // required
  public long BIRTHDAY; // required
  public short SEX; // required
  public String DOC_TYPE; // optional
  public String SER_L; // optional
  public String SER_R; // optional
  public String DOC_NUM; // optional
  public String B_PLACE; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID__TYPE((short)1, "ID_TYPE"),
    SURNAME((short)2, "SURNAME"),
    NAME((short)3, "NAME"),
    S__NAME((short)4, "S_NAME"),
    BIRTHDAY((short)5, "BIRTHDAY"),
    SEX((short)6, "SEX"),
    DOC__TYPE((short)7, "DOC_TYPE"),
    SER__L((short)8, "SER_L"),
    SER__R((short)9, "SER_R"),
    DOC__NUM((short)10, "DOC_NUM"),
    B__PLACE((short)11, "B_PLACE");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID__TYPE
          return ID__TYPE;
        case 2: // SURNAME
          return SURNAME;
        case 3: // NAME
          return NAME;
        case 4: // S__NAME
          return S__NAME;
        case 5: // BIRTHDAY
          return BIRTHDAY;
        case 6: // SEX
          return SEX;
        case 7: // DOC__TYPE
          return DOC__TYPE;
        case 8: // SER__L
          return SER__L;
        case 9: // SER__R
          return SER__R;
        case 10: // DOC__NUM
          return DOC__NUM;
        case 11: // B__PLACE
          return B__PLACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_TYPE_ISSET_ID = 0;
  private static final int __BIRTHDAY_ISSET_ID = 1;
  private static final int __SEX_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOC__TYPE,_Fields.SER__L,_Fields.SER__R,_Fields.DOC__NUM,_Fields.B__PLACE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID__TYPE, new org.apache.thrift.meta_data.FieldMetaData("ID_TYPE", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SURNAME, new org.apache.thrift.meta_data.FieldMetaData("SURNAME", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("NAME", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S__NAME, new org.apache.thrift.meta_data.FieldMetaData("S_NAME", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("BIRTHDAY", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("SEX", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.DOC__TYPE, new org.apache.thrift.meta_data.FieldMetaData("DOC_TYPE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SER__L, new org.apache.thrift.meta_data.FieldMetaData("SER_L", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SER__R, new org.apache.thrift.meta_data.FieldMetaData("SER_R", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOC__NUM, new org.apache.thrift.meta_data.FieldMetaData("DOC_NUM", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.B__PLACE, new org.apache.thrift.meta_data.FieldMetaData("B_PLACE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Spokesman.class, metaDataMap);
  }

  public Spokesman() {
  }

  public Spokesman(
    int ID_TYPE,
    String SURNAME,
    String NAME,
    String S_NAME,
    long BIRTHDAY,
    short SEX)
  {
    this();
    this.ID_TYPE = ID_TYPE;
    setID_TYPEIsSet(true);
    this.SURNAME = SURNAME;
    this.NAME = NAME;
    this.S_NAME = S_NAME;
    this.BIRTHDAY = BIRTHDAY;
    setBIRTHDAYIsSet(true);
    this.SEX = SEX;
    setSEXIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Spokesman(Spokesman other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ID_TYPE = other.ID_TYPE;
    if (other.isSetSURNAME()) {
      this.SURNAME = other.SURNAME;
    }
    if (other.isSetNAME()) {
      this.NAME = other.NAME;
    }
    if (other.isSetS_NAME()) {
      this.S_NAME = other.S_NAME;
    }
    this.BIRTHDAY = other.BIRTHDAY;
    this.SEX = other.SEX;
    if (other.isSetDOC_TYPE()) {
      this.DOC_TYPE = other.DOC_TYPE;
    }
    if (other.isSetSER_L()) {
      this.SER_L = other.SER_L;
    }
    if (other.isSetSER_R()) {
      this.SER_R = other.SER_R;
    }
    if (other.isSetDOC_NUM()) {
      this.DOC_NUM = other.DOC_NUM;
    }
    if (other.isSetB_PLACE()) {
      this.B_PLACE = other.B_PLACE;
    }
  }

  public Spokesman deepCopy() {
    return new Spokesman(this);
  }

  @Override
  public void clear() {
    setID_TYPEIsSet(false);
    this.ID_TYPE = 0;
    this.SURNAME = null;
    this.NAME = null;
    this.S_NAME = null;
    setBIRTHDAYIsSet(false);
    this.BIRTHDAY = 0;
    setSEXIsSet(false);
    this.SEX = 0;
    this.DOC_TYPE = null;
    this.SER_L = null;
    this.SER_R = null;
    this.DOC_NUM = null;
    this.B_PLACE = null;
  }

  public int getID_TYPE() {
    return this.ID_TYPE;
  }

  public Spokesman setID_TYPE(int ID_TYPE) {
    this.ID_TYPE = ID_TYPE;
    setID_TYPEIsSet(true);
    return this;
  }

  public void unsetID_TYPE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_TYPE_ISSET_ID);
  }

  /** Returns true if field ID_TYPE is set (has been assigned a value) and false otherwise */
  public boolean isSetID_TYPE() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_TYPE_ISSET_ID);
  }

  public void setID_TYPEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_TYPE_ISSET_ID, value);
  }

  public String getSURNAME() {
    return this.SURNAME;
  }

  public Spokesman setSURNAME(String SURNAME) {
    this.SURNAME = SURNAME;
    return this;
  }

  public void unsetSURNAME() {
    this.SURNAME = null;
  }

  /** Returns true if field SURNAME is set (has been assigned a value) and false otherwise */
  public boolean isSetSURNAME() {
    return this.SURNAME != null;
  }

  public void setSURNAMEIsSet(boolean value) {
    if (!value) {
      this.SURNAME = null;
    }
  }

  public String getNAME() {
    return this.NAME;
  }

  public Spokesman setNAME(String NAME) {
    this.NAME = NAME;
    return this;
  }

  public void unsetNAME() {
    this.NAME = null;
  }

  /** Returns true if field NAME is set (has been assigned a value) and false otherwise */
  public boolean isSetNAME() {
    return this.NAME != null;
  }

  public void setNAMEIsSet(boolean value) {
    if (!value) {
      this.NAME = null;
    }
  }

  public String getS_NAME() {
    return this.S_NAME;
  }

  public Spokesman setS_NAME(String S_NAME) {
    this.S_NAME = S_NAME;
    return this;
  }

  public void unsetS_NAME() {
    this.S_NAME = null;
  }

  /** Returns true if field S_NAME is set (has been assigned a value) and false otherwise */
  public boolean isSetS_NAME() {
    return this.S_NAME != null;
  }

  public void setS_NAMEIsSet(boolean value) {
    if (!value) {
      this.S_NAME = null;
    }
  }

  public long getBIRTHDAY() {
    return this.BIRTHDAY;
  }

  public Spokesman setBIRTHDAY(long BIRTHDAY) {
    this.BIRTHDAY = BIRTHDAY;
    setBIRTHDAYIsSet(true);
    return this;
  }

  public void unsetBIRTHDAY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  /** Returns true if field BIRTHDAY is set (has been assigned a value) and false otherwise */
  public boolean isSetBIRTHDAY() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  public void setBIRTHDAYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDAY_ISSET_ID, value);
  }

  public short getSEX() {
    return this.SEX;
  }

  public Spokesman setSEX(short SEX) {
    this.SEX = SEX;
    setSEXIsSet(true);
    return this;
  }

  public void unsetSEX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field SEX is set (has been assigned a value) and false otherwise */
  public boolean isSetSEX() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSEXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getDOC_TYPE() {
    return this.DOC_TYPE;
  }

  public Spokesman setDOC_TYPE(String DOC_TYPE) {
    this.DOC_TYPE = DOC_TYPE;
    return this;
  }

  public void unsetDOC_TYPE() {
    this.DOC_TYPE = null;
  }

  /** Returns true if field DOC_TYPE is set (has been assigned a value) and false otherwise */
  public boolean isSetDOC_TYPE() {
    return this.DOC_TYPE != null;
  }

  public void setDOC_TYPEIsSet(boolean value) {
    if (!value) {
      this.DOC_TYPE = null;
    }
  }

  public String getSER_L() {
    return this.SER_L;
  }

  public Spokesman setSER_L(String SER_L) {
    this.SER_L = SER_L;
    return this;
  }

  public void unsetSER_L() {
    this.SER_L = null;
  }

  /** Returns true if field SER_L is set (has been assigned a value) and false otherwise */
  public boolean isSetSER_L() {
    return this.SER_L != null;
  }

  public void setSER_LIsSet(boolean value) {
    if (!value) {
      this.SER_L = null;
    }
  }

  public String getSER_R() {
    return this.SER_R;
  }

  public Spokesman setSER_R(String SER_R) {
    this.SER_R = SER_R;
    return this;
  }

  public void unsetSER_R() {
    this.SER_R = null;
  }

  /** Returns true if field SER_R is set (has been assigned a value) and false otherwise */
  public boolean isSetSER_R() {
    return this.SER_R != null;
  }

  public void setSER_RIsSet(boolean value) {
    if (!value) {
      this.SER_R = null;
    }
  }

  public String getDOC_NUM() {
    return this.DOC_NUM;
  }

  public Spokesman setDOC_NUM(String DOC_NUM) {
    this.DOC_NUM = DOC_NUM;
    return this;
  }

  public void unsetDOC_NUM() {
    this.DOC_NUM = null;
  }

  /** Returns true if field DOC_NUM is set (has been assigned a value) and false otherwise */
  public boolean isSetDOC_NUM() {
    return this.DOC_NUM != null;
  }

  public void setDOC_NUMIsSet(boolean value) {
    if (!value) {
      this.DOC_NUM = null;
    }
  }

  public String getB_PLACE() {
    return this.B_PLACE;
  }

  public Spokesman setB_PLACE(String B_PLACE) {
    this.B_PLACE = B_PLACE;
    return this;
  }

  public void unsetB_PLACE() {
    this.B_PLACE = null;
  }

  /** Returns true if field B_PLACE is set (has been assigned a value) and false otherwise */
  public boolean isSetB_PLACE() {
    return this.B_PLACE != null;
  }

  public void setB_PLACEIsSet(boolean value) {
    if (!value) {
      this.B_PLACE = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID__TYPE:
      if (value == null) {
        unsetID_TYPE();
      } else {
        setID_TYPE((Integer)value);
      }
      break;

    case SURNAME:
      if (value == null) {
        unsetSURNAME();
      } else {
        setSURNAME((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetNAME();
      } else {
        setNAME((String)value);
      }
      break;

    case S__NAME:
      if (value == null) {
        unsetS_NAME();
      } else {
        setS_NAME((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBIRTHDAY();
      } else {
        setBIRTHDAY((Long)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSEX();
      } else {
        setSEX((Short)value);
      }
      break;

    case DOC__TYPE:
      if (value == null) {
        unsetDOC_TYPE();
      } else {
        setDOC_TYPE((String)value);
      }
      break;

    case SER__L:
      if (value == null) {
        unsetSER_L();
      } else {
        setSER_L((String)value);
      }
      break;

    case SER__R:
      if (value == null) {
        unsetSER_R();
      } else {
        setSER_R((String)value);
      }
      break;

    case DOC__NUM:
      if (value == null) {
        unsetDOC_NUM();
      } else {
        setDOC_NUM((String)value);
      }
      break;

    case B__PLACE:
      if (value == null) {
        unsetB_PLACE();
      } else {
        setB_PLACE((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID__TYPE:
      return Integer.valueOf(getID_TYPE());

    case SURNAME:
      return getSURNAME();

    case NAME:
      return getNAME();

    case S__NAME:
      return getS_NAME();

    case BIRTHDAY:
      return Long.valueOf(getBIRTHDAY());

    case SEX:
      return Short.valueOf(getSEX());

    case DOC__TYPE:
      return getDOC_TYPE();

    case SER__L:
      return getSER_L();

    case SER__R:
      return getSER_R();

    case DOC__NUM:
      return getDOC_NUM();

    case B__PLACE:
      return getB_PLACE();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID__TYPE:
      return isSetID_TYPE();
    case SURNAME:
      return isSetSURNAME();
    case NAME:
      return isSetNAME();
    case S__NAME:
      return isSetS_NAME();
    case BIRTHDAY:
      return isSetBIRTHDAY();
    case SEX:
      return isSetSEX();
    case DOC__TYPE:
      return isSetDOC_TYPE();
    case SER__L:
      return isSetSER_L();
    case SER__R:
      return isSetSER_R();
    case DOC__NUM:
      return isSetDOC_NUM();
    case B__PLACE:
      return isSetB_PLACE();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Spokesman)
      return this.equals((Spokesman)that);
    return false;
  }

  public boolean equals(Spokesman that) {
    if (that == null)
      return false;

    boolean this_present_ID_TYPE = true;
    boolean that_present_ID_TYPE = true;
    if (this_present_ID_TYPE || that_present_ID_TYPE) {
      if (!(this_present_ID_TYPE && that_present_ID_TYPE))
        return false;
      if (this.ID_TYPE != that.ID_TYPE)
        return false;
    }

    boolean this_present_SURNAME = true && this.isSetSURNAME();
    boolean that_present_SURNAME = true && that.isSetSURNAME();
    if (this_present_SURNAME || that_present_SURNAME) {
      if (!(this_present_SURNAME && that_present_SURNAME))
        return false;
      if (!this.SURNAME.equals(that.SURNAME))
        return false;
    }

    boolean this_present_NAME = true && this.isSetNAME();
    boolean that_present_NAME = true && that.isSetNAME();
    if (this_present_NAME || that_present_NAME) {
      if (!(this_present_NAME && that_present_NAME))
        return false;
      if (!this.NAME.equals(that.NAME))
        return false;
    }

    boolean this_present_S_NAME = true && this.isSetS_NAME();
    boolean that_present_S_NAME = true && that.isSetS_NAME();
    if (this_present_S_NAME || that_present_S_NAME) {
      if (!(this_present_S_NAME && that_present_S_NAME))
        return false;
      if (!this.S_NAME.equals(that.S_NAME))
        return false;
    }

    boolean this_present_BIRTHDAY = true;
    boolean that_present_BIRTHDAY = true;
    if (this_present_BIRTHDAY || that_present_BIRTHDAY) {
      if (!(this_present_BIRTHDAY && that_present_BIRTHDAY))
        return false;
      if (this.BIRTHDAY != that.BIRTHDAY)
        return false;
    }

    boolean this_present_SEX = true;
    boolean that_present_SEX = true;
    if (this_present_SEX || that_present_SEX) {
      if (!(this_present_SEX && that_present_SEX))
        return false;
      if (this.SEX != that.SEX)
        return false;
    }

    boolean this_present_DOC_TYPE = true && this.isSetDOC_TYPE();
    boolean that_present_DOC_TYPE = true && that.isSetDOC_TYPE();
    if (this_present_DOC_TYPE || that_present_DOC_TYPE) {
      if (!(this_present_DOC_TYPE && that_present_DOC_TYPE))
        return false;
      if (!this.DOC_TYPE.equals(that.DOC_TYPE))
        return false;
    }

    boolean this_present_SER_L = true && this.isSetSER_L();
    boolean that_present_SER_L = true && that.isSetSER_L();
    if (this_present_SER_L || that_present_SER_L) {
      if (!(this_present_SER_L && that_present_SER_L))
        return false;
      if (!this.SER_L.equals(that.SER_L))
        return false;
    }

    boolean this_present_SER_R = true && this.isSetSER_R();
    boolean that_present_SER_R = true && that.isSetSER_R();
    if (this_present_SER_R || that_present_SER_R) {
      if (!(this_present_SER_R && that_present_SER_R))
        return false;
      if (!this.SER_R.equals(that.SER_R))
        return false;
    }

    boolean this_present_DOC_NUM = true && this.isSetDOC_NUM();
    boolean that_present_DOC_NUM = true && that.isSetDOC_NUM();
    if (this_present_DOC_NUM || that_present_DOC_NUM) {
      if (!(this_present_DOC_NUM && that_present_DOC_NUM))
        return false;
      if (!this.DOC_NUM.equals(that.DOC_NUM))
        return false;
    }

    boolean this_present_B_PLACE = true && this.isSetB_PLACE();
    boolean that_present_B_PLACE = true && that.isSetB_PLACE();
    if (this_present_B_PLACE || that_present_B_PLACE) {
      if (!(this_present_B_PLACE && that_present_B_PLACE))
        return false;
      if (!this.B_PLACE.equals(that.B_PLACE))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ID_TYPE = true;
    list.add(present_ID_TYPE);
    if (present_ID_TYPE)
      list.add(ID_TYPE);

    boolean present_SURNAME = true && (isSetSURNAME());
    list.add(present_SURNAME);
    if (present_SURNAME)
      list.add(SURNAME);

    boolean present_NAME = true && (isSetNAME());
    list.add(present_NAME);
    if (present_NAME)
      list.add(NAME);

    boolean present_S_NAME = true && (isSetS_NAME());
    list.add(present_S_NAME);
    if (present_S_NAME)
      list.add(S_NAME);

    boolean present_BIRTHDAY = true;
    list.add(present_BIRTHDAY);
    if (present_BIRTHDAY)
      list.add(BIRTHDAY);

    boolean present_SEX = true;
    list.add(present_SEX);
    if (present_SEX)
      list.add(SEX);

    boolean present_DOC_TYPE = true && (isSetDOC_TYPE());
    list.add(present_DOC_TYPE);
    if (present_DOC_TYPE)
      list.add(DOC_TYPE);

    boolean present_SER_L = true && (isSetSER_L());
    list.add(present_SER_L);
    if (present_SER_L)
      list.add(SER_L);

    boolean present_SER_R = true && (isSetSER_R());
    list.add(present_SER_R);
    if (present_SER_R)
      list.add(SER_R);

    boolean present_DOC_NUM = true && (isSetDOC_NUM());
    list.add(present_DOC_NUM);
    if (present_DOC_NUM)
      list.add(DOC_NUM);

    boolean present_B_PLACE = true && (isSetB_PLACE());
    list.add(present_B_PLACE);
    if (present_B_PLACE)
      list.add(B_PLACE);

    return list.hashCode();
  }

  @Override
  public int compareTo(Spokesman other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetID_TYPE()).compareTo(other.isSetID_TYPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_TYPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_TYPE, other.ID_TYPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSURNAME()).compareTo(other.isSetSURNAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSURNAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SURNAME, other.SURNAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNAME()).compareTo(other.isSetNAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NAME, other.NAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_NAME()).compareTo(other.isSetS_NAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_NAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.S_NAME, other.S_NAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBIRTHDAY()).compareTo(other.isSetBIRTHDAY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBIRTHDAY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BIRTHDAY, other.BIRTHDAY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSEX()).compareTo(other.isSetSEX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSEX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SEX, other.SEX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOC_TYPE()).compareTo(other.isSetDOC_TYPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOC_TYPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOC_TYPE, other.DOC_TYPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSER_L()).compareTo(other.isSetSER_L());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSER_L()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SER_L, other.SER_L);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSER_R()).compareTo(other.isSetSER_R());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSER_R()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SER_R, other.SER_R);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDOC_NUM()).compareTo(other.isSetDOC_NUM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDOC_NUM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DOC_NUM, other.DOC_NUM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB_PLACE()).compareTo(other.isSetB_PLACE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB_PLACE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.B_PLACE, other.B_PLACE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Spokesman(");
    boolean first = true;

    sb.append("ID_TYPE:");
    sb.append(this.ID_TYPE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SURNAME:");
    if (this.SURNAME == null) {
      sb.append("null");
    } else {
      sb.append(this.SURNAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NAME:");
    if (this.NAME == null) {
      sb.append("null");
    } else {
      sb.append(this.NAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("S_NAME:");
    if (this.S_NAME == null) {
      sb.append("null");
    } else {
      sb.append(this.S_NAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BIRTHDAY:");
    sb.append(this.BIRTHDAY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SEX:");
    sb.append(this.SEX);
    first = false;
    if (isSetDOC_TYPE()) {
      if (!first) sb.append(", ");
      sb.append("DOC_TYPE:");
      if (this.DOC_TYPE == null) {
        sb.append("null");
      } else {
        sb.append(this.DOC_TYPE);
      }
      first = false;
    }
    if (isSetSER_L()) {
      if (!first) sb.append(", ");
      sb.append("SER_L:");
      if (this.SER_L == null) {
        sb.append("null");
      } else {
        sb.append(this.SER_L);
      }
      first = false;
    }
    if (isSetSER_R()) {
      if (!first) sb.append(", ");
      sb.append("SER_R:");
      if (this.SER_R == null) {
        sb.append("null");
      } else {
        sb.append(this.SER_R);
      }
      first = false;
    }
    if (isSetDOC_NUM()) {
      if (!first) sb.append(", ");
      sb.append("DOC_NUM:");
      if (this.DOC_NUM == null) {
        sb.append("null");
      } else {
        sb.append(this.DOC_NUM);
      }
      first = false;
    }
    if (isSetB_PLACE()) {
      if (!first) sb.append(", ");
      sb.append("B_PLACE:");
      if (this.B_PLACE == null) {
        sb.append("null");
      } else {
        sb.append(this.B_PLACE);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ID_TYPE' because it's a primitive and you chose the non-beans generator.
    if (SURNAME == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SURNAME' was not present! Struct: " + toString());
    }
    if (NAME == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NAME' was not present! Struct: " + toString());
    }
    if (S_NAME == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'S_NAME' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'BIRTHDAY' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'SEX' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpokesmanStandardSchemeFactory implements SchemeFactory {
    public SpokesmanStandardScheme getScheme() {
      return new SpokesmanStandardScheme();
    }
  }

  private static class SpokesmanStandardScheme extends StandardScheme<Spokesman> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Spokesman struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID__TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_TYPE = iprot.readI32();
              struct.setID_TYPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SURNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SURNAME = iprot.readString();
              struct.setSURNAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NAME = iprot.readString();
              struct.setNAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // S__NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.S_NAME = iprot.readString();
              struct.setS_NAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.BIRTHDAY = iprot.readI64();
              struct.setBIRTHDAYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.SEX = iprot.readI16();
              struct.setSEXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOC__TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOC_TYPE = iprot.readString();
              struct.setDOC_TYPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SER__L
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SER_L = iprot.readString();
              struct.setSER_LIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SER__R
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SER_R = iprot.readString();
              struct.setSER_RIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DOC__NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DOC_NUM = iprot.readString();
              struct.setDOC_NUMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // B__PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.B_PLACE = iprot.readString();
              struct.setB_PLACEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetID_TYPE()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_TYPE' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBIRTHDAY()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'BIRTHDAY' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSEX()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SEX' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Spokesman struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID__TYPE_FIELD_DESC);
      oprot.writeI32(struct.ID_TYPE);
      oprot.writeFieldEnd();
      if (struct.SURNAME != null) {
        oprot.writeFieldBegin(SURNAME_FIELD_DESC);
        oprot.writeString(struct.SURNAME);
        oprot.writeFieldEnd();
      }
      if (struct.NAME != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.NAME);
        oprot.writeFieldEnd();
      }
      if (struct.S_NAME != null) {
        oprot.writeFieldBegin(S__NAME_FIELD_DESC);
        oprot.writeString(struct.S_NAME);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
      oprot.writeI64(struct.BIRTHDAY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI16(struct.SEX);
      oprot.writeFieldEnd();
      if (struct.DOC_TYPE != null) {
        if (struct.isSetDOC_TYPE()) {
          oprot.writeFieldBegin(DOC__TYPE_FIELD_DESC);
          oprot.writeString(struct.DOC_TYPE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SER_L != null) {
        if (struct.isSetSER_L()) {
          oprot.writeFieldBegin(SER__L_FIELD_DESC);
          oprot.writeString(struct.SER_L);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SER_R != null) {
        if (struct.isSetSER_R()) {
          oprot.writeFieldBegin(SER__R_FIELD_DESC);
          oprot.writeString(struct.SER_R);
          oprot.writeFieldEnd();
        }
      }
      if (struct.DOC_NUM != null) {
        if (struct.isSetDOC_NUM()) {
          oprot.writeFieldBegin(DOC__NUM_FIELD_DESC);
          oprot.writeString(struct.DOC_NUM);
          oprot.writeFieldEnd();
        }
      }
      if (struct.B_PLACE != null) {
        if (struct.isSetB_PLACE()) {
          oprot.writeFieldBegin(B__PLACE_FIELD_DESC);
          oprot.writeString(struct.B_PLACE);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpokesmanTupleSchemeFactory implements SchemeFactory {
    public SpokesmanTupleScheme getScheme() {
      return new SpokesmanTupleScheme();
    }
  }

  private static class SpokesmanTupleScheme extends TupleScheme<Spokesman> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Spokesman struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.ID_TYPE);
      oprot.writeString(struct.SURNAME);
      oprot.writeString(struct.NAME);
      oprot.writeString(struct.S_NAME);
      oprot.writeI64(struct.BIRTHDAY);
      oprot.writeI16(struct.SEX);
      BitSet optionals = new BitSet();
      if (struct.isSetDOC_TYPE()) {
        optionals.set(0);
      }
      if (struct.isSetSER_L()) {
        optionals.set(1);
      }
      if (struct.isSetSER_R()) {
        optionals.set(2);
      }
      if (struct.isSetDOC_NUM()) {
        optionals.set(3);
      }
      if (struct.isSetB_PLACE()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDOC_TYPE()) {
        oprot.writeString(struct.DOC_TYPE);
      }
      if (struct.isSetSER_L()) {
        oprot.writeString(struct.SER_L);
      }
      if (struct.isSetSER_R()) {
        oprot.writeString(struct.SER_R);
      }
      if (struct.isSetDOC_NUM()) {
        oprot.writeString(struct.DOC_NUM);
      }
      if (struct.isSetB_PLACE()) {
        oprot.writeString(struct.B_PLACE);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Spokesman struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ID_TYPE = iprot.readI32();
      struct.setID_TYPEIsSet(true);
      struct.SURNAME = iprot.readString();
      struct.setSURNAMEIsSet(true);
      struct.NAME = iprot.readString();
      struct.setNAMEIsSet(true);
      struct.S_NAME = iprot.readString();
      struct.setS_NAMEIsSet(true);
      struct.BIRTHDAY = iprot.readI64();
      struct.setBIRTHDAYIsSet(true);
      struct.SEX = iprot.readI16();
      struct.setSEXIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.DOC_TYPE = iprot.readString();
        struct.setDOC_TYPEIsSet(true);
      }
      if (incoming.get(1)) {
        struct.SER_L = iprot.readString();
        struct.setSER_LIsSet(true);
      }
      if (incoming.get(2)) {
        struct.SER_R = iprot.readString();
        struct.setSER_RIsSet(true);
      }
      if (incoming.get(3)) {
        struct.DOC_NUM = iprot.readString();
        struct.setDOC_NUMIsSet(true);
      }
      if (incoming.get(4)) {
        struct.B_PLACE = iprot.readString();
        struct.setB_PLACEIsSet(true);
      }
    }
  }

}

