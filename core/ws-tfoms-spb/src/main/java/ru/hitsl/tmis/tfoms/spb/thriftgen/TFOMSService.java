/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.hitsl.tmis.tfoms.spb.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-30")
public class TFOMSService {

  public interface Iface {

    public Registry getRegistry(long begInterval, long endInterval) throws InvalidDateIntervalException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRegistry(long begInterval, long endInterval, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Registry getRegistry(long begInterval, long endInterval) throws InvalidDateIntervalException, org.apache.thrift.TException
    {
      send_getRegistry(begInterval, endInterval);
      return recv_getRegistry();
    }

    public void send_getRegistry(long begInterval, long endInterval) throws org.apache.thrift.TException
    {
      getRegistry_args args = new getRegistry_args();
      args.setBegInterval(begInterval);
      args.setEndInterval(endInterval);
      sendBase("getRegistry", args);
    }

    public Registry recv_getRegistry() throws InvalidDateIntervalException, org.apache.thrift.TException
    {
      getRegistry_result result = new getRegistry_result();
      receiveBase(result, "getRegistry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.intervalException != null) {
        throw result.intervalException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegistry failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRegistry(long begInterval, long endInterval, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegistry_call method_call = new getRegistry_call(begInterval, endInterval, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegistry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long begInterval;
      private long endInterval;
      public getRegistry_call(long begInterval, long endInterval, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.begInterval = begInterval;
        this.endInterval = endInterval;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegistry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegistry_args args = new getRegistry_args();
        args.setBegInterval(begInterval);
        args.setEndInterval(endInterval);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Registry getResult() throws InvalidDateIntervalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegistry();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRegistry", new getRegistry());
      return processMap;
    }

    public static class getRegistry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegistry_args> {
      public getRegistry() {
        super("getRegistry");
      }

      public getRegistry_args getEmptyArgsInstance() {
        return new getRegistry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegistry_result getResult(I iface, getRegistry_args args) throws org.apache.thrift.TException {
        getRegistry_result result = new getRegistry_result();
        try {
          result.success = iface.getRegistry(args.begInterval, args.endInterval);
        } catch (InvalidDateIntervalException intervalException) {
          result.intervalException = intervalException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getRegistry", new getRegistry());
      return processMap;
    }

    public static class getRegistry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegistry_args, Registry> {
      public getRegistry() {
        super("getRegistry");
      }

      public getRegistry_args getEmptyArgsInstance() {
        return new getRegistry_args();
      }

      public AsyncMethodCallback<Registry> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Registry>() { 
          public void onComplete(Registry o) {
            getRegistry_result result = new getRegistry_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRegistry_result result = new getRegistry_result();
            if (e instanceof InvalidDateIntervalException) {
                        result.intervalException = (InvalidDateIntervalException) e;
                        result.setIntervalExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRegistry_args args, org.apache.thrift.async.AsyncMethodCallback<Registry> resultHandler) throws TException {
        iface.getRegistry(args.begInterval, args.endInterval,resultHandler);
      }
    }

  }

  public static class getRegistry_args implements org.apache.thrift.TBase<getRegistry_args, getRegistry_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegistry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegistry_args");

    private static final org.apache.thrift.protocol.TField BEG_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("begInterval", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField END_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("endInterval", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegistry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegistry_argsTupleSchemeFactory());
    }

    public long begInterval; // required
    public long endInterval; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BEG_INTERVAL((short)1, "begInterval"),
      END_INTERVAL((short)2, "endInterval");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BEG_INTERVAL
            return BEG_INTERVAL;
          case 2: // END_INTERVAL
            return END_INTERVAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINTERVAL_ISSET_ID = 0;
    private static final int __ENDINTERVAL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BEG_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("begInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "timestamp")));
      tmpMap.put(_Fields.END_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("endInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "timestamp")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegistry_args.class, metaDataMap);
    }

    public getRegistry_args() {
    }

    public getRegistry_args(
      long begInterval,
      long endInterval)
    {
      this();
      this.begInterval = begInterval;
      setBegIntervalIsSet(true);
      this.endInterval = endInterval;
      setEndIntervalIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegistry_args(getRegistry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.begInterval = other.begInterval;
      this.endInterval = other.endInterval;
    }

    public getRegistry_args deepCopy() {
      return new getRegistry_args(this);
    }

    @Override
    public void clear() {
      setBegIntervalIsSet(false);
      this.begInterval = 0;
      setEndIntervalIsSet(false);
      this.endInterval = 0;
    }

    public long getBegInterval() {
      return this.begInterval;
    }

    public getRegistry_args setBegInterval(long begInterval) {
      this.begInterval = begInterval;
      setBegIntervalIsSet(true);
      return this;
    }

    public void unsetBegInterval() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINTERVAL_ISSET_ID);
    }

    /** Returns true if field begInterval is set (has been assigned a value) and false otherwise */
    public boolean isSetBegInterval() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINTERVAL_ISSET_ID);
    }

    public void setBegIntervalIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINTERVAL_ISSET_ID, value);
    }

    public long getEndInterval() {
      return this.endInterval;
    }

    public getRegistry_args setEndInterval(long endInterval) {
      this.endInterval = endInterval;
      setEndIntervalIsSet(true);
      return this;
    }

    public void unsetEndInterval() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDINTERVAL_ISSET_ID);
    }

    /** Returns true if field endInterval is set (has been assigned a value) and false otherwise */
    public boolean isSetEndInterval() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDINTERVAL_ISSET_ID);
    }

    public void setEndIntervalIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDINTERVAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BEG_INTERVAL:
        if (value == null) {
          unsetBegInterval();
        } else {
          setBegInterval((Long)value);
        }
        break;

      case END_INTERVAL:
        if (value == null) {
          unsetEndInterval();
        } else {
          setEndInterval((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BEG_INTERVAL:
        return Long.valueOf(getBegInterval());

      case END_INTERVAL:
        return Long.valueOf(getEndInterval());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BEG_INTERVAL:
        return isSetBegInterval();
      case END_INTERVAL:
        return isSetEndInterval();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegistry_args)
        return this.equals((getRegistry_args)that);
      return false;
    }

    public boolean equals(getRegistry_args that) {
      if (that == null)
        return false;

      boolean this_present_begInterval = true;
      boolean that_present_begInterval = true;
      if (this_present_begInterval || that_present_begInterval) {
        if (!(this_present_begInterval && that_present_begInterval))
          return false;
        if (this.begInterval != that.begInterval)
          return false;
      }

      boolean this_present_endInterval = true;
      boolean that_present_endInterval = true;
      if (this_present_endInterval || that_present_endInterval) {
        if (!(this_present_endInterval && that_present_endInterval))
          return false;
        if (this.endInterval != that.endInterval)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_begInterval = true;
      list.add(present_begInterval);
      if (present_begInterval)
        list.add(begInterval);

      boolean present_endInterval = true;
      list.add(present_endInterval);
      if (present_endInterval)
        list.add(endInterval);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegistry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBegInterval()).compareTo(other.isSetBegInterval());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegInterval()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begInterval, other.begInterval);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndInterval()).compareTo(other.isSetEndInterval());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndInterval()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endInterval, other.endInterval);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegistry_args(");
      boolean first = true;

      sb.append("begInterval:");
      sb.append(this.begInterval);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endInterval:");
      sb.append(this.endInterval);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegistry_argsStandardSchemeFactory implements SchemeFactory {
      public getRegistry_argsStandardScheme getScheme() {
        return new getRegistry_argsStandardScheme();
      }
    }

    private static class getRegistry_argsStandardScheme extends StandardScheme<getRegistry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegistry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BEG_INTERVAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.begInterval = iprot.readI64();
                struct.setBegIntervalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_INTERVAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endInterval = iprot.readI64();
                struct.setEndIntervalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegistry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BEG_INTERVAL_FIELD_DESC);
        oprot.writeI64(struct.begInterval);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_INTERVAL_FIELD_DESC);
        oprot.writeI64(struct.endInterval);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegistry_argsTupleSchemeFactory implements SchemeFactory {
      public getRegistry_argsTupleScheme getScheme() {
        return new getRegistry_argsTupleScheme();
      }
    }

    private static class getRegistry_argsTupleScheme extends TupleScheme<getRegistry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegistry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBegInterval()) {
          optionals.set(0);
        }
        if (struct.isSetEndInterval()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBegInterval()) {
          oprot.writeI64(struct.begInterval);
        }
        if (struct.isSetEndInterval()) {
          oprot.writeI64(struct.endInterval);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegistry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.begInterval = iprot.readI64();
          struct.setBegIntervalIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endInterval = iprot.readI64();
          struct.setEndIntervalIsSet(true);
        }
      }
    }

  }

  public static class getRegistry_result implements org.apache.thrift.TBase<getRegistry_result, getRegistry_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegistry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegistry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField INTERVAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("intervalException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegistry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegistry_resultTupleSchemeFactory());
    }

    public Registry success; // required
    public InvalidDateIntervalException intervalException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERVAL_EXCEPTION((short)1, "intervalException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERVAL_EXCEPTION
            return INTERVAL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Registry.class)));
      tmpMap.put(_Fields.INTERVAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("intervalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegistry_result.class, metaDataMap);
    }

    public getRegistry_result() {
    }

    public getRegistry_result(
      Registry success,
      InvalidDateIntervalException intervalException)
    {
      this();
      this.success = success;
      this.intervalException = intervalException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegistry_result(getRegistry_result other) {
      if (other.isSetSuccess()) {
        this.success = new Registry(other.success);
      }
      if (other.isSetIntervalException()) {
        this.intervalException = new InvalidDateIntervalException(other.intervalException);
      }
    }

    public getRegistry_result deepCopy() {
      return new getRegistry_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.intervalException = null;
    }

    public Registry getSuccess() {
      return this.success;
    }

    public getRegistry_result setSuccess(Registry success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidDateIntervalException getIntervalException() {
      return this.intervalException;
    }

    public getRegistry_result setIntervalException(InvalidDateIntervalException intervalException) {
      this.intervalException = intervalException;
      return this;
    }

    public void unsetIntervalException() {
      this.intervalException = null;
    }

    /** Returns true if field intervalException is set (has been assigned a value) and false otherwise */
    public boolean isSetIntervalException() {
      return this.intervalException != null;
    }

    public void setIntervalExceptionIsSet(boolean value) {
      if (!value) {
        this.intervalException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Registry)value);
        }
        break;

      case INTERVAL_EXCEPTION:
        if (value == null) {
          unsetIntervalException();
        } else {
          setIntervalException((InvalidDateIntervalException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERVAL_EXCEPTION:
        return getIntervalException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERVAL_EXCEPTION:
        return isSetIntervalException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegistry_result)
        return this.equals((getRegistry_result)that);
      return false;
    }

    public boolean equals(getRegistry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_intervalException = true && this.isSetIntervalException();
      boolean that_present_intervalException = true && that.isSetIntervalException();
      if (this_present_intervalException || that_present_intervalException) {
        if (!(this_present_intervalException && that_present_intervalException))
          return false;
        if (!this.intervalException.equals(that.intervalException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_intervalException = true && (isSetIntervalException());
      list.add(present_intervalException);
      if (present_intervalException)
        list.add(intervalException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegistry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIntervalException()).compareTo(other.isSetIntervalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntervalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intervalException, other.intervalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegistry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("intervalException:");
      if (this.intervalException == null) {
        sb.append("null");
      } else {
        sb.append(this.intervalException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegistry_resultStandardSchemeFactory implements SchemeFactory {
      public getRegistry_resultStandardScheme getScheme() {
        return new getRegistry_resultStandardScheme();
      }
    }

    private static class getRegistry_resultStandardScheme extends StandardScheme<getRegistry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegistry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Registry();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERVAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intervalException = new InvalidDateIntervalException();
                struct.intervalException.read(iprot);
                struct.setIntervalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegistry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.intervalException != null) {
          oprot.writeFieldBegin(INTERVAL_EXCEPTION_FIELD_DESC);
          struct.intervalException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegistry_resultTupleSchemeFactory implements SchemeFactory {
      public getRegistry_resultTupleScheme getScheme() {
        return new getRegistry_resultTupleScheme();
      }
    }

    private static class getRegistry_resultTupleScheme extends TupleScheme<getRegistry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegistry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIntervalException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIntervalException()) {
          struct.intervalException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegistry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Registry();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.intervalException = new InvalidDateIntervalException();
          struct.intervalException.read(iprot);
          struct.setIntervalExceptionIsSet(true);
        }
      }
    }

  }

}
