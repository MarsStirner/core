/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.hitsl.tmis.tfoms.spb.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * ServiceEntry
 * Данные о записи в реестре услуг
 * ***********************************
 * @param SURNAME - Фамилия пациента
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-30")
public class ServiceEntry implements org.apache.thrift.TBase<ServiceEntry, ServiceEntry._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceEntry");

  private static final org.apache.thrift.protocol.TField SURNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("SURNAME", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME1_FIELD_DESC = new org.apache.thrift.protocol.TField("NAME1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME2_FIELD_DESC = new org.apache.thrift.protocol.TField("NAME2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("BIRTHDAY", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("SEX", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("ORDER", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField POLIS__S_FIELD_DESC = new org.apache.thrift.protocol.TField("POLIS_S", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField POLIS__N_FIELD_DESC = new org.apache.thrift.protocol.TField("POLIS_N", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PAYER_FIELD_DESC = new org.apache.thrift.protocol.TField("PAYER", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CLIENT_ADDRESS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientAddressInfo", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("PROFILE", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PROFILENET_FIELD_DESC = new org.apache.thrift.protocol.TField("PROFILENET", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DATEIN_FIELD_DESC = new org.apache.thrift.protocol.TField("DATEIN", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField DATEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("DATEOUT", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("AMOUNT", org.apache.thrift.protocol.TType.I16, (short)15);
  private static final org.apache.thrift.protocol.TField DIAGNOSIS_FIELD_DESC = new org.apache.thrift.protocol.TField("DIAGNOSIS", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DIAG__PREF_FIELD_DESC = new org.apache.thrift.protocol.TField("DIAG_PREF", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SEND_FIELD_DESC = new org.apache.thrift.protocol.TField("SEND", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("ERROR", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CLIENT_DOCUMENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientDocumentInfo", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField SERV__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("SERV_ID", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField ID__PRVS_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_PRVS", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField IDPRVSTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("IDPRVSTYPE", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField PRVS__PR__G_FIELD_DESC = new org.apache.thrift.protocol.TField("PRVS_PR_G", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField ID__EXITUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_EXITUS", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField ILLHISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("ILLHISTORY", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField CASE__CAST_FIELD_DESC = new org.apache.thrift.protocol.TField("CASE_CAST", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField AMOUNT__D_FIELD_DESC = new org.apache.thrift.protocol.TField("AMOUNT_D", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField ID__PRMP_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_PRMP", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField ID__PRMP__C_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_PRMP_C", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField DIAG__C_FIELD_DESC = new org.apache.thrift.protocol.TField("DIAG_C", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField DIAG__S__C_FIELD_DESC = new org.apache.thrift.protocol.TField("DIAG_S_C", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField DIAG__P__C_FIELD_DESC = new org.apache.thrift.protocol.TField("DIAG_P_C", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField QRESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("QRESULT", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField ID__PRVS__C_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_PRVS_C", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField ID__ED__PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_ED_PAY", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField ID__VMP_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_VMP", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField ID__DOC_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_DOC", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField ID__DEPT_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_DEPT", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField ID__DOC__C_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_DOC_C", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField ID__DEPT__C_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_DEPT_C", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField ID__LPU__D_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_LPU_D", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField IS__CRIM_FIELD_DESC = new org.apache.thrift.protocol.TField("IS_CRIM", org.apache.thrift.protocol.TType.BOOL, (short)43);
  private static final org.apache.thrift.protocol.TField IDSERVDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("IDSERVDATA", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField IDSERVMADE_FIELD_DESC = new org.apache.thrift.protocol.TField("IDSERVMADE", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField IDSERVLPU_FIELD_DESC = new org.apache.thrift.protocol.TField("IDSERVLPU", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField ID__GOAL_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_GOAL", org.apache.thrift.protocol.TType.I32, (short)47);
  private static final org.apache.thrift.protocol.TField ID__GOAL__C_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_GOAL_C", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField ID__PAT__CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_PAT_CAT", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField ID__GOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_GOSP", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField IDVIDVME_FIELD_DESC = new org.apache.thrift.protocol.TField("IDVIDVME", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField IDFORPOM_FIELD_DESC = new org.apache.thrift.protocol.TField("IDFORPOM", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField ID__PRVS__D_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_PRVS_D", org.apache.thrift.protocol.TType.I32, (short)53);
  private static final org.apache.thrift.protocol.TField ID__GOAL__D_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_GOAL_D", org.apache.thrift.protocol.TType.I32, (short)54);
  private static final org.apache.thrift.protocol.TField IDMETHMP_FIELD_DESC = new org.apache.thrift.protocol.TField("IDMETHMP", org.apache.thrift.protocol.TType.I32, (short)55);
  private static final org.apache.thrift.protocol.TField ID__LPU_FIELD_DESC = new org.apache.thrift.protocol.TField("ID_LPU", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField N__BORN_FIELD_DESC = new org.apache.thrift.protocol.TField("N_BORN", org.apache.thrift.protocol.TType.I16, (short)57);
  private static final org.apache.thrift.protocol.TField IS__STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("IS_STAGE", org.apache.thrift.protocol.TType.BOOL, (short)58);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceEntryTupleSchemeFactory());
  }

  public String SURNAME; // required
  public String NAME1; // required
  public String NAME2; // optional
  public long BIRTHDAY; // required
  public short SEX; // required
  public String ORDER; // required
  public String POLIS_S; // required
  public String POLIS_N; // required
  public String PAYER; // optional
  public ClientAddress clientAddressInfo; // optional
  public String PROFILE; // required
  public String PROFILENET; // required
  public long DATEIN; // required
  public long DATEOUT; // required
  public short AMOUNT; // required
  public String DIAGNOSIS; // required
  public String DIAG_PREF; // optional
  public boolean SEND; // required
  public String ERROR; // optional
  public ClientDocument clientDocumentInfo; // optional
  public int SERV_ID; // required
  public int ID_PRVS; // required
  public int IDPRVSTYPE; // optional
  public int PRVS_PR_G; // optional
  public int ID_EXITUS; // required
  public String ILLHISTORY; // required
  public int CASE_CAST; // required
  public int AMOUNT_D; // required
  public int ID_PRMP; // required
  public int ID_PRMP_C; // required
  public String DIAG_C; // required
  public String DIAG_S_C; // optional
  public String DIAG_P_C; // required
  public int QRESULT; // required
  public int ID_PRVS_C; // required
  public int ID_ED_PAY; // optional
  public int ID_VMP; // required
  public String ID_DOC; // required
  public String ID_DEPT; // required
  public String ID_DOC_C; // required
  public String ID_DEPT_C; // required
  public int ID_LPU_D; // optional
  public boolean IS_CRIM; // optional
  public int IDSERVDATA; // optional
  public int IDSERVMADE; // optional
  public int IDSERVLPU; // optional
  public int ID_GOAL; // optional
  public int ID_GOAL_C; // optional
  public int ID_PAT_CAT; // optional
  public int ID_GOSP; // optional
  public int IDVIDVME; // optional
  public int IDFORPOM; // required
  public int ID_PRVS_D; // optional
  public int ID_GOAL_D; // optional
  public int IDMETHMP; // optional
  public int ID_LPU; // required
  public short N_BORN; // optional
  public boolean IS_STAGE; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SURNAME((short)1, "SURNAME"),
    NAME1((short)2, "NAME1"),
    NAME2((short)3, "NAME2"),
    BIRTHDAY((short)4, "BIRTHDAY"),
    SEX((short)5, "SEX"),
    ORDER((short)6, "ORDER"),
    POLIS__S((short)7, "POLIS_S"),
    POLIS__N((short)8, "POLIS_N"),
    PAYER((short)9, "PAYER"),
    CLIENT_ADDRESS_INFO((short)10, "clientAddressInfo"),
    PROFILE((short)11, "PROFILE"),
    PROFILENET((short)12, "PROFILENET"),
    DATEIN((short)13, "DATEIN"),
    DATEOUT((short)14, "DATEOUT"),
    AMOUNT((short)15, "AMOUNT"),
    DIAGNOSIS((short)16, "DIAGNOSIS"),
    DIAG__PREF((short)17, "DIAG_PREF"),
    SEND((short)18, "SEND"),
    ERROR((short)19, "ERROR"),
    CLIENT_DOCUMENT_INFO((short)20, "clientDocumentInfo"),
    SERV__ID((short)21, "SERV_ID"),
    ID__PRVS((short)22, "ID_PRVS"),
    IDPRVSTYPE((short)23, "IDPRVSTYPE"),
    PRVS__PR__G((short)24, "PRVS_PR_G"),
    ID__EXITUS((short)25, "ID_EXITUS"),
    ILLHISTORY((short)26, "ILLHISTORY"),
    CASE__CAST((short)27, "CASE_CAST"),
    AMOUNT__D((short)28, "AMOUNT_D"),
    ID__PRMP((short)29, "ID_PRMP"),
    ID__PRMP__C((short)30, "ID_PRMP_C"),
    DIAG__C((short)31, "DIAG_C"),
    DIAG__S__C((short)32, "DIAG_S_C"),
    DIAG__P__C((short)33, "DIAG_P_C"),
    QRESULT((short)34, "QRESULT"),
    ID__PRVS__C((short)35, "ID_PRVS_C"),
    ID__ED__PAY((short)36, "ID_ED_PAY"),
    ID__VMP((short)37, "ID_VMP"),
    ID__DOC((short)38, "ID_DOC"),
    ID__DEPT((short)39, "ID_DEPT"),
    ID__DOC__C((short)40, "ID_DOC_C"),
    ID__DEPT__C((short)41, "ID_DEPT_C"),
    ID__LPU__D((short)42, "ID_LPU_D"),
    IS__CRIM((short)43, "IS_CRIM"),
    IDSERVDATA((short)44, "IDSERVDATA"),
    IDSERVMADE((short)45, "IDSERVMADE"),
    IDSERVLPU((short)46, "IDSERVLPU"),
    ID__GOAL((short)47, "ID_GOAL"),
    ID__GOAL__C((short)48, "ID_GOAL_C"),
    ID__PAT__CAT((short)49, "ID_PAT_CAT"),
    ID__GOSP((short)50, "ID_GOSP"),
    IDVIDVME((short)51, "IDVIDVME"),
    IDFORPOM((short)52, "IDFORPOM"),
    ID__PRVS__D((short)53, "ID_PRVS_D"),
    ID__GOAL__D((short)54, "ID_GOAL_D"),
    IDMETHMP((short)55, "IDMETHMP"),
    ID__LPU((short)56, "ID_LPU"),
    N__BORN((short)57, "N_BORN"),
    IS__STAGE((short)58, "IS_STAGE");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SURNAME
          return SURNAME;
        case 2: // NAME1
          return NAME1;
        case 3: // NAME2
          return NAME2;
        case 4: // BIRTHDAY
          return BIRTHDAY;
        case 5: // SEX
          return SEX;
        case 6: // ORDER
          return ORDER;
        case 7: // POLIS__S
          return POLIS__S;
        case 8: // POLIS__N
          return POLIS__N;
        case 9: // PAYER
          return PAYER;
        case 10: // CLIENT_ADDRESS_INFO
          return CLIENT_ADDRESS_INFO;
        case 11: // PROFILE
          return PROFILE;
        case 12: // PROFILENET
          return PROFILENET;
        case 13: // DATEIN
          return DATEIN;
        case 14: // DATEOUT
          return DATEOUT;
        case 15: // AMOUNT
          return AMOUNT;
        case 16: // DIAGNOSIS
          return DIAGNOSIS;
        case 17: // DIAG__PREF
          return DIAG__PREF;
        case 18: // SEND
          return SEND;
        case 19: // ERROR
          return ERROR;
        case 20: // CLIENT_DOCUMENT_INFO
          return CLIENT_DOCUMENT_INFO;
        case 21: // SERV__ID
          return SERV__ID;
        case 22: // ID__PRVS
          return ID__PRVS;
        case 23: // IDPRVSTYPE
          return IDPRVSTYPE;
        case 24: // PRVS__PR__G
          return PRVS__PR__G;
        case 25: // ID__EXITUS
          return ID__EXITUS;
        case 26: // ILLHISTORY
          return ILLHISTORY;
        case 27: // CASE__CAST
          return CASE__CAST;
        case 28: // AMOUNT__D
          return AMOUNT__D;
        case 29: // ID__PRMP
          return ID__PRMP;
        case 30: // ID__PRMP__C
          return ID__PRMP__C;
        case 31: // DIAG__C
          return DIAG__C;
        case 32: // DIAG__S__C
          return DIAG__S__C;
        case 33: // DIAG__P__C
          return DIAG__P__C;
        case 34: // QRESULT
          return QRESULT;
        case 35: // ID__PRVS__C
          return ID__PRVS__C;
        case 36: // ID__ED__PAY
          return ID__ED__PAY;
        case 37: // ID__VMP
          return ID__VMP;
        case 38: // ID__DOC
          return ID__DOC;
        case 39: // ID__DEPT
          return ID__DEPT;
        case 40: // ID__DOC__C
          return ID__DOC__C;
        case 41: // ID__DEPT__C
          return ID__DEPT__C;
        case 42: // ID__LPU__D
          return ID__LPU__D;
        case 43: // IS__CRIM
          return IS__CRIM;
        case 44: // IDSERVDATA
          return IDSERVDATA;
        case 45: // IDSERVMADE
          return IDSERVMADE;
        case 46: // IDSERVLPU
          return IDSERVLPU;
        case 47: // ID__GOAL
          return ID__GOAL;
        case 48: // ID__GOAL__C
          return ID__GOAL__C;
        case 49: // ID__PAT__CAT
          return ID__PAT__CAT;
        case 50: // ID__GOSP
          return ID__GOSP;
        case 51: // IDVIDVME
          return IDVIDVME;
        case 52: // IDFORPOM
          return IDFORPOM;
        case 53: // ID__PRVS__D
          return ID__PRVS__D;
        case 54: // ID__GOAL__D
          return ID__GOAL__D;
        case 55: // IDMETHMP
          return IDMETHMP;
        case 56: // ID__LPU
          return ID__LPU;
        case 57: // N__BORN
          return N__BORN;
        case 58: // IS__STAGE
          return IS__STAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIRTHDAY_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __DATEIN_ISSET_ID = 2;
  private static final int __DATEOUT_ISSET_ID = 3;
  private static final int __AMOUNT_ISSET_ID = 4;
  private static final int __SEND_ISSET_ID = 5;
  private static final int __SERV_ID_ISSET_ID = 6;
  private static final int __ID_PRVS_ISSET_ID = 7;
  private static final int __IDPRVSTYPE_ISSET_ID = 8;
  private static final int __PRVS_PR_G_ISSET_ID = 9;
  private static final int __ID_EXITUS_ISSET_ID = 10;
  private static final int __CASE_CAST_ISSET_ID = 11;
  private static final int __AMOUNT_D_ISSET_ID = 12;
  private static final int __ID_PRMP_ISSET_ID = 13;
  private static final int __ID_PRMP_C_ISSET_ID = 14;
  private static final int __QRESULT_ISSET_ID = 15;
  private static final int __ID_PRVS_C_ISSET_ID = 16;
  private static final int __ID_ED_PAY_ISSET_ID = 17;
  private static final int __ID_VMP_ISSET_ID = 18;
  private static final int __ID_LPU_D_ISSET_ID = 19;
  private static final int __IS_CRIM_ISSET_ID = 20;
  private static final int __IDSERVDATA_ISSET_ID = 21;
  private static final int __IDSERVMADE_ISSET_ID = 22;
  private static final int __IDSERVLPU_ISSET_ID = 23;
  private static final int __ID_GOAL_ISSET_ID = 24;
  private static final int __ID_GOAL_C_ISSET_ID = 25;
  private static final int __ID_PAT_CAT_ISSET_ID = 26;
  private static final int __ID_GOSP_ISSET_ID = 27;
  private static final int __IDVIDVME_ISSET_ID = 28;
  private static final int __IDFORPOM_ISSET_ID = 29;
  private static final int __ID_PRVS_D_ISSET_ID = 30;
  private static final int __ID_GOAL_D_ISSET_ID = 31;
  private static final int __IDMETHMP_ISSET_ID = 32;
  private static final int __ID_LPU_ISSET_ID = 33;
  private static final int __N_BORN_ISSET_ID = 34;
  private static final int __IS_STAGE_ISSET_ID = 35;
  private long __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME2,_Fields.PAYER,_Fields.CLIENT_ADDRESS_INFO,_Fields.DIAG__PREF,_Fields.ERROR,_Fields.CLIENT_DOCUMENT_INFO,_Fields.IDPRVSTYPE,_Fields.PRVS__PR__G,_Fields.DIAG__S__C,_Fields.ID__ED__PAY,_Fields.ID__LPU__D,_Fields.IS__CRIM,_Fields.IDSERVDATA,_Fields.IDSERVMADE,_Fields.IDSERVLPU,_Fields.ID__GOAL,_Fields.ID__GOAL__C,_Fields.ID__PAT__CAT,_Fields.ID__GOSP,_Fields.IDVIDVME,_Fields.ID__PRVS__D,_Fields.ID__GOAL__D,_Fields.IDMETHMP,_Fields.N__BORN,_Fields.IS__STAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SURNAME, new org.apache.thrift.meta_data.FieldMetaData("SURNAME", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME1, new org.apache.thrift.meta_data.FieldMetaData("NAME1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME2, new org.apache.thrift.meta_data.FieldMetaData("NAME2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("BIRTHDAY", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("SEX", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("ORDER", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLIS__S, new org.apache.thrift.meta_data.FieldMetaData("POLIS_S", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLIS__N, new org.apache.thrift.meta_data.FieldMetaData("POLIS_N", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYER, new org.apache.thrift.meta_data.FieldMetaData("PAYER", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ADDRESS_INFO, new org.apache.thrift.meta_data.FieldMetaData("clientAddressInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientAddress.class)));
    tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("PROFILE", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILENET, new org.apache.thrift.meta_data.FieldMetaData("PROFILENET", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATEIN, new org.apache.thrift.meta_data.FieldMetaData("DATEIN", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.DATEOUT, new org.apache.thrift.meta_data.FieldMetaData("DATEOUT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("AMOUNT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.DIAGNOSIS, new org.apache.thrift.meta_data.FieldMetaData("DIAGNOSIS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIAG__PREF, new org.apache.thrift.meta_data.FieldMetaData("DIAG_PREF", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND, new org.apache.thrift.meta_data.FieldMetaData("SEND", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("ERROR", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_DOCUMENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("clientDocumentInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientDocument.class)));
    tmpMap.put(_Fields.SERV__ID, new org.apache.thrift.meta_data.FieldMetaData("SERV_ID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__PRVS, new org.apache.thrift.meta_data.FieldMetaData("ID_PRVS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IDPRVSTYPE, new org.apache.thrift.meta_data.FieldMetaData("IDPRVSTYPE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PRVS__PR__G, new org.apache.thrift.meta_data.FieldMetaData("PRVS_PR_G", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__EXITUS, new org.apache.thrift.meta_data.FieldMetaData("ID_EXITUS", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ILLHISTORY, new org.apache.thrift.meta_data.FieldMetaData("ILLHISTORY", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASE__CAST, new org.apache.thrift.meta_data.FieldMetaData("CASE_CAST", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.AMOUNT__D, new org.apache.thrift.meta_data.FieldMetaData("AMOUNT_D", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__PRMP, new org.apache.thrift.meta_data.FieldMetaData("ID_PRMP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__PRMP__C, new org.apache.thrift.meta_data.FieldMetaData("ID_PRMP_C", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.DIAG__C, new org.apache.thrift.meta_data.FieldMetaData("DIAG_C", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIAG__S__C, new org.apache.thrift.meta_data.FieldMetaData("DIAG_S_C", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIAG__P__C, new org.apache.thrift.meta_data.FieldMetaData("DIAG_P_C", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QRESULT, new org.apache.thrift.meta_data.FieldMetaData("QRESULT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__PRVS__C, new org.apache.thrift.meta_data.FieldMetaData("ID_PRVS_C", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__ED__PAY, new org.apache.thrift.meta_data.FieldMetaData("ID_ED_PAY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__VMP, new org.apache.thrift.meta_data.FieldMetaData("ID_VMP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__DOC, new org.apache.thrift.meta_data.FieldMetaData("ID_DOC", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID__DEPT, new org.apache.thrift.meta_data.FieldMetaData("ID_DEPT", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID__DOC__C, new org.apache.thrift.meta_data.FieldMetaData("ID_DOC_C", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID__DEPT__C, new org.apache.thrift.meta_data.FieldMetaData("ID_DEPT_C", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID__LPU__D, new org.apache.thrift.meta_data.FieldMetaData("ID_LPU_D", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IS__CRIM, new org.apache.thrift.meta_data.FieldMetaData("IS_CRIM", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IDSERVDATA, new org.apache.thrift.meta_data.FieldMetaData("IDSERVDATA", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IDSERVMADE, new org.apache.thrift.meta_data.FieldMetaData("IDSERVMADE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IDSERVLPU, new org.apache.thrift.meta_data.FieldMetaData("IDSERVLPU", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__GOAL, new org.apache.thrift.meta_data.FieldMetaData("ID_GOAL", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__GOAL__C, new org.apache.thrift.meta_data.FieldMetaData("ID_GOAL_C", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__PAT__CAT, new org.apache.thrift.meta_data.FieldMetaData("ID_PAT_CAT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__GOSP, new org.apache.thrift.meta_data.FieldMetaData("ID_GOSP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IDVIDVME, new org.apache.thrift.meta_data.FieldMetaData("IDVIDVME", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IDFORPOM, new org.apache.thrift.meta_data.FieldMetaData("IDFORPOM", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__PRVS__D, new org.apache.thrift.meta_data.FieldMetaData("ID_PRVS_D", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__GOAL__D, new org.apache.thrift.meta_data.FieldMetaData("ID_GOAL_D", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IDMETHMP, new org.apache.thrift.meta_data.FieldMetaData("IDMETHMP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ID__LPU, new org.apache.thrift.meta_data.FieldMetaData("ID_LPU", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.N__BORN, new org.apache.thrift.meta_data.FieldMetaData("N_BORN", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "tinyint")));
    tmpMap.put(_Fields.IS__STAGE, new org.apache.thrift.meta_data.FieldMetaData("IS_STAGE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceEntry.class, metaDataMap);
  }

  public ServiceEntry() {
    this.SEND = false;

    this.AMOUNT_D = 0;

    this.IS_CRIM = false;

    this.ID_GOAL = 1;

    this.ID_GOAL_C = 1;

    this.ID_GOSP = 5;

    this.IS_STAGE = false;

  }

  public ServiceEntry(
    String SURNAME,
    String NAME1,
    long BIRTHDAY,
    short SEX,
    String ORDER,
    String POLIS_S,
    String POLIS_N,
    String PROFILE,
    String PROFILENET,
    long DATEIN,
    long DATEOUT,
    short AMOUNT,
    String DIAGNOSIS,
    boolean SEND,
    int SERV_ID,
    int ID_PRVS,
    int ID_EXITUS,
    String ILLHISTORY,
    int CASE_CAST,
    int AMOUNT_D,
    int ID_PRMP,
    int ID_PRMP_C,
    String DIAG_C,
    String DIAG_P_C,
    int QRESULT,
    int ID_PRVS_C,
    int ID_VMP,
    String ID_DOC,
    String ID_DEPT,
    String ID_DOC_C,
    String ID_DEPT_C,
    int IDFORPOM,
    int ID_LPU)
  {
    this();
    this.SURNAME = SURNAME;
    this.NAME1 = NAME1;
    this.BIRTHDAY = BIRTHDAY;
    setBIRTHDAYIsSet(true);
    this.SEX = SEX;
    setSEXIsSet(true);
    this.ORDER = ORDER;
    this.POLIS_S = POLIS_S;
    this.POLIS_N = POLIS_N;
    this.PROFILE = PROFILE;
    this.PROFILENET = PROFILENET;
    this.DATEIN = DATEIN;
    setDATEINIsSet(true);
    this.DATEOUT = DATEOUT;
    setDATEOUTIsSet(true);
    this.AMOUNT = AMOUNT;
    setAMOUNTIsSet(true);
    this.DIAGNOSIS = DIAGNOSIS;
    this.SEND = SEND;
    setSENDIsSet(true);
    this.SERV_ID = SERV_ID;
    setSERV_IDIsSet(true);
    this.ID_PRVS = ID_PRVS;
    setID_PRVSIsSet(true);
    this.ID_EXITUS = ID_EXITUS;
    setID_EXITUSIsSet(true);
    this.ILLHISTORY = ILLHISTORY;
    this.CASE_CAST = CASE_CAST;
    setCASE_CASTIsSet(true);
    this.AMOUNT_D = AMOUNT_D;
    setAMOUNT_DIsSet(true);
    this.ID_PRMP = ID_PRMP;
    setID_PRMPIsSet(true);
    this.ID_PRMP_C = ID_PRMP_C;
    setID_PRMP_CIsSet(true);
    this.DIAG_C = DIAG_C;
    this.DIAG_P_C = DIAG_P_C;
    this.QRESULT = QRESULT;
    setQRESULTIsSet(true);
    this.ID_PRVS_C = ID_PRVS_C;
    setID_PRVS_CIsSet(true);
    this.ID_VMP = ID_VMP;
    setID_VMPIsSet(true);
    this.ID_DOC = ID_DOC;
    this.ID_DEPT = ID_DEPT;
    this.ID_DOC_C = ID_DOC_C;
    this.ID_DEPT_C = ID_DEPT_C;
    this.IDFORPOM = IDFORPOM;
    setIDFORPOMIsSet(true);
    this.ID_LPU = ID_LPU;
    setID_LPUIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceEntry(ServiceEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSURNAME()) {
      this.SURNAME = other.SURNAME;
    }
    if (other.isSetNAME1()) {
      this.NAME1 = other.NAME1;
    }
    if (other.isSetNAME2()) {
      this.NAME2 = other.NAME2;
    }
    this.BIRTHDAY = other.BIRTHDAY;
    this.SEX = other.SEX;
    if (other.isSetORDER()) {
      this.ORDER = other.ORDER;
    }
    if (other.isSetPOLIS_S()) {
      this.POLIS_S = other.POLIS_S;
    }
    if (other.isSetPOLIS_N()) {
      this.POLIS_N = other.POLIS_N;
    }
    if (other.isSetPAYER()) {
      this.PAYER = other.PAYER;
    }
    if (other.isSetClientAddressInfo()) {
      this.clientAddressInfo = new ClientAddress(other.clientAddressInfo);
    }
    if (other.isSetPROFILE()) {
      this.PROFILE = other.PROFILE;
    }
    if (other.isSetPROFILENET()) {
      this.PROFILENET = other.PROFILENET;
    }
    this.DATEIN = other.DATEIN;
    this.DATEOUT = other.DATEOUT;
    this.AMOUNT = other.AMOUNT;
    if (other.isSetDIAGNOSIS()) {
      this.DIAGNOSIS = other.DIAGNOSIS;
    }
    if (other.isSetDIAG_PREF()) {
      this.DIAG_PREF = other.DIAG_PREF;
    }
    this.SEND = other.SEND;
    if (other.isSetERROR()) {
      this.ERROR = other.ERROR;
    }
    if (other.isSetClientDocumentInfo()) {
      this.clientDocumentInfo = new ClientDocument(other.clientDocumentInfo);
    }
    this.SERV_ID = other.SERV_ID;
    this.ID_PRVS = other.ID_PRVS;
    this.IDPRVSTYPE = other.IDPRVSTYPE;
    this.PRVS_PR_G = other.PRVS_PR_G;
    this.ID_EXITUS = other.ID_EXITUS;
    if (other.isSetILLHISTORY()) {
      this.ILLHISTORY = other.ILLHISTORY;
    }
    this.CASE_CAST = other.CASE_CAST;
    this.AMOUNT_D = other.AMOUNT_D;
    this.ID_PRMP = other.ID_PRMP;
    this.ID_PRMP_C = other.ID_PRMP_C;
    if (other.isSetDIAG_C()) {
      this.DIAG_C = other.DIAG_C;
    }
    if (other.isSetDIAG_S_C()) {
      this.DIAG_S_C = other.DIAG_S_C;
    }
    if (other.isSetDIAG_P_C()) {
      this.DIAG_P_C = other.DIAG_P_C;
    }
    this.QRESULT = other.QRESULT;
    this.ID_PRVS_C = other.ID_PRVS_C;
    this.ID_ED_PAY = other.ID_ED_PAY;
    this.ID_VMP = other.ID_VMP;
    if (other.isSetID_DOC()) {
      this.ID_DOC = other.ID_DOC;
    }
    if (other.isSetID_DEPT()) {
      this.ID_DEPT = other.ID_DEPT;
    }
    if (other.isSetID_DOC_C()) {
      this.ID_DOC_C = other.ID_DOC_C;
    }
    if (other.isSetID_DEPT_C()) {
      this.ID_DEPT_C = other.ID_DEPT_C;
    }
    this.ID_LPU_D = other.ID_LPU_D;
    this.IS_CRIM = other.IS_CRIM;
    this.IDSERVDATA = other.IDSERVDATA;
    this.IDSERVMADE = other.IDSERVMADE;
    this.IDSERVLPU = other.IDSERVLPU;
    this.ID_GOAL = other.ID_GOAL;
    this.ID_GOAL_C = other.ID_GOAL_C;
    this.ID_PAT_CAT = other.ID_PAT_CAT;
    this.ID_GOSP = other.ID_GOSP;
    this.IDVIDVME = other.IDVIDVME;
    this.IDFORPOM = other.IDFORPOM;
    this.ID_PRVS_D = other.ID_PRVS_D;
    this.ID_GOAL_D = other.ID_GOAL_D;
    this.IDMETHMP = other.IDMETHMP;
    this.ID_LPU = other.ID_LPU;
    this.N_BORN = other.N_BORN;
    this.IS_STAGE = other.IS_STAGE;
  }

  public ServiceEntry deepCopy() {
    return new ServiceEntry(this);
  }

  @Override
  public void clear() {
    this.SURNAME = null;
    this.NAME1 = null;
    this.NAME2 = null;
    setBIRTHDAYIsSet(false);
    this.BIRTHDAY = 0;
    setSEXIsSet(false);
    this.SEX = 0;
    this.ORDER = null;
    this.POLIS_S = null;
    this.POLIS_N = null;
    this.PAYER = null;
    this.clientAddressInfo = null;
    this.PROFILE = null;
    this.PROFILENET = null;
    setDATEINIsSet(false);
    this.DATEIN = 0;
    setDATEOUTIsSet(false);
    this.DATEOUT = 0;
    setAMOUNTIsSet(false);
    this.AMOUNT = 0;
    this.DIAGNOSIS = null;
    this.DIAG_PREF = null;
    this.SEND = false;

    this.ERROR = null;
    this.clientDocumentInfo = null;
    setSERV_IDIsSet(false);
    this.SERV_ID = 0;
    setID_PRVSIsSet(false);
    this.ID_PRVS = 0;
    setIDPRVSTYPEIsSet(false);
    this.IDPRVSTYPE = 0;
    setPRVS_PR_GIsSet(false);
    this.PRVS_PR_G = 0;
    setID_EXITUSIsSet(false);
    this.ID_EXITUS = 0;
    this.ILLHISTORY = null;
    setCASE_CASTIsSet(false);
    this.CASE_CAST = 0;
    this.AMOUNT_D = 0;

    setID_PRMPIsSet(false);
    this.ID_PRMP = 0;
    setID_PRMP_CIsSet(false);
    this.ID_PRMP_C = 0;
    this.DIAG_C = null;
    this.DIAG_S_C = null;
    this.DIAG_P_C = null;
    setQRESULTIsSet(false);
    this.QRESULT = 0;
    setID_PRVS_CIsSet(false);
    this.ID_PRVS_C = 0;
    setID_ED_PAYIsSet(false);
    this.ID_ED_PAY = 0;
    setID_VMPIsSet(false);
    this.ID_VMP = 0;
    this.ID_DOC = null;
    this.ID_DEPT = null;
    this.ID_DOC_C = null;
    this.ID_DEPT_C = null;
    setID_LPU_DIsSet(false);
    this.ID_LPU_D = 0;
    this.IS_CRIM = false;

    setIDSERVDATAIsSet(false);
    this.IDSERVDATA = 0;
    setIDSERVMADEIsSet(false);
    this.IDSERVMADE = 0;
    setIDSERVLPUIsSet(false);
    this.IDSERVLPU = 0;
    this.ID_GOAL = 1;

    this.ID_GOAL_C = 1;

    setID_PAT_CATIsSet(false);
    this.ID_PAT_CAT = 0;
    this.ID_GOSP = 5;

    setIDVIDVMEIsSet(false);
    this.IDVIDVME = 0;
    setIDFORPOMIsSet(false);
    this.IDFORPOM = 0;
    setID_PRVS_DIsSet(false);
    this.ID_PRVS_D = 0;
    setID_GOAL_DIsSet(false);
    this.ID_GOAL_D = 0;
    setIDMETHMPIsSet(false);
    this.IDMETHMP = 0;
    setID_LPUIsSet(false);
    this.ID_LPU = 0;
    setN_BORNIsSet(false);
    this.N_BORN = 0;
    this.IS_STAGE = false;

  }

  public String getSURNAME() {
    return this.SURNAME;
  }

  public ServiceEntry setSURNAME(String SURNAME) {
    this.SURNAME = SURNAME;
    return this;
  }

  public void unsetSURNAME() {
    this.SURNAME = null;
  }

  /** Returns true if field SURNAME is set (has been assigned a value) and false otherwise */
  public boolean isSetSURNAME() {
    return this.SURNAME != null;
  }

  public void setSURNAMEIsSet(boolean value) {
    if (!value) {
      this.SURNAME = null;
    }
  }

  public String getNAME1() {
    return this.NAME1;
  }

  public ServiceEntry setNAME1(String NAME1) {
    this.NAME1 = NAME1;
    return this;
  }

  public void unsetNAME1() {
    this.NAME1 = null;
  }

  /** Returns true if field NAME1 is set (has been assigned a value) and false otherwise */
  public boolean isSetNAME1() {
    return this.NAME1 != null;
  }

  public void setNAME1IsSet(boolean value) {
    if (!value) {
      this.NAME1 = null;
    }
  }

  public String getNAME2() {
    return this.NAME2;
  }

  public ServiceEntry setNAME2(String NAME2) {
    this.NAME2 = NAME2;
    return this;
  }

  public void unsetNAME2() {
    this.NAME2 = null;
  }

  /** Returns true if field NAME2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNAME2() {
    return this.NAME2 != null;
  }

  public void setNAME2IsSet(boolean value) {
    if (!value) {
      this.NAME2 = null;
    }
  }

  public long getBIRTHDAY() {
    return this.BIRTHDAY;
  }

  public ServiceEntry setBIRTHDAY(long BIRTHDAY) {
    this.BIRTHDAY = BIRTHDAY;
    setBIRTHDAYIsSet(true);
    return this;
  }

  public void unsetBIRTHDAY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  /** Returns true if field BIRTHDAY is set (has been assigned a value) and false otherwise */
  public boolean isSetBIRTHDAY() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  public void setBIRTHDAYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDAY_ISSET_ID, value);
  }

  public short getSEX() {
    return this.SEX;
  }

  public ServiceEntry setSEX(short SEX) {
    this.SEX = SEX;
    setSEXIsSet(true);
    return this;
  }

  public void unsetSEX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field SEX is set (has been assigned a value) and false otherwise */
  public boolean isSetSEX() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSEXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getORDER() {
    return this.ORDER;
  }

  public ServiceEntry setORDER(String ORDER) {
    this.ORDER = ORDER;
    return this;
  }

  public void unsetORDER() {
    this.ORDER = null;
  }

  /** Returns true if field ORDER is set (has been assigned a value) and false otherwise */
  public boolean isSetORDER() {
    return this.ORDER != null;
  }

  public void setORDERIsSet(boolean value) {
    if (!value) {
      this.ORDER = null;
    }
  }

  public String getPOLIS_S() {
    return this.POLIS_S;
  }

  public ServiceEntry setPOLIS_S(String POLIS_S) {
    this.POLIS_S = POLIS_S;
    return this;
  }

  public void unsetPOLIS_S() {
    this.POLIS_S = null;
  }

  /** Returns true if field POLIS_S is set (has been assigned a value) and false otherwise */
  public boolean isSetPOLIS_S() {
    return this.POLIS_S != null;
  }

  public void setPOLIS_SIsSet(boolean value) {
    if (!value) {
      this.POLIS_S = null;
    }
  }

  public String getPOLIS_N() {
    return this.POLIS_N;
  }

  public ServiceEntry setPOLIS_N(String POLIS_N) {
    this.POLIS_N = POLIS_N;
    return this;
  }

  public void unsetPOLIS_N() {
    this.POLIS_N = null;
  }

  /** Returns true if field POLIS_N is set (has been assigned a value) and false otherwise */
  public boolean isSetPOLIS_N() {
    return this.POLIS_N != null;
  }

  public void setPOLIS_NIsSet(boolean value) {
    if (!value) {
      this.POLIS_N = null;
    }
  }

  public String getPAYER() {
    return this.PAYER;
  }

  public ServiceEntry setPAYER(String PAYER) {
    this.PAYER = PAYER;
    return this;
  }

  public void unsetPAYER() {
    this.PAYER = null;
  }

  /** Returns true if field PAYER is set (has been assigned a value) and false otherwise */
  public boolean isSetPAYER() {
    return this.PAYER != null;
  }

  public void setPAYERIsSet(boolean value) {
    if (!value) {
      this.PAYER = null;
    }
  }

  public ClientAddress getClientAddressInfo() {
    return this.clientAddressInfo;
  }

  public ServiceEntry setClientAddressInfo(ClientAddress clientAddressInfo) {
    this.clientAddressInfo = clientAddressInfo;
    return this;
  }

  public void unsetClientAddressInfo() {
    this.clientAddressInfo = null;
  }

  /** Returns true if field clientAddressInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetClientAddressInfo() {
    return this.clientAddressInfo != null;
  }

  public void setClientAddressInfoIsSet(boolean value) {
    if (!value) {
      this.clientAddressInfo = null;
    }
  }

  public String getPROFILE() {
    return this.PROFILE;
  }

  public ServiceEntry setPROFILE(String PROFILE) {
    this.PROFILE = PROFILE;
    return this;
  }

  public void unsetPROFILE() {
    this.PROFILE = null;
  }

  /** Returns true if field PROFILE is set (has been assigned a value) and false otherwise */
  public boolean isSetPROFILE() {
    return this.PROFILE != null;
  }

  public void setPROFILEIsSet(boolean value) {
    if (!value) {
      this.PROFILE = null;
    }
  }

  public String getPROFILENET() {
    return this.PROFILENET;
  }

  public ServiceEntry setPROFILENET(String PROFILENET) {
    this.PROFILENET = PROFILENET;
    return this;
  }

  public void unsetPROFILENET() {
    this.PROFILENET = null;
  }

  /** Returns true if field PROFILENET is set (has been assigned a value) and false otherwise */
  public boolean isSetPROFILENET() {
    return this.PROFILENET != null;
  }

  public void setPROFILENETIsSet(boolean value) {
    if (!value) {
      this.PROFILENET = null;
    }
  }

  public long getDATEIN() {
    return this.DATEIN;
  }

  public ServiceEntry setDATEIN(long DATEIN) {
    this.DATEIN = DATEIN;
    setDATEINIsSet(true);
    return this;
  }

  public void unsetDATEIN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATEIN_ISSET_ID);
  }

  /** Returns true if field DATEIN is set (has been assigned a value) and false otherwise */
  public boolean isSetDATEIN() {
    return EncodingUtils.testBit(__isset_bitfield, __DATEIN_ISSET_ID);
  }

  public void setDATEINIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATEIN_ISSET_ID, value);
  }

  public long getDATEOUT() {
    return this.DATEOUT;
  }

  public ServiceEntry setDATEOUT(long DATEOUT) {
    this.DATEOUT = DATEOUT;
    setDATEOUTIsSet(true);
    return this;
  }

  public void unsetDATEOUT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATEOUT_ISSET_ID);
  }

  /** Returns true if field DATEOUT is set (has been assigned a value) and false otherwise */
  public boolean isSetDATEOUT() {
    return EncodingUtils.testBit(__isset_bitfield, __DATEOUT_ISSET_ID);
  }

  public void setDATEOUTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATEOUT_ISSET_ID, value);
  }

  public short getAMOUNT() {
    return this.AMOUNT;
  }

  public ServiceEntry setAMOUNT(short AMOUNT) {
    this.AMOUNT = AMOUNT;
    setAMOUNTIsSet(true);
    return this;
  }

  public void unsetAMOUNT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field AMOUNT is set (has been assigned a value) and false otherwise */
  public boolean isSetAMOUNT() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAMOUNTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public String getDIAGNOSIS() {
    return this.DIAGNOSIS;
  }

  public ServiceEntry setDIAGNOSIS(String DIAGNOSIS) {
    this.DIAGNOSIS = DIAGNOSIS;
    return this;
  }

  public void unsetDIAGNOSIS() {
    this.DIAGNOSIS = null;
  }

  /** Returns true if field DIAGNOSIS is set (has been assigned a value) and false otherwise */
  public boolean isSetDIAGNOSIS() {
    return this.DIAGNOSIS != null;
  }

  public void setDIAGNOSISIsSet(boolean value) {
    if (!value) {
      this.DIAGNOSIS = null;
    }
  }

  public String getDIAG_PREF() {
    return this.DIAG_PREF;
  }

  public ServiceEntry setDIAG_PREF(String DIAG_PREF) {
    this.DIAG_PREF = DIAG_PREF;
    return this;
  }

  public void unsetDIAG_PREF() {
    this.DIAG_PREF = null;
  }

  /** Returns true if field DIAG_PREF is set (has been assigned a value) and false otherwise */
  public boolean isSetDIAG_PREF() {
    return this.DIAG_PREF != null;
  }

  public void setDIAG_PREFIsSet(boolean value) {
    if (!value) {
      this.DIAG_PREF = null;
    }
  }

  public boolean isSEND() {
    return this.SEND;
  }

  public ServiceEntry setSEND(boolean SEND) {
    this.SEND = SEND;
    setSENDIsSet(true);
    return this;
  }

  public void unsetSEND() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEND_ISSET_ID);
  }

  /** Returns true if field SEND is set (has been assigned a value) and false otherwise */
  public boolean isSetSEND() {
    return EncodingUtils.testBit(__isset_bitfield, __SEND_ISSET_ID);
  }

  public void setSENDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEND_ISSET_ID, value);
  }

  public String getERROR() {
    return this.ERROR;
  }

  public ServiceEntry setERROR(String ERROR) {
    this.ERROR = ERROR;
    return this;
  }

  public void unsetERROR() {
    this.ERROR = null;
  }

  /** Returns true if field ERROR is set (has been assigned a value) and false otherwise */
  public boolean isSetERROR() {
    return this.ERROR != null;
  }

  public void setERRORIsSet(boolean value) {
    if (!value) {
      this.ERROR = null;
    }
  }

  public ClientDocument getClientDocumentInfo() {
    return this.clientDocumentInfo;
  }

  public ServiceEntry setClientDocumentInfo(ClientDocument clientDocumentInfo) {
    this.clientDocumentInfo = clientDocumentInfo;
    return this;
  }

  public void unsetClientDocumentInfo() {
    this.clientDocumentInfo = null;
  }

  /** Returns true if field clientDocumentInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetClientDocumentInfo() {
    return this.clientDocumentInfo != null;
  }

  public void setClientDocumentInfoIsSet(boolean value) {
    if (!value) {
      this.clientDocumentInfo = null;
    }
  }

  public int getSERV_ID() {
    return this.SERV_ID;
  }

  public ServiceEntry setSERV_ID(int SERV_ID) {
    this.SERV_ID = SERV_ID;
    setSERV_IDIsSet(true);
    return this;
  }

  public void unsetSERV_ID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERV_ID_ISSET_ID);
  }

  /** Returns true if field SERV_ID is set (has been assigned a value) and false otherwise */
  public boolean isSetSERV_ID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERV_ID_ISSET_ID);
  }

  public void setSERV_IDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERV_ID_ISSET_ID, value);
  }

  public int getID_PRVS() {
    return this.ID_PRVS;
  }

  public ServiceEntry setID_PRVS(int ID_PRVS) {
    this.ID_PRVS = ID_PRVS;
    setID_PRVSIsSet(true);
    return this;
  }

  public void unsetID_PRVS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_PRVS_ISSET_ID);
  }

  /** Returns true if field ID_PRVS is set (has been assigned a value) and false otherwise */
  public boolean isSetID_PRVS() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_PRVS_ISSET_ID);
  }

  public void setID_PRVSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_PRVS_ISSET_ID, value);
  }

  public int getIDPRVSTYPE() {
    return this.IDPRVSTYPE;
  }

  public ServiceEntry setIDPRVSTYPE(int IDPRVSTYPE) {
    this.IDPRVSTYPE = IDPRVSTYPE;
    setIDPRVSTYPEIsSet(true);
    return this;
  }

  public void unsetIDPRVSTYPE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDPRVSTYPE_ISSET_ID);
  }

  /** Returns true if field IDPRVSTYPE is set (has been assigned a value) and false otherwise */
  public boolean isSetIDPRVSTYPE() {
    return EncodingUtils.testBit(__isset_bitfield, __IDPRVSTYPE_ISSET_ID);
  }

  public void setIDPRVSTYPEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDPRVSTYPE_ISSET_ID, value);
  }

  public int getPRVS_PR_G() {
    return this.PRVS_PR_G;
  }

  public ServiceEntry setPRVS_PR_G(int PRVS_PR_G) {
    this.PRVS_PR_G = PRVS_PR_G;
    setPRVS_PR_GIsSet(true);
    return this;
  }

  public void unsetPRVS_PR_G() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRVS_PR_G_ISSET_ID);
  }

  /** Returns true if field PRVS_PR_G is set (has been assigned a value) and false otherwise */
  public boolean isSetPRVS_PR_G() {
    return EncodingUtils.testBit(__isset_bitfield, __PRVS_PR_G_ISSET_ID);
  }

  public void setPRVS_PR_GIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRVS_PR_G_ISSET_ID, value);
  }

  public int getID_EXITUS() {
    return this.ID_EXITUS;
  }

  public ServiceEntry setID_EXITUS(int ID_EXITUS) {
    this.ID_EXITUS = ID_EXITUS;
    setID_EXITUSIsSet(true);
    return this;
  }

  public void unsetID_EXITUS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_EXITUS_ISSET_ID);
  }

  /** Returns true if field ID_EXITUS is set (has been assigned a value) and false otherwise */
  public boolean isSetID_EXITUS() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_EXITUS_ISSET_ID);
  }

  public void setID_EXITUSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_EXITUS_ISSET_ID, value);
  }

  public String getILLHISTORY() {
    return this.ILLHISTORY;
  }

  public ServiceEntry setILLHISTORY(String ILLHISTORY) {
    this.ILLHISTORY = ILLHISTORY;
    return this;
  }

  public void unsetILLHISTORY() {
    this.ILLHISTORY = null;
  }

  /** Returns true if field ILLHISTORY is set (has been assigned a value) and false otherwise */
  public boolean isSetILLHISTORY() {
    return this.ILLHISTORY != null;
  }

  public void setILLHISTORYIsSet(boolean value) {
    if (!value) {
      this.ILLHISTORY = null;
    }
  }

  public int getCASE_CAST() {
    return this.CASE_CAST;
  }

  public ServiceEntry setCASE_CAST(int CASE_CAST) {
    this.CASE_CAST = CASE_CAST;
    setCASE_CASTIsSet(true);
    return this;
  }

  public void unsetCASE_CAST() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASE_CAST_ISSET_ID);
  }

  /** Returns true if field CASE_CAST is set (has been assigned a value) and false otherwise */
  public boolean isSetCASE_CAST() {
    return EncodingUtils.testBit(__isset_bitfield, __CASE_CAST_ISSET_ID);
  }

  public void setCASE_CASTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASE_CAST_ISSET_ID, value);
  }

  public int getAMOUNT_D() {
    return this.AMOUNT_D;
  }

  public ServiceEntry setAMOUNT_D(int AMOUNT_D) {
    this.AMOUNT_D = AMOUNT_D;
    setAMOUNT_DIsSet(true);
    return this;
  }

  public void unsetAMOUNT_D() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_D_ISSET_ID);
  }

  /** Returns true if field AMOUNT_D is set (has been assigned a value) and false otherwise */
  public boolean isSetAMOUNT_D() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_D_ISSET_ID);
  }

  public void setAMOUNT_DIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_D_ISSET_ID, value);
  }

  public int getID_PRMP() {
    return this.ID_PRMP;
  }

  public ServiceEntry setID_PRMP(int ID_PRMP) {
    this.ID_PRMP = ID_PRMP;
    setID_PRMPIsSet(true);
    return this;
  }

  public void unsetID_PRMP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_PRMP_ISSET_ID);
  }

  /** Returns true if field ID_PRMP is set (has been assigned a value) and false otherwise */
  public boolean isSetID_PRMP() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_PRMP_ISSET_ID);
  }

  public void setID_PRMPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_PRMP_ISSET_ID, value);
  }

  public int getID_PRMP_C() {
    return this.ID_PRMP_C;
  }

  public ServiceEntry setID_PRMP_C(int ID_PRMP_C) {
    this.ID_PRMP_C = ID_PRMP_C;
    setID_PRMP_CIsSet(true);
    return this;
  }

  public void unsetID_PRMP_C() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_PRMP_C_ISSET_ID);
  }

  /** Returns true if field ID_PRMP_C is set (has been assigned a value) and false otherwise */
  public boolean isSetID_PRMP_C() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_PRMP_C_ISSET_ID);
  }

  public void setID_PRMP_CIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_PRMP_C_ISSET_ID, value);
  }

  public String getDIAG_C() {
    return this.DIAG_C;
  }

  public ServiceEntry setDIAG_C(String DIAG_C) {
    this.DIAG_C = DIAG_C;
    return this;
  }

  public void unsetDIAG_C() {
    this.DIAG_C = null;
  }

  /** Returns true if field DIAG_C is set (has been assigned a value) and false otherwise */
  public boolean isSetDIAG_C() {
    return this.DIAG_C != null;
  }

  public void setDIAG_CIsSet(boolean value) {
    if (!value) {
      this.DIAG_C = null;
    }
  }

  public String getDIAG_S_C() {
    return this.DIAG_S_C;
  }

  public ServiceEntry setDIAG_S_C(String DIAG_S_C) {
    this.DIAG_S_C = DIAG_S_C;
    return this;
  }

  public void unsetDIAG_S_C() {
    this.DIAG_S_C = null;
  }

  /** Returns true if field DIAG_S_C is set (has been assigned a value) and false otherwise */
  public boolean isSetDIAG_S_C() {
    return this.DIAG_S_C != null;
  }

  public void setDIAG_S_CIsSet(boolean value) {
    if (!value) {
      this.DIAG_S_C = null;
    }
  }

  public String getDIAG_P_C() {
    return this.DIAG_P_C;
  }

  public ServiceEntry setDIAG_P_C(String DIAG_P_C) {
    this.DIAG_P_C = DIAG_P_C;
    return this;
  }

  public void unsetDIAG_P_C() {
    this.DIAG_P_C = null;
  }

  /** Returns true if field DIAG_P_C is set (has been assigned a value) and false otherwise */
  public boolean isSetDIAG_P_C() {
    return this.DIAG_P_C != null;
  }

  public void setDIAG_P_CIsSet(boolean value) {
    if (!value) {
      this.DIAG_P_C = null;
    }
  }

  public int getQRESULT() {
    return this.QRESULT;
  }

  public ServiceEntry setQRESULT(int QRESULT) {
    this.QRESULT = QRESULT;
    setQRESULTIsSet(true);
    return this;
  }

  public void unsetQRESULT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QRESULT_ISSET_ID);
  }

  /** Returns true if field QRESULT is set (has been assigned a value) and false otherwise */
  public boolean isSetQRESULT() {
    return EncodingUtils.testBit(__isset_bitfield, __QRESULT_ISSET_ID);
  }

  public void setQRESULTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QRESULT_ISSET_ID, value);
  }

  public int getID_PRVS_C() {
    return this.ID_PRVS_C;
  }

  public ServiceEntry setID_PRVS_C(int ID_PRVS_C) {
    this.ID_PRVS_C = ID_PRVS_C;
    setID_PRVS_CIsSet(true);
    return this;
  }

  public void unsetID_PRVS_C() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_PRVS_C_ISSET_ID);
  }

  /** Returns true if field ID_PRVS_C is set (has been assigned a value) and false otherwise */
  public boolean isSetID_PRVS_C() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_PRVS_C_ISSET_ID);
  }

  public void setID_PRVS_CIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_PRVS_C_ISSET_ID, value);
  }

  public int getID_ED_PAY() {
    return this.ID_ED_PAY;
  }

  public ServiceEntry setID_ED_PAY(int ID_ED_PAY) {
    this.ID_ED_PAY = ID_ED_PAY;
    setID_ED_PAYIsSet(true);
    return this;
  }

  public void unsetID_ED_PAY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ED_PAY_ISSET_ID);
  }

  /** Returns true if field ID_ED_PAY is set (has been assigned a value) and false otherwise */
  public boolean isSetID_ED_PAY() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ED_PAY_ISSET_ID);
  }

  public void setID_ED_PAYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ED_PAY_ISSET_ID, value);
  }

  public int getID_VMP() {
    return this.ID_VMP;
  }

  public ServiceEntry setID_VMP(int ID_VMP) {
    this.ID_VMP = ID_VMP;
    setID_VMPIsSet(true);
    return this;
  }

  public void unsetID_VMP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_VMP_ISSET_ID);
  }

  /** Returns true if field ID_VMP is set (has been assigned a value) and false otherwise */
  public boolean isSetID_VMP() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_VMP_ISSET_ID);
  }

  public void setID_VMPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_VMP_ISSET_ID, value);
  }

  public String getID_DOC() {
    return this.ID_DOC;
  }

  public ServiceEntry setID_DOC(String ID_DOC) {
    this.ID_DOC = ID_DOC;
    return this;
  }

  public void unsetID_DOC() {
    this.ID_DOC = null;
  }

  /** Returns true if field ID_DOC is set (has been assigned a value) and false otherwise */
  public boolean isSetID_DOC() {
    return this.ID_DOC != null;
  }

  public void setID_DOCIsSet(boolean value) {
    if (!value) {
      this.ID_DOC = null;
    }
  }

  public String getID_DEPT() {
    return this.ID_DEPT;
  }

  public ServiceEntry setID_DEPT(String ID_DEPT) {
    this.ID_DEPT = ID_DEPT;
    return this;
  }

  public void unsetID_DEPT() {
    this.ID_DEPT = null;
  }

  /** Returns true if field ID_DEPT is set (has been assigned a value) and false otherwise */
  public boolean isSetID_DEPT() {
    return this.ID_DEPT != null;
  }

  public void setID_DEPTIsSet(boolean value) {
    if (!value) {
      this.ID_DEPT = null;
    }
  }

  public String getID_DOC_C() {
    return this.ID_DOC_C;
  }

  public ServiceEntry setID_DOC_C(String ID_DOC_C) {
    this.ID_DOC_C = ID_DOC_C;
    return this;
  }

  public void unsetID_DOC_C() {
    this.ID_DOC_C = null;
  }

  /** Returns true if field ID_DOC_C is set (has been assigned a value) and false otherwise */
  public boolean isSetID_DOC_C() {
    return this.ID_DOC_C != null;
  }

  public void setID_DOC_CIsSet(boolean value) {
    if (!value) {
      this.ID_DOC_C = null;
    }
  }

  public String getID_DEPT_C() {
    return this.ID_DEPT_C;
  }

  public ServiceEntry setID_DEPT_C(String ID_DEPT_C) {
    this.ID_DEPT_C = ID_DEPT_C;
    return this;
  }

  public void unsetID_DEPT_C() {
    this.ID_DEPT_C = null;
  }

  /** Returns true if field ID_DEPT_C is set (has been assigned a value) and false otherwise */
  public boolean isSetID_DEPT_C() {
    return this.ID_DEPT_C != null;
  }

  public void setID_DEPT_CIsSet(boolean value) {
    if (!value) {
      this.ID_DEPT_C = null;
    }
  }

  public int getID_LPU_D() {
    return this.ID_LPU_D;
  }

  public ServiceEntry setID_LPU_D(int ID_LPU_D) {
    this.ID_LPU_D = ID_LPU_D;
    setID_LPU_DIsSet(true);
    return this;
  }

  public void unsetID_LPU_D() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_LPU_D_ISSET_ID);
  }

  /** Returns true if field ID_LPU_D is set (has been assigned a value) and false otherwise */
  public boolean isSetID_LPU_D() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_LPU_D_ISSET_ID);
  }

  public void setID_LPU_DIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_LPU_D_ISSET_ID, value);
  }

  public boolean isIS_CRIM() {
    return this.IS_CRIM;
  }

  public ServiceEntry setIS_CRIM(boolean IS_CRIM) {
    this.IS_CRIM = IS_CRIM;
    setIS_CRIMIsSet(true);
    return this;
  }

  public void unsetIS_CRIM() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_CRIM_ISSET_ID);
  }

  /** Returns true if field IS_CRIM is set (has been assigned a value) and false otherwise */
  public boolean isSetIS_CRIM() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_CRIM_ISSET_ID);
  }

  public void setIS_CRIMIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_CRIM_ISSET_ID, value);
  }

  public int getIDSERVDATA() {
    return this.IDSERVDATA;
  }

  public ServiceEntry setIDSERVDATA(int IDSERVDATA) {
    this.IDSERVDATA = IDSERVDATA;
    setIDSERVDATAIsSet(true);
    return this;
  }

  public void unsetIDSERVDATA() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDSERVDATA_ISSET_ID);
  }

  /** Returns true if field IDSERVDATA is set (has been assigned a value) and false otherwise */
  public boolean isSetIDSERVDATA() {
    return EncodingUtils.testBit(__isset_bitfield, __IDSERVDATA_ISSET_ID);
  }

  public void setIDSERVDATAIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDSERVDATA_ISSET_ID, value);
  }

  public int getIDSERVMADE() {
    return this.IDSERVMADE;
  }

  public ServiceEntry setIDSERVMADE(int IDSERVMADE) {
    this.IDSERVMADE = IDSERVMADE;
    setIDSERVMADEIsSet(true);
    return this;
  }

  public void unsetIDSERVMADE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDSERVMADE_ISSET_ID);
  }

  /** Returns true if field IDSERVMADE is set (has been assigned a value) and false otherwise */
  public boolean isSetIDSERVMADE() {
    return EncodingUtils.testBit(__isset_bitfield, __IDSERVMADE_ISSET_ID);
  }

  public void setIDSERVMADEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDSERVMADE_ISSET_ID, value);
  }

  public int getIDSERVLPU() {
    return this.IDSERVLPU;
  }

  public ServiceEntry setIDSERVLPU(int IDSERVLPU) {
    this.IDSERVLPU = IDSERVLPU;
    setIDSERVLPUIsSet(true);
    return this;
  }

  public void unsetIDSERVLPU() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDSERVLPU_ISSET_ID);
  }

  /** Returns true if field IDSERVLPU is set (has been assigned a value) and false otherwise */
  public boolean isSetIDSERVLPU() {
    return EncodingUtils.testBit(__isset_bitfield, __IDSERVLPU_ISSET_ID);
  }

  public void setIDSERVLPUIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDSERVLPU_ISSET_ID, value);
  }

  public int getID_GOAL() {
    return this.ID_GOAL;
  }

  public ServiceEntry setID_GOAL(int ID_GOAL) {
    this.ID_GOAL = ID_GOAL;
    setID_GOALIsSet(true);
    return this;
  }

  public void unsetID_GOAL() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_GOAL_ISSET_ID);
  }

  /** Returns true if field ID_GOAL is set (has been assigned a value) and false otherwise */
  public boolean isSetID_GOAL() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_GOAL_ISSET_ID);
  }

  public void setID_GOALIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_GOAL_ISSET_ID, value);
  }

  public int getID_GOAL_C() {
    return this.ID_GOAL_C;
  }

  public ServiceEntry setID_GOAL_C(int ID_GOAL_C) {
    this.ID_GOAL_C = ID_GOAL_C;
    setID_GOAL_CIsSet(true);
    return this;
  }

  public void unsetID_GOAL_C() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_GOAL_C_ISSET_ID);
  }

  /** Returns true if field ID_GOAL_C is set (has been assigned a value) and false otherwise */
  public boolean isSetID_GOAL_C() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_GOAL_C_ISSET_ID);
  }

  public void setID_GOAL_CIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_GOAL_C_ISSET_ID, value);
  }

  public int getID_PAT_CAT() {
    return this.ID_PAT_CAT;
  }

  public ServiceEntry setID_PAT_CAT(int ID_PAT_CAT) {
    this.ID_PAT_CAT = ID_PAT_CAT;
    setID_PAT_CATIsSet(true);
    return this;
  }

  public void unsetID_PAT_CAT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_PAT_CAT_ISSET_ID);
  }

  /** Returns true if field ID_PAT_CAT is set (has been assigned a value) and false otherwise */
  public boolean isSetID_PAT_CAT() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_PAT_CAT_ISSET_ID);
  }

  public void setID_PAT_CATIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_PAT_CAT_ISSET_ID, value);
  }

  public int getID_GOSP() {
    return this.ID_GOSP;
  }

  public ServiceEntry setID_GOSP(int ID_GOSP) {
    this.ID_GOSP = ID_GOSP;
    setID_GOSPIsSet(true);
    return this;
  }

  public void unsetID_GOSP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_GOSP_ISSET_ID);
  }

  /** Returns true if field ID_GOSP is set (has been assigned a value) and false otherwise */
  public boolean isSetID_GOSP() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_GOSP_ISSET_ID);
  }

  public void setID_GOSPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_GOSP_ISSET_ID, value);
  }

  public int getIDVIDVME() {
    return this.IDVIDVME;
  }

  public ServiceEntry setIDVIDVME(int IDVIDVME) {
    this.IDVIDVME = IDVIDVME;
    setIDVIDVMEIsSet(true);
    return this;
  }

  public void unsetIDVIDVME() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDVIDVME_ISSET_ID);
  }

  /** Returns true if field IDVIDVME is set (has been assigned a value) and false otherwise */
  public boolean isSetIDVIDVME() {
    return EncodingUtils.testBit(__isset_bitfield, __IDVIDVME_ISSET_ID);
  }

  public void setIDVIDVMEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDVIDVME_ISSET_ID, value);
  }

  public int getIDFORPOM() {
    return this.IDFORPOM;
  }

  public ServiceEntry setIDFORPOM(int IDFORPOM) {
    this.IDFORPOM = IDFORPOM;
    setIDFORPOMIsSet(true);
    return this;
  }

  public void unsetIDFORPOM() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDFORPOM_ISSET_ID);
  }

  /** Returns true if field IDFORPOM is set (has been assigned a value) and false otherwise */
  public boolean isSetIDFORPOM() {
    return EncodingUtils.testBit(__isset_bitfield, __IDFORPOM_ISSET_ID);
  }

  public void setIDFORPOMIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDFORPOM_ISSET_ID, value);
  }

  public int getID_PRVS_D() {
    return this.ID_PRVS_D;
  }

  public ServiceEntry setID_PRVS_D(int ID_PRVS_D) {
    this.ID_PRVS_D = ID_PRVS_D;
    setID_PRVS_DIsSet(true);
    return this;
  }

  public void unsetID_PRVS_D() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_PRVS_D_ISSET_ID);
  }

  /** Returns true if field ID_PRVS_D is set (has been assigned a value) and false otherwise */
  public boolean isSetID_PRVS_D() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_PRVS_D_ISSET_ID);
  }

  public void setID_PRVS_DIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_PRVS_D_ISSET_ID, value);
  }

  public int getID_GOAL_D() {
    return this.ID_GOAL_D;
  }

  public ServiceEntry setID_GOAL_D(int ID_GOAL_D) {
    this.ID_GOAL_D = ID_GOAL_D;
    setID_GOAL_DIsSet(true);
    return this;
  }

  public void unsetID_GOAL_D() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_GOAL_D_ISSET_ID);
  }

  /** Returns true if field ID_GOAL_D is set (has been assigned a value) and false otherwise */
  public boolean isSetID_GOAL_D() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_GOAL_D_ISSET_ID);
  }

  public void setID_GOAL_DIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_GOAL_D_ISSET_ID, value);
  }

  public int getIDMETHMP() {
    return this.IDMETHMP;
  }

  public ServiceEntry setIDMETHMP(int IDMETHMP) {
    this.IDMETHMP = IDMETHMP;
    setIDMETHMPIsSet(true);
    return this;
  }

  public void unsetIDMETHMP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDMETHMP_ISSET_ID);
  }

  /** Returns true if field IDMETHMP is set (has been assigned a value) and false otherwise */
  public boolean isSetIDMETHMP() {
    return EncodingUtils.testBit(__isset_bitfield, __IDMETHMP_ISSET_ID);
  }

  public void setIDMETHMPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDMETHMP_ISSET_ID, value);
  }

  public int getID_LPU() {
    return this.ID_LPU;
  }

  public ServiceEntry setID_LPU(int ID_LPU) {
    this.ID_LPU = ID_LPU;
    setID_LPUIsSet(true);
    return this;
  }

  public void unsetID_LPU() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_LPU_ISSET_ID);
  }

  /** Returns true if field ID_LPU is set (has been assigned a value) and false otherwise */
  public boolean isSetID_LPU() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_LPU_ISSET_ID);
  }

  public void setID_LPUIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_LPU_ISSET_ID, value);
  }

  public short getN_BORN() {
    return this.N_BORN;
  }

  public ServiceEntry setN_BORN(short N_BORN) {
    this.N_BORN = N_BORN;
    setN_BORNIsSet(true);
    return this;
  }

  public void unsetN_BORN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __N_BORN_ISSET_ID);
  }

  /** Returns true if field N_BORN is set (has been assigned a value) and false otherwise */
  public boolean isSetN_BORN() {
    return EncodingUtils.testBit(__isset_bitfield, __N_BORN_ISSET_ID);
  }

  public void setN_BORNIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __N_BORN_ISSET_ID, value);
  }

  public boolean isIS_STAGE() {
    return this.IS_STAGE;
  }

  public ServiceEntry setIS_STAGE(boolean IS_STAGE) {
    this.IS_STAGE = IS_STAGE;
    setIS_STAGEIsSet(true);
    return this;
  }

  public void unsetIS_STAGE() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_STAGE_ISSET_ID);
  }

  /** Returns true if field IS_STAGE is set (has been assigned a value) and false otherwise */
  public boolean isSetIS_STAGE() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_STAGE_ISSET_ID);
  }

  public void setIS_STAGEIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_STAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SURNAME:
      if (value == null) {
        unsetSURNAME();
      } else {
        setSURNAME((String)value);
      }
      break;

    case NAME1:
      if (value == null) {
        unsetNAME1();
      } else {
        setNAME1((String)value);
      }
      break;

    case NAME2:
      if (value == null) {
        unsetNAME2();
      } else {
        setNAME2((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBIRTHDAY();
      } else {
        setBIRTHDAY((Long)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSEX();
      } else {
        setSEX((Short)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetORDER();
      } else {
        setORDER((String)value);
      }
      break;

    case POLIS__S:
      if (value == null) {
        unsetPOLIS_S();
      } else {
        setPOLIS_S((String)value);
      }
      break;

    case POLIS__N:
      if (value == null) {
        unsetPOLIS_N();
      } else {
        setPOLIS_N((String)value);
      }
      break;

    case PAYER:
      if (value == null) {
        unsetPAYER();
      } else {
        setPAYER((String)value);
      }
      break;

    case CLIENT_ADDRESS_INFO:
      if (value == null) {
        unsetClientAddressInfo();
      } else {
        setClientAddressInfo((ClientAddress)value);
      }
      break;

    case PROFILE:
      if (value == null) {
        unsetPROFILE();
      } else {
        setPROFILE((String)value);
      }
      break;

    case PROFILENET:
      if (value == null) {
        unsetPROFILENET();
      } else {
        setPROFILENET((String)value);
      }
      break;

    case DATEIN:
      if (value == null) {
        unsetDATEIN();
      } else {
        setDATEIN((Long)value);
      }
      break;

    case DATEOUT:
      if (value == null) {
        unsetDATEOUT();
      } else {
        setDATEOUT((Long)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAMOUNT();
      } else {
        setAMOUNT((Short)value);
      }
      break;

    case DIAGNOSIS:
      if (value == null) {
        unsetDIAGNOSIS();
      } else {
        setDIAGNOSIS((String)value);
      }
      break;

    case DIAG__PREF:
      if (value == null) {
        unsetDIAG_PREF();
      } else {
        setDIAG_PREF((String)value);
      }
      break;

    case SEND:
      if (value == null) {
        unsetSEND();
      } else {
        setSEND((Boolean)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetERROR();
      } else {
        setERROR((String)value);
      }
      break;

    case CLIENT_DOCUMENT_INFO:
      if (value == null) {
        unsetClientDocumentInfo();
      } else {
        setClientDocumentInfo((ClientDocument)value);
      }
      break;

    case SERV__ID:
      if (value == null) {
        unsetSERV_ID();
      } else {
        setSERV_ID((Integer)value);
      }
      break;

    case ID__PRVS:
      if (value == null) {
        unsetID_PRVS();
      } else {
        setID_PRVS((Integer)value);
      }
      break;

    case IDPRVSTYPE:
      if (value == null) {
        unsetIDPRVSTYPE();
      } else {
        setIDPRVSTYPE((Integer)value);
      }
      break;

    case PRVS__PR__G:
      if (value == null) {
        unsetPRVS_PR_G();
      } else {
        setPRVS_PR_G((Integer)value);
      }
      break;

    case ID__EXITUS:
      if (value == null) {
        unsetID_EXITUS();
      } else {
        setID_EXITUS((Integer)value);
      }
      break;

    case ILLHISTORY:
      if (value == null) {
        unsetILLHISTORY();
      } else {
        setILLHISTORY((String)value);
      }
      break;

    case CASE__CAST:
      if (value == null) {
        unsetCASE_CAST();
      } else {
        setCASE_CAST((Integer)value);
      }
      break;

    case AMOUNT__D:
      if (value == null) {
        unsetAMOUNT_D();
      } else {
        setAMOUNT_D((Integer)value);
      }
      break;

    case ID__PRMP:
      if (value == null) {
        unsetID_PRMP();
      } else {
        setID_PRMP((Integer)value);
      }
      break;

    case ID__PRMP__C:
      if (value == null) {
        unsetID_PRMP_C();
      } else {
        setID_PRMP_C((Integer)value);
      }
      break;

    case DIAG__C:
      if (value == null) {
        unsetDIAG_C();
      } else {
        setDIAG_C((String)value);
      }
      break;

    case DIAG__S__C:
      if (value == null) {
        unsetDIAG_S_C();
      } else {
        setDIAG_S_C((String)value);
      }
      break;

    case DIAG__P__C:
      if (value == null) {
        unsetDIAG_P_C();
      } else {
        setDIAG_P_C((String)value);
      }
      break;

    case QRESULT:
      if (value == null) {
        unsetQRESULT();
      } else {
        setQRESULT((Integer)value);
      }
      break;

    case ID__PRVS__C:
      if (value == null) {
        unsetID_PRVS_C();
      } else {
        setID_PRVS_C((Integer)value);
      }
      break;

    case ID__ED__PAY:
      if (value == null) {
        unsetID_ED_PAY();
      } else {
        setID_ED_PAY((Integer)value);
      }
      break;

    case ID__VMP:
      if (value == null) {
        unsetID_VMP();
      } else {
        setID_VMP((Integer)value);
      }
      break;

    case ID__DOC:
      if (value == null) {
        unsetID_DOC();
      } else {
        setID_DOC((String)value);
      }
      break;

    case ID__DEPT:
      if (value == null) {
        unsetID_DEPT();
      } else {
        setID_DEPT((String)value);
      }
      break;

    case ID__DOC__C:
      if (value == null) {
        unsetID_DOC_C();
      } else {
        setID_DOC_C((String)value);
      }
      break;

    case ID__DEPT__C:
      if (value == null) {
        unsetID_DEPT_C();
      } else {
        setID_DEPT_C((String)value);
      }
      break;

    case ID__LPU__D:
      if (value == null) {
        unsetID_LPU_D();
      } else {
        setID_LPU_D((Integer)value);
      }
      break;

    case IS__CRIM:
      if (value == null) {
        unsetIS_CRIM();
      } else {
        setIS_CRIM((Boolean)value);
      }
      break;

    case IDSERVDATA:
      if (value == null) {
        unsetIDSERVDATA();
      } else {
        setIDSERVDATA((Integer)value);
      }
      break;

    case IDSERVMADE:
      if (value == null) {
        unsetIDSERVMADE();
      } else {
        setIDSERVMADE((Integer)value);
      }
      break;

    case IDSERVLPU:
      if (value == null) {
        unsetIDSERVLPU();
      } else {
        setIDSERVLPU((Integer)value);
      }
      break;

    case ID__GOAL:
      if (value == null) {
        unsetID_GOAL();
      } else {
        setID_GOAL((Integer)value);
      }
      break;

    case ID__GOAL__C:
      if (value == null) {
        unsetID_GOAL_C();
      } else {
        setID_GOAL_C((Integer)value);
      }
      break;

    case ID__PAT__CAT:
      if (value == null) {
        unsetID_PAT_CAT();
      } else {
        setID_PAT_CAT((Integer)value);
      }
      break;

    case ID__GOSP:
      if (value == null) {
        unsetID_GOSP();
      } else {
        setID_GOSP((Integer)value);
      }
      break;

    case IDVIDVME:
      if (value == null) {
        unsetIDVIDVME();
      } else {
        setIDVIDVME((Integer)value);
      }
      break;

    case IDFORPOM:
      if (value == null) {
        unsetIDFORPOM();
      } else {
        setIDFORPOM((Integer)value);
      }
      break;

    case ID__PRVS__D:
      if (value == null) {
        unsetID_PRVS_D();
      } else {
        setID_PRVS_D((Integer)value);
      }
      break;

    case ID__GOAL__D:
      if (value == null) {
        unsetID_GOAL_D();
      } else {
        setID_GOAL_D((Integer)value);
      }
      break;

    case IDMETHMP:
      if (value == null) {
        unsetIDMETHMP();
      } else {
        setIDMETHMP((Integer)value);
      }
      break;

    case ID__LPU:
      if (value == null) {
        unsetID_LPU();
      } else {
        setID_LPU((Integer)value);
      }
      break;

    case N__BORN:
      if (value == null) {
        unsetN_BORN();
      } else {
        setN_BORN((Short)value);
      }
      break;

    case IS__STAGE:
      if (value == null) {
        unsetIS_STAGE();
      } else {
        setIS_STAGE((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SURNAME:
      return getSURNAME();

    case NAME1:
      return getNAME1();

    case NAME2:
      return getNAME2();

    case BIRTHDAY:
      return Long.valueOf(getBIRTHDAY());

    case SEX:
      return Short.valueOf(getSEX());

    case ORDER:
      return getORDER();

    case POLIS__S:
      return getPOLIS_S();

    case POLIS__N:
      return getPOLIS_N();

    case PAYER:
      return getPAYER();

    case CLIENT_ADDRESS_INFO:
      return getClientAddressInfo();

    case PROFILE:
      return getPROFILE();

    case PROFILENET:
      return getPROFILENET();

    case DATEIN:
      return Long.valueOf(getDATEIN());

    case DATEOUT:
      return Long.valueOf(getDATEOUT());

    case AMOUNT:
      return Short.valueOf(getAMOUNT());

    case DIAGNOSIS:
      return getDIAGNOSIS();

    case DIAG__PREF:
      return getDIAG_PREF();

    case SEND:
      return Boolean.valueOf(isSEND());

    case ERROR:
      return getERROR();

    case CLIENT_DOCUMENT_INFO:
      return getClientDocumentInfo();

    case SERV__ID:
      return Integer.valueOf(getSERV_ID());

    case ID__PRVS:
      return Integer.valueOf(getID_PRVS());

    case IDPRVSTYPE:
      return Integer.valueOf(getIDPRVSTYPE());

    case PRVS__PR__G:
      return Integer.valueOf(getPRVS_PR_G());

    case ID__EXITUS:
      return Integer.valueOf(getID_EXITUS());

    case ILLHISTORY:
      return getILLHISTORY();

    case CASE__CAST:
      return Integer.valueOf(getCASE_CAST());

    case AMOUNT__D:
      return Integer.valueOf(getAMOUNT_D());

    case ID__PRMP:
      return Integer.valueOf(getID_PRMP());

    case ID__PRMP__C:
      return Integer.valueOf(getID_PRMP_C());

    case DIAG__C:
      return getDIAG_C();

    case DIAG__S__C:
      return getDIAG_S_C();

    case DIAG__P__C:
      return getDIAG_P_C();

    case QRESULT:
      return Integer.valueOf(getQRESULT());

    case ID__PRVS__C:
      return Integer.valueOf(getID_PRVS_C());

    case ID__ED__PAY:
      return Integer.valueOf(getID_ED_PAY());

    case ID__VMP:
      return Integer.valueOf(getID_VMP());

    case ID__DOC:
      return getID_DOC();

    case ID__DEPT:
      return getID_DEPT();

    case ID__DOC__C:
      return getID_DOC_C();

    case ID__DEPT__C:
      return getID_DEPT_C();

    case ID__LPU__D:
      return Integer.valueOf(getID_LPU_D());

    case IS__CRIM:
      return Boolean.valueOf(isIS_CRIM());

    case IDSERVDATA:
      return Integer.valueOf(getIDSERVDATA());

    case IDSERVMADE:
      return Integer.valueOf(getIDSERVMADE());

    case IDSERVLPU:
      return Integer.valueOf(getIDSERVLPU());

    case ID__GOAL:
      return Integer.valueOf(getID_GOAL());

    case ID__GOAL__C:
      return Integer.valueOf(getID_GOAL_C());

    case ID__PAT__CAT:
      return Integer.valueOf(getID_PAT_CAT());

    case ID__GOSP:
      return Integer.valueOf(getID_GOSP());

    case IDVIDVME:
      return Integer.valueOf(getIDVIDVME());

    case IDFORPOM:
      return Integer.valueOf(getIDFORPOM());

    case ID__PRVS__D:
      return Integer.valueOf(getID_PRVS_D());

    case ID__GOAL__D:
      return Integer.valueOf(getID_GOAL_D());

    case IDMETHMP:
      return Integer.valueOf(getIDMETHMP());

    case ID__LPU:
      return Integer.valueOf(getID_LPU());

    case N__BORN:
      return Short.valueOf(getN_BORN());

    case IS__STAGE:
      return Boolean.valueOf(isIS_STAGE());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SURNAME:
      return isSetSURNAME();
    case NAME1:
      return isSetNAME1();
    case NAME2:
      return isSetNAME2();
    case BIRTHDAY:
      return isSetBIRTHDAY();
    case SEX:
      return isSetSEX();
    case ORDER:
      return isSetORDER();
    case POLIS__S:
      return isSetPOLIS_S();
    case POLIS__N:
      return isSetPOLIS_N();
    case PAYER:
      return isSetPAYER();
    case CLIENT_ADDRESS_INFO:
      return isSetClientAddressInfo();
    case PROFILE:
      return isSetPROFILE();
    case PROFILENET:
      return isSetPROFILENET();
    case DATEIN:
      return isSetDATEIN();
    case DATEOUT:
      return isSetDATEOUT();
    case AMOUNT:
      return isSetAMOUNT();
    case DIAGNOSIS:
      return isSetDIAGNOSIS();
    case DIAG__PREF:
      return isSetDIAG_PREF();
    case SEND:
      return isSetSEND();
    case ERROR:
      return isSetERROR();
    case CLIENT_DOCUMENT_INFO:
      return isSetClientDocumentInfo();
    case SERV__ID:
      return isSetSERV_ID();
    case ID__PRVS:
      return isSetID_PRVS();
    case IDPRVSTYPE:
      return isSetIDPRVSTYPE();
    case PRVS__PR__G:
      return isSetPRVS_PR_G();
    case ID__EXITUS:
      return isSetID_EXITUS();
    case ILLHISTORY:
      return isSetILLHISTORY();
    case CASE__CAST:
      return isSetCASE_CAST();
    case AMOUNT__D:
      return isSetAMOUNT_D();
    case ID__PRMP:
      return isSetID_PRMP();
    case ID__PRMP__C:
      return isSetID_PRMP_C();
    case DIAG__C:
      return isSetDIAG_C();
    case DIAG__S__C:
      return isSetDIAG_S_C();
    case DIAG__P__C:
      return isSetDIAG_P_C();
    case QRESULT:
      return isSetQRESULT();
    case ID__PRVS__C:
      return isSetID_PRVS_C();
    case ID__ED__PAY:
      return isSetID_ED_PAY();
    case ID__VMP:
      return isSetID_VMP();
    case ID__DOC:
      return isSetID_DOC();
    case ID__DEPT:
      return isSetID_DEPT();
    case ID__DOC__C:
      return isSetID_DOC_C();
    case ID__DEPT__C:
      return isSetID_DEPT_C();
    case ID__LPU__D:
      return isSetID_LPU_D();
    case IS__CRIM:
      return isSetIS_CRIM();
    case IDSERVDATA:
      return isSetIDSERVDATA();
    case IDSERVMADE:
      return isSetIDSERVMADE();
    case IDSERVLPU:
      return isSetIDSERVLPU();
    case ID__GOAL:
      return isSetID_GOAL();
    case ID__GOAL__C:
      return isSetID_GOAL_C();
    case ID__PAT__CAT:
      return isSetID_PAT_CAT();
    case ID__GOSP:
      return isSetID_GOSP();
    case IDVIDVME:
      return isSetIDVIDVME();
    case IDFORPOM:
      return isSetIDFORPOM();
    case ID__PRVS__D:
      return isSetID_PRVS_D();
    case ID__GOAL__D:
      return isSetID_GOAL_D();
    case IDMETHMP:
      return isSetIDMETHMP();
    case ID__LPU:
      return isSetID_LPU();
    case N__BORN:
      return isSetN_BORN();
    case IS__STAGE:
      return isSetIS_STAGE();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceEntry)
      return this.equals((ServiceEntry)that);
    return false;
  }

  public boolean equals(ServiceEntry that) {
    if (that == null)
      return false;

    boolean this_present_SURNAME = true && this.isSetSURNAME();
    boolean that_present_SURNAME = true && that.isSetSURNAME();
    if (this_present_SURNAME || that_present_SURNAME) {
      if (!(this_present_SURNAME && that_present_SURNAME))
        return false;
      if (!this.SURNAME.equals(that.SURNAME))
        return false;
    }

    boolean this_present_NAME1 = true && this.isSetNAME1();
    boolean that_present_NAME1 = true && that.isSetNAME1();
    if (this_present_NAME1 || that_present_NAME1) {
      if (!(this_present_NAME1 && that_present_NAME1))
        return false;
      if (!this.NAME1.equals(that.NAME1))
        return false;
    }

    boolean this_present_NAME2 = true && this.isSetNAME2();
    boolean that_present_NAME2 = true && that.isSetNAME2();
    if (this_present_NAME2 || that_present_NAME2) {
      if (!(this_present_NAME2 && that_present_NAME2))
        return false;
      if (!this.NAME2.equals(that.NAME2))
        return false;
    }

    boolean this_present_BIRTHDAY = true;
    boolean that_present_BIRTHDAY = true;
    if (this_present_BIRTHDAY || that_present_BIRTHDAY) {
      if (!(this_present_BIRTHDAY && that_present_BIRTHDAY))
        return false;
      if (this.BIRTHDAY != that.BIRTHDAY)
        return false;
    }

    boolean this_present_SEX = true;
    boolean that_present_SEX = true;
    if (this_present_SEX || that_present_SEX) {
      if (!(this_present_SEX && that_present_SEX))
        return false;
      if (this.SEX != that.SEX)
        return false;
    }

    boolean this_present_ORDER = true && this.isSetORDER();
    boolean that_present_ORDER = true && that.isSetORDER();
    if (this_present_ORDER || that_present_ORDER) {
      if (!(this_present_ORDER && that_present_ORDER))
        return false;
      if (!this.ORDER.equals(that.ORDER))
        return false;
    }

    boolean this_present_POLIS_S = true && this.isSetPOLIS_S();
    boolean that_present_POLIS_S = true && that.isSetPOLIS_S();
    if (this_present_POLIS_S || that_present_POLIS_S) {
      if (!(this_present_POLIS_S && that_present_POLIS_S))
        return false;
      if (!this.POLIS_S.equals(that.POLIS_S))
        return false;
    }

    boolean this_present_POLIS_N = true && this.isSetPOLIS_N();
    boolean that_present_POLIS_N = true && that.isSetPOLIS_N();
    if (this_present_POLIS_N || that_present_POLIS_N) {
      if (!(this_present_POLIS_N && that_present_POLIS_N))
        return false;
      if (!this.POLIS_N.equals(that.POLIS_N))
        return false;
    }

    boolean this_present_PAYER = true && this.isSetPAYER();
    boolean that_present_PAYER = true && that.isSetPAYER();
    if (this_present_PAYER || that_present_PAYER) {
      if (!(this_present_PAYER && that_present_PAYER))
        return false;
      if (!this.PAYER.equals(that.PAYER))
        return false;
    }

    boolean this_present_clientAddressInfo = true && this.isSetClientAddressInfo();
    boolean that_present_clientAddressInfo = true && that.isSetClientAddressInfo();
    if (this_present_clientAddressInfo || that_present_clientAddressInfo) {
      if (!(this_present_clientAddressInfo && that_present_clientAddressInfo))
        return false;
      if (!this.clientAddressInfo.equals(that.clientAddressInfo))
        return false;
    }

    boolean this_present_PROFILE = true && this.isSetPROFILE();
    boolean that_present_PROFILE = true && that.isSetPROFILE();
    if (this_present_PROFILE || that_present_PROFILE) {
      if (!(this_present_PROFILE && that_present_PROFILE))
        return false;
      if (!this.PROFILE.equals(that.PROFILE))
        return false;
    }

    boolean this_present_PROFILENET = true && this.isSetPROFILENET();
    boolean that_present_PROFILENET = true && that.isSetPROFILENET();
    if (this_present_PROFILENET || that_present_PROFILENET) {
      if (!(this_present_PROFILENET && that_present_PROFILENET))
        return false;
      if (!this.PROFILENET.equals(that.PROFILENET))
        return false;
    }

    boolean this_present_DATEIN = true;
    boolean that_present_DATEIN = true;
    if (this_present_DATEIN || that_present_DATEIN) {
      if (!(this_present_DATEIN && that_present_DATEIN))
        return false;
      if (this.DATEIN != that.DATEIN)
        return false;
    }

    boolean this_present_DATEOUT = true;
    boolean that_present_DATEOUT = true;
    if (this_present_DATEOUT || that_present_DATEOUT) {
      if (!(this_present_DATEOUT && that_present_DATEOUT))
        return false;
      if (this.DATEOUT != that.DATEOUT)
        return false;
    }

    boolean this_present_AMOUNT = true;
    boolean that_present_AMOUNT = true;
    if (this_present_AMOUNT || that_present_AMOUNT) {
      if (!(this_present_AMOUNT && that_present_AMOUNT))
        return false;
      if (this.AMOUNT != that.AMOUNT)
        return false;
    }

    boolean this_present_DIAGNOSIS = true && this.isSetDIAGNOSIS();
    boolean that_present_DIAGNOSIS = true && that.isSetDIAGNOSIS();
    if (this_present_DIAGNOSIS || that_present_DIAGNOSIS) {
      if (!(this_present_DIAGNOSIS && that_present_DIAGNOSIS))
        return false;
      if (!this.DIAGNOSIS.equals(that.DIAGNOSIS))
        return false;
    }

    boolean this_present_DIAG_PREF = true && this.isSetDIAG_PREF();
    boolean that_present_DIAG_PREF = true && that.isSetDIAG_PREF();
    if (this_present_DIAG_PREF || that_present_DIAG_PREF) {
      if (!(this_present_DIAG_PREF && that_present_DIAG_PREF))
        return false;
      if (!this.DIAG_PREF.equals(that.DIAG_PREF))
        return false;
    }

    boolean this_present_SEND = true;
    boolean that_present_SEND = true;
    if (this_present_SEND || that_present_SEND) {
      if (!(this_present_SEND && that_present_SEND))
        return false;
      if (this.SEND != that.SEND)
        return false;
    }

    boolean this_present_ERROR = true && this.isSetERROR();
    boolean that_present_ERROR = true && that.isSetERROR();
    if (this_present_ERROR || that_present_ERROR) {
      if (!(this_present_ERROR && that_present_ERROR))
        return false;
      if (!this.ERROR.equals(that.ERROR))
        return false;
    }

    boolean this_present_clientDocumentInfo = true && this.isSetClientDocumentInfo();
    boolean that_present_clientDocumentInfo = true && that.isSetClientDocumentInfo();
    if (this_present_clientDocumentInfo || that_present_clientDocumentInfo) {
      if (!(this_present_clientDocumentInfo && that_present_clientDocumentInfo))
        return false;
      if (!this.clientDocumentInfo.equals(that.clientDocumentInfo))
        return false;
    }

    boolean this_present_SERV_ID = true;
    boolean that_present_SERV_ID = true;
    if (this_present_SERV_ID || that_present_SERV_ID) {
      if (!(this_present_SERV_ID && that_present_SERV_ID))
        return false;
      if (this.SERV_ID != that.SERV_ID)
        return false;
    }

    boolean this_present_ID_PRVS = true;
    boolean that_present_ID_PRVS = true;
    if (this_present_ID_PRVS || that_present_ID_PRVS) {
      if (!(this_present_ID_PRVS && that_present_ID_PRVS))
        return false;
      if (this.ID_PRVS != that.ID_PRVS)
        return false;
    }

    boolean this_present_IDPRVSTYPE = true && this.isSetIDPRVSTYPE();
    boolean that_present_IDPRVSTYPE = true && that.isSetIDPRVSTYPE();
    if (this_present_IDPRVSTYPE || that_present_IDPRVSTYPE) {
      if (!(this_present_IDPRVSTYPE && that_present_IDPRVSTYPE))
        return false;
      if (this.IDPRVSTYPE != that.IDPRVSTYPE)
        return false;
    }

    boolean this_present_PRVS_PR_G = true && this.isSetPRVS_PR_G();
    boolean that_present_PRVS_PR_G = true && that.isSetPRVS_PR_G();
    if (this_present_PRVS_PR_G || that_present_PRVS_PR_G) {
      if (!(this_present_PRVS_PR_G && that_present_PRVS_PR_G))
        return false;
      if (this.PRVS_PR_G != that.PRVS_PR_G)
        return false;
    }

    boolean this_present_ID_EXITUS = true;
    boolean that_present_ID_EXITUS = true;
    if (this_present_ID_EXITUS || that_present_ID_EXITUS) {
      if (!(this_present_ID_EXITUS && that_present_ID_EXITUS))
        return false;
      if (this.ID_EXITUS != that.ID_EXITUS)
        return false;
    }

    boolean this_present_ILLHISTORY = true && this.isSetILLHISTORY();
    boolean that_present_ILLHISTORY = true && that.isSetILLHISTORY();
    if (this_present_ILLHISTORY || that_present_ILLHISTORY) {
      if (!(this_present_ILLHISTORY && that_present_ILLHISTORY))
        return false;
      if (!this.ILLHISTORY.equals(that.ILLHISTORY))
        return false;
    }

    boolean this_present_CASE_CAST = true;
    boolean that_present_CASE_CAST = true;
    if (this_present_CASE_CAST || that_present_CASE_CAST) {
      if (!(this_present_CASE_CAST && that_present_CASE_CAST))
        return false;
      if (this.CASE_CAST != that.CASE_CAST)
        return false;
    }

    boolean this_present_AMOUNT_D = true;
    boolean that_present_AMOUNT_D = true;
    if (this_present_AMOUNT_D || that_present_AMOUNT_D) {
      if (!(this_present_AMOUNT_D && that_present_AMOUNT_D))
        return false;
      if (this.AMOUNT_D != that.AMOUNT_D)
        return false;
    }

    boolean this_present_ID_PRMP = true;
    boolean that_present_ID_PRMP = true;
    if (this_present_ID_PRMP || that_present_ID_PRMP) {
      if (!(this_present_ID_PRMP && that_present_ID_PRMP))
        return false;
      if (this.ID_PRMP != that.ID_PRMP)
        return false;
    }

    boolean this_present_ID_PRMP_C = true;
    boolean that_present_ID_PRMP_C = true;
    if (this_present_ID_PRMP_C || that_present_ID_PRMP_C) {
      if (!(this_present_ID_PRMP_C && that_present_ID_PRMP_C))
        return false;
      if (this.ID_PRMP_C != that.ID_PRMP_C)
        return false;
    }

    boolean this_present_DIAG_C = true && this.isSetDIAG_C();
    boolean that_present_DIAG_C = true && that.isSetDIAG_C();
    if (this_present_DIAG_C || that_present_DIAG_C) {
      if (!(this_present_DIAG_C && that_present_DIAG_C))
        return false;
      if (!this.DIAG_C.equals(that.DIAG_C))
        return false;
    }

    boolean this_present_DIAG_S_C = true && this.isSetDIAG_S_C();
    boolean that_present_DIAG_S_C = true && that.isSetDIAG_S_C();
    if (this_present_DIAG_S_C || that_present_DIAG_S_C) {
      if (!(this_present_DIAG_S_C && that_present_DIAG_S_C))
        return false;
      if (!this.DIAG_S_C.equals(that.DIAG_S_C))
        return false;
    }

    boolean this_present_DIAG_P_C = true && this.isSetDIAG_P_C();
    boolean that_present_DIAG_P_C = true && that.isSetDIAG_P_C();
    if (this_present_DIAG_P_C || that_present_DIAG_P_C) {
      if (!(this_present_DIAG_P_C && that_present_DIAG_P_C))
        return false;
      if (!this.DIAG_P_C.equals(that.DIAG_P_C))
        return false;
    }

    boolean this_present_QRESULT = true;
    boolean that_present_QRESULT = true;
    if (this_present_QRESULT || that_present_QRESULT) {
      if (!(this_present_QRESULT && that_present_QRESULT))
        return false;
      if (this.QRESULT != that.QRESULT)
        return false;
    }

    boolean this_present_ID_PRVS_C = true;
    boolean that_present_ID_PRVS_C = true;
    if (this_present_ID_PRVS_C || that_present_ID_PRVS_C) {
      if (!(this_present_ID_PRVS_C && that_present_ID_PRVS_C))
        return false;
      if (this.ID_PRVS_C != that.ID_PRVS_C)
        return false;
    }

    boolean this_present_ID_ED_PAY = true && this.isSetID_ED_PAY();
    boolean that_present_ID_ED_PAY = true && that.isSetID_ED_PAY();
    if (this_present_ID_ED_PAY || that_present_ID_ED_PAY) {
      if (!(this_present_ID_ED_PAY && that_present_ID_ED_PAY))
        return false;
      if (this.ID_ED_PAY != that.ID_ED_PAY)
        return false;
    }

    boolean this_present_ID_VMP = true;
    boolean that_present_ID_VMP = true;
    if (this_present_ID_VMP || that_present_ID_VMP) {
      if (!(this_present_ID_VMP && that_present_ID_VMP))
        return false;
      if (this.ID_VMP != that.ID_VMP)
        return false;
    }

    boolean this_present_ID_DOC = true && this.isSetID_DOC();
    boolean that_present_ID_DOC = true && that.isSetID_DOC();
    if (this_present_ID_DOC || that_present_ID_DOC) {
      if (!(this_present_ID_DOC && that_present_ID_DOC))
        return false;
      if (!this.ID_DOC.equals(that.ID_DOC))
        return false;
    }

    boolean this_present_ID_DEPT = true && this.isSetID_DEPT();
    boolean that_present_ID_DEPT = true && that.isSetID_DEPT();
    if (this_present_ID_DEPT || that_present_ID_DEPT) {
      if (!(this_present_ID_DEPT && that_present_ID_DEPT))
        return false;
      if (!this.ID_DEPT.equals(that.ID_DEPT))
        return false;
    }

    boolean this_present_ID_DOC_C = true && this.isSetID_DOC_C();
    boolean that_present_ID_DOC_C = true && that.isSetID_DOC_C();
    if (this_present_ID_DOC_C || that_present_ID_DOC_C) {
      if (!(this_present_ID_DOC_C && that_present_ID_DOC_C))
        return false;
      if (!this.ID_DOC_C.equals(that.ID_DOC_C))
        return false;
    }

    boolean this_present_ID_DEPT_C = true && this.isSetID_DEPT_C();
    boolean that_present_ID_DEPT_C = true && that.isSetID_DEPT_C();
    if (this_present_ID_DEPT_C || that_present_ID_DEPT_C) {
      if (!(this_present_ID_DEPT_C && that_present_ID_DEPT_C))
        return false;
      if (!this.ID_DEPT_C.equals(that.ID_DEPT_C))
        return false;
    }

    boolean this_present_ID_LPU_D = true && this.isSetID_LPU_D();
    boolean that_present_ID_LPU_D = true && that.isSetID_LPU_D();
    if (this_present_ID_LPU_D || that_present_ID_LPU_D) {
      if (!(this_present_ID_LPU_D && that_present_ID_LPU_D))
        return false;
      if (this.ID_LPU_D != that.ID_LPU_D)
        return false;
    }

    boolean this_present_IS_CRIM = true && this.isSetIS_CRIM();
    boolean that_present_IS_CRIM = true && that.isSetIS_CRIM();
    if (this_present_IS_CRIM || that_present_IS_CRIM) {
      if (!(this_present_IS_CRIM && that_present_IS_CRIM))
        return false;
      if (this.IS_CRIM != that.IS_CRIM)
        return false;
    }

    boolean this_present_IDSERVDATA = true && this.isSetIDSERVDATA();
    boolean that_present_IDSERVDATA = true && that.isSetIDSERVDATA();
    if (this_present_IDSERVDATA || that_present_IDSERVDATA) {
      if (!(this_present_IDSERVDATA && that_present_IDSERVDATA))
        return false;
      if (this.IDSERVDATA != that.IDSERVDATA)
        return false;
    }

    boolean this_present_IDSERVMADE = true && this.isSetIDSERVMADE();
    boolean that_present_IDSERVMADE = true && that.isSetIDSERVMADE();
    if (this_present_IDSERVMADE || that_present_IDSERVMADE) {
      if (!(this_present_IDSERVMADE && that_present_IDSERVMADE))
        return false;
      if (this.IDSERVMADE != that.IDSERVMADE)
        return false;
    }

    boolean this_present_IDSERVLPU = true && this.isSetIDSERVLPU();
    boolean that_present_IDSERVLPU = true && that.isSetIDSERVLPU();
    if (this_present_IDSERVLPU || that_present_IDSERVLPU) {
      if (!(this_present_IDSERVLPU && that_present_IDSERVLPU))
        return false;
      if (this.IDSERVLPU != that.IDSERVLPU)
        return false;
    }

    boolean this_present_ID_GOAL = true && this.isSetID_GOAL();
    boolean that_present_ID_GOAL = true && that.isSetID_GOAL();
    if (this_present_ID_GOAL || that_present_ID_GOAL) {
      if (!(this_present_ID_GOAL && that_present_ID_GOAL))
        return false;
      if (this.ID_GOAL != that.ID_GOAL)
        return false;
    }

    boolean this_present_ID_GOAL_C = true && this.isSetID_GOAL_C();
    boolean that_present_ID_GOAL_C = true && that.isSetID_GOAL_C();
    if (this_present_ID_GOAL_C || that_present_ID_GOAL_C) {
      if (!(this_present_ID_GOAL_C && that_present_ID_GOAL_C))
        return false;
      if (this.ID_GOAL_C != that.ID_GOAL_C)
        return false;
    }

    boolean this_present_ID_PAT_CAT = true && this.isSetID_PAT_CAT();
    boolean that_present_ID_PAT_CAT = true && that.isSetID_PAT_CAT();
    if (this_present_ID_PAT_CAT || that_present_ID_PAT_CAT) {
      if (!(this_present_ID_PAT_CAT && that_present_ID_PAT_CAT))
        return false;
      if (this.ID_PAT_CAT != that.ID_PAT_CAT)
        return false;
    }

    boolean this_present_ID_GOSP = true && this.isSetID_GOSP();
    boolean that_present_ID_GOSP = true && that.isSetID_GOSP();
    if (this_present_ID_GOSP || that_present_ID_GOSP) {
      if (!(this_present_ID_GOSP && that_present_ID_GOSP))
        return false;
      if (this.ID_GOSP != that.ID_GOSP)
        return false;
    }

    boolean this_present_IDVIDVME = true && this.isSetIDVIDVME();
    boolean that_present_IDVIDVME = true && that.isSetIDVIDVME();
    if (this_present_IDVIDVME || that_present_IDVIDVME) {
      if (!(this_present_IDVIDVME && that_present_IDVIDVME))
        return false;
      if (this.IDVIDVME != that.IDVIDVME)
        return false;
    }

    boolean this_present_IDFORPOM = true;
    boolean that_present_IDFORPOM = true;
    if (this_present_IDFORPOM || that_present_IDFORPOM) {
      if (!(this_present_IDFORPOM && that_present_IDFORPOM))
        return false;
      if (this.IDFORPOM != that.IDFORPOM)
        return false;
    }

    boolean this_present_ID_PRVS_D = true && this.isSetID_PRVS_D();
    boolean that_present_ID_PRVS_D = true && that.isSetID_PRVS_D();
    if (this_present_ID_PRVS_D || that_present_ID_PRVS_D) {
      if (!(this_present_ID_PRVS_D && that_present_ID_PRVS_D))
        return false;
      if (this.ID_PRVS_D != that.ID_PRVS_D)
        return false;
    }

    boolean this_present_ID_GOAL_D = true && this.isSetID_GOAL_D();
    boolean that_present_ID_GOAL_D = true && that.isSetID_GOAL_D();
    if (this_present_ID_GOAL_D || that_present_ID_GOAL_D) {
      if (!(this_present_ID_GOAL_D && that_present_ID_GOAL_D))
        return false;
      if (this.ID_GOAL_D != that.ID_GOAL_D)
        return false;
    }

    boolean this_present_IDMETHMP = true && this.isSetIDMETHMP();
    boolean that_present_IDMETHMP = true && that.isSetIDMETHMP();
    if (this_present_IDMETHMP || that_present_IDMETHMP) {
      if (!(this_present_IDMETHMP && that_present_IDMETHMP))
        return false;
      if (this.IDMETHMP != that.IDMETHMP)
        return false;
    }

    boolean this_present_ID_LPU = true;
    boolean that_present_ID_LPU = true;
    if (this_present_ID_LPU || that_present_ID_LPU) {
      if (!(this_present_ID_LPU && that_present_ID_LPU))
        return false;
      if (this.ID_LPU != that.ID_LPU)
        return false;
    }

    boolean this_present_N_BORN = true && this.isSetN_BORN();
    boolean that_present_N_BORN = true && that.isSetN_BORN();
    if (this_present_N_BORN || that_present_N_BORN) {
      if (!(this_present_N_BORN && that_present_N_BORN))
        return false;
      if (this.N_BORN != that.N_BORN)
        return false;
    }

    boolean this_present_IS_STAGE = true && this.isSetIS_STAGE();
    boolean that_present_IS_STAGE = true && that.isSetIS_STAGE();
    if (this_present_IS_STAGE || that_present_IS_STAGE) {
      if (!(this_present_IS_STAGE && that_present_IS_STAGE))
        return false;
      if (this.IS_STAGE != that.IS_STAGE)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_SURNAME = true && (isSetSURNAME());
    list.add(present_SURNAME);
    if (present_SURNAME)
      list.add(SURNAME);

    boolean present_NAME1 = true && (isSetNAME1());
    list.add(present_NAME1);
    if (present_NAME1)
      list.add(NAME1);

    boolean present_NAME2 = true && (isSetNAME2());
    list.add(present_NAME2);
    if (present_NAME2)
      list.add(NAME2);

    boolean present_BIRTHDAY = true;
    list.add(present_BIRTHDAY);
    if (present_BIRTHDAY)
      list.add(BIRTHDAY);

    boolean present_SEX = true;
    list.add(present_SEX);
    if (present_SEX)
      list.add(SEX);

    boolean present_ORDER = true && (isSetORDER());
    list.add(present_ORDER);
    if (present_ORDER)
      list.add(ORDER);

    boolean present_POLIS_S = true && (isSetPOLIS_S());
    list.add(present_POLIS_S);
    if (present_POLIS_S)
      list.add(POLIS_S);

    boolean present_POLIS_N = true && (isSetPOLIS_N());
    list.add(present_POLIS_N);
    if (present_POLIS_N)
      list.add(POLIS_N);

    boolean present_PAYER = true && (isSetPAYER());
    list.add(present_PAYER);
    if (present_PAYER)
      list.add(PAYER);

    boolean present_clientAddressInfo = true && (isSetClientAddressInfo());
    list.add(present_clientAddressInfo);
    if (present_clientAddressInfo)
      list.add(clientAddressInfo);

    boolean present_PROFILE = true && (isSetPROFILE());
    list.add(present_PROFILE);
    if (present_PROFILE)
      list.add(PROFILE);

    boolean present_PROFILENET = true && (isSetPROFILENET());
    list.add(present_PROFILENET);
    if (present_PROFILENET)
      list.add(PROFILENET);

    boolean present_DATEIN = true;
    list.add(present_DATEIN);
    if (present_DATEIN)
      list.add(DATEIN);

    boolean present_DATEOUT = true;
    list.add(present_DATEOUT);
    if (present_DATEOUT)
      list.add(DATEOUT);

    boolean present_AMOUNT = true;
    list.add(present_AMOUNT);
    if (present_AMOUNT)
      list.add(AMOUNT);

    boolean present_DIAGNOSIS = true && (isSetDIAGNOSIS());
    list.add(present_DIAGNOSIS);
    if (present_DIAGNOSIS)
      list.add(DIAGNOSIS);

    boolean present_DIAG_PREF = true && (isSetDIAG_PREF());
    list.add(present_DIAG_PREF);
    if (present_DIAG_PREF)
      list.add(DIAG_PREF);

    boolean present_SEND = true;
    list.add(present_SEND);
    if (present_SEND)
      list.add(SEND);

    boolean present_ERROR = true && (isSetERROR());
    list.add(present_ERROR);
    if (present_ERROR)
      list.add(ERROR);

    boolean present_clientDocumentInfo = true && (isSetClientDocumentInfo());
    list.add(present_clientDocumentInfo);
    if (present_clientDocumentInfo)
      list.add(clientDocumentInfo);

    boolean present_SERV_ID = true;
    list.add(present_SERV_ID);
    if (present_SERV_ID)
      list.add(SERV_ID);

    boolean present_ID_PRVS = true;
    list.add(present_ID_PRVS);
    if (present_ID_PRVS)
      list.add(ID_PRVS);

    boolean present_IDPRVSTYPE = true && (isSetIDPRVSTYPE());
    list.add(present_IDPRVSTYPE);
    if (present_IDPRVSTYPE)
      list.add(IDPRVSTYPE);

    boolean present_PRVS_PR_G = true && (isSetPRVS_PR_G());
    list.add(present_PRVS_PR_G);
    if (present_PRVS_PR_G)
      list.add(PRVS_PR_G);

    boolean present_ID_EXITUS = true;
    list.add(present_ID_EXITUS);
    if (present_ID_EXITUS)
      list.add(ID_EXITUS);

    boolean present_ILLHISTORY = true && (isSetILLHISTORY());
    list.add(present_ILLHISTORY);
    if (present_ILLHISTORY)
      list.add(ILLHISTORY);

    boolean present_CASE_CAST = true;
    list.add(present_CASE_CAST);
    if (present_CASE_CAST)
      list.add(CASE_CAST);

    boolean present_AMOUNT_D = true;
    list.add(present_AMOUNT_D);
    if (present_AMOUNT_D)
      list.add(AMOUNT_D);

    boolean present_ID_PRMP = true;
    list.add(present_ID_PRMP);
    if (present_ID_PRMP)
      list.add(ID_PRMP);

    boolean present_ID_PRMP_C = true;
    list.add(present_ID_PRMP_C);
    if (present_ID_PRMP_C)
      list.add(ID_PRMP_C);

    boolean present_DIAG_C = true && (isSetDIAG_C());
    list.add(present_DIAG_C);
    if (present_DIAG_C)
      list.add(DIAG_C);

    boolean present_DIAG_S_C = true && (isSetDIAG_S_C());
    list.add(present_DIAG_S_C);
    if (present_DIAG_S_C)
      list.add(DIAG_S_C);

    boolean present_DIAG_P_C = true && (isSetDIAG_P_C());
    list.add(present_DIAG_P_C);
    if (present_DIAG_P_C)
      list.add(DIAG_P_C);

    boolean present_QRESULT = true;
    list.add(present_QRESULT);
    if (present_QRESULT)
      list.add(QRESULT);

    boolean present_ID_PRVS_C = true;
    list.add(present_ID_PRVS_C);
    if (present_ID_PRVS_C)
      list.add(ID_PRVS_C);

    boolean present_ID_ED_PAY = true && (isSetID_ED_PAY());
    list.add(present_ID_ED_PAY);
    if (present_ID_ED_PAY)
      list.add(ID_ED_PAY);

    boolean present_ID_VMP = true;
    list.add(present_ID_VMP);
    if (present_ID_VMP)
      list.add(ID_VMP);

    boolean present_ID_DOC = true && (isSetID_DOC());
    list.add(present_ID_DOC);
    if (present_ID_DOC)
      list.add(ID_DOC);

    boolean present_ID_DEPT = true && (isSetID_DEPT());
    list.add(present_ID_DEPT);
    if (present_ID_DEPT)
      list.add(ID_DEPT);

    boolean present_ID_DOC_C = true && (isSetID_DOC_C());
    list.add(present_ID_DOC_C);
    if (present_ID_DOC_C)
      list.add(ID_DOC_C);

    boolean present_ID_DEPT_C = true && (isSetID_DEPT_C());
    list.add(present_ID_DEPT_C);
    if (present_ID_DEPT_C)
      list.add(ID_DEPT_C);

    boolean present_ID_LPU_D = true && (isSetID_LPU_D());
    list.add(present_ID_LPU_D);
    if (present_ID_LPU_D)
      list.add(ID_LPU_D);

    boolean present_IS_CRIM = true && (isSetIS_CRIM());
    list.add(present_IS_CRIM);
    if (present_IS_CRIM)
      list.add(IS_CRIM);

    boolean present_IDSERVDATA = true && (isSetIDSERVDATA());
    list.add(present_IDSERVDATA);
    if (present_IDSERVDATA)
      list.add(IDSERVDATA);

    boolean present_IDSERVMADE = true && (isSetIDSERVMADE());
    list.add(present_IDSERVMADE);
    if (present_IDSERVMADE)
      list.add(IDSERVMADE);

    boolean present_IDSERVLPU = true && (isSetIDSERVLPU());
    list.add(present_IDSERVLPU);
    if (present_IDSERVLPU)
      list.add(IDSERVLPU);

    boolean present_ID_GOAL = true && (isSetID_GOAL());
    list.add(present_ID_GOAL);
    if (present_ID_GOAL)
      list.add(ID_GOAL);

    boolean present_ID_GOAL_C = true && (isSetID_GOAL_C());
    list.add(present_ID_GOAL_C);
    if (present_ID_GOAL_C)
      list.add(ID_GOAL_C);

    boolean present_ID_PAT_CAT = true && (isSetID_PAT_CAT());
    list.add(present_ID_PAT_CAT);
    if (present_ID_PAT_CAT)
      list.add(ID_PAT_CAT);

    boolean present_ID_GOSP = true && (isSetID_GOSP());
    list.add(present_ID_GOSP);
    if (present_ID_GOSP)
      list.add(ID_GOSP);

    boolean present_IDVIDVME = true && (isSetIDVIDVME());
    list.add(present_IDVIDVME);
    if (present_IDVIDVME)
      list.add(IDVIDVME);

    boolean present_IDFORPOM = true;
    list.add(present_IDFORPOM);
    if (present_IDFORPOM)
      list.add(IDFORPOM);

    boolean present_ID_PRVS_D = true && (isSetID_PRVS_D());
    list.add(present_ID_PRVS_D);
    if (present_ID_PRVS_D)
      list.add(ID_PRVS_D);

    boolean present_ID_GOAL_D = true && (isSetID_GOAL_D());
    list.add(present_ID_GOAL_D);
    if (present_ID_GOAL_D)
      list.add(ID_GOAL_D);

    boolean present_IDMETHMP = true && (isSetIDMETHMP());
    list.add(present_IDMETHMP);
    if (present_IDMETHMP)
      list.add(IDMETHMP);

    boolean present_ID_LPU = true;
    list.add(present_ID_LPU);
    if (present_ID_LPU)
      list.add(ID_LPU);

    boolean present_N_BORN = true && (isSetN_BORN());
    list.add(present_N_BORN);
    if (present_N_BORN)
      list.add(N_BORN);

    boolean present_IS_STAGE = true && (isSetIS_STAGE());
    list.add(present_IS_STAGE);
    if (present_IS_STAGE)
      list.add(IS_STAGE);

    return list.hashCode();
  }

  @Override
  public int compareTo(ServiceEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSURNAME()).compareTo(other.isSetSURNAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSURNAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SURNAME, other.SURNAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNAME1()).compareTo(other.isSetNAME1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNAME1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NAME1, other.NAME1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNAME2()).compareTo(other.isSetNAME2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNAME2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NAME2, other.NAME2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBIRTHDAY()).compareTo(other.isSetBIRTHDAY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBIRTHDAY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BIRTHDAY, other.BIRTHDAY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSEX()).compareTo(other.isSetSEX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSEX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SEX, other.SEX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetORDER()).compareTo(other.isSetORDER());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetORDER()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ORDER, other.ORDER);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOLIS_S()).compareTo(other.isSetPOLIS_S());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOLIS_S()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POLIS_S, other.POLIS_S);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOLIS_N()).compareTo(other.isSetPOLIS_N());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOLIS_N()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POLIS_N, other.POLIS_N);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPAYER()).compareTo(other.isSetPAYER());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPAYER()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PAYER, other.PAYER);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientAddressInfo()).compareTo(other.isSetClientAddressInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientAddressInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientAddressInfo, other.clientAddressInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPROFILE()).compareTo(other.isSetPROFILE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPROFILE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PROFILE, other.PROFILE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPROFILENET()).compareTo(other.isSetPROFILENET());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPROFILENET()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PROFILENET, other.PROFILENET);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDATEIN()).compareTo(other.isSetDATEIN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDATEIN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DATEIN, other.DATEIN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDATEOUT()).compareTo(other.isSetDATEOUT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDATEOUT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DATEOUT, other.DATEOUT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAMOUNT()).compareTo(other.isSetAMOUNT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAMOUNT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AMOUNT, other.AMOUNT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDIAGNOSIS()).compareTo(other.isSetDIAGNOSIS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDIAGNOSIS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DIAGNOSIS, other.DIAGNOSIS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDIAG_PREF()).compareTo(other.isSetDIAG_PREF());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDIAG_PREF()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DIAG_PREF, other.DIAG_PREF);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSEND()).compareTo(other.isSetSEND());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSEND()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SEND, other.SEND);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetERROR()).compareTo(other.isSetERROR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetERROR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ERROR, other.ERROR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientDocumentInfo()).compareTo(other.isSetClientDocumentInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientDocumentInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientDocumentInfo, other.clientDocumentInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSERV_ID()).compareTo(other.isSetSERV_ID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSERV_ID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SERV_ID, other.SERV_ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_PRVS()).compareTo(other.isSetID_PRVS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_PRVS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_PRVS, other.ID_PRVS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDPRVSTYPE()).compareTo(other.isSetIDPRVSTYPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDPRVSTYPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDPRVSTYPE, other.IDPRVSTYPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPRVS_PR_G()).compareTo(other.isSetPRVS_PR_G());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRVS_PR_G()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRVS_PR_G, other.PRVS_PR_G);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_EXITUS()).compareTo(other.isSetID_EXITUS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_EXITUS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_EXITUS, other.ID_EXITUS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetILLHISTORY()).compareTo(other.isSetILLHISTORY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetILLHISTORY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ILLHISTORY, other.ILLHISTORY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCASE_CAST()).compareTo(other.isSetCASE_CAST());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCASE_CAST()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CASE_CAST, other.CASE_CAST);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAMOUNT_D()).compareTo(other.isSetAMOUNT_D());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAMOUNT_D()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AMOUNT_D, other.AMOUNT_D);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_PRMP()).compareTo(other.isSetID_PRMP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_PRMP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_PRMP, other.ID_PRMP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_PRMP_C()).compareTo(other.isSetID_PRMP_C());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_PRMP_C()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_PRMP_C, other.ID_PRMP_C);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDIAG_C()).compareTo(other.isSetDIAG_C());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDIAG_C()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DIAG_C, other.DIAG_C);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDIAG_S_C()).compareTo(other.isSetDIAG_S_C());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDIAG_S_C()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DIAG_S_C, other.DIAG_S_C);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDIAG_P_C()).compareTo(other.isSetDIAG_P_C());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDIAG_P_C()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DIAG_P_C, other.DIAG_P_C);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQRESULT()).compareTo(other.isSetQRESULT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQRESULT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.QRESULT, other.QRESULT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_PRVS_C()).compareTo(other.isSetID_PRVS_C());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_PRVS_C()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_PRVS_C, other.ID_PRVS_C);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_ED_PAY()).compareTo(other.isSetID_ED_PAY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_ED_PAY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_ED_PAY, other.ID_ED_PAY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_VMP()).compareTo(other.isSetID_VMP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_VMP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_VMP, other.ID_VMP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_DOC()).compareTo(other.isSetID_DOC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_DOC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_DOC, other.ID_DOC);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_DEPT()).compareTo(other.isSetID_DEPT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_DEPT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_DEPT, other.ID_DEPT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_DOC_C()).compareTo(other.isSetID_DOC_C());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_DOC_C()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_DOC_C, other.ID_DOC_C);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_DEPT_C()).compareTo(other.isSetID_DEPT_C());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_DEPT_C()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_DEPT_C, other.ID_DEPT_C);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_LPU_D()).compareTo(other.isSetID_LPU_D());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_LPU_D()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_LPU_D, other.ID_LPU_D);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIS_CRIM()).compareTo(other.isSetIS_CRIM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIS_CRIM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IS_CRIM, other.IS_CRIM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDSERVDATA()).compareTo(other.isSetIDSERVDATA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDSERVDATA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDSERVDATA, other.IDSERVDATA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDSERVMADE()).compareTo(other.isSetIDSERVMADE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDSERVMADE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDSERVMADE, other.IDSERVMADE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDSERVLPU()).compareTo(other.isSetIDSERVLPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDSERVLPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDSERVLPU, other.IDSERVLPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_GOAL()).compareTo(other.isSetID_GOAL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_GOAL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_GOAL, other.ID_GOAL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_GOAL_C()).compareTo(other.isSetID_GOAL_C());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_GOAL_C()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_GOAL_C, other.ID_GOAL_C);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_PAT_CAT()).compareTo(other.isSetID_PAT_CAT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_PAT_CAT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_PAT_CAT, other.ID_PAT_CAT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_GOSP()).compareTo(other.isSetID_GOSP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_GOSP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_GOSP, other.ID_GOSP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDVIDVME()).compareTo(other.isSetIDVIDVME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDVIDVME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDVIDVME, other.IDVIDVME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDFORPOM()).compareTo(other.isSetIDFORPOM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDFORPOM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDFORPOM, other.IDFORPOM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_PRVS_D()).compareTo(other.isSetID_PRVS_D());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_PRVS_D()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_PRVS_D, other.ID_PRVS_D);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_GOAL_D()).compareTo(other.isSetID_GOAL_D());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_GOAL_D()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_GOAL_D, other.ID_GOAL_D);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDMETHMP()).compareTo(other.isSetIDMETHMP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDMETHMP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDMETHMP, other.IDMETHMP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetID_LPU()).compareTo(other.isSetID_LPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID_LPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID_LPU, other.ID_LPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_BORN()).compareTo(other.isSetN_BORN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_BORN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.N_BORN, other.N_BORN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIS_STAGE()).compareTo(other.isSetIS_STAGE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIS_STAGE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IS_STAGE, other.IS_STAGE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceEntry(");
    boolean first = true;

    sb.append("SURNAME:");
    if (this.SURNAME == null) {
      sb.append("null");
    } else {
      sb.append(this.SURNAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NAME1:");
    if (this.NAME1 == null) {
      sb.append("null");
    } else {
      sb.append(this.NAME1);
    }
    first = false;
    if (isSetNAME2()) {
      if (!first) sb.append(", ");
      sb.append("NAME2:");
      if (this.NAME2 == null) {
        sb.append("null");
      } else {
        sb.append(this.NAME2);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("BIRTHDAY:");
    sb.append(this.BIRTHDAY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SEX:");
    sb.append(this.SEX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ORDER:");
    if (this.ORDER == null) {
      sb.append("null");
    } else {
      sb.append(this.ORDER);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("POLIS_S:");
    if (this.POLIS_S == null) {
      sb.append("null");
    } else {
      sb.append(this.POLIS_S);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("POLIS_N:");
    if (this.POLIS_N == null) {
      sb.append("null");
    } else {
      sb.append(this.POLIS_N);
    }
    first = false;
    if (isSetPAYER()) {
      if (!first) sb.append(", ");
      sb.append("PAYER:");
      if (this.PAYER == null) {
        sb.append("null");
      } else {
        sb.append(this.PAYER);
      }
      first = false;
    }
    if (isSetClientAddressInfo()) {
      if (!first) sb.append(", ");
      sb.append("clientAddressInfo:");
      if (this.clientAddressInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientAddressInfo);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("PROFILE:");
    if (this.PROFILE == null) {
      sb.append("null");
    } else {
      sb.append(this.PROFILE);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PROFILENET:");
    if (this.PROFILENET == null) {
      sb.append("null");
    } else {
      sb.append(this.PROFILENET);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DATEIN:");
    sb.append(this.DATEIN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DATEOUT:");
    sb.append(this.DATEOUT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("AMOUNT:");
    sb.append(this.AMOUNT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DIAGNOSIS:");
    if (this.DIAGNOSIS == null) {
      sb.append("null");
    } else {
      sb.append(this.DIAGNOSIS);
    }
    first = false;
    if (isSetDIAG_PREF()) {
      if (!first) sb.append(", ");
      sb.append("DIAG_PREF:");
      if (this.DIAG_PREF == null) {
        sb.append("null");
      } else {
        sb.append(this.DIAG_PREF);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("SEND:");
    sb.append(this.SEND);
    first = false;
    if (isSetERROR()) {
      if (!first) sb.append(", ");
      sb.append("ERROR:");
      if (this.ERROR == null) {
        sb.append("null");
      } else {
        sb.append(this.ERROR);
      }
      first = false;
    }
    if (isSetClientDocumentInfo()) {
      if (!first) sb.append(", ");
      sb.append("clientDocumentInfo:");
      if (this.clientDocumentInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientDocumentInfo);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("SERV_ID:");
    sb.append(this.SERV_ID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID_PRVS:");
    sb.append(this.ID_PRVS);
    first = false;
    if (isSetIDPRVSTYPE()) {
      if (!first) sb.append(", ");
      sb.append("IDPRVSTYPE:");
      sb.append(this.IDPRVSTYPE);
      first = false;
    }
    if (isSetPRVS_PR_G()) {
      if (!first) sb.append(", ");
      sb.append("PRVS_PR_G:");
      sb.append(this.PRVS_PR_G);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ID_EXITUS:");
    sb.append(this.ID_EXITUS);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ILLHISTORY:");
    if (this.ILLHISTORY == null) {
      sb.append("null");
    } else {
      sb.append(this.ILLHISTORY);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CASE_CAST:");
    sb.append(this.CASE_CAST);
    first = false;
    if (!first) sb.append(", ");
    sb.append("AMOUNT_D:");
    sb.append(this.AMOUNT_D);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID_PRMP:");
    sb.append(this.ID_PRMP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID_PRMP_C:");
    sb.append(this.ID_PRMP_C);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DIAG_C:");
    if (this.DIAG_C == null) {
      sb.append("null");
    } else {
      sb.append(this.DIAG_C);
    }
    first = false;
    if (isSetDIAG_S_C()) {
      if (!first) sb.append(", ");
      sb.append("DIAG_S_C:");
      if (this.DIAG_S_C == null) {
        sb.append("null");
      } else {
        sb.append(this.DIAG_S_C);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("DIAG_P_C:");
    if (this.DIAG_P_C == null) {
      sb.append("null");
    } else {
      sb.append(this.DIAG_P_C);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("QRESULT:");
    sb.append(this.QRESULT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID_PRVS_C:");
    sb.append(this.ID_PRVS_C);
    first = false;
    if (isSetID_ED_PAY()) {
      if (!first) sb.append(", ");
      sb.append("ID_ED_PAY:");
      sb.append(this.ID_ED_PAY);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ID_VMP:");
    sb.append(this.ID_VMP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID_DOC:");
    if (this.ID_DOC == null) {
      sb.append("null");
    } else {
      sb.append(this.ID_DOC);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID_DEPT:");
    if (this.ID_DEPT == null) {
      sb.append("null");
    } else {
      sb.append(this.ID_DEPT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID_DOC_C:");
    if (this.ID_DOC_C == null) {
      sb.append("null");
    } else {
      sb.append(this.ID_DOC_C);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID_DEPT_C:");
    if (this.ID_DEPT_C == null) {
      sb.append("null");
    } else {
      sb.append(this.ID_DEPT_C);
    }
    first = false;
    if (isSetID_LPU_D()) {
      if (!first) sb.append(", ");
      sb.append("ID_LPU_D:");
      sb.append(this.ID_LPU_D);
      first = false;
    }
    if (isSetIS_CRIM()) {
      if (!first) sb.append(", ");
      sb.append("IS_CRIM:");
      sb.append(this.IS_CRIM);
      first = false;
    }
    if (isSetIDSERVDATA()) {
      if (!first) sb.append(", ");
      sb.append("IDSERVDATA:");
      sb.append(this.IDSERVDATA);
      first = false;
    }
    if (isSetIDSERVMADE()) {
      if (!first) sb.append(", ");
      sb.append("IDSERVMADE:");
      sb.append(this.IDSERVMADE);
      first = false;
    }
    if (isSetIDSERVLPU()) {
      if (!first) sb.append(", ");
      sb.append("IDSERVLPU:");
      sb.append(this.IDSERVLPU);
      first = false;
    }
    if (isSetID_GOAL()) {
      if (!first) sb.append(", ");
      sb.append("ID_GOAL:");
      sb.append(this.ID_GOAL);
      first = false;
    }
    if (isSetID_GOAL_C()) {
      if (!first) sb.append(", ");
      sb.append("ID_GOAL_C:");
      sb.append(this.ID_GOAL_C);
      first = false;
    }
    if (isSetID_PAT_CAT()) {
      if (!first) sb.append(", ");
      sb.append("ID_PAT_CAT:");
      sb.append(this.ID_PAT_CAT);
      first = false;
    }
    if (isSetID_GOSP()) {
      if (!first) sb.append(", ");
      sb.append("ID_GOSP:");
      sb.append(this.ID_GOSP);
      first = false;
    }
    if (isSetIDVIDVME()) {
      if (!first) sb.append(", ");
      sb.append("IDVIDVME:");
      sb.append(this.IDVIDVME);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("IDFORPOM:");
    sb.append(this.IDFORPOM);
    first = false;
    if (isSetID_PRVS_D()) {
      if (!first) sb.append(", ");
      sb.append("ID_PRVS_D:");
      sb.append(this.ID_PRVS_D);
      first = false;
    }
    if (isSetID_GOAL_D()) {
      if (!first) sb.append(", ");
      sb.append("ID_GOAL_D:");
      sb.append(this.ID_GOAL_D);
      first = false;
    }
    if (isSetIDMETHMP()) {
      if (!first) sb.append(", ");
      sb.append("IDMETHMP:");
      sb.append(this.IDMETHMP);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ID_LPU:");
    sb.append(this.ID_LPU);
    first = false;
    if (isSetN_BORN()) {
      if (!first) sb.append(", ");
      sb.append("N_BORN:");
      sb.append(this.N_BORN);
      first = false;
    }
    if (isSetIS_STAGE()) {
      if (!first) sb.append(", ");
      sb.append("IS_STAGE:");
      sb.append(this.IS_STAGE);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (SURNAME == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SURNAME' was not present! Struct: " + toString());
    }
    if (NAME1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'NAME1' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'BIRTHDAY' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'SEX' because it's a primitive and you chose the non-beans generator.
    if (ORDER == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ORDER' was not present! Struct: " + toString());
    }
    if (POLIS_S == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'POLIS_S' was not present! Struct: " + toString());
    }
    if (POLIS_N == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'POLIS_N' was not present! Struct: " + toString());
    }
    if (PROFILE == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'PROFILE' was not present! Struct: " + toString());
    }
    if (PROFILENET == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'PROFILENET' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'DATEIN' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'DATEOUT' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'AMOUNT' because it's a primitive and you chose the non-beans generator.
    if (DIAGNOSIS == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DIAGNOSIS' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'SEND' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'SERV_ID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ID_PRVS' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ID_EXITUS' because it's a primitive and you chose the non-beans generator.
    if (ILLHISTORY == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ILLHISTORY' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'CASE_CAST' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'AMOUNT_D' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ID_PRMP' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ID_PRMP_C' because it's a primitive and you chose the non-beans generator.
    if (DIAG_C == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DIAG_C' was not present! Struct: " + toString());
    }
    if (DIAG_P_C == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'DIAG_P_C' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'QRESULT' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ID_PRVS_C' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ID_VMP' because it's a primitive and you chose the non-beans generator.
    if (ID_DOC == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_DOC' was not present! Struct: " + toString());
    }
    if (ID_DEPT == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_DEPT' was not present! Struct: " + toString());
    }
    if (ID_DOC_C == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_DOC_C' was not present! Struct: " + toString());
    }
    if (ID_DEPT_C == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_DEPT_C' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'IDFORPOM' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ID_LPU' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (clientAddressInfo != null) {
      clientAddressInfo.validate();
    }
    if (clientDocumentInfo != null) {
      clientDocumentInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceEntryStandardSchemeFactory implements SchemeFactory {
    public ServiceEntryStandardScheme getScheme() {
      return new ServiceEntryStandardScheme();
    }
  }

  private static class ServiceEntryStandardScheme extends StandardScheme<ServiceEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SURNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SURNAME = iprot.readString();
              struct.setSURNAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NAME1 = iprot.readString();
              struct.setNAME1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NAME2 = iprot.readString();
              struct.setNAME2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.BIRTHDAY = iprot.readI64();
              struct.setBIRTHDAYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.SEX = iprot.readI16();
              struct.setSEXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ORDER = iprot.readString();
              struct.setORDERIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POLIS__S
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.POLIS_S = iprot.readString();
              struct.setPOLIS_SIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POLIS__N
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.POLIS_N = iprot.readString();
              struct.setPOLIS_NIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAYER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PAYER = iprot.readString();
              struct.setPAYERIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CLIENT_ADDRESS_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clientAddressInfo = new ClientAddress();
              struct.clientAddressInfo.read(iprot);
              struct.setClientAddressInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PROFILE = iprot.readString();
              struct.setPROFILEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PROFILENET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PROFILENET = iprot.readString();
              struct.setPROFILENETIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATEIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DATEIN = iprot.readI64();
              struct.setDATEINIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DATEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DATEOUT = iprot.readI64();
              struct.setDATEOUTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.AMOUNT = iprot.readI16();
              struct.setAMOUNTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DIAGNOSIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DIAGNOSIS = iprot.readString();
              struct.setDIAGNOSISIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DIAG__PREF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DIAG_PREF = iprot.readString();
              struct.setDIAG_PREFIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.SEND = iprot.readBool();
              struct.setSENDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ERROR = iprot.readString();
              struct.setERRORIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CLIENT_DOCUMENT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clientDocumentInfo = new ClientDocument();
              struct.clientDocumentInfo.read(iprot);
              struct.setClientDocumentInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SERV__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SERV_ID = iprot.readI32();
              struct.setSERV_IDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ID__PRVS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_PRVS = iprot.readI32();
              struct.setID_PRVSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IDPRVSTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IDPRVSTYPE = iprot.readI32();
              struct.setIDPRVSTYPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PRVS__PR__G
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PRVS_PR_G = iprot.readI32();
              struct.setPRVS_PR_GIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ID__EXITUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_EXITUS = iprot.readI32();
              struct.setID_EXITUSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ILLHISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ILLHISTORY = iprot.readString();
              struct.setILLHISTORYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CASE__CAST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.CASE_CAST = iprot.readI32();
              struct.setCASE_CASTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // AMOUNT__D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.AMOUNT_D = iprot.readI32();
              struct.setAMOUNT_DIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // ID__PRMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_PRMP = iprot.readI32();
              struct.setID_PRMPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ID__PRMP__C
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_PRMP_C = iprot.readI32();
              struct.setID_PRMP_CIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DIAG__C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DIAG_C = iprot.readString();
              struct.setDIAG_CIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // DIAG__S__C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DIAG_S_C = iprot.readString();
              struct.setDIAG_S_CIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // DIAG__P__C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DIAG_P_C = iprot.readString();
              struct.setDIAG_P_CIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // QRESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.QRESULT = iprot.readI32();
              struct.setQRESULTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // ID__PRVS__C
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_PRVS_C = iprot.readI32();
              struct.setID_PRVS_CIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ID__ED__PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_ED_PAY = iprot.readI32();
              struct.setID_ED_PAYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // ID__VMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_VMP = iprot.readI32();
              struct.setID_VMPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // ID__DOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID_DOC = iprot.readString();
              struct.setID_DOCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // ID__DEPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID_DEPT = iprot.readString();
              struct.setID_DEPTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // ID__DOC__C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID_DOC_C = iprot.readString();
              struct.setID_DOC_CIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // ID__DEPT__C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID_DEPT_C = iprot.readString();
              struct.setID_DEPT_CIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // ID__LPU__D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_LPU_D = iprot.readI32();
              struct.setID_LPU_DIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // IS__CRIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IS_CRIM = iprot.readBool();
              struct.setIS_CRIMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // IDSERVDATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IDSERVDATA = iprot.readI32();
              struct.setIDSERVDATAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // IDSERVMADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IDSERVMADE = iprot.readI32();
              struct.setIDSERVMADEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // IDSERVLPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IDSERVLPU = iprot.readI32();
              struct.setIDSERVLPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // ID__GOAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_GOAL = iprot.readI32();
              struct.setID_GOALIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // ID__GOAL__C
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_GOAL_C = iprot.readI32();
              struct.setID_GOAL_CIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // ID__PAT__CAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_PAT_CAT = iprot.readI32();
              struct.setID_PAT_CATIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // ID__GOSP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_GOSP = iprot.readI32();
              struct.setID_GOSPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // IDVIDVME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IDVIDVME = iprot.readI32();
              struct.setIDVIDVMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // IDFORPOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IDFORPOM = iprot.readI32();
              struct.setIDFORPOMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // ID__PRVS__D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_PRVS_D = iprot.readI32();
              struct.setID_PRVS_DIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // ID__GOAL__D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_GOAL_D = iprot.readI32();
              struct.setID_GOAL_DIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // IDMETHMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IDMETHMP = iprot.readI32();
              struct.setIDMETHMPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // ID__LPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID_LPU = iprot.readI32();
              struct.setID_LPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // N__BORN
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.N_BORN = iprot.readI16();
              struct.setN_BORNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // IS__STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IS_STAGE = iprot.readBool();
              struct.setIS_STAGEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBIRTHDAY()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'BIRTHDAY' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSEX()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SEX' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDATEIN()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DATEIN' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDATEOUT()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'DATEOUT' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAMOUNT()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'AMOUNT' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSEND()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SEND' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSERV_ID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'SERV_ID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetID_PRVS()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_PRVS' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetID_EXITUS()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_EXITUS' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCASE_CAST()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'CASE_CAST' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAMOUNT_D()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'AMOUNT_D' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetID_PRMP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_PRMP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetID_PRMP_C()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_PRMP_C' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQRESULT()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'QRESULT' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetID_PRVS_C()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_PRVS_C' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetID_VMP()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_VMP' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIDFORPOM()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'IDFORPOM' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetID_LPU()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID_LPU' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.SURNAME != null) {
        oprot.writeFieldBegin(SURNAME_FIELD_DESC);
        oprot.writeString(struct.SURNAME);
        oprot.writeFieldEnd();
      }
      if (struct.NAME1 != null) {
        oprot.writeFieldBegin(NAME1_FIELD_DESC);
        oprot.writeString(struct.NAME1);
        oprot.writeFieldEnd();
      }
      if (struct.NAME2 != null) {
        if (struct.isSetNAME2()) {
          oprot.writeFieldBegin(NAME2_FIELD_DESC);
          oprot.writeString(struct.NAME2);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
      oprot.writeI64(struct.BIRTHDAY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI16(struct.SEX);
      oprot.writeFieldEnd();
      if (struct.ORDER != null) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeString(struct.ORDER);
        oprot.writeFieldEnd();
      }
      if (struct.POLIS_S != null) {
        oprot.writeFieldBegin(POLIS__S_FIELD_DESC);
        oprot.writeString(struct.POLIS_S);
        oprot.writeFieldEnd();
      }
      if (struct.POLIS_N != null) {
        oprot.writeFieldBegin(POLIS__N_FIELD_DESC);
        oprot.writeString(struct.POLIS_N);
        oprot.writeFieldEnd();
      }
      if (struct.PAYER != null) {
        if (struct.isSetPAYER()) {
          oprot.writeFieldBegin(PAYER_FIELD_DESC);
          oprot.writeString(struct.PAYER);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientAddressInfo != null) {
        if (struct.isSetClientAddressInfo()) {
          oprot.writeFieldBegin(CLIENT_ADDRESS_INFO_FIELD_DESC);
          struct.clientAddressInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.PROFILE != null) {
        oprot.writeFieldBegin(PROFILE_FIELD_DESC);
        oprot.writeString(struct.PROFILE);
        oprot.writeFieldEnd();
      }
      if (struct.PROFILENET != null) {
        oprot.writeFieldBegin(PROFILENET_FIELD_DESC);
        oprot.writeString(struct.PROFILENET);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATEIN_FIELD_DESC);
      oprot.writeI64(struct.DATEIN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATEOUT_FIELD_DESC);
      oprot.writeI64(struct.DATEOUT);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeI16(struct.AMOUNT);
      oprot.writeFieldEnd();
      if (struct.DIAGNOSIS != null) {
        oprot.writeFieldBegin(DIAGNOSIS_FIELD_DESC);
        oprot.writeString(struct.DIAGNOSIS);
        oprot.writeFieldEnd();
      }
      if (struct.DIAG_PREF != null) {
        if (struct.isSetDIAG_PREF()) {
          oprot.writeFieldBegin(DIAG__PREF_FIELD_DESC);
          oprot.writeString(struct.DIAG_PREF);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SEND_FIELD_DESC);
      oprot.writeBool(struct.SEND);
      oprot.writeFieldEnd();
      if (struct.ERROR != null) {
        if (struct.isSetERROR()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          oprot.writeString(struct.ERROR);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientDocumentInfo != null) {
        if (struct.isSetClientDocumentInfo()) {
          oprot.writeFieldBegin(CLIENT_DOCUMENT_INFO_FIELD_DESC);
          struct.clientDocumentInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SERV__ID_FIELD_DESC);
      oprot.writeI32(struct.SERV_ID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID__PRVS_FIELD_DESC);
      oprot.writeI32(struct.ID_PRVS);
      oprot.writeFieldEnd();
      if (struct.isSetIDPRVSTYPE()) {
        oprot.writeFieldBegin(IDPRVSTYPE_FIELD_DESC);
        oprot.writeI32(struct.IDPRVSTYPE);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPRVS_PR_G()) {
        oprot.writeFieldBegin(PRVS__PR__G_FIELD_DESC);
        oprot.writeI32(struct.PRVS_PR_G);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID__EXITUS_FIELD_DESC);
      oprot.writeI32(struct.ID_EXITUS);
      oprot.writeFieldEnd();
      if (struct.ILLHISTORY != null) {
        oprot.writeFieldBegin(ILLHISTORY_FIELD_DESC);
        oprot.writeString(struct.ILLHISTORY);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CASE__CAST_FIELD_DESC);
      oprot.writeI32(struct.CASE_CAST);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT__D_FIELD_DESC);
      oprot.writeI32(struct.AMOUNT_D);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID__PRMP_FIELD_DESC);
      oprot.writeI32(struct.ID_PRMP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID__PRMP__C_FIELD_DESC);
      oprot.writeI32(struct.ID_PRMP_C);
      oprot.writeFieldEnd();
      if (struct.DIAG_C != null) {
        oprot.writeFieldBegin(DIAG__C_FIELD_DESC);
        oprot.writeString(struct.DIAG_C);
        oprot.writeFieldEnd();
      }
      if (struct.DIAG_S_C != null) {
        if (struct.isSetDIAG_S_C()) {
          oprot.writeFieldBegin(DIAG__S__C_FIELD_DESC);
          oprot.writeString(struct.DIAG_S_C);
          oprot.writeFieldEnd();
        }
      }
      if (struct.DIAG_P_C != null) {
        oprot.writeFieldBegin(DIAG__P__C_FIELD_DESC);
        oprot.writeString(struct.DIAG_P_C);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QRESULT_FIELD_DESC);
      oprot.writeI32(struct.QRESULT);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID__PRVS__C_FIELD_DESC);
      oprot.writeI32(struct.ID_PRVS_C);
      oprot.writeFieldEnd();
      if (struct.isSetID_ED_PAY()) {
        oprot.writeFieldBegin(ID__ED__PAY_FIELD_DESC);
        oprot.writeI32(struct.ID_ED_PAY);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID__VMP_FIELD_DESC);
      oprot.writeI32(struct.ID_VMP);
      oprot.writeFieldEnd();
      if (struct.ID_DOC != null) {
        oprot.writeFieldBegin(ID__DOC_FIELD_DESC);
        oprot.writeString(struct.ID_DOC);
        oprot.writeFieldEnd();
      }
      if (struct.ID_DEPT != null) {
        oprot.writeFieldBegin(ID__DEPT_FIELD_DESC);
        oprot.writeString(struct.ID_DEPT);
        oprot.writeFieldEnd();
      }
      if (struct.ID_DOC_C != null) {
        oprot.writeFieldBegin(ID__DOC__C_FIELD_DESC);
        oprot.writeString(struct.ID_DOC_C);
        oprot.writeFieldEnd();
      }
      if (struct.ID_DEPT_C != null) {
        oprot.writeFieldBegin(ID__DEPT__C_FIELD_DESC);
        oprot.writeString(struct.ID_DEPT_C);
        oprot.writeFieldEnd();
      }
      if (struct.isSetID_LPU_D()) {
        oprot.writeFieldBegin(ID__LPU__D_FIELD_DESC);
        oprot.writeI32(struct.ID_LPU_D);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIS_CRIM()) {
        oprot.writeFieldBegin(IS__CRIM_FIELD_DESC);
        oprot.writeBool(struct.IS_CRIM);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIDSERVDATA()) {
        oprot.writeFieldBegin(IDSERVDATA_FIELD_DESC);
        oprot.writeI32(struct.IDSERVDATA);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIDSERVMADE()) {
        oprot.writeFieldBegin(IDSERVMADE_FIELD_DESC);
        oprot.writeI32(struct.IDSERVMADE);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIDSERVLPU()) {
        oprot.writeFieldBegin(IDSERVLPU_FIELD_DESC);
        oprot.writeI32(struct.IDSERVLPU);
        oprot.writeFieldEnd();
      }
      if (struct.isSetID_GOAL()) {
        oprot.writeFieldBegin(ID__GOAL_FIELD_DESC);
        oprot.writeI32(struct.ID_GOAL);
        oprot.writeFieldEnd();
      }
      if (struct.isSetID_GOAL_C()) {
        oprot.writeFieldBegin(ID__GOAL__C_FIELD_DESC);
        oprot.writeI32(struct.ID_GOAL_C);
        oprot.writeFieldEnd();
      }
      if (struct.isSetID_PAT_CAT()) {
        oprot.writeFieldBegin(ID__PAT__CAT_FIELD_DESC);
        oprot.writeI32(struct.ID_PAT_CAT);
        oprot.writeFieldEnd();
      }
      if (struct.isSetID_GOSP()) {
        oprot.writeFieldBegin(ID__GOSP_FIELD_DESC);
        oprot.writeI32(struct.ID_GOSP);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIDVIDVME()) {
        oprot.writeFieldBegin(IDVIDVME_FIELD_DESC);
        oprot.writeI32(struct.IDVIDVME);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IDFORPOM_FIELD_DESC);
      oprot.writeI32(struct.IDFORPOM);
      oprot.writeFieldEnd();
      if (struct.isSetID_PRVS_D()) {
        oprot.writeFieldBegin(ID__PRVS__D_FIELD_DESC);
        oprot.writeI32(struct.ID_PRVS_D);
        oprot.writeFieldEnd();
      }
      if (struct.isSetID_GOAL_D()) {
        oprot.writeFieldBegin(ID__GOAL__D_FIELD_DESC);
        oprot.writeI32(struct.ID_GOAL_D);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIDMETHMP()) {
        oprot.writeFieldBegin(IDMETHMP_FIELD_DESC);
        oprot.writeI32(struct.IDMETHMP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID__LPU_FIELD_DESC);
      oprot.writeI32(struct.ID_LPU);
      oprot.writeFieldEnd();
      if (struct.isSetN_BORN()) {
        oprot.writeFieldBegin(N__BORN_FIELD_DESC);
        oprot.writeI16(struct.N_BORN);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIS_STAGE()) {
        oprot.writeFieldBegin(IS__STAGE_FIELD_DESC);
        oprot.writeBool(struct.IS_STAGE);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceEntryTupleSchemeFactory implements SchemeFactory {
    public ServiceEntryTupleScheme getScheme() {
      return new ServiceEntryTupleScheme();
    }
  }

  private static class ServiceEntryTupleScheme extends TupleScheme<ServiceEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.SURNAME);
      oprot.writeString(struct.NAME1);
      oprot.writeI64(struct.BIRTHDAY);
      oprot.writeI16(struct.SEX);
      oprot.writeString(struct.ORDER);
      oprot.writeString(struct.POLIS_S);
      oprot.writeString(struct.POLIS_N);
      oprot.writeString(struct.PROFILE);
      oprot.writeString(struct.PROFILENET);
      oprot.writeI64(struct.DATEIN);
      oprot.writeI64(struct.DATEOUT);
      oprot.writeI16(struct.AMOUNT);
      oprot.writeString(struct.DIAGNOSIS);
      oprot.writeBool(struct.SEND);
      oprot.writeI32(struct.SERV_ID);
      oprot.writeI32(struct.ID_PRVS);
      oprot.writeI32(struct.ID_EXITUS);
      oprot.writeString(struct.ILLHISTORY);
      oprot.writeI32(struct.CASE_CAST);
      oprot.writeI32(struct.AMOUNT_D);
      oprot.writeI32(struct.ID_PRMP);
      oprot.writeI32(struct.ID_PRMP_C);
      oprot.writeString(struct.DIAG_C);
      oprot.writeString(struct.DIAG_P_C);
      oprot.writeI32(struct.QRESULT);
      oprot.writeI32(struct.ID_PRVS_C);
      oprot.writeI32(struct.ID_VMP);
      oprot.writeString(struct.ID_DOC);
      oprot.writeString(struct.ID_DEPT);
      oprot.writeString(struct.ID_DOC_C);
      oprot.writeString(struct.ID_DEPT_C);
      oprot.writeI32(struct.IDFORPOM);
      oprot.writeI32(struct.ID_LPU);
      BitSet optionals = new BitSet();
      if (struct.isSetNAME2()) {
        optionals.set(0);
      }
      if (struct.isSetPAYER()) {
        optionals.set(1);
      }
      if (struct.isSetClientAddressInfo()) {
        optionals.set(2);
      }
      if (struct.isSetDIAG_PREF()) {
        optionals.set(3);
      }
      if (struct.isSetERROR()) {
        optionals.set(4);
      }
      if (struct.isSetClientDocumentInfo()) {
        optionals.set(5);
      }
      if (struct.isSetIDPRVSTYPE()) {
        optionals.set(6);
      }
      if (struct.isSetPRVS_PR_G()) {
        optionals.set(7);
      }
      if (struct.isSetDIAG_S_C()) {
        optionals.set(8);
      }
      if (struct.isSetID_ED_PAY()) {
        optionals.set(9);
      }
      if (struct.isSetID_LPU_D()) {
        optionals.set(10);
      }
      if (struct.isSetIS_CRIM()) {
        optionals.set(11);
      }
      if (struct.isSetIDSERVDATA()) {
        optionals.set(12);
      }
      if (struct.isSetIDSERVMADE()) {
        optionals.set(13);
      }
      if (struct.isSetIDSERVLPU()) {
        optionals.set(14);
      }
      if (struct.isSetID_GOAL()) {
        optionals.set(15);
      }
      if (struct.isSetID_GOAL_C()) {
        optionals.set(16);
      }
      if (struct.isSetID_PAT_CAT()) {
        optionals.set(17);
      }
      if (struct.isSetID_GOSP()) {
        optionals.set(18);
      }
      if (struct.isSetIDVIDVME()) {
        optionals.set(19);
      }
      if (struct.isSetID_PRVS_D()) {
        optionals.set(20);
      }
      if (struct.isSetID_GOAL_D()) {
        optionals.set(21);
      }
      if (struct.isSetIDMETHMP()) {
        optionals.set(22);
      }
      if (struct.isSetN_BORN()) {
        optionals.set(23);
      }
      if (struct.isSetIS_STAGE()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetNAME2()) {
        oprot.writeString(struct.NAME2);
      }
      if (struct.isSetPAYER()) {
        oprot.writeString(struct.PAYER);
      }
      if (struct.isSetClientAddressInfo()) {
        struct.clientAddressInfo.write(oprot);
      }
      if (struct.isSetDIAG_PREF()) {
        oprot.writeString(struct.DIAG_PREF);
      }
      if (struct.isSetERROR()) {
        oprot.writeString(struct.ERROR);
      }
      if (struct.isSetClientDocumentInfo()) {
        struct.clientDocumentInfo.write(oprot);
      }
      if (struct.isSetIDPRVSTYPE()) {
        oprot.writeI32(struct.IDPRVSTYPE);
      }
      if (struct.isSetPRVS_PR_G()) {
        oprot.writeI32(struct.PRVS_PR_G);
      }
      if (struct.isSetDIAG_S_C()) {
        oprot.writeString(struct.DIAG_S_C);
      }
      if (struct.isSetID_ED_PAY()) {
        oprot.writeI32(struct.ID_ED_PAY);
      }
      if (struct.isSetID_LPU_D()) {
        oprot.writeI32(struct.ID_LPU_D);
      }
      if (struct.isSetIS_CRIM()) {
        oprot.writeBool(struct.IS_CRIM);
      }
      if (struct.isSetIDSERVDATA()) {
        oprot.writeI32(struct.IDSERVDATA);
      }
      if (struct.isSetIDSERVMADE()) {
        oprot.writeI32(struct.IDSERVMADE);
      }
      if (struct.isSetIDSERVLPU()) {
        oprot.writeI32(struct.IDSERVLPU);
      }
      if (struct.isSetID_GOAL()) {
        oprot.writeI32(struct.ID_GOAL);
      }
      if (struct.isSetID_GOAL_C()) {
        oprot.writeI32(struct.ID_GOAL_C);
      }
      if (struct.isSetID_PAT_CAT()) {
        oprot.writeI32(struct.ID_PAT_CAT);
      }
      if (struct.isSetID_GOSP()) {
        oprot.writeI32(struct.ID_GOSP);
      }
      if (struct.isSetIDVIDVME()) {
        oprot.writeI32(struct.IDVIDVME);
      }
      if (struct.isSetID_PRVS_D()) {
        oprot.writeI32(struct.ID_PRVS_D);
      }
      if (struct.isSetID_GOAL_D()) {
        oprot.writeI32(struct.ID_GOAL_D);
      }
      if (struct.isSetIDMETHMP()) {
        oprot.writeI32(struct.IDMETHMP);
      }
      if (struct.isSetN_BORN()) {
        oprot.writeI16(struct.N_BORN);
      }
      if (struct.isSetIS_STAGE()) {
        oprot.writeBool(struct.IS_STAGE);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.SURNAME = iprot.readString();
      struct.setSURNAMEIsSet(true);
      struct.NAME1 = iprot.readString();
      struct.setNAME1IsSet(true);
      struct.BIRTHDAY = iprot.readI64();
      struct.setBIRTHDAYIsSet(true);
      struct.SEX = iprot.readI16();
      struct.setSEXIsSet(true);
      struct.ORDER = iprot.readString();
      struct.setORDERIsSet(true);
      struct.POLIS_S = iprot.readString();
      struct.setPOLIS_SIsSet(true);
      struct.POLIS_N = iprot.readString();
      struct.setPOLIS_NIsSet(true);
      struct.PROFILE = iprot.readString();
      struct.setPROFILEIsSet(true);
      struct.PROFILENET = iprot.readString();
      struct.setPROFILENETIsSet(true);
      struct.DATEIN = iprot.readI64();
      struct.setDATEINIsSet(true);
      struct.DATEOUT = iprot.readI64();
      struct.setDATEOUTIsSet(true);
      struct.AMOUNT = iprot.readI16();
      struct.setAMOUNTIsSet(true);
      struct.DIAGNOSIS = iprot.readString();
      struct.setDIAGNOSISIsSet(true);
      struct.SEND = iprot.readBool();
      struct.setSENDIsSet(true);
      struct.SERV_ID = iprot.readI32();
      struct.setSERV_IDIsSet(true);
      struct.ID_PRVS = iprot.readI32();
      struct.setID_PRVSIsSet(true);
      struct.ID_EXITUS = iprot.readI32();
      struct.setID_EXITUSIsSet(true);
      struct.ILLHISTORY = iprot.readString();
      struct.setILLHISTORYIsSet(true);
      struct.CASE_CAST = iprot.readI32();
      struct.setCASE_CASTIsSet(true);
      struct.AMOUNT_D = iprot.readI32();
      struct.setAMOUNT_DIsSet(true);
      struct.ID_PRMP = iprot.readI32();
      struct.setID_PRMPIsSet(true);
      struct.ID_PRMP_C = iprot.readI32();
      struct.setID_PRMP_CIsSet(true);
      struct.DIAG_C = iprot.readString();
      struct.setDIAG_CIsSet(true);
      struct.DIAG_P_C = iprot.readString();
      struct.setDIAG_P_CIsSet(true);
      struct.QRESULT = iprot.readI32();
      struct.setQRESULTIsSet(true);
      struct.ID_PRVS_C = iprot.readI32();
      struct.setID_PRVS_CIsSet(true);
      struct.ID_VMP = iprot.readI32();
      struct.setID_VMPIsSet(true);
      struct.ID_DOC = iprot.readString();
      struct.setID_DOCIsSet(true);
      struct.ID_DEPT = iprot.readString();
      struct.setID_DEPTIsSet(true);
      struct.ID_DOC_C = iprot.readString();
      struct.setID_DOC_CIsSet(true);
      struct.ID_DEPT_C = iprot.readString();
      struct.setID_DEPT_CIsSet(true);
      struct.IDFORPOM = iprot.readI32();
      struct.setIDFORPOMIsSet(true);
      struct.ID_LPU = iprot.readI32();
      struct.setID_LPUIsSet(true);
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.NAME2 = iprot.readString();
        struct.setNAME2IsSet(true);
      }
      if (incoming.get(1)) {
        struct.PAYER = iprot.readString();
        struct.setPAYERIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clientAddressInfo = new ClientAddress();
        struct.clientAddressInfo.read(iprot);
        struct.setClientAddressInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.DIAG_PREF = iprot.readString();
        struct.setDIAG_PREFIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ERROR = iprot.readString();
        struct.setERRORIsSet(true);
      }
      if (incoming.get(5)) {
        struct.clientDocumentInfo = new ClientDocument();
        struct.clientDocumentInfo.read(iprot);
        struct.setClientDocumentInfoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.IDPRVSTYPE = iprot.readI32();
        struct.setIDPRVSTYPEIsSet(true);
      }
      if (incoming.get(7)) {
        struct.PRVS_PR_G = iprot.readI32();
        struct.setPRVS_PR_GIsSet(true);
      }
      if (incoming.get(8)) {
        struct.DIAG_S_C = iprot.readString();
        struct.setDIAG_S_CIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ID_ED_PAY = iprot.readI32();
        struct.setID_ED_PAYIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ID_LPU_D = iprot.readI32();
        struct.setID_LPU_DIsSet(true);
      }
      if (incoming.get(11)) {
        struct.IS_CRIM = iprot.readBool();
        struct.setIS_CRIMIsSet(true);
      }
      if (incoming.get(12)) {
        struct.IDSERVDATA = iprot.readI32();
        struct.setIDSERVDATAIsSet(true);
      }
      if (incoming.get(13)) {
        struct.IDSERVMADE = iprot.readI32();
        struct.setIDSERVMADEIsSet(true);
      }
      if (incoming.get(14)) {
        struct.IDSERVLPU = iprot.readI32();
        struct.setIDSERVLPUIsSet(true);
      }
      if (incoming.get(15)) {
        struct.ID_GOAL = iprot.readI32();
        struct.setID_GOALIsSet(true);
      }
      if (incoming.get(16)) {
        struct.ID_GOAL_C = iprot.readI32();
        struct.setID_GOAL_CIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ID_PAT_CAT = iprot.readI32();
        struct.setID_PAT_CATIsSet(true);
      }
      if (incoming.get(18)) {
        struct.ID_GOSP = iprot.readI32();
        struct.setID_GOSPIsSet(true);
      }
      if (incoming.get(19)) {
        struct.IDVIDVME = iprot.readI32();
        struct.setIDVIDVMEIsSet(true);
      }
      if (incoming.get(20)) {
        struct.ID_PRVS_D = iprot.readI32();
        struct.setID_PRVS_DIsSet(true);
      }
      if (incoming.get(21)) {
        struct.ID_GOAL_D = iprot.readI32();
        struct.setID_GOAL_DIsSet(true);
      }
      if (incoming.get(22)) {
        struct.IDMETHMP = iprot.readI32();
        struct.setIDMETHMPIsSet(true);
      }
      if (incoming.get(23)) {
        struct.N_BORN = iprot.readI16();
        struct.setN_BORNIsSet(true);
      }
      if (incoming.get(24)) {
        struct.IS_STAGE = iprot.readBool();
        struct.setIS_STAGEIsSet(true);
      }
    }
  }

}

