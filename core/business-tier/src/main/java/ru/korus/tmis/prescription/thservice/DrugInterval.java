/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.prescription.thservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Интервал времени, на которое был назначен препарат или набор препаратов,
 * таблица DrugComponent. В списке execIntervals хранятся связанные интервалы
 * с информацией об исполнении назначенного
 */
public class DrugInterval implements org.apache.thrift.TBase<DrugInterval, DrugInterval._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DrugInterval");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("action_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BEG_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("begDateTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField END_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endDateTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("statusDateTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXEC_INTERVALS_FIELD_DESC = new org.apache.thrift.protocol.TField("execIntervals", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DrugIntervalStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DrugIntervalTupleSchemeFactory());
  }

  public int id; // optional
  public int action_id; // optional
  public long begDateTime; // optional
  public long endDateTime; // optional
  public int status; // optional
  public long statusDateTime; // optional
  public String note; // optional
  public List<DrugIntervalExec> execIntervals; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ACTION_ID((short)2, "action_id"),
    BEG_DATE_TIME((short)3, "begDateTime"),
    END_DATE_TIME((short)4, "endDateTime"),
    STATUS((short)5, "status"),
    STATUS_DATE_TIME((short)6, "statusDateTime"),
    NOTE((short)7, "note"),
    EXEC_INTERVALS((short)8, "execIntervals");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ACTION_ID
          return ACTION_ID;
        case 3: // BEG_DATE_TIME
          return BEG_DATE_TIME;
        case 4: // END_DATE_TIME
          return END_DATE_TIME;
        case 5: // STATUS
          return STATUS;
        case 6: // STATUS_DATE_TIME
          return STATUS_DATE_TIME;
        case 7: // NOTE
          return NOTE;
        case 8: // EXEC_INTERVALS
          return EXEC_INTERVALS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ACTION_ID_ISSET_ID = 1;
  private static final int __BEGDATETIME_ISSET_ID = 2;
  private static final int __ENDDATETIME_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __STATUSDATETIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.ACTION_ID,_Fields.BEG_DATE_TIME,_Fields.END_DATE_TIME,_Fields.STATUS,_Fields.STATUS_DATE_TIME,_Fields.NOTE,_Fields.EXEC_INTERVALS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("action_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BEG_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("begDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.END_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("endDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("statusDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_INTERVALS, new org.apache.thrift.meta_data.FieldMetaData("execIntervals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DrugIntervalExec.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DrugInterval.class, metaDataMap);
  }

  public DrugInterval() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DrugInterval(DrugInterval other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.action_id = other.action_id;
    this.begDateTime = other.begDateTime;
    this.endDateTime = other.endDateTime;
    this.status = other.status;
    this.statusDateTime = other.statusDateTime;
    if (other.isSetNote()) {
      this.note = other.note;
    }
    if (other.isSetExecIntervals()) {
      List<DrugIntervalExec> __this__execIntervals = new ArrayList<DrugIntervalExec>();
      for (DrugIntervalExec other_element : other.execIntervals) {
        __this__execIntervals.add(new DrugIntervalExec(other_element));
      }
      this.execIntervals = __this__execIntervals;
    }
  }

  public DrugInterval deepCopy() {
    return new DrugInterval(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setAction_idIsSet(false);
    this.action_id = 0;
    setBegDateTimeIsSet(false);
    this.begDateTime = 0;
    setEndDateTimeIsSet(false);
    this.endDateTime = 0;
    setStatusIsSet(false);
    this.status = 0;
    setStatusDateTimeIsSet(false);
    this.statusDateTime = 0;
    this.note = null;
    this.execIntervals = null;
  }

  public int getId() {
    return this.id;
  }

  public DrugInterval setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getAction_id() {
    return this.action_id;
  }

  public DrugInterval setAction_id(int action_id) {
    this.action_id = action_id;
    setAction_idIsSet(true);
    return this;
  }

  public void unsetAction_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTION_ID_ISSET_ID);
  }

  /** Returns true if field action_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAction_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTION_ID_ISSET_ID);
  }

  public void setAction_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTION_ID_ISSET_ID, value);
  }

  public long getBegDateTime() {
    return this.begDateTime;
  }

  public DrugInterval setBegDateTime(long begDateTime) {
    this.begDateTime = begDateTime;
    setBegDateTimeIsSet(true);
    return this;
  }

  public void unsetBegDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGDATETIME_ISSET_ID);
  }

  /** Returns true if field begDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBegDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGDATETIME_ISSET_ID);
  }

  public void setBegDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGDATETIME_ISSET_ID, value);
  }

  public long getEndDateTime() {
    return this.endDateTime;
  }

  public DrugInterval setEndDateTime(long endDateTime) {
    this.endDateTime = endDateTime;
    setEndDateTimeIsSet(true);
    return this;
  }

  public void unsetEndDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
  }

  /** Returns true if field endDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
  }

  public void setEndDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATETIME_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public DrugInterval setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getStatusDateTime() {
    return this.statusDateTime;
  }

  public DrugInterval setStatusDateTime(long statusDateTime) {
    this.statusDateTime = statusDateTime;
    setStatusDateTimeIsSet(true);
    return this;
  }

  public void unsetStatusDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSDATETIME_ISSET_ID);
  }

  /** Returns true if field statusDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSDATETIME_ISSET_ID);
  }

  public void setStatusDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSDATETIME_ISSET_ID, value);
  }

  public String getNote() {
    return this.note;
  }

  public DrugInterval setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public int getExecIntervalsSize() {
    return (this.execIntervals == null) ? 0 : this.execIntervals.size();
  }

  public java.util.Iterator<DrugIntervalExec> getExecIntervalsIterator() {
    return (this.execIntervals == null) ? null : this.execIntervals.iterator();
  }

  public void addToExecIntervals(DrugIntervalExec elem) {
    if (this.execIntervals == null) {
      this.execIntervals = new ArrayList<DrugIntervalExec>();
    }
    this.execIntervals.add(elem);
  }

  public List<DrugIntervalExec> getExecIntervals() {
    return this.execIntervals;
  }

  public DrugInterval setExecIntervals(List<DrugIntervalExec> execIntervals) {
    this.execIntervals = execIntervals;
    return this;
  }

  public void unsetExecIntervals() {
    this.execIntervals = null;
  }

  /** Returns true if field execIntervals is set (has been assigned a value) and false otherwise */
  public boolean isSetExecIntervals() {
    return this.execIntervals != null;
  }

  public void setExecIntervalsIsSet(boolean value) {
    if (!value) {
      this.execIntervals = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ACTION_ID:
      if (value == null) {
        unsetAction_id();
      } else {
        setAction_id((Integer)value);
      }
      break;

    case BEG_DATE_TIME:
      if (value == null) {
        unsetBegDateTime();
      } else {
        setBegDateTime((Long)value);
      }
      break;

    case END_DATE_TIME:
      if (value == null) {
        unsetEndDateTime();
      } else {
        setEndDateTime((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case STATUS_DATE_TIME:
      if (value == null) {
        unsetStatusDateTime();
      } else {
        setStatusDateTime((Long)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    case EXEC_INTERVALS:
      if (value == null) {
        unsetExecIntervals();
      } else {
        setExecIntervals((List<DrugIntervalExec>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case ACTION_ID:
      return Integer.valueOf(getAction_id());

    case BEG_DATE_TIME:
      return Long.valueOf(getBegDateTime());

    case END_DATE_TIME:
      return Long.valueOf(getEndDateTime());

    case STATUS:
      return Integer.valueOf(getStatus());

    case STATUS_DATE_TIME:
      return Long.valueOf(getStatusDateTime());

    case NOTE:
      return getNote();

    case EXEC_INTERVALS:
      return getExecIntervals();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ACTION_ID:
      return isSetAction_id();
    case BEG_DATE_TIME:
      return isSetBegDateTime();
    case END_DATE_TIME:
      return isSetEndDateTime();
    case STATUS:
      return isSetStatus();
    case STATUS_DATE_TIME:
      return isSetStatusDateTime();
    case NOTE:
      return isSetNote();
    case EXEC_INTERVALS:
      return isSetExecIntervals();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DrugInterval)
      return this.equals((DrugInterval)that);
    return false;
  }

  public boolean equals(DrugInterval that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_action_id = true && this.isSetAction_id();
    boolean that_present_action_id = true && that.isSetAction_id();
    if (this_present_action_id || that_present_action_id) {
      if (!(this_present_action_id && that_present_action_id))
        return false;
      if (this.action_id != that.action_id)
        return false;
    }

    boolean this_present_begDateTime = true && this.isSetBegDateTime();
    boolean that_present_begDateTime = true && that.isSetBegDateTime();
    if (this_present_begDateTime || that_present_begDateTime) {
      if (!(this_present_begDateTime && that_present_begDateTime))
        return false;
      if (this.begDateTime != that.begDateTime)
        return false;
    }

    boolean this_present_endDateTime = true && this.isSetEndDateTime();
    boolean that_present_endDateTime = true && that.isSetEndDateTime();
    if (this_present_endDateTime || that_present_endDateTime) {
      if (!(this_present_endDateTime && that_present_endDateTime))
        return false;
      if (this.endDateTime != that.endDateTime)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_statusDateTime = true && this.isSetStatusDateTime();
    boolean that_present_statusDateTime = true && that.isSetStatusDateTime();
    if (this_present_statusDateTime || that_present_statusDateTime) {
      if (!(this_present_statusDateTime && that_present_statusDateTime))
        return false;
      if (this.statusDateTime != that.statusDateTime)
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    boolean this_present_execIntervals = true && this.isSetExecIntervals();
    boolean that_present_execIntervals = true && that.isSetExecIntervals();
    if (this_present_execIntervals || that_present_execIntervals) {
      if (!(this_present_execIntervals && that_present_execIntervals))
        return false;
      if (!this.execIntervals.equals(that.execIntervals))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DrugInterval other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DrugInterval typedOther = (DrugInterval)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction_id()).compareTo(typedOther.isSetAction_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_id, typedOther.action_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBegDateTime()).compareTo(typedOther.isSetBegDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBegDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begDateTime, typedOther.begDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDateTime()).compareTo(typedOther.isSetEndDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDateTime, typedOther.endDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusDateTime()).compareTo(typedOther.isSetStatusDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusDateTime, typedOther.statusDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(typedOther.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, typedOther.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecIntervals()).compareTo(typedOther.isSetExecIntervals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecIntervals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execIntervals, typedOther.execIntervals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DrugInterval(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetAction_id()) {
      if (!first) sb.append(", ");
      sb.append("action_id:");
      sb.append(this.action_id);
      first = false;
    }
    if (isSetBegDateTime()) {
      if (!first) sb.append(", ");
      sb.append("begDateTime:");
      sb.append(this.begDateTime);
      first = false;
    }
    if (isSetEndDateTime()) {
      if (!first) sb.append(", ");
      sb.append("endDateTime:");
      sb.append(this.endDateTime);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetStatusDateTime()) {
      if (!first) sb.append(", ");
      sb.append("statusDateTime:");
      sb.append(this.statusDateTime);
      first = false;
    }
    if (isSetNote()) {
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
    }
    if (isSetExecIntervals()) {
      if (!first) sb.append(", ");
      sb.append("execIntervals:");
      if (this.execIntervals == null) {
        sb.append("null");
      } else {
        sb.append(this.execIntervals);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DrugIntervalStandardSchemeFactory implements SchemeFactory {
    public DrugIntervalStandardScheme getScheme() {
      return new DrugIntervalStandardScheme();
    }
  }

  private static class DrugIntervalStandardScheme extends StandardScheme<DrugInterval> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DrugInterval struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action_id = iprot.readI32();
              struct.setAction_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BEG_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.begDateTime = iprot.readI64();
              struct.setBegDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endDateTime = iprot.readI64();
              struct.setEndDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.statusDateTime = iprot.readI64();
              struct.setStatusDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXEC_INTERVALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.execIntervals = new ArrayList<DrugIntervalExec>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  DrugIntervalExec _elem2; // required
                  _elem2 = new DrugIntervalExec();
                  _elem2.read(iprot);
                  struct.execIntervals.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setExecIntervalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DrugInterval struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAction_id()) {
        oprot.writeFieldBegin(ACTION_ID_FIELD_DESC);
        oprot.writeI32(struct.action_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBegDateTime()) {
        oprot.writeFieldBegin(BEG_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.begDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndDateTime()) {
        oprot.writeFieldBegin(END_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.endDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusDateTime()) {
        oprot.writeFieldBegin(STATUS_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.statusDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.note != null) {
        if (struct.isSetNote()) {
          oprot.writeFieldBegin(NOTE_FIELD_DESC);
          oprot.writeString(struct.note);
          oprot.writeFieldEnd();
        }
      }
      if (struct.execIntervals != null) {
        if (struct.isSetExecIntervals()) {
          oprot.writeFieldBegin(EXEC_INTERVALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.execIntervals.size()));
            for (DrugIntervalExec _iter3 : struct.execIntervals)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DrugIntervalTupleSchemeFactory implements SchemeFactory {
    public DrugIntervalTupleScheme getScheme() {
      return new DrugIntervalTupleScheme();
    }
  }

  private static class DrugIntervalTupleScheme extends TupleScheme<DrugInterval> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DrugInterval struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAction_id()) {
        optionals.set(1);
      }
      if (struct.isSetBegDateTime()) {
        optionals.set(2);
      }
      if (struct.isSetEndDateTime()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetStatusDateTime()) {
        optionals.set(5);
      }
      if (struct.isSetNote()) {
        optionals.set(6);
      }
      if (struct.isSetExecIntervals()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetAction_id()) {
        oprot.writeI32(struct.action_id);
      }
      if (struct.isSetBegDateTime()) {
        oprot.writeI64(struct.begDateTime);
      }
      if (struct.isSetEndDateTime()) {
        oprot.writeI64(struct.endDateTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetStatusDateTime()) {
        oprot.writeI64(struct.statusDateTime);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
      if (struct.isSetExecIntervals()) {
        {
          oprot.writeI32(struct.execIntervals.size());
          for (DrugIntervalExec _iter4 : struct.execIntervals)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DrugInterval struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.action_id = iprot.readI32();
        struct.setAction_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.begDateTime = iprot.readI64();
        struct.setBegDateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endDateTime = iprot.readI64();
        struct.setEndDateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.statusDateTime = iprot.readI64();
        struct.setStatusDateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.execIntervals = new ArrayList<DrugIntervalExec>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            DrugIntervalExec _elem7; // required
            _elem7 = new DrugIntervalExec();
            _elem7.read(iprot);
            struct.execIntervals.add(_elem7);
          }
        }
        struct.setExecIntervalsIsSet(true);
      }
    }
  }

}

