/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.korus.tmis.prescription.thservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Компонент лекарства, входящий в назначение, таблица DrugComponent.
 */
public class DrugComponent implements org.apache.thrift.TBase<DrugComponent, DrugComponent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DrugComponent");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("action_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NOMEN_FIELD_DESC = new org.apache.thrift.protocol.TField("nomen", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("dose", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createDateTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CANCEL_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelDateTime", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DrugComponentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DrugComponentTupleSchemeFactory());
  }

  public int id; // optional
  public int action_id; // optional
  public int nomen; // optional
  public String name; // optional
  public double dose; // optional
  public int unit; // optional
  public long createDateTime; // optional
  public long cancelDateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ACTION_ID((short)2, "action_id"),
    NOMEN((short)3, "nomen"),
    NAME((short)4, "name"),
    DOSE((short)5, "dose"),
    UNIT((short)6, "unit"),
    CREATE_DATE_TIME((short)7, "createDateTime"),
    CANCEL_DATE_TIME((short)8, "cancelDateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ACTION_ID
          return ACTION_ID;
        case 3: // NOMEN
          return NOMEN;
        case 4: // NAME
          return NAME;
        case 5: // DOSE
          return DOSE;
        case 6: // UNIT
          return UNIT;
        case 7: // CREATE_DATE_TIME
          return CREATE_DATE_TIME;
        case 8: // CANCEL_DATE_TIME
          return CANCEL_DATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ACTION_ID_ISSET_ID = 1;
  private static final int __NOMEN_ISSET_ID = 2;
  private static final int __DOSE_ISSET_ID = 3;
  private static final int __UNIT_ISSET_ID = 4;
  private static final int __CREATEDATETIME_ISSET_ID = 5;
  private static final int __CANCELDATETIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.ACTION_ID,_Fields.NOMEN,_Fields.NAME,_Fields.DOSE,_Fields.UNIT,_Fields.CREATE_DATE_TIME,_Fields.CANCEL_DATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("action_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOMEN, new org.apache.thrift.meta_data.FieldMetaData("nomen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOSE, new org.apache.thrift.meta_data.FieldMetaData("dose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.CANCEL_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("cancelDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DrugComponent.class, metaDataMap);
  }

  public DrugComponent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DrugComponent(DrugComponent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.action_id = other.action_id;
    this.nomen = other.nomen;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.dose = other.dose;
    this.unit = other.unit;
    this.createDateTime = other.createDateTime;
    this.cancelDateTime = other.cancelDateTime;
  }

  public DrugComponent deepCopy() {
    return new DrugComponent(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setAction_idIsSet(false);
    this.action_id = 0;
    setNomenIsSet(false);
    this.nomen = 0;
    this.name = null;
    setDoseIsSet(false);
    this.dose = 0.0;
    setUnitIsSet(false);
    this.unit = 0;
    setCreateDateTimeIsSet(false);
    this.createDateTime = 0;
    setCancelDateTimeIsSet(false);
    this.cancelDateTime = 0;
  }

  public int getId() {
    return this.id;
  }

  public DrugComponent setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getAction_id() {
    return this.action_id;
  }

  public DrugComponent setAction_id(int action_id) {
    this.action_id = action_id;
    setAction_idIsSet(true);
    return this;
  }

  public void unsetAction_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTION_ID_ISSET_ID);
  }

  /** Returns true if field action_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAction_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTION_ID_ISSET_ID);
  }

  public void setAction_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTION_ID_ISSET_ID, value);
  }

  public int getNomen() {
    return this.nomen;
  }

  public DrugComponent setNomen(int nomen) {
    this.nomen = nomen;
    setNomenIsSet(true);
    return this;
  }

  public void unsetNomen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOMEN_ISSET_ID);
  }

  /** Returns true if field nomen is set (has been assigned a value) and false otherwise */
  public boolean isSetNomen() {
    return EncodingUtils.testBit(__isset_bitfield, __NOMEN_ISSET_ID);
  }

  public void setNomenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOMEN_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public DrugComponent setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public double getDose() {
    return this.dose;
  }

  public DrugComponent setDose(double dose) {
    this.dose = dose;
    setDoseIsSet(true);
    return this;
  }

  public void unsetDose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOSE_ISSET_ID);
  }

  /** Returns true if field dose is set (has been assigned a value) and false otherwise */
  public boolean isSetDose() {
    return EncodingUtils.testBit(__isset_bitfield, __DOSE_ISSET_ID);
  }

  public void setDoseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOSE_ISSET_ID, value);
  }

  public int getUnit() {
    return this.unit;
  }

  public DrugComponent setUnit(int unit) {
    this.unit = unit;
    setUnitIsSet(true);
    return this;
  }

  public void unsetUnit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNIT_ISSET_ID);
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return EncodingUtils.testBit(__isset_bitfield, __UNIT_ISSET_ID);
  }

  public void setUnitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNIT_ISSET_ID, value);
  }

  public long getCreateDateTime() {
    return this.createDateTime;
  }

  public DrugComponent setCreateDateTime(long createDateTime) {
    this.createDateTime = createDateTime;
    setCreateDateTimeIsSet(true);
    return this;
  }

  public void unsetCreateDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDATETIME_ISSET_ID);
  }

  /** Returns true if field createDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDATETIME_ISSET_ID);
  }

  public void setCreateDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDATETIME_ISSET_ID, value);
  }

  public long getCancelDateTime() {
    return this.cancelDateTime;
  }

  public DrugComponent setCancelDateTime(long cancelDateTime) {
    this.cancelDateTime = cancelDateTime;
    setCancelDateTimeIsSet(true);
    return this;
  }

  public void unsetCancelDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCELDATETIME_ISSET_ID);
  }

  /** Returns true if field cancelDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCELDATETIME_ISSET_ID);
  }

  public void setCancelDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCELDATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ACTION_ID:
      if (value == null) {
        unsetAction_id();
      } else {
        setAction_id((Integer)value);
      }
      break;

    case NOMEN:
      if (value == null) {
        unsetNomen();
      } else {
        setNomen((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DOSE:
      if (value == null) {
        unsetDose();
      } else {
        setDose((Double)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unsetUnit();
      } else {
        setUnit((Integer)value);
      }
      break;

    case CREATE_DATE_TIME:
      if (value == null) {
        unsetCreateDateTime();
      } else {
        setCreateDateTime((Long)value);
      }
      break;

    case CANCEL_DATE_TIME:
      if (value == null) {
        unsetCancelDateTime();
      } else {
        setCancelDateTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case ACTION_ID:
      return Integer.valueOf(getAction_id());

    case NOMEN:
      return Integer.valueOf(getNomen());

    case NAME:
      return getName();

    case DOSE:
      return Double.valueOf(getDose());

    case UNIT:
      return Integer.valueOf(getUnit());

    case CREATE_DATE_TIME:
      return Long.valueOf(getCreateDateTime());

    case CANCEL_DATE_TIME:
      return Long.valueOf(getCancelDateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ACTION_ID:
      return isSetAction_id();
    case NOMEN:
      return isSetNomen();
    case NAME:
      return isSetName();
    case DOSE:
      return isSetDose();
    case UNIT:
      return isSetUnit();
    case CREATE_DATE_TIME:
      return isSetCreateDateTime();
    case CANCEL_DATE_TIME:
      return isSetCancelDateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DrugComponent)
      return this.equals((DrugComponent)that);
    return false;
  }

  public boolean equals(DrugComponent that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_action_id = true && this.isSetAction_id();
    boolean that_present_action_id = true && that.isSetAction_id();
    if (this_present_action_id || that_present_action_id) {
      if (!(this_present_action_id && that_present_action_id))
        return false;
      if (this.action_id != that.action_id)
        return false;
    }

    boolean this_present_nomen = true && this.isSetNomen();
    boolean that_present_nomen = true && that.isSetNomen();
    if (this_present_nomen || that_present_nomen) {
      if (!(this_present_nomen && that_present_nomen))
        return false;
      if (this.nomen != that.nomen)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_dose = true && this.isSetDose();
    boolean that_present_dose = true && that.isSetDose();
    if (this_present_dose || that_present_dose) {
      if (!(this_present_dose && that_present_dose))
        return false;
      if (this.dose != that.dose)
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (this.unit != that.unit)
        return false;
    }

    boolean this_present_createDateTime = true && this.isSetCreateDateTime();
    boolean that_present_createDateTime = true && that.isSetCreateDateTime();
    if (this_present_createDateTime || that_present_createDateTime) {
      if (!(this_present_createDateTime && that_present_createDateTime))
        return false;
      if (this.createDateTime != that.createDateTime)
        return false;
    }

    boolean this_present_cancelDateTime = true && this.isSetCancelDateTime();
    boolean that_present_cancelDateTime = true && that.isSetCancelDateTime();
    if (this_present_cancelDateTime || that_present_cancelDateTime) {
      if (!(this_present_cancelDateTime && that_present_cancelDateTime))
        return false;
      if (this.cancelDateTime != that.cancelDateTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DrugComponent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DrugComponent typedOther = (DrugComponent)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction_id()).compareTo(typedOther.isSetAction_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_id, typedOther.action_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNomen()).compareTo(typedOther.isSetNomen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNomen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomen, typedOther.nomen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDose()).compareTo(typedOther.isSetDose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dose, typedOther.dose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnit()).compareTo(typedOther.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, typedOther.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDateTime()).compareTo(typedOther.isSetCreateDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDateTime, typedOther.createDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelDateTime()).compareTo(typedOther.isSetCancelDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelDateTime, typedOther.cancelDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DrugComponent(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetAction_id()) {
      if (!first) sb.append(", ");
      sb.append("action_id:");
      sb.append(this.action_id);
      first = false;
    }
    if (isSetNomen()) {
      if (!first) sb.append(", ");
      sb.append("nomen:");
      sb.append(this.nomen);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetDose()) {
      if (!first) sb.append(", ");
      sb.append("dose:");
      sb.append(this.dose);
      first = false;
    }
    if (isSetUnit()) {
      if (!first) sb.append(", ");
      sb.append("unit:");
      sb.append(this.unit);
      first = false;
    }
    if (isSetCreateDateTime()) {
      if (!first) sb.append(", ");
      sb.append("createDateTime:");
      sb.append(this.createDateTime);
      first = false;
    }
    if (isSetCancelDateTime()) {
      if (!first) sb.append(", ");
      sb.append("cancelDateTime:");
      sb.append(this.cancelDateTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DrugComponentStandardSchemeFactory implements SchemeFactory {
    public DrugComponentStandardScheme getScheme() {
      return new DrugComponentStandardScheme();
    }
  }

  private static class DrugComponentStandardScheme extends StandardScheme<DrugComponent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DrugComponent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action_id = iprot.readI32();
              struct.setAction_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOMEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nomen = iprot.readI32();
              struct.setNomenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dose = iprot.readDouble();
              struct.setDoseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unit = iprot.readI32();
              struct.setUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createDateTime = iprot.readI64();
              struct.setCreateDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CANCEL_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cancelDateTime = iprot.readI64();
              struct.setCancelDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DrugComponent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAction_id()) {
        oprot.writeFieldBegin(ACTION_ID_FIELD_DESC);
        oprot.writeI32(struct.action_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNomen()) {
        oprot.writeFieldBegin(NOMEN_FIELD_DESC);
        oprot.writeI32(struct.nomen);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDose()) {
        oprot.writeFieldBegin(DOSE_FIELD_DESC);
        oprot.writeDouble(struct.dose);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnit()) {
        oprot.writeFieldBegin(UNIT_FIELD_DESC);
        oprot.writeI32(struct.unit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateDateTime()) {
        oprot.writeFieldBegin(CREATE_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCancelDateTime()) {
        oprot.writeFieldBegin(CANCEL_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.cancelDateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DrugComponentTupleSchemeFactory implements SchemeFactory {
    public DrugComponentTupleScheme getScheme() {
      return new DrugComponentTupleScheme();
    }
  }

  private static class DrugComponentTupleScheme extends TupleScheme<DrugComponent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DrugComponent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAction_id()) {
        optionals.set(1);
      }
      if (struct.isSetNomen()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetDose()) {
        optionals.set(4);
      }
      if (struct.isSetUnit()) {
        optionals.set(5);
      }
      if (struct.isSetCreateDateTime()) {
        optionals.set(6);
      }
      if (struct.isSetCancelDateTime()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetAction_id()) {
        oprot.writeI32(struct.action_id);
      }
      if (struct.isSetNomen()) {
        oprot.writeI32(struct.nomen);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDose()) {
        oprot.writeDouble(struct.dose);
      }
      if (struct.isSetUnit()) {
        oprot.writeI32(struct.unit);
      }
      if (struct.isSetCreateDateTime()) {
        oprot.writeI64(struct.createDateTime);
      }
      if (struct.isSetCancelDateTime()) {
        oprot.writeI64(struct.cancelDateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DrugComponent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.action_id = iprot.readI32();
        struct.setAction_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nomen = iprot.readI32();
        struct.setNomenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dose = iprot.readDouble();
        struct.setDoseIsSet(true);
      }
      if (incoming.get(5)) {
        struct.unit = iprot.readI32();
        struct.setUnitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createDateTime = iprot.readI64();
        struct.setCreateDateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cancelDateTime = iprot.readI64();
        struct.setCancelDateTimeIsSet(true);
      }
    }
  }

}

